
Moj_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023878  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f18  08023a48  08023a48  00033a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026960  08026960  001201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08026960  08026960  00036960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026968  08026968  001201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08026968  08026968  00036968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08026978  08026978  00036978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08026980  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad64  200001fc  08026b7c  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000af60  08026b7c  0004af60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  001201d8  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 000ccce8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 00003424  900ccce8  900ccce8  0011cce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 000000cc  900d010c  900d010c  0012010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00099ef9  00000000  00000000  00120208  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00016a87  00000000  00000000  001ba101  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00006588  00000000  00000000  001d0b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005c10  00000000  00000000  001d7110  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00042e13  00000000  00000000  001dcd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0005a579  00000000  00000000  0021fb33  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0014358c  00000000  00000000  0027a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003bd638  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001b188  00000000  00000000  003bd734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08023a30 	.word	0x08023a30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	08023a30 	.word	0x08023a30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f017 f91c 	bl	80177f8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f017 f8d7 	bl	80177bc <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f017 f8a1 	bl	80177bc <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000218 	.word	0x20000218

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f016 ffee 	bl	80177bc <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f016 ffe0 	bl	80177bc <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f016 ffc5 	bl	80177bc <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f016 ffb7 	bl	80177bc <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000218 	.word	0x20000218
 8000890:	2000021c 	.word	0x2000021c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f016 ff6a 	bl	8017788 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f016 ff56 	bl	8017788 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f016 ff47 	bl	80177bc <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f016 febc 	bl	80177bc <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f016 feac 	bl	80177bc <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f016 fe9e 	bl	80177bc <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000218 	.word	0x20000218

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000218 	.word	0x20000218

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f016 fe55 	bl	8017774 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000218 	.word	0x20000218

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <vApplicationGetIdleTaskMemory+0x30>)
 8000b0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000220 	.word	0x20000220
 8000b24:	20000278 	.word	0x20000278

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f002 fbb8 	bl	80032a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f857 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 ffc5 	bl	8001ac4 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 8000b3a:	f000 f927 	bl	8000d8c <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 8000b3e:	f000 f981 	bl	8000e44 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 8000b42:	f000 f9a7 	bl	8000e94 <_ZL12MX_DCMI_Initv>
 // MX_ETH_Init();
  MX_I2C1_Init();
 8000b46:	f000 f9df 	bl	8000f08 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8000b4a:	f000 fa2b 	bl	8000fa4 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 8000b4e:	f000 fa77 	bl	8001040 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 8000b52:	f000 fae9 	bl	8001128 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8000b56:	f000 fba5 	bl	80012a4 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 8000b5a:	f000 fc55 	bl	8001408 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 8000b5e:	f000 fc73 	bl	8001448 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 8000b62:	f000 fca7 	bl	80014b4 <_ZL12MX_SPI2_Initv>
  MX_TIM2_Init();
 8000b66:	f000 fce7 	bl	8001538 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000b6a:	f000 fd73 	bl	8001654 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000b6e:	f000 fe01 	bl	8001774 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8000b72:	f000 fe8f 	bl	8001894 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8000b76:	f000 feef 	bl	8001958 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8000b7a:	f000 ff3b 	bl	80019f4 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8000b7e:	f000 ff6d 	bl	8001a5c <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8000b82:	f01a fa91 	bl	801b0a8 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8000b86:	f01a fb07 	bl	801b198 <_Z13GRAPHICS_Initv>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <main+0xb0>)
 8000b8c:	f107 041c 	add.w	r4, r7, #28
 8000b90:	461d      	mov	r5, r3
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle= osThreadCreate(osThread(defaultTask), NULL);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f013 fe75 	bl	8014894 <osThreadCreate>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <main+0xb4>)
 8000bae:	601a      	str	r2, [r3, #0]

  osThreadDef(UartTask, StartUartTask, osPriorityNormal, 0, 2048);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <main+0xb8>)
 8000bb2:	463c      	mov	r4, r7
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle= osThreadCreate(osThread(UartTask), NULL);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f013 fe64 	bl	8014894 <osThreadCreate>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <main+0xb4>)
 8000bd0:	601a      	str	r2, [r3, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bd2:	f013 fe3c 	bl	801484e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <main+0xae>
 8000bd8:	08023a54 	.word	0x08023a54
 8000bdc:	20000ac4 	.word	0x20000ac4
 8000be0:	08023a7c 	.word	0x08023a7c

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0b4      	sub	sp, #208	; 0xd0
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bee:	2230      	movs	r2, #48	; 0x30
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f021 ff61 	bl	8022aba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2284      	movs	r2, #132	; 0x84
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f021 ff52 	bl	8022aba <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000c16:	f006 ff3b 	bl	8007a90 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <SystemClock_Config+0x19c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a58      	ldr	r2, [pc, #352]	; (8000d80 <SystemClock_Config+0x19c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <SystemClock_Config+0x19c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <SystemClock_Config+0x1a0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a53      	ldr	r2, [pc, #332]	; (8000d84 <SystemClock_Config+0x1a0>)
 8000c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b51      	ldr	r3, [pc, #324]	; (8000d84 <SystemClock_Config+0x1a0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c4a:	2309      	movs	r3, #9
 8000c4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c6c:	2319      	movs	r3, #25
 8000c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c80:	2309      	movs	r3, #9
 8000c82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fcbc 	bl	8008608 <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ca0:	f001 fade 	bl	8002260 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ca4:	f006 ff04 	bl	8007ab0 <HAL_PWREx_EnableOverDrive>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000cb8:	f001 fad2 	bl	8002260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ce2:	2106      	movs	r1, #6
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f007 feff 	bl	8008ae8 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bf14      	ite	ne
 8000cf0:	2301      	movne	r3, #1
 8000cf2:	2300      	moveq	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8000cfa:	f001 fab1 	bl	8002260 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <SystemClock_Config+0x1a4>)
 8000d00:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d16:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d18:	2305      	movs	r3, #5
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d20:	2303      	movs	r3, #3
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d40:	2300      	movs	r3, #0
 8000d42:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f008 f8c2 	bl	8008ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	bf14      	ite	ne
 8000d6a:	2301      	movne	r3, #1
 8000d6c:	2300      	moveq	r3, #0
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x194>
  {
    Error_Handler();
 8000d74:	f001 fa74 	bl	8002260 <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	37d0      	adds	r7, #208	; 0xd0
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000
 8000d88:	01b14868 	.word	0x01b14868

08000d8c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <_ZL12MX_ADC3_Initv+0xb0>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <_ZL12MX_ADC3_Initv+0xb4>)
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000dee:	f002 faa7 	bl	8003340 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf14      	ite	ne
 8000df8:	2301      	movne	r3, #1
 8000dfa:	2300      	moveq	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 8000e02:	f001 fa2d 	bl	8002260 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e06:	2304      	movs	r3, #4
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <_ZL12MX_ADC3_Initv+0xac>)
 8000e18:	f002 fad6 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8000e2c:	f001 fa18 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000488 	.word	0x20000488
 8000e3c:	40012200 	.word	0x40012200
 8000e40:	0f000001 	.word	0x0f000001

08000e44 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <_ZL11MX_CRC_Initv+0x4c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <_ZL11MX_CRC_Initv+0x48>)
 8000e6e:	f002 fe4d 	bl	8003b0c <HAL_CRC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8000e82:	f001 f9ed 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200004d0 	.word	0x200004d0
 8000e90:	40023000 	.word	0x40023000

08000e94 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <_ZL12MX_DCMI_Initv+0x70>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <_ZL12MX_DCMI_Initv+0x6c>)
 8000ee2:	f002 fefd 	bl	8003ce0 <HAL_DCMI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 8000ef6:	f001 f9b3 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200004f4 	.word	0x200004f4
 8000f04:	50050000 	.word	0x50050000

08000f08 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <_ZL12MX_I2C1_Initv+0x94>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <_ZL12MX_I2C1_Initv+0x98>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f44:	f005 fbbe 	bl	80066c4 <HAL_I2C_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000f58:	f001 f982 	bl	8002260 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f60:	f006 f8c8 	bl	80070f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000f74:	f001 f974 	bl	8002260 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <_ZL12MX_I2C1_Initv+0x90>)
 8000f7c:	f006 f905 	bl	800718a <HAL_I2CEx_ConfigDigitalFilter>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000f90:	f001 f966 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000544 	.word	0x20000544
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	00c0eaff 	.word	0x00c0eaff

08000fa4 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <_ZL12MX_I2C3_Initv+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <_ZL12MX_I2C3_Initv+0x98>)
 8000fb2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fde:	4815      	ldr	r0, [pc, #84]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000fe0:	f005 fb70 	bl	80066c4 <HAL_I2C_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf14      	ite	ne
 8000fea:	2301      	movne	r3, #1
 8000fec:	2300      	moveq	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8000ff4:	f001 f934 	bl	8002260 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8000ffc:	f006 f87a 	bl	80070f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8001010:	f001 f926 	bl	8002260 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001014:	2100      	movs	r1, #0
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <_ZL12MX_I2C3_Initv+0x90>)
 8001018:	f006 f8b7 	bl	800718a <HAL_I2CEx_ConfigDigitalFilter>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 800102c:	f001 f918 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000590 	.word	0x20000590
 8001038:	40005c00 	.word	0x40005c00
 800103c:	00c0eaff 	.word	0x00c0eaff

08001040 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 8001048:	4a36      	ldr	r2, [pc, #216]	; (8001124 <_ZL15MX_QUADSPI_Initv+0xe4>)
 800104a:	601a      	str	r2, [r3, #0]
	    hqspi.Init.ClockPrescaler = 1;
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 800104e:	2201      	movs	r2, #1
 8001050:	605a      	str	r2, [r3, #4]
	    hqspi.Init.FifoThreshold = 4;
 8001052:	4b33      	ldr	r3, [pc, #204]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 8001054:	2204      	movs	r2, #4
 8001056:	609a      	str	r2, [r3, #8]
	    hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 800105a:	2210      	movs	r2, #16
 800105c:	60da      	str	r2, [r3, #12]
	    hqspi.Init.FlashSize = 24;
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 8001060:	2218      	movs	r2, #24
 8001062:	611a      	str	r2, [r3, #16]
	    hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 8001066:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800106a:	615a      	str	r2, [r3, #20]
	    hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
	    hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
	    hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
	    if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800107e:	4828      	ldr	r0, [pc, #160]	; (8001120 <_ZL15MX_QUADSPI_Initv+0xe0>)
 8001080:	f006 fd66 	bl	8007b50 <HAL_QSPI_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <_ZL15MX_QUADSPI_Initv+0x58>
	    {
	        Error_Handler();
 8001094:	f001 f8e4 	bl	8002260 <Error_Handler>
	    }
	    /* USER CODE BEGIN QUADSPI_Init 2 */

	    BSP_QSPI_Init();
 8001098:	f016 fbba 	bl	8017810 <BSP_QSPI_Init>

	    BSP_QSPI_MemoryMappedMode();
 800109c:	f016 fc10 	bl	80178c0 <BSP_QSPI_EnableMemoryMappedMode>
	    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80010a0:	205c      	movs	r0, #92	; 0x5c
 80010a2:	f002 fcc3 	bl	8003a2c <HAL_NVIC_DisableIRQ>

	    MPU_Region_InitTypeDef MPU_InitStruct;
	    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010a6:	2301      	movs	r3, #1
 80010a8:	703b      	strb	r3, [r7, #0]
	    MPU_InitStruct.BaseAddress = 0x90000000;
 80010aa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80010ae:	607b      	str	r3, [r7, #4]
	    MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80010b0:	231b      	movs	r3, #27
 80010b2:	723b      	strb	r3, [r7, #8]
	    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010b4:	2303      	movs	r3, #3
 80010b6:	72fb      	strb	r3, [r7, #11]
	    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
	    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	73bb      	strb	r3, [r7, #14]
	    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]
	    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	707b      	strb	r3, [r7, #1]
	    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	72bb      	strb	r3, [r7, #10]
	    MPU_InitStruct.SubRegionDisable = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	727b      	strb	r3, [r7, #9]
	    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	733b      	strb	r3, [r7, #12]

	    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010d4:	463b      	mov	r3, r7
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fcd4 	bl	8003a84 <HAL_MPU_ConfigRegion>

	    /* Configure the MPU attributes as WT for QSPI (used 16Mbytes) */
	    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010dc:	2301      	movs	r3, #1
 80010de:	703b      	strb	r3, [r7, #0]
	    MPU_InitStruct.BaseAddress = 0x90000000;
 80010e0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80010e4:	607b      	str	r3, [r7, #4]
	    MPU_InitStruct.Size = MPU_REGION_SIZE_16MB; /* NOTE! Change this if you change QSPI flash size! */
 80010e6:	2317      	movs	r3, #23
 80010e8:	723b      	strb	r3, [r7, #8]
	    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010ea:	2303      	movs	r3, #3
 80010ec:	72fb      	strb	r3, [r7, #11]
	    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
	    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73bb      	strb	r3, [r7, #14]
	    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	737b      	strb	r3, [r7, #13]
	    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80010fa:	2303      	movs	r3, #3
 80010fc:	707b      	strb	r3, [r7, #1]
	    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010fe:	2300      	movs	r3, #0
 8001100:	72bb      	strb	r3, [r7, #10]
	    MPU_InitStruct.SubRegionDisable = 0x00;
 8001102:	2300      	movs	r3, #0
 8001104:	727b      	strb	r3, [r7, #9]
	    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	733b      	strb	r3, [r7, #12]

	    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800110a:	463b      	mov	r3, r7
 800110c:	4618      	mov	r0, r3
 800110e:	f002 fcb9 	bl	8003a84 <HAL_MPU_ConfigRegion>
	    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001112:	2004      	movs	r0, #4
 8001114:	f002 fc98 	bl	8003a48 <HAL_MPU_Enable>
  /* USER CODE END QUADSPI_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200005dc 	.word	0x200005dc
 8001124:	a0001000 	.word	0xa0001000

08001128 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b092      	sub	sp, #72	; 0x48
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800112e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	222c      	movs	r2, #44	; 0x2c
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f021 fcb5 	bl	8022aba <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 8001152:	4a53      	ldr	r2, [pc, #332]	; (80012a0 <_ZL11MX_RTC_Initv+0x178>)
 8001154:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800115c:	4b4f      	ldr	r3, [pc, #316]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 800115e:	227f      	movs	r2, #127	; 0x7f
 8001160:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001162:	4b4e      	ldr	r3, [pc, #312]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 8001164:	22ff      	movs	r2, #255	; 0xff
 8001166:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001168:	484c      	ldr	r0, [pc, #304]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 800116a:	f008 fbdf 	bl	800992c <HAL_RTC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf14      	ite	ne
 8001174:	2301      	movne	r3, #1
 8001176:	2300      	moveq	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <_ZL11MX_RTC_Initv+0x5a>
  {
    Error_Handler();
 800117e:	f001 f86f 	bl	8002260 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800119c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	483d      	ldr	r0, [pc, #244]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 80011a6:	f008 fc3d 	bl	8009a24 <HAL_RTC_SetTime>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 80011ba:	f001 f851 	bl	8002260 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011be:	2301      	movs	r3, #1
 80011c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	482f      	ldr	r0, [pc, #188]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 80011e0:	f008 fcde 	bl	8009ba0 <HAL_RTC_SetDate>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL11MX_RTC_Initv+0xd0>
  {
    Error_Handler();
 80011f4:	f001 f834 	bl	8002260 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001200:	2300      	movs	r3, #0
 8001202:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800121c:	2301      	movs	r3, #1
 800121e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	481b      	ldr	r0, [pc, #108]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 8001230:	f008 fd5e 	bl	8009cf0 <HAL_RTC_SetAlarm>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	bf14      	ite	ne
 800123a:	2301      	movne	r3, #1
 800123c:	2300      	moveq	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <_ZL11MX_RTC_Initv+0x120>
  {
    Error_Handler();
 8001244:	f001 f80c 	bl	8002260 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001248:	2301      	movs	r3, #1
 800124a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800124e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 800125c:	f008 fd48 	bl	8009cf0 <HAL_RTC_SetAlarm>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <_ZL11MX_RTC_Initv+0x14c>
  {
    Error_Handler();
 8001270:	f000 fff6 	bl	8002260 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001274:	2202      	movs	r2, #2
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <_ZL11MX_RTC_Initv+0x174>)
 800127a:	f008 fec3 	bl	800a004 <HAL_RTCEx_SetTimeStamp>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_ZL11MX_RTC_Initv+0x16a>
  {
    Error_Handler();
 800128e:	f000 ffe7 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3748      	adds	r7, #72	; 0x48
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000628 	.word	0x20000628
 80012a0:	40002800 	.word	0x40002800

080012a4 <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80012a8:	4b52      	ldr	r3, [pc, #328]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012aa:	4a53      	ldr	r2, [pc, #332]	; (80013f8 <_ZL12MX_SAI2_Initv+0x154>)
 80012ac:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012b4:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012c0:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012d2:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012de:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012e6:	4a45      	ldr	r2, [pc, #276]	; (80013fc <_ZL12MX_SAI2_Initv+0x158>)
 80012e8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 80012fe:	2200      	movs	r2, #0
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 8001304:	2208      	movs	r2, #8
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 800130a:	2201      	movs	r2, #1
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 8001310:	2200      	movs	r2, #0
 8001312:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 8001316:	2200      	movs	r2, #0
 8001318:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 800131c:	2200      	movs	r2, #0
 800131e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 8001322:	2200      	movs	r2, #0
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 8001328:	2200      	movs	r2, #0
 800132a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 800132e:	2201      	movs	r2, #1
 8001330:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001332:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 8001334:	2200      	movs	r2, #0
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001338:	482e      	ldr	r0, [pc, #184]	; (80013f4 <_ZL12MX_SAI2_Initv+0x150>)
 800133a:	f008 feb9 	bl	800a0b0 <HAL_SAI_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 800134e:	f000 ff87 	bl	8002260 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001354:	4a2b      	ldr	r2, [pc, #172]	; (8001404 <_ZL12MX_SAI2_Initv+0x160>)
 8001356:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 800135a:	2200      	movs	r2, #0
 800135c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001360:	2203      	movs	r2, #3
 8001362:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001378:	2201      	movs	r2, #1
 800137a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 800139c:	2200      	movs	r2, #0
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013a2:	2208      	movs	r2, #8
 80013a4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <_ZL12MX_SAI2_Initv+0x15c>)
 80013d8:	f008 fe6a 	bl	800a0b0 <HAL_SAI_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 80013ec:	f000 ff38 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000648 	.word	0x20000648
 80013f8:	40015c04 	.word	0x40015c04
 80013fc:	0002ee00 	.word	0x0002ee00
 8001400:	200006cc 	.word	0x200006cc
 8001404:	40015c24 	.word	0x40015c24

08001408 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8001410:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	20000750 	.word	0x20000750
 8001444:	40012c00 	.word	0x40012c00

08001448 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800144e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001452:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8001492:	f00a f8f5 	bl	800b680 <HAL_SPDIFRX_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf14      	ite	ne
 800149c:	2301      	movne	r3, #1
 800149e:	2300      	moveq	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 80014a6:	f000 fedb 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200007d4 	.word	0x200007d4

080014b4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <_ZL12MX_SPI2_Initv+0x80>)
 80014bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 8001502:	2207      	movs	r2, #7
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 800150e:	2208      	movs	r2, #8
 8001510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <_ZL12MX_SPI2_Initv+0x7c>)
 8001514:	f00a f910 	bl	800b738 <HAL_SPI_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8001528:	f000 fe9a 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000820 	.word	0x20000820
 8001534:	40003800 	.word	0x40003800

08001538 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 800156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001590:	482f      	ldr	r0, [pc, #188]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 8001592:	f00a f963 	bl	800b85c <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80015a6:	f000 fe5b 	bl	8002260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4826      	ldr	r0, [pc, #152]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 80015b8:	f00a fc32 	bl	800be20 <HAL_TIM_ConfigClockSource>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80015cc:	f000 fe48 	bl	8002260 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015d0:	481f      	ldr	r0, [pc, #124]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 80015d2:	f00a f9c3 	bl	800b95c <HAL_TIM_PWM_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80015e6:	f000 fe3b 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4815      	ldr	r0, [pc, #84]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 80015fa:	f00b f88b 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800160e:	f000 fe27 	bl	8002260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 800162a:	f00a fae1 	bl	800bbf0 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 800163e:	f000 fe0f 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <_ZL12MX_TIM2_Initv+0x118>)
 8001644:	f001 fa88 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3738      	adds	r7, #56	; 0x38
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000884 	.word	0x20000884

08001654 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 8001688:	4a39      	ldr	r2, [pc, #228]	; (8001770 <_ZL12MX_TIM3_Initv+0x11c>)
 800168a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b31      	ldr	r3, [pc, #196]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 80016ac:	f00a f8d6 	bl	800b85c <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80016c0:	f000 fdce 	bl	8002260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4826      	ldr	r0, [pc, #152]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 80016d2:	f00a fba5 	bl	800be20 <HAL_TIM_ConfigClockSource>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80016e6:	f000 fdbb 	bl	8002260 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ea:	4820      	ldr	r0, [pc, #128]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 80016ec:	f00a f936 	bl	800b95c <HAL_TIM_PWM_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001700:	f000 fdae 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 8001714:	f00a fffe 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001728:	f000 fd9a 	bl	8002260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 8001744:	f00a fa54 	bl	800bbf0 <HAL_TIM_PWM_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf14      	ite	ne
 800174e:	2301      	movne	r3, #1
 8001750:	2300      	moveq	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001758:	f000 fd82 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <_ZL12MX_TIM3_Initv+0x118>)
 800175e:	f001 f9fb 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 8001762:	bf00      	nop
 8001764:	3738      	adds	r7, #56	; 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200008c4 	.word	0x200008c4
 8001770:	40000400 	.word	0x40000400

08001774 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017a8:	4a39      	ldr	r2, [pc, #228]	; (8001890 <_ZL12MX_TIM5_Initv+0x11c>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80017b8:	4b34      	ldr	r3, [pc, #208]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017ca:	4830      	ldr	r0, [pc, #192]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017cc:	f00a f846 	bl	800b85c <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 80017e0:	f000 fd3e 	bl	8002260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4826      	ldr	r0, [pc, #152]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 80017f2:	f00a fb15 	bl	800be20 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 8001806:	f000 fd2b 	bl	8002260 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800180a:	4820      	ldr	r0, [pc, #128]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 800180c:	f00a f8a6 	bl	800b95c <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 8001820:	f000 fd1e 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	4816      	ldr	r0, [pc, #88]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 8001834:	f00a ff6e 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	bf14      	ite	ne
 800183e:	2301      	movne	r3, #1
 8001840:	2300      	moveq	r3, #0
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8001848:	f000 fd0a 	bl	8002260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184c:	2360      	movs	r3, #96	; 0x60
 800184e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	220c      	movs	r2, #12
 8001860:	4619      	mov	r1, r3
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 8001864:	f00a f9c4 	bl	800bbf0 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8001878:	f000 fcf2 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <_ZL12MX_TIM5_Initv+0x118>)
 800187e:	f001 f96b 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	; 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000904 	.word	0x20000904
 8001890:	40000c00 	.word	0x40000c00

08001894 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <_ZL12MX_TIM8_Initv+0xc0>)
 80018b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018dc:	481c      	ldr	r0, [pc, #112]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 80018de:	f009 ffbd 	bl	800b85c <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 80018f2:	f000 fcb5 	bl	8002260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	4813      	ldr	r0, [pc, #76]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 8001904:	f00a fa8c 	bl	800be20 <HAL_TIM_ConfigClockSource>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8001918:	f000 fca2 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <_ZL12MX_TIM8_Initv+0xbc>)
 800192e:	f00a fef1 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 8001942:	f000 fc8d 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000944 	.word	0x20000944
 8001954:	40010400 	.word	0x40010400

08001958 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <_ZL13MX_TIM12_Initv+0x98>)
 8001974:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001994:	4815      	ldr	r0, [pc, #84]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 8001996:	f009 ffe1 	bl	800b95c <HAL_TIM_PWM_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 80019aa:	f000 fc59 	bl	8002260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	; 0x60
 80019b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4809      	ldr	r0, [pc, #36]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 80019c6:	f00a f913 	bl	800bbf0 <HAL_TIM_PWM_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 80019da:	f000 fc41 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <_ZL13MX_TIM12_Initv+0x94>)
 80019e0:	f001 f8ba 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000984 	.word	0x20000984
 80019f0:	40001800 	.word	0x40001800

080019f4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <_ZL19MX_USART1_UART_Initv+0x64>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001a38:	f00a ff64 	bl	800c904 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001a4c:	f000 fc08 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200009c4 	.word	0x200009c4
 8001a58:	40011000 	.word	0x40011000

08001a5c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <_ZL19MX_USART6_UART_Initv+0x64>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <_ZL19MX_USART6_UART_Initv+0x60>)
 8001aa0:	f00a ff30 	bl	800c904 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf14      	ite	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	2300      	moveq	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 fbd4 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000a44 	.word	0x20000a44
 8001ac0:	40011400 	.word	0x40011400

08001ac4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b090      	sub	sp, #64	; 0x40
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	4baf      	ldr	r3, [pc, #700]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4aae      	ldr	r2, [pc, #696]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4bac      	ldr	r3, [pc, #688]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af2:	4ba9      	ldr	r3, [pc, #676]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4aa8      	ldr	r2, [pc, #672]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4ba6      	ldr	r3, [pc, #664]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4ba3      	ldr	r3, [pc, #652]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4aa2      	ldr	r2, [pc, #648]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	4b9d      	ldr	r3, [pc, #628]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a9c      	ldr	r2, [pc, #624]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b9a      	ldr	r3, [pc, #616]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3a:	4b97      	ldr	r3, [pc, #604]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a96      	ldr	r2, [pc, #600]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b94      	ldr	r3, [pc, #592]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b91      	ldr	r3, [pc, #580]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b8e      	ldr	r3, [pc, #568]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a8a      	ldr	r2, [pc, #552]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b82:	4b85      	ldr	r3, [pc, #532]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a84      	ldr	r2, [pc, #528]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b82      	ldr	r3, [pc, #520]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb2:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a78      	ldr	r2, [pc, #480]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bb8:	f043 0320 	orr.w	r3, r3, #32
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b76      	ldr	r3, [pc, #472]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a72      	ldr	r2, [pc, #456]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2120      	movs	r1, #32
 8001be6:	486d      	ldr	r0, [pc, #436]	; (8001d9c <_ZL12MX_GPIO_Initv+0x2d8>)
 8001be8:	f003 f8dc 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	210c      	movs	r1, #12
 8001bf0:	486b      	ldr	r0, [pc, #428]	; (8001da0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001bf2:	f003 f8d7 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2108      	movs	r1, #8
 8001bfa:	486a      	ldr	r0, [pc, #424]	; (8001da4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001bfc:	f003 f8d2 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	4866      	ldr	r0, [pc, #408]	; (8001da0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001c08:	f003 f8cc 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c12:	4865      	ldr	r0, [pc, #404]	; (8001da8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001c14:	f003 f8c6 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	21c8      	movs	r1, #200	; 0xc8
 8001c1c:	4863      	ldr	r0, [pc, #396]	; (8001dac <_ZL12MX_GPIO_Initv+0x2e8>)
 8001c1e:	f003 f8c1 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001c22:	2308      	movs	r3, #8
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c32:	4619      	mov	r1, r3
 8001c34:	485e      	ldr	r0, [pc, #376]	; (8001db0 <_ZL12MX_GPIO_Initv+0x2ec>)
 8001c36:	f002 fde9 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001c3a:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4857      	ldr	r0, [pc, #348]	; (8001db4 <_ZL12MX_GPIO_Initv+0x2f0>)
 8001c58:	f002 fdd8 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4851      	ldr	r0, [pc, #324]	; (8001db8 <_ZL12MX_GPIO_Initv+0x2f4>)
 8001c72:	f002 fdcb 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001c76:	2340      	movs	r3, #64	; 0x40
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <_ZL12MX_GPIO_Initv+0x2f8>)
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	4844      	ldr	r0, [pc, #272]	; (8001d9c <_ZL12MX_GPIO_Initv+0x2d8>)
 8001c8a:	f002 fdbf 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	483d      	ldr	r0, [pc, #244]	; (8001d9c <_ZL12MX_GPIO_Initv+0x2d8>)
 8001ca6:	f002 fdb1 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001caa:	f241 030c 	movw	r3, #4108	; 0x100c
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4837      	ldr	r0, [pc, #220]	; (8001da0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001cc4:	f002 fda2 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4838      	ldr	r0, [pc, #224]	; (8001dc0 <_ZL12MX_GPIO_Initv+0x2fc>)
 8001cde:	f002 fd95 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482a      	ldr	r0, [pc, #168]	; (8001da4 <_ZL12MX_GPIO_Initv+0x2e0>)
 8001cfa:	f002 fd87 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cfe:	2310      	movs	r3, #16
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <_ZL12MX_GPIO_Initv+0x2d8>)
 8001d12:	f002 fd7b 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001d16:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481f      	ldr	r0, [pc, #124]	; (8001da8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001d2c:	f002 fd6e 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	4619      	mov	r1, r3
 8001d48:	4817      	ldr	r0, [pc, #92]	; (8001da8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001d4a:	f002 fd5f 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <_ZL12MX_GPIO_Initv+0x2f8>)
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d60:	4619      	mov	r1, r3
 8001d62:	480f      	ldr	r0, [pc, #60]	; (8001da0 <_ZL12MX_GPIO_Initv+0x2dc>)
 8001d64:	f002 fd52 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d78:	230a      	movs	r3, #10
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d80:	4619      	mov	r1, r3
 8001d82:	4809      	ldr	r0, [pc, #36]	; (8001da8 <_ZL12MX_GPIO_Initv+0x2e4>)
 8001d84:	f002 fd42 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d88:	23c8      	movs	r3, #200	; 0xc8
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
 8001d94:	e016      	b.n	8001dc4 <_ZL12MX_GPIO_Initv+0x300>
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40022800 	.word	0x40022800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40022400 	.word	0x40022400
 8001dbc:	10120000 	.word	0x10120000
 8001dc0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4819      	ldr	r0, [pc, #100]	; (8001e34 <_ZL12MX_GPIO_Initv+0x370>)
 8001dd0:	f002 fd1c 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001dd4:	2305      	movs	r3, #5
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001de4:	230a      	movs	r3, #10
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dec:	4619      	mov	r1, r3
 8001dee:	4812      	ldr	r0, [pc, #72]	; (8001e38 <_ZL12MX_GPIO_Initv+0x374>)
 8001df0:	f002 fd0c 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001df4:	2304      	movs	r3, #4
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	480b      	ldr	r0, [pc, #44]	; (8001e34 <_ZL12MX_GPIO_Initv+0x370>)
 8001e08:	f002 fd00 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e0c:	2328      	movs	r3, #40	; 0x28
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <_ZL12MX_GPIO_Initv+0x378>)
 8001e28:	f002 fcf0 	bl	800480c <HAL_GPIO_Init>

}
 8001e2c:	bf00      	nop
 8001e2e:	3740      	adds	r7, #64	; 0x40
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021800 	.word	0x40021800
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020000 	.word	0x40020000

08001e40 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8001e48:	f00d faa6 	bl	800f398 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001e4c:	f01b f8ae 	bl	801cfac <MX_USB_HOST_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 8001e50:	f019 f9a8 	bl	801b1a4 <_Z17GRAPHICS_MainTaskv>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f012 fd69 	bl	801492c <osDelay>
 8001e5a:	e7fb      	b.n	8001e54 <_Z16StartDefaultTaskPKv+0x14>

08001e5c <_Z13StartUartTaskPKv>:
uint8_t command7[]="sp=0000=0000=0000=0000\n";//Stop
uint8_t bufferReceiveBack[]="Speed=-0000=-0000=-0000=-00000000000\n";
uint8_t bufferReceiveBackFiltr[]="Speed=-0000=-0000=-0000=-00000000000\n";

void StartUartTask(void const * argument)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	uint8_t statusReceiveUART6 = 10;
 8001e64:	230a      	movs	r3, #10
 8001e66:	73bb      	strb	r3, [r7, #14]
	uint8_t statusConnectUART6 = 10;
 8001e68:	230a      	movs	r3, #10
 8001e6a:	737b      	strb	r3, [r7, #13]
	uint8_t helpValue1 = 8;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	733b      	strb	r3, [r7, #12]
	uint8_t helpValue2 = 1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	72fb      	strb	r3, [r7, #11]
	uint8_t uBuffer = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
	BSP_LED_Init(LED_GREEN);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f015 fadb 	bl	8017434 <BSP_LED_Init>
  for(;;)
  {
	  sterowanieSend = 0;
 8001e7e:	4b7a      	ldr	r3, [pc, #488]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

	  if((xQueueReceive(QueueSend, &sterowanieSend, 1))==pdTRUE)
 8001e84:	4b79      	ldr	r3, [pc, #484]	; (800206c <_Z13StartUartTaskPKv+0x210>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4977      	ldr	r1, [pc, #476]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f013 fa67 	bl	8015360 <xQueueReceive>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d064      	beq.n	8001f6c <_Z13StartUartTaskPKv+0x110>
	  {
		  BSP_LED_Toggle(LED_GREEN);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f015 fafa 	bl	801749c <BSP_LED_Toggle>

		  if(sterowanieSend == 1)//Move up
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d109      	bne.n	8001ec4 <_Z13StartUartTaskPKv+0x68>
		  {
			  HAL_UART_Transmit_IT(&huart1, command1, sizeof(command1)-1);
 8001eb0:	2217      	movs	r2, #23
 8001eb2:	496f      	ldr	r1, [pc, #444]	; (8002070 <_Z13StartUartTaskPKv+0x214>)
 8001eb4:	486f      	ldr	r0, [pc, #444]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001eb6:	f00a fd73 	bl	800c9a0 <HAL_UART_Transmit_IT>
			  HAL_UART_Transmit_IT(&huart6, command1, sizeof(command1)-1);
 8001eba:	2217      	movs	r2, #23
 8001ebc:	496c      	ldr	r1, [pc, #432]	; (8002070 <_Z13StartUartTaskPKv+0x214>)
 8001ebe:	486e      	ldr	r0, [pc, #440]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001ec0:	f00a fd6e 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
		  if(sterowanieSend == 2)//Move down
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d109      	bne.n	8001ee0 <_Z13StartUartTaskPKv+0x84>
		  {
			  HAL_UART_Transmit_IT(&huart1, command2, sizeof(command2)-1);
 8001ecc:	221b      	movs	r2, #27
 8001ece:	496b      	ldr	r1, [pc, #428]	; (800207c <_Z13StartUartTaskPKv+0x220>)
 8001ed0:	4868      	ldr	r0, [pc, #416]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001ed2:	f00a fd65 	bl	800c9a0 <HAL_UART_Transmit_IT>
			  HAL_UART_Transmit_IT(&huart6, command2, sizeof(command2)-1);
 8001ed6:	221b      	movs	r2, #27
 8001ed8:	4968      	ldr	r1, [pc, #416]	; (800207c <_Z13StartUartTaskPKv+0x220>)
 8001eda:	4867      	ldr	r0, [pc, #412]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001edc:	f00a fd60 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
		  if(sterowanieSend == 3)//Move right
 8001ee0:	4b61      	ldr	r3, [pc, #388]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d109      	bne.n	8001efc <_Z13StartUartTaskPKv+0xa0>
		  {
		  	  HAL_UART_Transmit_IT(&huart1, command3, sizeof(command3)-1);
 8001ee8:	2219      	movs	r2, #25
 8001eea:	4965      	ldr	r1, [pc, #404]	; (8002080 <_Z13StartUartTaskPKv+0x224>)
 8001eec:	4861      	ldr	r0, [pc, #388]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001eee:	f00a fd57 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  	  HAL_UART_Transmit_IT(&huart6, command3, sizeof(command3)-1);
 8001ef2:	2219      	movs	r2, #25
 8001ef4:	4962      	ldr	r1, [pc, #392]	; (8002080 <_Z13StartUartTaskPKv+0x224>)
 8001ef6:	4860      	ldr	r0, [pc, #384]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001ef8:	f00a fd52 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
		  if(sterowanieSend == 4)//Move left
 8001efc:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d109      	bne.n	8001f18 <_Z13StartUartTaskPKv+0xbc>
		  {
		  	  HAL_UART_Transmit_IT(&huart1, command4, sizeof(command4)-1);
 8001f04:	2219      	movs	r2, #25
 8001f06:	495f      	ldr	r1, [pc, #380]	; (8002084 <_Z13StartUartTaskPKv+0x228>)
 8001f08:	485a      	ldr	r0, [pc, #360]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001f0a:	f00a fd49 	bl	800c9a0 <HAL_UART_Transmit_IT>
			  HAL_UART_Transmit_IT(&huart6, command4, sizeof(command4)-1);
 8001f0e:	2219      	movs	r2, #25
 8001f10:	495c      	ldr	r1, [pc, #368]	; (8002084 <_Z13StartUartTaskPKv+0x228>)
 8001f12:	4859      	ldr	r0, [pc, #356]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001f14:	f00a fd44 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
		  if(sterowanieSend == 5)//Right rotation
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d109      	bne.n	8001f34 <_Z13StartUartTaskPKv+0xd8>
		  {
		  	  HAL_UART_Transmit_IT(&huart1, command5, sizeof(command5)-1);
 8001f20:	2219      	movs	r2, #25
 8001f22:	4959      	ldr	r1, [pc, #356]	; (8002088 <_Z13StartUartTaskPKv+0x22c>)
 8001f24:	4853      	ldr	r0, [pc, #332]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001f26:	f00a fd3b 	bl	800c9a0 <HAL_UART_Transmit_IT>
			  HAL_UART_Transmit_IT(&huart6, command5, sizeof(command5)-1);
 8001f2a:	2219      	movs	r2, #25
 8001f2c:	4956      	ldr	r1, [pc, #344]	; (8002088 <_Z13StartUartTaskPKv+0x22c>)
 8001f2e:	4852      	ldr	r0, [pc, #328]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001f30:	f00a fd36 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
		  if(sterowanieSend == 6)//Left rotation
 8001f34:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d109      	bne.n	8001f50 <_Z13StartUartTaskPKv+0xf4>
		  {
		  	  HAL_UART_Transmit_IT(&huart1, command6, sizeof(command6)-1);
 8001f3c:	2219      	movs	r2, #25
 8001f3e:	4953      	ldr	r1, [pc, #332]	; (800208c <_Z13StartUartTaskPKv+0x230>)
 8001f40:	484c      	ldr	r0, [pc, #304]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001f42:	f00a fd2d 	bl	800c9a0 <HAL_UART_Transmit_IT>
			  HAL_UART_Transmit_IT(&huart6, command6, sizeof(command6)-1);
 8001f46:	2219      	movs	r2, #25
 8001f48:	4950      	ldr	r1, [pc, #320]	; (800208c <_Z13StartUartTaskPKv+0x230>)
 8001f4a:	484b      	ldr	r0, [pc, #300]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001f4c:	f00a fd28 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
		  if(sterowanieSend == 7)//Stop
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <_Z13StartUartTaskPKv+0x20c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b07      	cmp	r3, #7
 8001f56:	d109      	bne.n	8001f6c <_Z13StartUartTaskPKv+0x110>
		  {
		  	  HAL_UART_Transmit_IT(&huart1, command7, sizeof(command7)-1);
 8001f58:	2217      	movs	r2, #23
 8001f5a:	494d      	ldr	r1, [pc, #308]	; (8002090 <_Z13StartUartTaskPKv+0x234>)
 8001f5c:	4845      	ldr	r0, [pc, #276]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001f5e:	f00a fd1f 	bl	800c9a0 <HAL_UART_Transmit_IT>
			  HAL_UART_Transmit_IT(&huart6, command7, sizeof(command7)-1);
 8001f62:	2217      	movs	r2, #23
 8001f64:	494a      	ldr	r1, [pc, #296]	; (8002090 <_Z13StartUartTaskPKv+0x234>)
 8001f66:	4844      	ldr	r0, [pc, #272]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001f68:	f00a fd1a 	bl	800c9a0 <HAL_UART_Transmit_IT>
		  }
	  }

	if((xQueueReceive(QueueSendSliderValue, &sliderCurrenValue, 1))==pdTRUE)
 8001f6c:	4b49      	ldr	r3, [pc, #292]	; (8002094 <_Z13StartUartTaskPKv+0x238>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4949      	ldr	r1, [pc, #292]	; (8002098 <_Z13StartUartTaskPKv+0x23c>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f013 f9f3 	bl	8015360 <xQueueReceive>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <_Z13StartUartTaskPKv+0x178>
	{
		itoa(sliderCurrenValue,sliderCurrentValueChar,10);
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <_Z13StartUartTaskPKv+0x23c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	220a      	movs	r2, #10
 8001f90:	4942      	ldr	r1, [pc, #264]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f020 fd74 	bl	8022a80 <itoa>
		IntToString(sliderCurrentValueChar, sliderCurrenValue);
 8001f98:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <_Z13StartUartTaskPKv+0x23c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	483f      	ldr	r0, [pc, #252]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fa0:	f000 f888 	bl	80020b4 <_Z11IntToStringPci>
		UpdateSpeedValue((char*)command1, sliderCurrentValueChar);
 8001fa4:	493d      	ldr	r1, [pc, #244]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fa6:	4832      	ldr	r0, [pc, #200]	; (8002070 <_Z13StartUartTaskPKv+0x214>)
 8001fa8:	f000 f8d5 	bl	8002156 <_Z16UpdateSpeedValuePcS_>
		UpdateSpeedValue((char*)command2, sliderCurrentValueChar);
 8001fac:	493b      	ldr	r1, [pc, #236]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fae:	4833      	ldr	r0, [pc, #204]	; (800207c <_Z13StartUartTaskPKv+0x220>)
 8001fb0:	f000 f8d1 	bl	8002156 <_Z16UpdateSpeedValuePcS_>
		UpdateSpeedValue((char*)command3, sliderCurrentValueChar);
 8001fb4:	4939      	ldr	r1, [pc, #228]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fb6:	4832      	ldr	r0, [pc, #200]	; (8002080 <_Z13StartUartTaskPKv+0x224>)
 8001fb8:	f000 f8cd 	bl	8002156 <_Z16UpdateSpeedValuePcS_>
		UpdateSpeedValue((char*)command4, sliderCurrentValueChar);
 8001fbc:	4937      	ldr	r1, [pc, #220]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fbe:	4831      	ldr	r0, [pc, #196]	; (8002084 <_Z13StartUartTaskPKv+0x228>)
 8001fc0:	f000 f8c9 	bl	8002156 <_Z16UpdateSpeedValuePcS_>
		UpdateSpeedValue((char*)command5, sliderCurrentValueChar);
 8001fc4:	4935      	ldr	r1, [pc, #212]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fc6:	4830      	ldr	r0, [pc, #192]	; (8002088 <_Z13StartUartTaskPKv+0x22c>)
 8001fc8:	f000 f8c5 	bl	8002156 <_Z16UpdateSpeedValuePcS_>
		UpdateSpeedValue((char*)command6, sliderCurrentValueChar);
 8001fcc:	4933      	ldr	r1, [pc, #204]	; (800209c <_Z13StartUartTaskPKv+0x240>)
 8001fce:	482f      	ldr	r0, [pc, #188]	; (800208c <_Z13StartUartTaskPKv+0x230>)
 8001fd0:	f000 f8c1 	bl	8002156 <_Z16UpdateSpeedValuePcS_>
	}

	statusReceiveUART6 = HAL_UART_Receive_IT(&huart6, bufferReceiveBack, sizeof(bufferReceiveBack));
 8001fd4:	2226      	movs	r2, #38	; 0x26
 8001fd6:	4932      	ldr	r1, [pc, #200]	; (80020a0 <_Z13StartUartTaskPKv+0x244>)
 8001fd8:	4827      	ldr	r0, [pc, #156]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001fda:	f00a fd3d 	bl	800ca58 <HAL_UART_Receive_IT>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73bb      	strb	r3, [r7, #14]
	if( statusReceiveUART6 == 0)
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d104      	bne.n	8001ff2 <_Z13StartUartTaskPKv+0x196>
	{
		HAL_UART_Transmit_IT(&huart1, bufferReceiveBack, sizeof(bufferReceiveBack));
 8001fe8:	2226      	movs	r2, #38	; 0x26
 8001fea:	492d      	ldr	r1, [pc, #180]	; (80020a0 <_Z13StartUartTaskPKv+0x244>)
 8001fec:	4821      	ldr	r0, [pc, #132]	; (8002074 <_Z13StartUartTaskPKv+0x218>)
 8001fee:	f00a fcd7 	bl	800c9a0 <HAL_UART_Transmit_IT>
	}

	statusConnectUART6 = HAL_UART_Receive_IT(&huart6, &helpValue1, 1);
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	481f      	ldr	r0, [pc, #124]	; (8002078 <_Z13StartUartTaskPKv+0x21c>)
 8001ffc:	f00a fd2c 	bl	800ca58 <HAL_UART_Receive_IT>
 8002000:	4603      	mov	r3, r0
 8002002:	737b      	strb	r3, [r7, #13]
	if(statusConnectUART6 == 0)
 8002004:	7b7b      	ldrb	r3, [r7, #13]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d107      	bne.n	800201a <_Z13StartUartTaskPKv+0x1be>
	{
		xQueueSend(QueueReceive,&helpValue2,0);
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <_Z13StartUartTaskPKv+0x248>)
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	f107 010b 	add.w	r1, r7, #11
 8002012:	2300      	movs	r3, #0
 8002014:	2200      	movs	r2, #0
 8002016:	f012 ff73 	bl	8014f00 <xQueueGenericSend>
	}

	if( statusReceiveUART6 == 0)
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f af2e 	bne.w	8001e7e <_Z13StartUartTaskPKv+0x22>
	{
		bufferReceiveBack[sizeof(bufferReceiveBack)-1] = '\n';
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <_Z13StartUartTaskPKv+0x244>)
 8002024:	220a      	movs	r2, #10
 8002026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		while(!(bufferReceiveBack[uBuffer] == '\n'))
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <_Z13StartUartTaskPKv+0x244>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	2b0a      	cmp	r3, #10
 8002032:	d009      	beq.n	8002048 <_Z13StartUartTaskPKv+0x1ec>
		{
			bufferReceiveBackFiltr[uBuffer] = bufferReceiveBack[uBuffer];
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <_Z13StartUartTaskPKv+0x244>)
 800203a:	5c89      	ldrb	r1, [r1, r2]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <_Z13StartUartTaskPKv+0x24c>)
 800203e:	54d1      	strb	r1, [r2, r3]
			uBuffer = uBuffer + 1;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
		while(!(bufferReceiveBack[uBuffer] == '\n'))
 8002046:	e7f0      	b.n	800202a <_Z13StartUartTaskPKv+0x1ce>
		}
		bufferReceiveBackFiltr[sizeof(bufferReceiveBackFiltr)] = '\n';
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <_Z13StartUartTaskPKv+0x24c>)
 800204a:	220a      	movs	r2, #10
 800204c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		//HAL_UART_Transmit_IT(&huart1, bufferReceiveBackFiltr, uBuffer+1);
		uBuffer = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
		//StringToInt(bufferReceiveBackFiltr);//, encoderValue);
		xQueueSend(QueueReceiveEncoderValue,encoderValue,0);
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <_Z13StartUartTaskPKv+0x250>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	2300      	movs	r3, #0
 800205a:	2200      	movs	r2, #0
 800205c:	4914      	ldr	r1, [pc, #80]	; (80020b0 <_Z13StartUartTaskPKv+0x254>)
 800205e:	f012 ff4f 	bl	8014f00 <xQueueGenericSend>
		statusReceiveUART6 = 10;
 8002062:	230a      	movs	r3, #10
 8002064:	73bb      	strb	r3, [r7, #14]
	  sterowanieSend = 0;
 8002066:	e70a      	b.n	8001e7e <_Z13StartUartTaskPKv+0x22>
 8002068:	20000ad0 	.word	0x20000ad0
 800206c:	20008f70 	.word	0x20008f70
 8002070:	20000028 	.word	0x20000028
 8002074:	200009c4 	.word	0x200009c4
 8002078:	20000a44 	.word	0x20000a44
 800207c:	20000040 	.word	0x20000040
 8002080:	2000005c 	.word	0x2000005c
 8002084:	20000078 	.word	0x20000078
 8002088:	20000094 	.word	0x20000094
 800208c:	200000b0 	.word	0x200000b0
 8002090:	200000cc 	.word	0x200000cc
 8002094:	20008f74 	.word	0x20008f74
 8002098:	20000ac8 	.word	0x20000ac8
 800209c:	20000acc 	.word	0x20000acc
 80020a0:	200000e4 	.word	0x200000e4
 80020a4:	20008f78 	.word	0x20008f78
 80020a8:	2000010c 	.word	0x2000010c
 80020ac:	20008f7c 	.word	0x20008f7c
 80020b0:	20000478 	.word	0x20000478

080020b4 <_Z11IntToStringPci>:
}

//zamienia liczbe na czteroelementowa tablice charów
//wypelnia poczatek zerami kiedy trzeba np. 32=> 0032
void IntToString(char *sliderValueChar,int sliderValue)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
    if(sliderValue<10)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	dc10      	bgt.n	80020e6 <_Z11IntToStringPci+0x32>
    {
    	sliderValueChar[3]=sliderValueChar[0];
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3303      	adds	r3, #3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	7812      	ldrb	r2, [r2, #0]
 80020cc:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[0]='0';
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2230      	movs	r2, #48	; 0x30
 80020d2:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[1]='0';
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3301      	adds	r3, #1
 80020d8:	2230      	movs	r2, #48	; 0x30
 80020da:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[2]='0';
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3302      	adds	r3, #2
 80020e0:	2230      	movs	r2, #48	; 0x30
 80020e2:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[3]=sliderValueChar[2];
    	sliderValueChar[2]=sliderValueChar[1];
    	sliderValueChar[1]=sliderValueChar[0];
    	sliderValueChar[0]='0';
    }
}
 80020e4:	e031      	b.n	800214a <_Z11IntToStringPci+0x96>
    else if((sliderValue>9) &&  (sliderValue<100))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	dd15      	ble.n	8002118 <_Z11IntToStringPci+0x64>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b63      	cmp	r3, #99	; 0x63
 80020f0:	dc12      	bgt.n	8002118 <_Z11IntToStringPci+0x64>
    	sliderValueChar[3]=sliderValueChar[1];
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3303      	adds	r3, #3
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	7852      	ldrb	r2, [r2, #1]
 80020fa:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[2]=sliderValueChar[0];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3302      	adds	r3, #2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[1]='0';
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3301      	adds	r3, #1
 800210a:	2230      	movs	r2, #48	; 0x30
 800210c:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[2]='0';
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	2230      	movs	r2, #48	; 0x30
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	e018      	b.n	800214a <_Z11IntToStringPci+0x96>
    else if(sliderValue<1000 && sliderValue>99)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211e:	da14      	bge.n	800214a <_Z11IntToStringPci+0x96>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b63      	cmp	r3, #99	; 0x63
 8002124:	dd11      	ble.n	800214a <_Z11IntToStringPci+0x96>
    	sliderValueChar[3]=sliderValueChar[2];
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3303      	adds	r3, #3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	7892      	ldrb	r2, [r2, #2]
 800212e:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[2]=sliderValueChar[1];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3302      	adds	r3, #2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	7852      	ldrb	r2, [r2, #1]
 8002138:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[1]=sliderValueChar[0];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3301      	adds	r3, #1
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
    	sliderValueChar[0]='0';
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2230      	movs	r2, #48	; 0x30
 8002148:	701a      	strb	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_Z16UpdateSpeedValuePcS_>:

void UpdateSpeedValue(char *command,char *sliderValueChar)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
    int i=0;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
    int j=0;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
    while(!(command[i]=='\n'))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b0a      	cmp	r3, #10
 8002172:	d048      	beq.n	8002206 <_Z16UpdateSpeedValuePcS_+0xb0>
    {
        if( (command[i] == '=') && (command[i+1] == '-') )
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b3d      	cmp	r3, #61	; 0x3d
 800217e:	d11b      	bne.n	80021b8 <_Z16UpdateSpeedValuePcS_+0x62>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b2d      	cmp	r3, #45	; 0x2d
 800218c:	d114      	bne.n	80021b8 <_Z16UpdateSpeedValuePcS_+0x62>
        {
            for(j=0;j<=3;j++)
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	dc31      	bgt.n	80021fc <_Z16UpdateSpeedValuePcS_+0xa6>
            {
            	command[i+2+j]=sliderValueChar[j];
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	441a      	add	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1c99      	adds	r1, r3, #2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	440b      	add	r3, r1
 80021a6:	4619      	mov	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	440b      	add	r3, r1
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
            for(j=0;j<=3;j++)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3301      	adds	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	e7ec      	b.n	8002192 <_Z16UpdateSpeedValuePcS_+0x3c>
            }
        }
         else if( (command[i] == '=') && !(command[i+1] == '-') )
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b3d      	cmp	r3, #61	; 0x3d
 80021c2:	d11c      	bne.n	80021fe <_Z16UpdateSpeedValuePcS_+0xa8>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b2d      	cmp	r3, #45	; 0x2d
 80021d0:	d015      	beq.n	80021fe <_Z16UpdateSpeedValuePcS_+0xa8>
        {
            for(j=0;j<=3;j++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	dc10      	bgt.n	80021fe <_Z16UpdateSpeedValuePcS_+0xa8>
            {
            	command[i+1+j]=sliderValueChar[j];
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	441a      	add	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1c59      	adds	r1, r3, #1
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	440b      	add	r3, r1
 80021ea:	4619      	mov	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	440b      	add	r3, r1
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
            for(j=0;j<=3;j++)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	e7ec      	b.n	80021d6 <_Z16UpdateSpeedValuePcS_+0x80>
        if( (command[i] == '=') && (command[i+1] == '-') )
 80021fc:	bf00      	nop
            }
        }
        i++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
    while(!(command[i]=='\n'))
 8002204:	e7b0      	b.n	8002168 <_Z16UpdateSpeedValuePcS_+0x12>
    }
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_UART_TxCpltCallback>:


 /* USER CODE END 5 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]

}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800224e:	f001 f835 	bl	80032bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40001000 	.word	0x40001000

08002260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_MspInit+0x4c>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_MspInit+0x4c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_MspInit+0x4c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_MspInit+0x4c>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_MspInit+0x4c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	210f      	movs	r1, #15
 80022aa:	f06f 0001 	mvn.w	r0, #1
 80022ae:	f001 fb93 	bl	80039d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_ADC_MspInit+0xa4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d13c      	bne.n	800235c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a20      	ldr	r2, [pc, #128]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 80022e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 8002300:	f043 0320 	orr.w	r3, r3, #32
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_ADC_MspInit+0xa8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800232a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800232e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002330:	2303      	movs	r3, #3
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	480b      	ldr	r0, [pc, #44]	; (800236c <HAL_ADC_MspInit+0xac>)
 8002340:	f002 fa64 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002344:	2301      	movs	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002348:	2303      	movs	r3, #3
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <HAL_ADC_MspInit+0xb0>)
 8002358:	f002 fa58 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800235c:	bf00      	nop
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40012200 	.word	0x40012200
 8002368:	40023800 	.word	0x40023800
 800236c:	40021400 	.word	0x40021400
 8002370:	40020000 	.word	0x40020000

08002374 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_CRC_MspInit+0x38>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10b      	bne.n	800239e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_CRC_MspInit+0x3c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_CRC_MspInit+0x3c>)
 800238c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_CRC_MspInit+0x3c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023000 	.word	0x40023000
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08e      	sub	sp, #56	; 0x38
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_DCMI_MspInit+0x160>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	f040 809a 	bne.w	800250c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	4a4e      	ldr	r2, [pc, #312]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6353      	str	r3, [r2, #52]	; 0x34
 80023e4:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4a48      	ldr	r2, [pc, #288]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	6313      	str	r3, [r2, #48]	; 0x30
 80023fc:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a42      	ldr	r2, [pc, #264]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002420:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	4a3c      	ldr	r2, [pc, #240]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 8002426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800242a:	6313      	str	r3, [r2, #48]	; 0x30
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002438:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4a36      	ldr	r2, [pc, #216]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 800243e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002442:	6313      	str	r3, [r2, #48]	; 0x30
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	4a30      	ldr	r2, [pc, #192]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6313      	str	r3, [r2, #48]	; 0x30
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_DCMI_MspInit+0x164>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002468:	2360      	movs	r3, #96	; 0x60
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002478:	230d      	movs	r3, #13
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	4619      	mov	r1, r3
 8002482:	4826      	ldr	r0, [pc, #152]	; (800251c <HAL_DCMI_MspInit+0x168>)
 8002484:	f002 f9c2 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002488:	2308      	movs	r3, #8
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002498:	230d      	movs	r3, #13
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	481f      	ldr	r0, [pc, #124]	; (8002520 <HAL_DCMI_MspInit+0x16c>)
 80024a4:	f002 f9b2 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80024a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024ba:	230d      	movs	r3, #13
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c2:	4619      	mov	r1, r3
 80024c4:	4817      	ldr	r0, [pc, #92]	; (8002524 <HAL_DCMI_MspInit+0x170>)
 80024c6:	f002 f9a1 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80024ca:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024dc:	230d      	movs	r3, #13
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e4:	4619      	mov	r1, r3
 80024e6:	4810      	ldr	r0, [pc, #64]	; (8002528 <HAL_DCMI_MspInit+0x174>)
 80024e8:	f002 f990 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80024ec:	2350      	movs	r3, #80	; 0x50
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024fc:	230d      	movs	r3, #13
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	4619      	mov	r1, r3
 8002506:	4809      	ldr	r0, [pc, #36]	; (800252c <HAL_DCMI_MspInit+0x178>)
 8002508:	f002 f980 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800250c:	bf00      	nop
 800250e:	3738      	adds	r7, #56	; 0x38
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	50050000 	.word	0x50050000
 8002518:	40023800 	.word	0x40023800
 800251c:	40021000 	.word	0x40021000
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40020000 	.word	0x40020000

08002530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2f      	ldr	r2, [pc, #188]	; (800260c <HAL_I2C_MspInit+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d129      	bne.n	80025a6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800256a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002570:	2312      	movs	r3, #18
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002574:	2301      	movs	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257c:	2304      	movs	r3, #4
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4823      	ldr	r0, [pc, #140]	; (8002614 <HAL_I2C_MspInit+0xe4>)
 8002588:	f002 f940 	bl	800480c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 8002592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002596:	6413      	str	r3, [r2, #64]	; 0x40
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025a4:	e02d      	b.n	8002602 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_I2C_MspInit+0xe8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d128      	bne.n	8002602 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 80025b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ba:	6313      	str	r3, [r2, #48]	; 0x30
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80025c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ce:	2312      	movs	r3, #18
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025da:	2304      	movs	r3, #4
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <HAL_I2C_MspInit+0xec>)
 80025e6:	f002 f911 	bl	800480c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 80025f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_I2C_MspInit+0xe0>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
}
 8002602:	bf00      	nop
 8002604:	3730      	adds	r7, #48	; 0x30
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40005400 	.word	0x40005400
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400
 8002618:	40005c00 	.word	0x40005c00
 800261c:	40021c00 	.word	0x40021c00

08002620 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_I2C_MspDeInit+0x54>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10b      	bne.n	800264a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_I2C_MspDeInit+0x58>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_I2C_MspDeInit+0x58>)
 8002638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800263e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002642:	480e      	ldr	r0, [pc, #56]	; (800267c <HAL_I2C_MspDeInit+0x5c>)
 8002644:	f002 fa8c 	bl	8004b60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002648:	e00f      	b.n	800266a <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <HAL_I2C_MspDeInit+0x60>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10a      	bne.n	800266a <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_I2C_MspDeInit+0x58>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_I2C_MspDeInit+0x58>)
 800265a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8002660:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002664:	4807      	ldr	r0, [pc, #28]	; (8002684 <HAL_I2C_MspDeInit+0x64>)
 8002666:	f002 fa7b 	bl	8004b60 <HAL_GPIO_DeInit>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40005400 	.word	0x40005400
 8002678:	40023800 	.word	0x40023800
 800267c:	40020400 	.word	0x40020400
 8002680:	40005c00 	.word	0x40005c00
 8002684:	40021c00 	.word	0x40021c00

08002688 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <HAL_QSPI_MspInit+0x10c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d170      	bne.n	800278c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6393      	str	r3, [r2, #56]	; 0x38
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c2:	4b35      	ldr	r3, [pc, #212]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a34      	ldr	r2, [pc, #208]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a28      	ldr	r2, [pc, #160]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 80026f8:	f043 0308 	orr.w	r3, r3, #8
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_QSPI_MspInit+0x110>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800270a:	2304      	movs	r3, #4
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800271a:	2309      	movs	r3, #9
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	481d      	ldr	r0, [pc, #116]	; (800279c <HAL_QSPI_MspInit+0x114>)
 8002726:	f002 f871 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800272a:	2340      	movs	r3, #64	; 0x40
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800273a:	230a      	movs	r3, #10
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4619      	mov	r1, r3
 8002744:	4816      	ldr	r0, [pc, #88]	; (80027a0 <HAL_QSPI_MspInit+0x118>)
 8002746:	f002 f861 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800274a:	2304      	movs	r3, #4
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800275a:	2309      	movs	r3, #9
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	4619      	mov	r1, r3
 8002764:	480e      	ldr	r0, [pc, #56]	; (80027a0 <HAL_QSPI_MspInit+0x118>)
 8002766:	f002 f851 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800276a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800277c:	2309      	movs	r3, #9
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4619      	mov	r1, r3
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <HAL_QSPI_MspInit+0x11c>)
 8002788:	f002 f840 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800278c:	bf00      	nop
 800278e:	3730      	adds	r7, #48	; 0x30
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	a0001000 	.word	0xa0001000
 8002798:	40023800 	.word	0x40023800
 800279c:	40021000 	.word	0x40021000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020c00 	.word	0x40020c00

080027a8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <HAL_QSPI_MspDeInit+0x40>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d112      	bne.n	80027e0 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_QSPI_MspDeInit+0x44>)
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_QSPI_MspDeInit+0x44>)
 80027c0:	f023 0302 	bic.w	r3, r3, #2
 80027c4:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 80027c6:	2104      	movs	r1, #4
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_QSPI_MspDeInit+0x48>)
 80027ca:	f002 f9c9 	bl	8004b60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 80027ce:	2144      	movs	r1, #68	; 0x44
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <HAL_QSPI_MspDeInit+0x4c>)
 80027d2:	f002 f9c5 	bl	8004b60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 80027d6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80027da:	4807      	ldr	r0, [pc, #28]	; (80027f8 <HAL_QSPI_MspDeInit+0x50>)
 80027dc:	f002 f9c0 	bl	8004b60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	a0001000 	.word	0xa0001000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020c00 	.word	0x40020c00

080027fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_RTC_MspInit+0x2c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d105      	bne.n	800281a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RTC_MspInit+0x30>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_RTC_MspInit+0x30>)
 8002814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40002800 	.word	0x40002800
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_SD_MspInit+0xb4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d144      	bne.n	80028dc <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_SD_MspInit+0xb8>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800289a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800289e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80028ac:	230c      	movs	r3, #12
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <HAL_SD_MspInit+0xbc>)
 80028b8:	f001 ffa8 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80028bc:	2304      	movs	r3, #4
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80028cc:	230c      	movs	r3, #12
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4619      	mov	r1, r3
 80028d6:	4806      	ldr	r0, [pc, #24]	; (80028f0 <HAL_SD_MspInit+0xc0>)
 80028d8:	f001 ff98 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80028dc:	bf00      	nop
 80028de:	3728      	adds	r7, #40	; 0x28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00

080028f4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002914:	d127      	bne.n	8002966 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_SPDIFRX_MspInit+0x7c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a15      	ldr	r2, [pc, #84]	; (8002970 <HAL_SPDIFRX_MspInit+0x7c>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_SPDIFRX_MspInit+0x7c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_SPDIFRX_MspInit+0x7c>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <HAL_SPDIFRX_MspInit+0x7c>)
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_SPDIFRX_MspInit+0x7c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002956:	2308      	movs	r3, #8
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4804      	ldr	r0, [pc, #16]	; (8002974 <HAL_SPDIFRX_MspInit+0x80>)
 8002962:	f001 ff53 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40020c00 	.word	0x40020c00

08002978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_SPI_MspInit+0xb4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d144      	bne.n	8002a24 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800299a:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_SPI_MspInit+0xb8>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80029e2:	2302      	movs	r3, #2
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029f2:	2305      	movs	r3, #5
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <HAL_SPI_MspInit+0xbc>)
 80029fe:	f001 ff05 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002a02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a14:	2305      	movs	r3, #5
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4806      	ldr	r0, [pc, #24]	; (8002a38 <HAL_SPI_MspInit+0xc0>)
 8002a20:	f001 fef4 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	; 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40003800 	.word	0x40003800
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_TIM_Base_MspInit+0xc8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10c      	bne.n	8002a68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a66:	e046      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d10c      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]
}
 8002a8a:	e034      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <HAL_TIM_Base_MspInit+0xd0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10c      	bne.n	8002ab0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
}
 8002aae:	e022      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_TIM_Base_MspInit+0xd4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002ac0:	f043 0308 	orr.w	r3, r3, #8
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
}
 8002ad2:	e010      	b.n	8002af6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_TIM_Base_MspInit+0xd8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10b      	bne.n	8002af6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_TIM_Base_MspInit+0xcc>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_TIM_PWM_MspInit+0x38>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10b      	bne.n	8002b42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40001800 	.word	0x40001800
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_TIM_MspPostInit+0x178>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11d      	bne.n	8002bb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	484a      	ldr	r0, [pc, #296]	; (8002cd8 <HAL_TIM_MspPostInit+0x180>)
 8002bb0:	f001 fe2c 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002bb4:	e087      	b.n	8002cc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d11d      	bne.n	8002bfc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc0:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4a43      	ldr	r2, [pc, #268]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30
 8002bcc:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bea:	2301      	movs	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4838      	ldr	r0, [pc, #224]	; (8002cd8 <HAL_TIM_MspPostInit+0x180>)
 8002bf6:	f001 fe09 	bl	800480c <HAL_GPIO_Init>
}
 8002bfa:	e064      	b.n	8002cc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a36      	ldr	r2, [pc, #216]	; (8002cdc <HAL_TIM_MspPostInit+0x184>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d11c      	bne.n	8002c40 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a32      	ldr	r2, [pc, #200]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	4829      	ldr	r0, [pc, #164]	; (8002ce0 <HAL_TIM_MspPostInit+0x188>)
 8002c3a:	f001 fde7 	bl	800480c <HAL_GPIO_Init>
}
 8002c3e:	e042      	b.n	8002cc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <HAL_TIM_MspPostInit+0x18c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d11c      	bne.n	8002c84 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c72:	2302      	movs	r3, #2
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	481a      	ldr	r0, [pc, #104]	; (8002ce8 <HAL_TIM_MspPostInit+0x190>)
 8002c7e:	f001 fdc5 	bl	800480c <HAL_GPIO_Init>
}
 8002c82:	e020      	b.n	8002cc6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_TIM_MspPostInit+0x194>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_TIM_MspPostInit+0x17c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002ca6:	2340      	movs	r3, #64	; 0x40
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002cb6:	2309      	movs	r3, #9
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480b      	ldr	r0, [pc, #44]	; (8002cf0 <HAL_TIM_MspPostInit+0x198>)
 8002cc2:	f001 fda3 	bl	800480c <HAL_GPIO_Init>
}
 8002cc6:	bf00      	nop
 8002cc8:	3730      	adds	r7, #48	; 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40001800 	.word	0x40001800
 8002cf0:	40021c00 	.word	0x40021c00

08002cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08c      	sub	sp, #48	; 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a44      	ldr	r2, [pc, #272]	; (8002e24 <HAL_UART_MspInit+0x130>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d14d      	bne.n	8002db2 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a43      	ldr	r2, [pc, #268]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d1c:	f043 0310 	orr.w	r3, r3, #16
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d6e:	2307      	movs	r3, #7
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	482c      	ldr	r0, [pc, #176]	; (8002e2c <HAL_UART_MspInit+0x138>)
 8002d7a:	f001 fd47 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d90:	2307      	movs	r3, #7
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4825      	ldr	r0, [pc, #148]	; (8002e30 <HAL_UART_MspInit+0x13c>)
 8002d9c:	f001 fd36 	bl	800480c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);//SZYMON//
 8002da0:	2200      	movs	r2, #0
 8002da2:	2105      	movs	r1, #5
 8002da4:	2025      	movs	r0, #37	; 0x25
 8002da6:	f000 fe17 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);//SZYMON//
 8002daa:	2025      	movs	r0, #37	; 0x25
 8002dac:	f000 fe30 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002db0:	e034      	b.n	8002e1c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART6)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_UART_MspInit+0x140>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d12f      	bne.n	8002e1c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002dc2:	f043 0320 	orr.w	r3, r3, #32
 8002dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002dda:	f043 0304 	orr.w	r3, r3, #4
 8002dde:	6313      	str	r3, [r2, #48]	; 0x30
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_UART_MspInit+0x134>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002dec:	23c0      	movs	r3, #192	; 0xc0
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	480c      	ldr	r0, [pc, #48]	; (8002e38 <HAL_UART_MspInit+0x144>)
 8002e08:	f001 fd00 	bl	800480c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2105      	movs	r1, #5
 8002e10:	2047      	movs	r0, #71	; 0x47
 8002e12:	f000 fde1 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e16:	2047      	movs	r0, #71	; 0x47
 8002e18:	f000 fdfa 	bl	8003a10 <HAL_NVIC_EnableIRQ>
}
 8002e1c:	bf00      	nop
 8002e1e:	3730      	adds	r7, #48	; 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40011000 	.word	0x40011000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40011400 	.word	0x40011400
 8002e38:	40020800 	.word	0x40020800

08002e3c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <HAL_SAI_MspInit+0xbc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d124      	bne.n	8002e98 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_SAI_MspInit+0xc0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10b      	bne.n	8002e6e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002e56:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <HAL_SAI_MspInit+0xc4>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <HAL_SAI_MspInit+0xc4>)
 8002e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_SAI_MspInit+0xc4>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <HAL_SAI_MspInit+0xc0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a21      	ldr	r2, [pc, #132]	; (8002efc <HAL_SAI_MspInit+0xc0>)
 8002e76:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002e78:	23f0      	movs	r3, #240	; 0xf0
 8002e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002e88:	230a      	movs	r3, #10
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	481c      	ldr	r0, [pc, #112]	; (8002f04 <HAL_SAI_MspInit+0xc8>)
 8002e94:	f001 fcba 	bl	800480c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_SAI_MspInit+0xcc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d125      	bne.n	8002eee <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_SAI_MspInit+0xc0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_SAI_MspInit+0xc4>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <HAL_SAI_MspInit+0xc4>)
 8002eb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_SAI_MspInit+0xc4>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_SAI_MspInit+0xc0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <HAL_SAI_MspInit+0xc0>)
 8002eca:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ede:	230a      	movs	r3, #10
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4808      	ldr	r0, [pc, #32]	; (8002f0c <HAL_SAI_MspInit+0xd0>)
 8002eea:	f001 fc8f 	bl	800480c <HAL_GPIO_Init>

    }
}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40015c04 	.word	0x40015c04
 8002efc:	20000ad4 	.word	0x20000ad4
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40022000 	.word	0x40022000
 8002f08:	40015c24 	.word	0x40015c24
 8002f0c:	40021800 	.word	0x40021800

08002f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	; 0x30
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002f20:	2200      	movs	r2, #0
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	2036      	movs	r0, #54	; 0x36
 8002f26:	f000 fd57 	bl	80039d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002f2a:	2036      	movs	r0, #54	; 0x36
 8002f2c:	f000 fd70 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f30:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <HAL_InitTick+0xa0>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_InitTick+0xa0>)
 8002f36:	f043 0310 	orr.w	r3, r3, #16
 8002f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_InitTick+0xa0>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f48:	f107 0210 	add.w	r2, r7, #16
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f005 ff96 	bl	8008e84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002f58:	f005 ff6c 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	4a13      	ldr	r2, [pc, #76]	; (8002fb4 <HAL_InitTick+0xa4>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <HAL_InitTick+0xac>)
 8002f74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f90:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f92:	f008 fc63 	bl	800b85c <HAL_TIM_Base_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f9c:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <HAL_InitTick+0xa8>)
 8002f9e:	f008 fcb3 	bl	800b908 <HAL_TIM_Base_Start_IT>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3730      	adds	r7, #48	; 0x30
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	2000a3c4 	.word	0x2000a3c4
 8002fbc:	40001000 	.word	0x40001000

08002fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <TIM6_DAC_IRQHandler+0x10>)
 8002ffa:	f008 fcda 	bl	800b9b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2000a3c4 	.word	0x2000a3c4

08003008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <OTG_FS_IRQHandler+0x10>)
 800300e:	f002 f977 	bl	8005300 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000ac98 	.word	0x2000ac98

0800301c <USART1_IRQHandler>:
/**
  * @brief This function handles USART6 global interrupt.
  */

void USART1_IRQHandler(void)//SZYMON//
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	 HAL_UART_IRQHandler(&huart1);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <USART1_IRQHandler+0x10>)
 8003022:	f009 fdbb 	bl	800cb9c <HAL_UART_IRQHandler>
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200009c4 	.word	0x200009c4

08003030 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <USART6_IRQHandler+0x10>)
 8003036:	f009 fdb1 	bl	800cb9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000a44 	.word	0x20000a44

08003044 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <LTDC_IRQHandler+0x10>)
 800304a:	f004 f9d3 	bl	80073f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000a108 	.word	0x2000a108

08003058 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <DMA2D_IRQHandler+0x10>)
 800305e:	f001 f996 	bl	800438e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000a1b0 	.word	0x2000a1b0

0800306c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	return 1;
 8003070:	2301      	movs	r3, #1
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <_kill>:

int _kill(int pid, int sig)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003086:	f01f fca7 	bl	80229d8 <__errno>
 800308a:	4602      	mov	r2, r0
 800308c:	2316      	movs	r3, #22
 800308e:	6013      	str	r3, [r2, #0]
	return -1;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_exit>:

void _exit (int status)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ffe7 	bl	800307c <_kill>
	while (1) {}		/* Make sure we hang here */
 80030ae:	e7fe      	b.n	80030ae <_exit+0x12>

080030b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e00a      	b.n	80030d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030c2:	f3af 8000 	nop.w
 80030c6:	4601      	mov	r1, r0
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	60ba      	str	r2, [r7, #8]
 80030ce:	b2ca      	uxtb	r2, r1
 80030d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	dbf0      	blt.n	80030c2 <_read+0x12>
	}

return len;
 80030e0:	687b      	ldr	r3, [r7, #4]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e009      	b.n	8003110 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	60ba      	str	r2, [r7, #8]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	3301      	adds	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	dbf1      	blt.n	80030fc <_write+0x12>
	}
	return len;
 8003118:	687b      	ldr	r3, [r7, #4]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <_close>:

int _close(int file)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
	return -1;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800314a:	605a      	str	r2, [r3, #4]
	return 0;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <_isatty>:

int _isatty(int file)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
	return 1;
 8003162:	2301      	movs	r3, #1
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
	return 0;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <_sbrk+0x50>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <_sbrk+0x16>
		heap_end = &end;
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <_sbrk+0x50>)
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <_sbrk+0x54>)
 80031a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <_sbrk+0x50>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <_sbrk+0x50>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	466a      	mov	r2, sp
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d907      	bls.n	80031c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80031b6:	f01f fc0f 	bl	80229d8 <__errno>
 80031ba:	4602      	mov	r2, r0
 80031bc:	230c      	movs	r3, #12
 80031be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	e006      	b.n	80031d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <_sbrk+0x50>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	4a03      	ldr	r2, [pc, #12]	; (80031dc <_sbrk+0x50>)
 80031d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000ad8 	.word	0x20000ad8
 80031e0:	2000af60 	.word	0x2000af60

080031e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <SystemInit+0x5c>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	4a14      	ldr	r2, [pc, #80]	; (8003240 <SystemInit+0x5c>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <SystemInit+0x60>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <SystemInit+0x60>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <SystemInit+0x60>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <SystemInit+0x60>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	490d      	ldr	r1, [pc, #52]	; (8003244 <SystemInit+0x60>)
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <SystemInit+0x64>)
 8003212:	4013      	ands	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <SystemInit+0x60>)
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <SystemInit+0x68>)
 800321a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <SystemInit+0x60>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <SystemInit+0x60>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemInit+0x60>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <SystemInit+0x5c>)
 8003230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003234:	609a      	str	r2, [r3, #8]
#endif
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00
 8003244:	40023800 	.word	0x40023800
 8003248:	fef6ffff 	.word	0xfef6ffff
 800324c:	24003010 	.word	0x24003010

08003250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003288 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003256:	e003      	b.n	8003260 <LoopCopyDataInit>

08003258 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800325a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800325c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800325e:	3104      	adds	r1, #4

08003260 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003264:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003266:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003268:	d3f6      	bcc.n	8003258 <CopyDataInit>
  ldr  r2, =_sbss
 800326a:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800326c:	e002      	b.n	8003274 <LoopFillZerobss>

0800326e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800326e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003270:	f842 3b04 	str.w	r3, [r2], #4

08003274 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003276:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003278:	d3f9      	bcc.n	800326e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800327a:	f7ff ffb3 	bl	80031e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800327e:	f01f fbc3 	bl	8022a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003282:	f7fd fc51 	bl	8000b28 <main>
  bx  lr    
 8003286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003288:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800328c:	08026980 	.word	0x08026980
  ldr  r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003294:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8003298:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800329c:	2000af60 	.word	0x2000af60

080032a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a0:	e7fe      	b.n	80032a0 <ADC_IRQHandler>

080032a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a6:	2003      	movs	r0, #3
 80032a8:	f000 fb8b 	bl	80039c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff fe2f 	bl	8002f10 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032b2:	f7fe ffdd 	bl	8002270 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000138 	.word	0x20000138
 80032e0:	2000a404 	.word	0x2000a404

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000a404 	.word	0x2000a404

080032fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff ffee 	bl	80032e4 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d005      	beq.n	8003322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_Delay+0x40>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003322:	bf00      	nop
 8003324:	f7ff ffde 	bl	80032e4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d8f7      	bhi.n	8003324 <HAL_Delay+0x28>
  {
  }
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000138 	.word	0x20000138

08003340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e031      	b.n	80033ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe ffae 	bl	80022c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_ADC_Init+0x84>)
 8003384:	4013      	ands	r3, r2
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f94e 	bl	8003630 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	f043 0201 	orr.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
 80033aa:	e001      	b.n	80033b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	ffffeefd 	.word	0xffffeefd

080033c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e115      	b.n	8003610 <HAL_ADC_ConfigChannel+0x248>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d935      	bls.n	8003460 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	2207      	movs	r2, #7
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7f      	ldr	r2, [pc, #508]	; (800361c <HAL_ADC_ConfigChannel+0x254>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68d9      	ldr	r1, [r3, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	061a      	lsls	r2, r3, #24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	60da      	str	r2, [r3, #12]
 8003438:	e035      	b.n	80034a6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68d9      	ldr	r1, [r3, #12]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	4618      	mov	r0, r3
 800344c:	4603      	mov	r3, r0
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4403      	add	r3, r0
 8003452:	3b1e      	subs	r3, #30
 8003454:	409a      	lsls	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e022      	b.n	80034a6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6919      	ldr	r1, [r3, #16]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	2207      	movs	r2, #7
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	400a      	ands	r2, r1
 8003482:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	4603      	mov	r3, r0
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4403      	add	r3, r0
 800349c:	409a      	lsls	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d824      	bhi.n	80034f8 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	3b05      	subs	r3, #5
 80034c0:	221f      	movs	r2, #31
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	400a      	ands	r2, r1
 80034ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	4618      	mov	r0, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b05      	subs	r3, #5
 80034ea:	fa00 f203 	lsl.w	r2, r0, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34
 80034f6:	e04c      	b.n	8003592 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d824      	bhi.n	800354a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	3b23      	subs	r3, #35	; 0x23
 8003512:	221f      	movs	r2, #31
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43da      	mvns	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	400a      	ands	r2, r1
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4618      	mov	r0, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b23      	subs	r3, #35	; 0x23
 800353c:	fa00 f203 	lsl.w	r2, r0, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
 8003548:	e023      	b.n	8003592 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	3b41      	subs	r3, #65	; 0x41
 800355c:	221f      	movs	r2, #31
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	400a      	ands	r2, r1
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	4618      	mov	r0, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3b41      	subs	r3, #65	; 0x41
 8003586:	fa00 f203 	lsl.w	r2, r0, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_ADC_ConfigChannel+0x258>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1e8>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b12      	cmp	r3, #18
 80035a2:	d105      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <HAL_ADC_ConfigChannel+0x25c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <HAL_ADC_ConfigChannel+0x25c>)
 80035aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ae:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_ADC_ConfigChannel+0x258>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d125      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x23e>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_ADC_ConfigChannel+0x254>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x204>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b11      	cmp	r3, #17
 80035ca:	d11c      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_ADC_ConfigChannel+0x25c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_ADC_ConfigChannel+0x25c>)
 80035d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035d6:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0f      	ldr	r2, [pc, #60]	; (800361c <HAL_ADC_ConfigChannel+0x254>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d111      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_ADC_ConfigChannel+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a11      	ldr	r2, [pc, #68]	; (800362c <HAL_ADC_ConfigChannel+0x264>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	0c9a      	lsrs	r2, r3, #18
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035f8:	e002      	b.n	8003600 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f9      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	10000012 	.word	0x10000012
 8003620:	40012000 	.word	0x40012000
 8003624:	40012300 	.word	0x40012300
 8003628:	20000134 	.word	0x20000134
 800362c:	431bde83 	.word	0x431bde83

08003630 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003638:	4b78      	ldr	r3, [pc, #480]	; (800381c <ADC_Init+0x1ec>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a77      	ldr	r2, [pc, #476]	; (800381c <ADC_Init+0x1ec>)
 800363e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003642:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003644:	4b75      	ldr	r3, [pc, #468]	; (800381c <ADC_Init+0x1ec>)
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4973      	ldr	r1, [pc, #460]	; (800381c <ADC_Init+0x1ec>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	4a58      	ldr	r2, [pc, #352]	; (8003820 <ADC_Init+0x1f0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	e00f      	b.n	800372a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003728:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0202 	bic.w	r2, r2, #2
 8003738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	005a      	lsls	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01b      	beq.n	8003790 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003776:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	3b01      	subs	r3, #1
 8003784:	035a      	lsls	r2, r3, #13
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e007      	b.n	80037a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	051a      	lsls	r2, r3, #20
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037e2:	025a      	lsls	r2, r3, #9
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	029a      	lsls	r2, r3, #10
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40012300 	.word	0x40012300
 8003820:	0f000001 	.word	0x0f000001

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <__NVIC_SetPriorityGrouping+0x40>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 800384e:	4313      	orrs	r3, r2
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <__NVIC_SetPriorityGrouping+0x40>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00
 8003868:	05fa0000 	.word	0x05fa0000

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0b      	blt.n	80038b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <__NVIC_EnableIRQ+0x38>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	db10      	blt.n	80038f8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4909      	ldr	r1, [pc, #36]	; (8003904 <__NVIC_DisableIRQ+0x40>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2001      	movs	r0, #1
 80038e6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ea:	3320      	adds	r3, #32
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100

08003908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db0a      	blt.n	8003932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <__NVIC_SetPriority+0x4c>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003930:	e00a      	b.n	8003948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4908      	ldr	r1, [pc, #32]	; (8003958 <__NVIC_SetPriority+0x50>)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3b04      	subs	r3, #4
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	440b      	add	r3, r1
 8003946:	761a      	strb	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f1c3 0307 	rsb	r3, r3, #7
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf28      	it	cs
 800397a:	2304      	movcs	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3304      	adds	r3, #4
 8003982:	2b06      	cmp	r3, #6
 8003984:	d902      	bls.n	800398c <NVIC_EncodePriority+0x30>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3b03      	subs	r3, #3
 800398a:	e000      	b.n	800398e <NVIC_EncodePriority+0x32>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	f04f 32ff 	mov.w	r2, #4294967295
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	401a      	ands	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	4313      	orrs	r3, r2
         );
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff2a 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ea:	f7ff ff3f 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	6978      	ldr	r0, [r7, #20]
 80039f6:	f7ff ffb1 	bl	800395c <NVIC_EncodePriority>
 80039fa:	4602      	mov	r2, r0
 80039fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff80 	bl	8003908 <__NVIC_SetPriority>
}
 8003a08:	bf00      	nop
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff32 	bl	8003888 <__NVIC_EnableIRQ>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff ff42 	bl	80038c4 <__NVIC_DisableIRQ>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a50:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <HAL_MPU_Enable+0x34>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_MPU_Enable+0x38>)
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_MPU_Enable+0x38>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003a66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a6a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed90 	.word	0xe000ed90
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	785a      	ldrb	r2, [r3, #1]
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_MPU_ConfigRegion+0x84>)
 8003a92:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d029      	beq.n	8003af0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_MPU_ConfigRegion+0x84>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7b1b      	ldrb	r3, [r3, #12]
 8003aa8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	7adb      	ldrb	r3, [r3, #11]
 8003aae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ab0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7a9b      	ldrb	r3, [r3, #10]
 8003ab6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ab8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7b5b      	ldrb	r3, [r3, #13]
 8003abe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ac0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7b9b      	ldrb	r3, [r3, #14]
 8003ac6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ac8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7bdb      	ldrb	r3, [r3, #15]
 8003ace:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ad0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7a5b      	ldrb	r3, [r3, #9]
 8003ad6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ad8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7a1b      	ldrb	r3, [r3, #8]
 8003ade:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ae0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003aea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003aec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003aee:	e005      	b.n	8003afc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_MPU_ConfigRegion+0x84>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_MPU_ConfigRegion+0x84>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed90 	.word	0xe000ed90

08003b0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e054      	b.n	8003bc8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7f5b      	ldrb	r3, [r3, #29]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fc20 	bl	8002374 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	791b      	ldrb	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_CRC_Init+0xc4>)
 8003b48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0218 	bic.w	r2, r2, #24
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	e00c      	b.n	8003b76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f834 	bl	8003bd4 <HAL_CRCEx_Polynomial_Set>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e028      	b.n	8003bc8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	795b      	ldrb	r3, [r3, #5]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f04f 32ff 	mov.w	r2, #4294967295
 8003b86:	611a      	str	r2, [r3, #16]
 8003b88:	e004      	b.n	8003b94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6912      	ldr	r2, [r2, #16]
 8003b92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	04c11db7 	.word	0x04c11db7

08003bd4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003be4:	231f      	movs	r3, #31
 8003be6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003be8:	bf00      	nop
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	613a      	str	r2, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_CRCEx_Polynomial_Set+0x34>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b18      	cmp	r3, #24
 8003c0c:	d846      	bhi.n	8003c9c <HAL_CRCEx_Polynomial_Set+0xc8>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003ca3 	.word	0x08003ca3
 8003c18:	08003c9d 	.word	0x08003c9d
 8003c1c:	08003c9d 	.word	0x08003c9d
 8003c20:	08003c9d 	.word	0x08003c9d
 8003c24:	08003c9d 	.word	0x08003c9d
 8003c28:	08003c9d 	.word	0x08003c9d
 8003c2c:	08003c9d 	.word	0x08003c9d
 8003c30:	08003c9d 	.word	0x08003c9d
 8003c34:	08003c91 	.word	0x08003c91
 8003c38:	08003c9d 	.word	0x08003c9d
 8003c3c:	08003c9d 	.word	0x08003c9d
 8003c40:	08003c9d 	.word	0x08003c9d
 8003c44:	08003c9d 	.word	0x08003c9d
 8003c48:	08003c9d 	.word	0x08003c9d
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003c9d 	.word	0x08003c9d
 8003c54:	08003c85 	.word	0x08003c85
 8003c58:	08003c9d 	.word	0x08003c9d
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c9d 	.word	0x08003c9d
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003c79 	.word	0x08003c79
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d913      	bls.n	8003ca6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c82:	e010      	b.n	8003ca6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b07      	cmp	r3, #7
 8003c88:	d90f      	bls.n	8003caa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	d90b      	bls.n	8003cae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003c9a:	e008      	b.n	8003cae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	e006      	b.n	8003cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e004      	b.n	8003cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003cae:	bf00      	nop
  }
  if (status == HAL_OK)
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 0118 	bic.w	r1, r3, #24
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e062      	b.n	8003db8 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fe fb58 	bl	80023b4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <HAL_DCMI_Init+0xe0>)
 8003d18:	400b      	ands	r3, r1
 8003d1a:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003d30:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003d3c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003d48:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003d54:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003d60:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d112      	bne.n	8003d98 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7f1b      	ldrb	r3, [r3, #28]
 8003d76:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	7f5b      	ldrb	r3, [r3, #29]
 8003d7c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d7e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7f9b      	ldrb	r3, [r3, #30]
 8003d84:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003d86:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7fdb      	ldrb	r3, [r3, #31]
 8003d8e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003d94:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003d96:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 021e 	orr.w	r2, r2, #30
 8003da6:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	ffe0f007 	.word	0xffe0f007

08003dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_DMA_Start_IT+0x26>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e048      	b.n	8003e7c <HAL_DMA_Start_IT+0xb8>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d137      	bne.n	8003e6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f8d4 	bl	8003fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	223f      	movs	r2, #63	; 0x3f
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0216 	orr.w	r2, r2, #22
 8003e32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e005      	b.n	8003e7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e92:	f7ff fa27 	bl	80032e4 <HAL_GetTick>
 8003e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d008      	beq.n	8003eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e052      	b.n	8003f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0216 	bic.w	r2, r2, #22
 8003ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_DMA_Abort+0x62>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0208 	bic.w	r2, r2, #8
 8003ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f06:	e013      	b.n	8003f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f08:	f7ff f9ec 	bl	80032e4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d90c      	bls.n	8003f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2203      	movs	r2, #3
 8003f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e015      	b.n	8003f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e4      	bne.n	8003f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f42:	223f      	movs	r2, #63	; 0x3f
 8003f44:	409a      	lsls	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d004      	beq.n	8003f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2280      	movs	r2, #128	; 0x80
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00c      	b.n	8003f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d108      	bne.n	8004000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ffe:	e007      	b.n	8004010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e039      	b.n	80040a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f017 fe52 	bl	801bcec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	f023 0107 	bic.w	r1, r3, #7
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_DMA2D_Init+0x90>)
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d1      	ldr	r1, [r2, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	430b      	orrs	r3, r1
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	ffffc000 	.word	0xffffc000

080040b0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e05f      	b.n	8004182 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80040c2:	4b32      	ldr	r3, [pc, #200]	; (800418c <HAL_DMA2D_DeInit+0xdc>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02e      	beq.n	800412c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f8c1 	bl	8004264 <HAL_DMA2D_Abort>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d021      	beq.n	800412c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e04a      	b.n	8004182 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d108      	bne.n	800410c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80040fa:	2100      	movs	r1, #0
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8f7 	bl	80042f0 <HAL_DMA2D_CLUTLoading_Abort>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d011      	beq.n	800412c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e03a      	b.n	8004182 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b20      	cmp	r3, #32
 8004118:	d108      	bne.n	800412c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800411a:	2101      	movs	r1, #1
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8e7 	bl	80042f0 <HAL_DMA2D_CLUTLoading_Abort>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e02a      	b.n	8004182 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	223f      	movs	r2, #63	; 0x3f
 800413a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2200      	movs	r2, #0
 8004152:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2200      	movs	r2, #0
 800415a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f017 fde7 	bl	801bd38 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800

08004190 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_DMA2D_Start_IT+0x1c>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e020      	b.n	80041ee <HAL_DMA2D_Start_IT+0x5e>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa84 	bl	80046d4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80041da:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af02      	add	r7, sp, #8
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_DMA2D_BlendingStart_IT+0x1c>
 800420e:	2302      	movs	r3, #2
 8004210:	e024      	b.n	800425c <HAL_DMA2D_BlendingStart_IT+0x66>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fa4d 	bl	80046d4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004248:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0205 	bic.w	r2, r3, #5
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0204 	orr.w	r2, r2, #4
 800427e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004280:	f7ff f830 	bl	80032e4 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004286:	e017      	b.n	80042b8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004288:	f7ff f82c 	bl	80032e4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004296:	d90f      	bls.n	80042b8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2203      	movs	r2, #3
 80042a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e017      	b.n	80042e8 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e0      	bne.n	8004288 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80042d4:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3324      	adds	r3, #36	; 0x24
 8004300:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0204 	orr.w	r2, r2, #4
 8004310:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d103      	bne.n	8004320 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	331c      	adds	r3, #28
 800431e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8004320:	f7fe ffe0 	bl	80032e4 <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004326:	e017      	b.n	8004358 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004328:	f7fe ffdc 	bl	80032e4 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004336:	d90f      	bls.n	8004358 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2203      	movs	r2, #3
 8004348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e016      	b.n	8004386 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e1      	bne.n	8004328 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004372:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d026      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d021      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2201      	movs	r2, #1
 80043dc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d026      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2220      	movs	r2, #32
 8004428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	f043 0202 	orr.w	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d026      	beq.n	80044ae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004466:	2b00      	cmp	r3, #0
 8004468:	d021      	beq.n	80044ae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2208      	movs	r2, #8
 8004480:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	f043 0204 	orr.w	r2, r3, #4
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2204      	movs	r2, #4
 8004492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00e      	beq.n	80044e0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2204      	movs	r2, #4
 80044d8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f853 	bl	8004586 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d024      	beq.n	8004534 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01f      	beq.n	8004534 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004502:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2202      	movs	r2, #2
 800450a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01f      	beq.n	800457e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01a      	beq.n	800457e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004556:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2210      	movs	r2, #16
 800455e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f80e 	bl	800459a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_DMA2D_ConfigLayer+0x20>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e079      	b.n	80046c4 <HAL_DMA2D_ConfigLayer+0x114>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	3318      	adds	r3, #24
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80045fa:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <HAL_DMA2D_ConfigLayer+0x120>)
 80045fc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b0a      	cmp	r3, #10
 8004604:	d003      	beq.n	800460e <HAL_DMA2D_ConfigLayer+0x5e>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b09      	cmp	r3, #9
 800460c:	d107      	bne.n	800461e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e005      	b.n	800462a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	061b      	lsls	r3, r3, #24
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d120      	bne.n	8004672 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43db      	mvns	r3, r3
 800463a:	ea02 0103 	and.w	r1, r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	430a      	orrs	r2, r1
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b0a      	cmp	r3, #10
 8004658:	d003      	beq.n	8004662 <HAL_DMA2D_ConfigLayer+0xb2>
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b09      	cmp	r3, #9
 8004660:	d127      	bne.n	80046b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800466e:	629a      	str	r2, [r3, #40]	; 0x28
 8004670:	e01f      	b.n	80046b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	43db      	mvns	r3, r3
 800467c:	ea02 0103 	and.w	r1, r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	430a      	orrs	r2, r1
 8004688:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b0a      	cmp	r3, #10
 800469a:	d003      	beq.n	80046a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	d106      	bne.n	80046b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046b0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	ff03000f 	.word	0xff03000f

080046d4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b08b      	sub	sp, #44	; 0x2c
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	041a      	lsls	r2, r3, #16
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800470c:	d174      	bne.n	80047f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004714:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800471c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004724:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d108      	bne.n	8004746 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	431a      	orrs	r2, r3
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	e053      	b.n	80047ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d106      	bne.n	800475c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4313      	orrs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
 800475a:	e048      	b.n	80047ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d111      	bne.n	8004788 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	0cdb      	lsrs	r3, r3, #19
 8004768:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	0a9b      	lsrs	r3, r3, #10
 800476e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	02db      	lsls	r3, r3, #11
 800477e:	4313      	orrs	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
 8004786:	e032      	b.n	80047ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d117      	bne.n	80047c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	0fdb      	lsrs	r3, r3, #31
 8004794:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	0cdb      	lsrs	r3, r3, #19
 800479a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	0adb      	lsrs	r3, r3, #11
 80047a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	08db      	lsrs	r3, r3, #3
 80047a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	029b      	lsls	r3, r3, #10
 80047b0:	431a      	orrs	r2, r3
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	03db      	lsls	r3, r3, #15
 80047b6:	4313      	orrs	r3, r2
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	e016      	b.n	80047ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	0f1b      	lsrs	r3, r3, #28
 80047c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	0d1b      	lsrs	r3, r3, #20
 80047ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	0b1b      	lsrs	r3, r3, #12
 80047d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	011a      	lsls	r2, r3, #4
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	431a      	orrs	r2, r3
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	031b      	lsls	r3, r3, #12
 80047e6:	4313      	orrs	r3, r2
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80047f6:	e003      	b.n	8004800 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	60da      	str	r2, [r3, #12]
}
 8004800:	bf00      	nop
 8004802:	372c      	adds	r7, #44	; 0x2c
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e175      	b.n	8004b18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800482c:	2201      	movs	r2, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	f040 8164 	bne.w	8004b12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d003      	beq.n	800485a <HAL_GPIO_Init+0x4e>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b12      	cmp	r3, #18
 8004858:	d123      	bne.n	80048a2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	08da      	lsrs	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3208      	adds	r2, #8
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	08da      	lsrs	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3208      	adds	r2, #8
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2203      	movs	r2, #3
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d00b      	beq.n	80048f6 <HAL_GPIO_Init+0xea>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d007      	beq.n	80048f6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ea:	2b11      	cmp	r3, #17
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b12      	cmp	r3, #18
 80048f4:	d130      	bne.n	8004958 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	2203      	movs	r2, #3
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800492c:	2201      	movs	r2, #1
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 0201 	and.w	r2, r3, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80be 	beq.w	8004b12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004996:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <HAL_GPIO_Init+0x320>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	4a64      	ldr	r2, [pc, #400]	; (8004b2c <HAL_GPIO_Init+0x320>)
 800499c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a0:	6453      	str	r3, [r2, #68]	; 0x44
 80049a2:	4b62      	ldr	r3, [pc, #392]	; (8004b2c <HAL_GPIO_Init+0x320>)
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049ae:	4a60      	ldr	r2, [pc, #384]	; (8004b30 <HAL_GPIO_Init+0x324>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a57      	ldr	r2, [pc, #348]	; (8004b34 <HAL_GPIO_Init+0x328>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d037      	beq.n	8004a4a <HAL_GPIO_Init+0x23e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <HAL_GPIO_Init+0x32c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_GPIO_Init+0x23a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a55      	ldr	r2, [pc, #340]	; (8004b3c <HAL_GPIO_Init+0x330>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <HAL_GPIO_Init+0x236>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a54      	ldr	r2, [pc, #336]	; (8004b40 <HAL_GPIO_Init+0x334>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d025      	beq.n	8004a3e <HAL_GPIO_Init+0x232>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <HAL_GPIO_Init+0x338>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <HAL_GPIO_Init+0x22e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_GPIO_Init+0x33c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <HAL_GPIO_Init+0x22a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a51      	ldr	r2, [pc, #324]	; (8004b4c <HAL_GPIO_Init+0x340>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0x226>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a50      	ldr	r2, [pc, #320]	; (8004b50 <HAL_GPIO_Init+0x344>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_GPIO_Init+0x222>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4f      	ldr	r2, [pc, #316]	; (8004b54 <HAL_GPIO_Init+0x348>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <HAL_GPIO_Init+0x21e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4e      	ldr	r2, [pc, #312]	; (8004b58 <HAL_GPIO_Init+0x34c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_GPIO_Init+0x21a>
 8004a22:	2309      	movs	r3, #9
 8004a24:	e012      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a26:	230a      	movs	r3, #10
 8004a28:	e010      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	e00e      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a2e:	2307      	movs	r3, #7
 8004a30:	e00c      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a32:	2306      	movs	r3, #6
 8004a34:	e00a      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a36:	2305      	movs	r3, #5
 8004a38:	e008      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e006      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e004      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e002      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_GPIO_Init+0x240>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	f002 0203 	and.w	r2, r2, #3
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	4093      	lsls	r3, r2
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a5c:	4934      	ldr	r1, [pc, #208]	; (8004b30 <HAL_GPIO_Init+0x324>)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	3302      	adds	r3, #2
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a6a:	4b3c      	ldr	r3, [pc, #240]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a8e:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ab8:	4a28      	ldr	r2, [pc, #160]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004abe:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <HAL_GPIO_Init+0x350>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3301      	adds	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b0f      	cmp	r3, #15
 8004b1c:	f67f ae86 	bls.w	800482c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b20:	bf00      	nop
 8004b22:	3724      	adds	r7, #36	; 0x24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40013800 	.word	0x40013800
 8004b34:	40020000 	.word	0x40020000
 8004b38:	40020400 	.word	0x40020400
 8004b3c:	40020800 	.word	0x40020800
 8004b40:	40020c00 	.word	0x40020c00
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40021400 	.word	0x40021400
 8004b4c:	40021800 	.word	0x40021800
 8004b50:	40021c00 	.word	0x40021c00
 8004b54:	40022000 	.word	0x40022000
 8004b58:	40022400 	.word	0x40022400
 8004b5c:	40013c00 	.word	0x40013c00

08004b60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e0d9      	b.n	8004d30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	f040 80c9 	bne.w	8004d2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004b98:	4a6a      	ldr	r2, [pc, #424]	; (8004d44 <HAL_GPIO_DeInit+0x1e4>)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	220f      	movs	r2, #15
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a62      	ldr	r2, [pc, #392]	; (8004d48 <HAL_GPIO_DeInit+0x1e8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d037      	beq.n	8004c32 <HAL_GPIO_DeInit+0xd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a61      	ldr	r2, [pc, #388]	; (8004d4c <HAL_GPIO_DeInit+0x1ec>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_GPIO_DeInit+0xce>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a60      	ldr	r2, [pc, #384]	; (8004d50 <HAL_GPIO_DeInit+0x1f0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02b      	beq.n	8004c2a <HAL_GPIO_DeInit+0xca>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a5f      	ldr	r2, [pc, #380]	; (8004d54 <HAL_GPIO_DeInit+0x1f4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d025      	beq.n	8004c26 <HAL_GPIO_DeInit+0xc6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a5e      	ldr	r2, [pc, #376]	; (8004d58 <HAL_GPIO_DeInit+0x1f8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <HAL_GPIO_DeInit+0xc2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a5d      	ldr	r2, [pc, #372]	; (8004d5c <HAL_GPIO_DeInit+0x1fc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d019      	beq.n	8004c1e <HAL_GPIO_DeInit+0xbe>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a5c      	ldr	r2, [pc, #368]	; (8004d60 <HAL_GPIO_DeInit+0x200>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_GPIO_DeInit+0xba>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a5b      	ldr	r2, [pc, #364]	; (8004d64 <HAL_GPIO_DeInit+0x204>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00d      	beq.n	8004c16 <HAL_GPIO_DeInit+0xb6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a5a      	ldr	r2, [pc, #360]	; (8004d68 <HAL_GPIO_DeInit+0x208>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <HAL_GPIO_DeInit+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a59      	ldr	r2, [pc, #356]	; (8004d6c <HAL_GPIO_DeInit+0x20c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_GPIO_DeInit+0xae>
 8004c0a:	2309      	movs	r3, #9
 8004c0c:	e012      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e010      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c12:	2308      	movs	r3, #8
 8004c14:	e00e      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c16:	2307      	movs	r3, #7
 8004c18:	e00c      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c1a:	2306      	movs	r3, #6
 8004c1c:	e00a      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c1e:	2305      	movs	r3, #5
 8004c20:	e008      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c22:	2304      	movs	r3, #4
 8004c24:	e006      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c26:	2303      	movs	r3, #3
 8004c28:	e004      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e002      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_GPIO_DeInit+0xd4>
 8004c32:	2300      	movs	r3, #0
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	f002 0203 	and.w	r2, r2, #3
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	4093      	lsls	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d132      	bne.n	8004caa <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004c54:	4a3b      	ldr	r2, [pc, #236]	; (8004d44 <HAL_GPIO_DeInit+0x1e4>)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	43da      	mvns	r2, r3
 8004c64:	4837      	ldr	r0, [pc, #220]	; (8004d44 <HAL_GPIO_DeInit+0x1e4>)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	493d      	ldr	r1, [pc, #244]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4939      	ldr	r1, [pc, #228]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	4936      	ldr	r1, [pc, #216]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c9c:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	4932      	ldr	r1, [pc, #200]	; (8004d70 <HAL_GPIO_DeInit+0x210>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	08da      	lsrs	r2, r3, #3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3208      	adds	r2, #8
 8004cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	08d2      	lsrs	r2, r2, #3
 8004ce0:	4019      	ands	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3208      	adds	r2, #8
 8004ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2103      	movs	r1, #3
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	2101      	movs	r1, #1
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	401a      	ands	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2103      	movs	r1, #3
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	f67f af22 	bls.w	8004b7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40013800 	.word	0x40013800
 8004d48:	40020000 	.word	0x40020000
 8004d4c:	40020400 	.word	0x40020400
 8004d50:	40020800 	.word	0x40020800
 8004d54:	40020c00 	.word	0x40020c00
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40021400 	.word	0x40021400
 8004d60:	40021800 	.word	0x40021800
 8004d64:	40021c00 	.word	0x40021c00
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40022400 	.word	0x40022400
 8004d70:	40013c00 	.word	0x40013c00

08004d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e001      	b.n	8004d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db4:	787b      	ldrb	r3, [r7, #1]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004dc0:	e003      	b.n	8004dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dc2:	887b      	ldrh	r3, [r7, #2]
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	401a      	ands	r2, r3
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d104      	bne.n	8004dfa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	041a      	lsls	r2, r3, #16
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004df8:	e002      	b.n	8004e00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	b08d      	sub	sp, #52	; 0x34
 8004e10:	af0a      	add	r7, sp, #40	; 0x28
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e048      	b.n	8004eb0 <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f018 f90e 	bl	801d054 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f009 fbda 	bl	800e5fe <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	687e      	ldr	r6, [r7, #4]
 8004e52:	466d      	mov	r5, sp
 8004e54:	f106 0410 	add.w	r4, r6, #16
 8004e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e64:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e68:	1d33      	adds	r3, r6, #4
 8004e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e6c:	6838      	ldr	r0, [r7, #0]
 8004e6e:	f009 fb5d 	bl	800e52c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f009 fbd1 	bl	800e620 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	687e      	ldr	r6, [r7, #4]
 8004e86:	466d      	mov	r5, sp
 8004e88:	f106 0410 	add.w	r4, r6, #16
 8004e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e98:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e9c:	1d33      	adds	r3, r6, #4
 8004e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea0:	6838      	ldr	r0, [r7, #0]
 8004ea2:	f009 fce3 	bl	800e86c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af04      	add	r7, sp, #16
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70bb      	strb	r3, [r7, #2]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_HCD_HC_Init+0x28>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e07f      	b.n	8004fe0 <HAL_HCD_HC_Init+0x128>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004ee8:	78fa      	ldrb	r2, [r7, #3]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	440b      	add	r3, r1
 8004ef6:	333d      	adds	r3, #61	; 0x3d
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	3338      	adds	r3, #56	; 0x38
 8004f0c:	787a      	ldrb	r2, [r7, #1]
 8004f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3340      	adds	r3, #64	; 0x40
 8004f20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f22:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	440b      	add	r3, r1
 8004f32:	3339      	adds	r3, #57	; 0x39
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	333f      	adds	r3, #63	; 0x3f
 8004f48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004f4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	78bb      	ldrb	r3, [r7, #2]
 8004f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f56:	b2d8      	uxtb	r0, r3
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	333a      	adds	r3, #58	; 0x3a
 8004f66:	4602      	mov	r2, r0
 8004f68:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da0a      	bge.n	8004f88 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	333b      	adds	r3, #59	; 0x3b
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e009      	b.n	8004f9c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	440b      	add	r3, r1
 8004f96:	333b      	adds	r3, #59	; 0x3b
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	440b      	add	r3, r1
 8004faa:	333c      	adds	r3, #60	; 0x3c
 8004fac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004fb0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	787c      	ldrb	r4, [r7, #1]
 8004fb8:	78ba      	ldrb	r2, [r7, #2]
 8004fba:	78f9      	ldrb	r1, [r7, #3]
 8004fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fbe:	9302      	str	r3, [sp, #8]
 8004fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4623      	mov	r3, r4
 8004fce:	f009 fdc3 	bl	800eb58 <USB_HC_Init>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}

08004fe8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_HCD_HC_Halt+0x1e>
 8005002:	2302      	movs	r3, #2
 8005004:	e00f      	b.n	8005026 <HAL_HCD_HC_Halt+0x3e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f009 fffd 	bl	800f016 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	4603      	mov	r3, r0
 8005040:	70fb      	strb	r3, [r7, #3]
 8005042:	460b      	mov	r3, r1
 8005044:	70bb      	strb	r3, [r7, #2]
 8005046:	4613      	mov	r3, r2
 8005048:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	440b      	add	r3, r1
 8005058:	333b      	adds	r3, #59	; 0x3b
 800505a:	78ba      	ldrb	r2, [r7, #2]
 800505c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	333f      	adds	r3, #63	; 0x3f
 800506e:	787a      	ldrb	r2, [r7, #1]
 8005070:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005072:	7c3b      	ldrb	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	3342      	adds	r3, #66	; 0x42
 8005088:	2203      	movs	r2, #3
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e009      	b.n	80050a2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	440b      	add	r3, r1
 800509c:	3342      	adds	r3, #66	; 0x42
 800509e:	2202      	movs	r2, #2
 80050a0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80050a2:	787b      	ldrb	r3, [r7, #1]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	f200 80d6 	bhi.w	8005256 <HAL_HCD_HC_SubmitRequest+0x226>
 80050aa:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <HAL_HCD_HC_SubmitRequest+0x80>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	08005241 	.word	0x08005241
 80050b8:	0800512d 	.word	0x0800512d
 80050bc:	080051b7 	.word	0x080051b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80050c0:	7c3b      	ldrb	r3, [r7, #16]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	f040 80c9 	bne.w	800525a <HAL_HCD_HC_SubmitRequest+0x22a>
 80050c8:	78bb      	ldrb	r3, [r7, #2]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f040 80c5 	bne.w	800525a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80050d0:	8b3b      	ldrh	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	440b      	add	r3, r1
 80050e4:	3351      	adds	r3, #81	; 0x51
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	3351      	adds	r3, #81	; 0x51
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	3342      	adds	r3, #66	; 0x42
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005114:	e0a1      	b.n	800525a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	440b      	add	r3, r1
 8005124:	3342      	adds	r3, #66	; 0x42
 8005126:	2202      	movs	r2, #2
 8005128:	701a      	strb	r2, [r3, #0]
      break;
 800512a:	e096      	b.n	800525a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800512c:	78bb      	ldrb	r3, [r7, #2]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d120      	bne.n	8005174 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	440b      	add	r3, r1
 8005140:	3351      	adds	r3, #81	; 0x51
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	3342      	adds	r3, #66	; 0x42
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800515c:	e07e      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	3342      	adds	r3, #66	; 0x42
 800516e:	2202      	movs	r2, #2
 8005170:	701a      	strb	r2, [r3, #0]
      break;
 8005172:	e073      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	440b      	add	r3, r1
 8005182:	3350      	adds	r3, #80	; 0x50
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3342      	adds	r3, #66	; 0x42
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
      break;
 800519e:	e05d      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	440b      	add	r3, r1
 80051ae:	3342      	adds	r3, #66	; 0x42
 80051b0:	2202      	movs	r2, #2
 80051b2:	701a      	strb	r2, [r3, #0]
      break;
 80051b4:	e052      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80051b6:	78bb      	ldrb	r3, [r7, #2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d120      	bne.n	80051fe <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	3351      	adds	r3, #81	; 0x51
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	3342      	adds	r3, #66	; 0x42
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80051e6:	e039      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	3342      	adds	r3, #66	; 0x42
 80051f8:	2202      	movs	r2, #2
 80051fa:	701a      	strb	r2, [r3, #0]
      break;
 80051fc:	e02e      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	3350      	adds	r3, #80	; 0x50
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	440b      	add	r3, r1
 8005222:	3342      	adds	r3, #66	; 0x42
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
      break;
 8005228:	e018      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	3342      	adds	r3, #66	; 0x42
 800523a:	2202      	movs	r2, #2
 800523c:	701a      	strb	r2, [r3, #0]
      break;
 800523e:	e00d      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3342      	adds	r3, #66	; 0x42
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
      break;
 8005254:	e002      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800525a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	3344      	adds	r3, #68	; 0x44
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	8b39      	ldrh	r1, [r7, #24]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4403      	add	r3, r0
 8005280:	3348      	adds	r3, #72	; 0x48
 8005282:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	440b      	add	r3, r1
 8005292:	335c      	adds	r3, #92	; 0x5c
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	334c      	adds	r3, #76	; 0x4c
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	440b      	add	r3, r1
 80052ba:	3339      	adds	r3, #57	; 0x39
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	335d      	adds	r3, #93	; 0x5d
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	3338      	adds	r3, #56	; 0x38
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	18d1      	adds	r1, r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	f009 fd3c 	bl	800ed6c <USB_HC_StartXfer>
 80052f4:	4603      	mov	r3, r0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop

08005300 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f009 fa65 	bl	800e7e6 <USB_GetMode>
 800531c:	4603      	mov	r3, r0
 800531e:	2b01      	cmp	r3, #1
 8005320:	f040 80f1 	bne.w	8005506 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f009 fa49 	bl	800e7c0 <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80e7 	beq.w	8005504 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f009 fa40 	bl	800e7c0 <USB_ReadInterrupts>
 8005340:	4603      	mov	r3, r0
 8005342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800534a:	d104      	bne.n	8005356 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005354:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f009 fa30 	bl	800e7c0 <USB_ReadInterrupts>
 8005360:	4603      	mov	r3, r0
 8005362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536a:	d104      	bne.n	8005376 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005374:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f009 fa20 	bl	800e7c0 <USB_ReadInterrupts>
 8005380:	4603      	mov	r3, r0
 8005382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800538a:	d104      	bne.n	8005396 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005394:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f009 fa10 	bl	800e7c0 <USB_ReadInterrupts>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d103      	bne.n	80053b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2202      	movs	r2, #2
 80053b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f009 fa02 	bl	800e7c0 <USB_ReadInterrupts>
 80053bc:	4603      	mov	r3, r0
 80053be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c6:	d117      	bne.n	80053f8 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053da:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f017 feab 	bl	801d138 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2101      	movs	r1, #1
 80053e8:	4618      	mov	r0, r3
 80053ea:	f009 faef 	bl	800e9cc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f009 f9df 	bl	800e7c0 <USB_ReadInterrupts>
 8005402:	4603      	mov	r3, r0
 8005404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800540c:	d102      	bne.n	8005414 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 f8c8 	bl	80065a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f009 f9d1 	bl	800e7c0 <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d106      	bne.n	8005436 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f017 fe69 	bl	801d100 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2208      	movs	r2, #8
 8005434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f009 f9c0 	bl	800e7c0 <USB_ReadInterrupts>
 8005440:	4603      	mov	r3, r0
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800544a:	d138      	bne.n	80054be <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f009 fdcf 	bl	800eff4 <USB_HC_ReadInterrupt>
 8005456:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e025      	b.n	80054aa <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	fa22 f303 	lsr.w	r3, r2, r3
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	d106      	bne.n	8005498 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8cf 	bl	8005634 <HCD_HC_IN_IRQHandler>
 8005496:	e005      	b.n	80054a4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fc5f 	bl	8005d62 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	3301      	adds	r3, #1
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3d4      	bcc.n	800545e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f009 f97c 	bl	800e7c0 <USB_ReadInterrupts>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d101      	bne.n	80054d6 <HAL_HCD_IRQHandler+0x1d6>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_HCD_IRQHandler+0x1d8>
 80054d6:	2300      	movs	r3, #0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d014      	beq.n	8005506 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0210 	bic.w	r2, r2, #16
 80054ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 ffad 	bl	800644c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0210 	orr.w	r2, r2, #16
 8005500:	619a      	str	r2, [r3, #24]
 8005502:	e000      	b.n	8005506 <HAL_HCD_IRQHandler+0x206>
      return;
 8005504:	bf00      	nop
    }
  }
}
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_HCD_Start+0x16>
 800551e:	2302      	movs	r3, #2
 8005520:	e013      	b.n	800554a <HAL_HCD_Start+0x3e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f009 f854 	bl	800e5dc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2101      	movs	r1, #1
 800553a:	4618      	mov	r0, r3
 800553c:	f009 faaa 	bl	800ea94 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_HCD_Stop+0x16>
 8005564:	2302      	movs	r3, #2
 8005566:	e00d      	b.n	8005584 <HAL_HCD_Stop+0x32>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f009 fe89 	bl	800f28c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f009 fa51 	bl	800ea40 <USB_ResetPort>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	335c      	adds	r3, #92	; 0x5c
 80055c4:	781b      	ldrb	r3, [r3, #0]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80055de:	78fa      	ldrb	r2, [r7, #3]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	334c      	adds	r3, #76	; 0x4c
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f009 fa93 	bl	800eb34 <USB_GetCurrentFrame>
 800560e:	4603      	mov	r3, r0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f009 fa6e 	bl	800eb06 <USB_GetHostSpeed>
 800562a:	4603      	mov	r3, r0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d119      	bne.n	8005698 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	461a      	mov	r2, r3
 8005672:	2304      	movs	r3, #4
 8005674:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	440a      	add	r2, r1
 800568c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	60d3      	str	r3, [r2, #12]
 8005696:	e095      	b.n	80057c4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d109      	bne.n	80056c2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	461a      	mov	r2, r3
 80056bc:	2320      	movs	r3, #32
 80056be:	6093      	str	r3, [r2, #8]
 80056c0:	e080      	b.n	80057c4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d134      	bne.n	8005742 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	0151      	lsls	r1, r2, #5
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	440a      	add	r2, r1
 80056ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f2:	f043 0302 	orr.w	r3, r3, #2
 80056f6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	440b      	add	r3, r1
 8005706:	335d      	adds	r3, #93	; 0x5d
 8005708:	2205      	movs	r2, #5
 800570a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	461a      	mov	r2, r3
 800571a:	2310      	movs	r3, #16
 800571c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	461a      	mov	r2, r3
 800572c:	2308      	movs	r3, #8
 800572e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f009 fc6b 	bl	800f016 <USB_HC_Halt>
 8005740:	e040      	b.n	80057c4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005758:	d134      	bne.n	80057c4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	440a      	add	r2, r1
 8005770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005774:	f043 0302 	orr.w	r3, r3, #2
 8005778:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f009 fc46 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	461a      	mov	r2, r3
 8005798:	2310      	movs	r3, #16
 800579a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335d      	adds	r3, #93	; 0x5d
 80057ac:	2208      	movs	r2, #8
 80057ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	461a      	mov	r2, r3
 80057be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057da:	d122      	bne.n	8005822 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	4611      	mov	r1, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f009 fc05 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005818:	461a      	mov	r2, r3
 800581a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800581e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005820:	e29b      	b.n	8005d5a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b01      	cmp	r3, #1
 8005836:	f040 80c1 	bne.w	80059bc <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01b      	beq.n	800587a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	3348      	adds	r3, #72	; 0x48
 8005852:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0159      	lsls	r1, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	440b      	add	r3, r1
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005866:	1ad1      	subs	r1, r2, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4403      	add	r3, r0
 8005876:	334c      	adds	r3, #76	; 0x4c
 8005878:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	335d      	adds	r3, #93	; 0x5d
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	440b      	add	r3, r1
 800589c:	3358      	adds	r3, #88	; 0x58
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	461a      	mov	r2, r3
 80058b0:	2301      	movs	r3, #1
 80058b2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	333f      	adds	r3, #63	; 0x3f
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	333f      	adds	r3, #63	; 0x3f
 80058da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d121      	bne.n	8005924 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058fa:	f043 0302 	orr.w	r3, r3, #2
 80058fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f009 fb83 	bl	800f016 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	461a      	mov	r2, r3
 800591e:	2310      	movs	r3, #16
 8005920:	6093      	str	r3, [r2, #8]
 8005922:	e034      	b.n	800598e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	333f      	adds	r3, #63	; 0x3f
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d129      	bne.n	800598e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	440a      	add	r2, r1
 8005950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005958:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	335c      	adds	r3, #92	; 0x5c
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	b2d8      	uxtb	r0, r3
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	440b      	add	r3, r1
 8005980:	335c      	adds	r3, #92	; 0x5c
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	4601      	mov	r1, r0
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f017 fbe3 	bl	801d154 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	440b      	add	r3, r1
 800599c:	3350      	adds	r3, #80	; 0x50
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f083 0301 	eor.w	r3, r3, #1
 80059a4:	b2d8      	uxtb	r0, r3
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	440b      	add	r3, r1
 80059b4:	3350      	adds	r3, #80	; 0x50
 80059b6:	4602      	mov	r2, r0
 80059b8:	701a      	strb	r2, [r3, #0]
}
 80059ba:	e1ce      	b.n	8005d5a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	f040 80f1 	bne.w	8005bb6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ee:	f023 0302 	bic.w	r3, r3, #2
 80059f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	440b      	add	r3, r1
 8005a02:	335d      	adds	r3, #93	; 0x5d
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d10a      	bne.n	8005a20 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	440b      	add	r3, r1
 8005a18:	335c      	adds	r3, #92	; 0x5c
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e0b0      	b.n	8005b82 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	440b      	add	r3, r1
 8005a2e:	335d      	adds	r3, #93	; 0x5d
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b05      	cmp	r3, #5
 8005a34:	d10a      	bne.n	8005a4c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	440b      	add	r3, r1
 8005a44:	335c      	adds	r3, #92	; 0x5c
 8005a46:	2205      	movs	r2, #5
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e09a      	b.n	8005b82 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	440b      	add	r3, r1
 8005a5a:	335d      	adds	r3, #93	; 0x5d
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d00a      	beq.n	8005a78 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	440b      	add	r3, r1
 8005a70:	335d      	adds	r3, #93	; 0x5d
 8005a72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d156      	bne.n	8005b26 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	440b      	add	r3, r1
 8005a86:	3358      	adds	r3, #88	; 0x58
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4403      	add	r3, r0
 8005a9a:	3358      	adds	r3, #88	; 0x58
 8005a9c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	440b      	add	r3, r1
 8005aac:	3358      	adds	r3, #88	; 0x58
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d914      	bls.n	8005ade <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3358      	adds	r3, #88	; 0x58
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	335c      	adds	r3, #92	; 0x5c
 8005ad8:	2204      	movs	r2, #4
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	e009      	b.n	8005af2 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	440b      	add	r3, r1
 8005aec:	335c      	adds	r3, #92	; 0x5c
 8005aee:	2202      	movs	r2, #2
 8005af0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b08:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b10:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e02d      	b.n	8005b82 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	440b      	add	r3, r1
 8005b34:	335d      	adds	r3, #93	; 0x5d
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d122      	bne.n	8005b82 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
 8005b4a:	335c      	adds	r3, #92	; 0x5c
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2302      	movs	r3, #2
 8005b92:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	b2d8      	uxtb	r0, r3
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	440b      	add	r3, r1
 8005ba6:	335c      	adds	r3, #92	; 0x5c
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	4601      	mov	r1, r0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f017 fad0 	bl	801d154 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005bb4:	e0d1      	b.n	8005d5a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc8:	2b80      	cmp	r3, #128	; 0x80
 8005bca:	d13e      	bne.n	8005c4a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	440b      	add	r3, r1
 8005bfa:	3358      	adds	r3, #88	; 0x58
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	4403      	add	r3, r0
 8005c0e:	3358      	adds	r3, #88	; 0x58
 8005c10:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	440b      	add	r3, r1
 8005c20:	335d      	adds	r3, #93	; 0x5d
 8005c22:	2206      	movs	r2, #6
 8005c24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f009 f9f0 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c42:	461a      	mov	r2, r3
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	6093      	str	r3, [r2, #8]
}
 8005c48:	e087      	b.n	8005d5a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d17c      	bne.n	8005d5a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	333f      	adds	r3, #63	; 0x3f
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d122      	bne.n	8005cbc <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	440b      	add	r3, r1
 8005c84:	3358      	adds	r3, #88	; 0x58
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f009 f9ae 	bl	800f016 <USB_HC_Halt>
 8005cba:	e045      	b.n	8005d48 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	440b      	add	r3, r1
 8005cca:	333f      	adds	r3, #63	; 0x3f
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	440b      	add	r3, r1
 8005ce0:	333f      	adds	r3, #63	; 0x3f
 8005ce2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d12f      	bne.n	8005d48 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3358      	adds	r3, #88	; 0x58
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d121      	bne.n	8005d48 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	335d      	adds	r3, #93	; 0x5d
 8005d14:	2203      	movs	r2, #3
 8005d16:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f043 0302 	orr.w	r3, r3, #2
 8005d36:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f009 f967 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	461a      	mov	r2, r3
 8005d56:	2310      	movs	r3, #16
 8005d58:	6093      	str	r3, [r2, #8]
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d119      	bne.n	8005dc6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2304      	movs	r3, #4
 8005da2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbe:	f043 0302 	orr.w	r3, r3, #2
 8005dc2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005dc4:	e33e      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d141      	bne.n	8005e60 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	2320      	movs	r3, #32
 8005dec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	333d      	adds	r3, #61	; 0x3d
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 831f 	bne.w	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	333d      	adds	r3, #61	; 0x3d
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	335c      	adds	r3, #92	; 0x5c
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e48:	f043 0302 	orr.w	r3, r3, #2
 8005e4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f009 f8dc 	bl	800f016 <USB_HC_Halt>
}
 8005e5e:	e2f1      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d13f      	bne.n	8005ef6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	335d      	adds	r3, #93	; 0x5d
 8005e86:	2204      	movs	r2, #4
 8005e88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	440b      	add	r3, r1
 8005e98:	333d      	adds	r3, #61	; 0x3d
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	440b      	add	r3, r1
 8005eac:	3358      	adds	r3, #88	; 0x58
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f009 f89a 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2340      	movs	r3, #64	; 0x40
 8005ef2:	6093      	str	r3, [r2, #8]
}
 8005ef4:	e2a6      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d122      	bne.n	8005f54 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f009 f86c 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f50:	6093      	str	r3, [r2, #8]
}
 8005f52:	e277      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d135      	bne.n	8005fd6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	440b      	add	r3, r1
 8005f78:	3358      	adds	r3, #88	; 0x58
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f009 f834 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fba:	461a      	mov	r2, r3
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	440b      	add	r3, r1
 8005fce:	335d      	adds	r3, #93	; 0x5d
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
}
 8005fd4:	e236      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d12b      	bne.n	8006044 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	0151      	lsls	r1, r2, #5
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	440a      	add	r2, r1
 8006014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f008 fff4 	bl	800f016 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	440b      	add	r3, r1
 800603c:	335d      	adds	r3, #93	; 0x5d
 800603e:	2205      	movs	r2, #5
 8006040:	701a      	strb	r2, [r3, #0]
}
 8006042:	e1ff      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b10      	cmp	r3, #16
 8006058:	d155      	bne.n	8006106 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	3358      	adds	r3, #88	; 0x58
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	440b      	add	r3, r1
 800607c:	335d      	adds	r3, #93	; 0x5d
 800607e:	2203      	movs	r2, #3
 8006080:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	440b      	add	r3, r1
 8006090:	333d      	adds	r3, #61	; 0x3d
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d114      	bne.n	80060c2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	440b      	add	r3, r1
 80060a6:	333c      	adds	r3, #60	; 0x3c
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	440b      	add	r3, r1
 80060bc:	333d      	adds	r3, #61	; 0x3d
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	4611      	mov	r1, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f008 ff92 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fe:	461a      	mov	r2, r3
 8006100:	2310      	movs	r3, #16
 8006102:	6093      	str	r3, [r2, #8]
}
 8006104:	e19e      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d12b      	bne.n	8006174 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	440a      	add	r2, r1
 8006132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	4611      	mov	r1, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f008 ff65 	bl	800f016 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	440b      	add	r3, r1
 800615a:	335d      	adds	r3, #93	; 0x5d
 800615c:	2206      	movs	r2, #6
 800615e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616c:	461a      	mov	r2, r3
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	6093      	str	r3, [r2, #8]
}
 8006172:	e167      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618a:	d135      	bne.n	80061f8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a6:	f043 0302 	orr.w	r3, r3, #2
 80061aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	4611      	mov	r1, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f008 ff2d 	bl	800f016 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	461a      	mov	r2, r3
 80061ca:	2310      	movs	r3, #16
 80061cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061da:	461a      	mov	r2, r3
 80061dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	440b      	add	r3, r1
 80061f0:	335d      	adds	r3, #93	; 0x5d
 80061f2:	2208      	movs	r2, #8
 80061f4:	701a      	strb	r2, [r3, #0]
}
 80061f6:	e125      	b.n	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b02      	cmp	r3, #2
 800620c:	f040 811a 	bne.w	8006444 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	440a      	add	r2, r1
 8006226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622a:	f023 0302 	bic.w	r3, r3, #2
 800622e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	440b      	add	r3, r1
 800623e:	335d      	adds	r3, #93	; 0x5d
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d137      	bne.n	80062b6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	440b      	add	r3, r1
 8006254:	335c      	adds	r3, #92	; 0x5c
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	333f      	adds	r3, #63	; 0x3f
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d00b      	beq.n	8006288 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	333f      	adds	r3, #63	; 0x3f
 8006280:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006282:	2b03      	cmp	r3, #3
 8006284:	f040 80c5 	bne.w	8006412 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	440b      	add	r3, r1
 8006296:	3351      	adds	r3, #81	; 0x51
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f083 0301 	eor.w	r3, r3, #1
 800629e:	b2d8      	uxtb	r0, r3
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	440b      	add	r3, r1
 80062ae:	3351      	adds	r3, #81	; 0x51
 80062b0:	4602      	mov	r2, r0
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e0ad      	b.n	8006412 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	440b      	add	r3, r1
 80062c4:	335d      	adds	r3, #93	; 0x5d
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d10a      	bne.n	80062e2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	440b      	add	r3, r1
 80062da:	335c      	adds	r3, #92	; 0x5c
 80062dc:	2202      	movs	r2, #2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e097      	b.n	8006412 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	440b      	add	r3, r1
 80062f0:	335d      	adds	r3, #93	; 0x5d
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d10a      	bne.n	800630e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	440b      	add	r3, r1
 8006306:	335c      	adds	r3, #92	; 0x5c
 8006308:	2202      	movs	r2, #2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e081      	b.n	8006412 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	440b      	add	r3, r1
 800631c:	335d      	adds	r3, #93	; 0x5d
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b05      	cmp	r3, #5
 8006322:	d10a      	bne.n	800633a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	440b      	add	r3, r1
 8006332:	335c      	adds	r3, #92	; 0x5c
 8006334:	2205      	movs	r2, #5
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	e06b      	b.n	8006412 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	440b      	add	r3, r1
 8006348:	335d      	adds	r3, #93	; 0x5d
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b06      	cmp	r3, #6
 800634e:	d00a      	beq.n	8006366 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	440b      	add	r3, r1
 800635e:	335d      	adds	r3, #93	; 0x5d
 8006360:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006362:	2b08      	cmp	r3, #8
 8006364:	d155      	bne.n	8006412 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	440b      	add	r3, r1
 8006374:	3358      	adds	r3, #88	; 0x58
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4403      	add	r3, r0
 8006388:	3358      	adds	r3, #88	; 0x58
 800638a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	440b      	add	r3, r1
 800639a:	3358      	adds	r3, #88	; 0x58
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d914      	bls.n	80063cc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	440b      	add	r3, r1
 80063b0:	3358      	adds	r3, #88	; 0x58
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	440b      	add	r3, r1
 80063c4:	335c      	adds	r3, #92	; 0x5c
 80063c6:	2204      	movs	r2, #4
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e009      	b.n	80063e0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	440b      	add	r3, r1
 80063da:	335c      	adds	r3, #92	; 0x5c
 80063dc:	2202      	movs	r2, #2
 80063de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	461a      	mov	r2, r3
 8006420:	2302      	movs	r3, #2
 8006422:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	b2d8      	uxtb	r0, r3
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	440b      	add	r3, r1
 8006436:	335c      	adds	r3, #92	; 0x5c
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	4601      	mov	r1, r0
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f016 fe88 	bl	801d154 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006444:	bf00      	nop
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	0c5b      	lsrs	r3, r3, #17
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006480:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d003      	beq.n	8006490 <HCD_RXQLVL_IRQHandler+0x44>
 8006488:	2b05      	cmp	r3, #5
 800648a:	f000 8082 	beq.w	8006592 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800648e:	e083      	b.n	8006598 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d07f      	beq.n	8006596 <HCD_RXQLVL_IRQHandler+0x14a>
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	440b      	add	r3, r1
 80064a4:	3344      	adds	r3, #68	; 0x44
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d074      	beq.n	8006596 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	440b      	add	r3, r1
 80064be:	3344      	adds	r3, #68	; 0x44
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	b292      	uxth	r2, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f008 f951 	bl	800e76e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	440b      	add	r3, r1
 80064da:	3344      	adds	r3, #68	; 0x44
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	18d1      	adds	r1, r2, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4403      	add	r3, r0
 80064f0:	3344      	adds	r3, #68	; 0x44
 80064f2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	440b      	add	r3, r1
 8006502:	334c      	adds	r3, #76	; 0x4c
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	18d1      	adds	r1, r2, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4403      	add	r3, r0
 8006518:	334c      	adds	r3, #76	; 0x4c
 800651a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <HCD_RXQLVL_IRQHandler+0x154>)
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d031      	beq.n	8006596 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006548:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006550:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	4413      	add	r3, r2
 800655a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	440b      	add	r3, r1
 8006572:	3350      	adds	r3, #80	; 0x50
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f083 0301 	eor.w	r3, r3, #1
 800657a:	b2d8      	uxtb	r0, r3
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	440b      	add	r3, r1
 800658a:	3350      	adds	r3, #80	; 0x50
 800658c:	4602      	mov	r2, r0
 800658e:	701a      	strb	r2, [r3, #0]
      break;
 8006590:	e001      	b.n	8006596 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006596:	bf00      	nop
  }
}
 8006598:	bf00      	nop
 800659a:	3728      	adds	r7, #40	; 0x28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	1ff80000 	.word	0x1ff80000

080065a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d113      	bne.n	8006604 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10a      	bne.n	80065fc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699a      	ldr	r2, [r3, #24]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80065f4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f016 fd90 	bl	801d11c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f043 0302 	orr.w	r3, r3, #2
 8006602:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b08      	cmp	r3, #8
 800660c:	d147      	bne.n	800669e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b04      	cmp	r3, #4
 800661e:	d129      	bne.n	8006674 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d113      	bne.n	8006650 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800662e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006632:	d106      	bne.n	8006642 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2102      	movs	r1, #2
 800663a:	4618      	mov	r0, r3
 800663c:	f008 f9c6 	bl	800e9cc <USB_InitFSLSPClkSel>
 8006640:	e011      	b.n	8006666 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2101      	movs	r1, #1
 8006648:	4618      	mov	r0, r3
 800664a:	f008 f9bf 	bl	800e9cc <USB_InitFSLSPClkSel>
 800664e:	e00a      	b.n	8006666 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d106      	bne.n	8006666 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800665e:	461a      	mov	r2, r3
 8006660:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006664:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f016 fd86 	bl	801d178 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f016 fd55 	bl	801d11c <HAL_HCD_Connect_Callback>
 8006672:	e014      	b.n	800669e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f016 fd8d 	bl	801d194 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006688:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800668c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800669c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d103      	bne.n	80066b0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f043 0320 	orr.w	r3, r3, #32
 80066ae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066b6:	461a      	mov	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6013      	str	r3, [r2, #0]
}
 80066bc:	bf00      	nop
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e07f      	b.n	80067d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fb ff20 	bl	8002530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2224      	movs	r2, #36	; 0x24
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e006      	b.n	800674c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800674a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d104      	bne.n	800675e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800675c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <HAL_I2C_Init+0x11c>)
 800676a:	430b      	orrs	r3, r1
 800676c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800677c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	ea42 0103 	orr.w	r1, r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	021a      	lsls	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69d9      	ldr	r1, [r3, #28]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	02008000 	.word	0x02008000

080067e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e021      	b.n	800683a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2224      	movs	r2, #36	; 0x24
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0201 	bic.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb ff06 	bl	8002620 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	4608      	mov	r0, r1
 800684e:	4611      	mov	r1, r2
 8006850:	461a      	mov	r2, r3
 8006852:	4603      	mov	r3, r0
 8006854:	817b      	strh	r3, [r7, #10]
 8006856:	460b      	mov	r3, r1
 8006858:	813b      	strh	r3, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b20      	cmp	r3, #32
 8006868:	f040 80f9 	bne.w	8006a5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_I2C_Mem_Write+0x34>
 8006872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0ed      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_I2C_Mem_Write+0x4e>
 800688e:	2302      	movs	r3, #2
 8006890:	e0e6      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800689a:	f7fc fd23 	bl	80032e4 <HAL_GetTick>
 800689e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2319      	movs	r3, #25
 80068a6:	2201      	movs	r2, #1
 80068a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fad1 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0d1      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2221      	movs	r2, #33	; 0x21
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2240      	movs	r2, #64	; 0x40
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a3a      	ldr	r2, [r7, #32]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068e4:	88f8      	ldrh	r0, [r7, #6]
 80068e6:	893a      	ldrh	r2, [r7, #8]
 80068e8:	8979      	ldrh	r1, [r7, #10]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4603      	mov	r3, r0
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f9e1 	bl	8006cbc <I2C_RequestMemoryWrite>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0a9      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	2bff      	cmp	r3, #255	; 0xff
 8006914:	d90e      	bls.n	8006934 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	22ff      	movs	r2, #255	; 0xff
 800691a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006920:	b2da      	uxtb	r2, r3
 8006922:	8979      	ldrh	r1, [r7, #10]
 8006924:	2300      	movs	r3, #0
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fbb3 	bl	8007098 <I2C_TransferConfig>
 8006932:	e00f      	b.n	8006954 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	b2da      	uxtb	r2, r3
 8006944:	8979      	ldrh	r1, [r7, #10]
 8006946:	2300      	movs	r3, #0
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fba2 	bl	8007098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fabb 	bl	8006ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e07b      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d034      	beq.n	8006a0c <HAL_I2C_Mem_Write+0x1c8>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d130      	bne.n	8006a0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	2200      	movs	r2, #0
 80069b2:	2180      	movs	r1, #128	; 0x80
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fa4d 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e04d      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2bff      	cmp	r3, #255	; 0xff
 80069cc:	d90e      	bls.n	80069ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	8979      	ldrh	r1, [r7, #10]
 80069dc:	2300      	movs	r3, #0
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 fb57 	bl	8007098 <I2C_TransferConfig>
 80069ea:	e00f      	b.n	8006a0c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	8979      	ldrh	r1, [r7, #10]
 80069fe:	2300      	movs	r3, #0
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fb46 	bl	8007098 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d19e      	bne.n	8006954 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa9a 	bl	8006f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e01a      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6859      	ldr	r1, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <HAL_I2C_Mem_Write+0x224>)
 8006a3e:	400b      	ands	r3, r1
 8006a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e000      	b.n	8006a60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a5e:	2302      	movs	r3, #2
  }
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	fe00e800 	.word	0xfe00e800

08006a6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	813b      	strh	r3, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	f040 80fd 	bne.w	8006c8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_I2C_Mem_Read+0x34>
 8006a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0f1      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_I2C_Mem_Read+0x4e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0ea      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ac2:	f7fc fc0f 	bl	80032e4 <HAL_GetTick>
 8006ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2319      	movs	r3, #25
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f9bd 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0d5      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2222      	movs	r2, #34	; 0x22
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2240      	movs	r2, #64	; 0x40
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a3a      	ldr	r2, [r7, #32]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b0c:	88f8      	ldrh	r0, [r7, #6]
 8006b0e:	893a      	ldrh	r2, [r7, #8]
 8006b10:	8979      	ldrh	r1, [r7, #10]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f921 	bl	8006d64 <I2C_RequestMemoryRead>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0ad      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d90e      	bls.n	8006b5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	22ff      	movs	r2, #255	; 0xff
 8006b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	8979      	ldrh	r1, [r7, #10]
 8006b4c:	4b52      	ldr	r3, [pc, #328]	; (8006c98 <HAL_I2C_Mem_Read+0x22c>)
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fa9f 	bl	8007098 <I2C_TransferConfig>
 8006b5a:	e00f      	b.n	8006b7c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	8979      	ldrh	r1, [r7, #10]
 8006b6e:	4b4a      	ldr	r3, [pc, #296]	; (8006c98 <HAL_I2C_Mem_Read+0x22c>)
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fa8e 	bl	8007098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2200      	movs	r2, #0
 8006b84:	2104      	movs	r1, #4
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f964 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e07c      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	b2d2      	uxtb	r2, r2
 8006ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d034      	beq.n	8006c3c <HAL_I2C_Mem_Read+0x1d0>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d130      	bne.n	8006c3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2200      	movs	r2, #0
 8006be2:	2180      	movs	r1, #128	; 0x80
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f935 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e04d      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2bff      	cmp	r3, #255	; 0xff
 8006bfc:	d90e      	bls.n	8006c1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	22ff      	movs	r2, #255	; 0xff
 8006c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	8979      	ldrh	r1, [r7, #10]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fa3f 	bl	8007098 <I2C_TransferConfig>
 8006c1a:	e00f      	b.n	8006c3c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	8979      	ldrh	r1, [r7, #10]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fa2e 	bl	8007098 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d19a      	bne.n	8006b7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f982 	bl	8006f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e01a      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6859      	ldr	r1, [r3, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_I2C_Mem_Read+0x230>)
 8006c6e:	400b      	ands	r3, r1
 8006c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e000      	b.n	8006c90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
  }
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	80002400 	.word	0x80002400
 8006c9c:	fe00e800 	.word	0xfe00e800

08006ca0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cae:	b2db      	uxtb	r3, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	817b      	strh	r3, [r7, #10]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	813b      	strh	r3, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	8979      	ldrh	r1, [r7, #10]
 8006cdc:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <I2C_RequestMemoryWrite+0xa4>)
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f9d7 	bl	8007098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f8f0 	bl	8006ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e02c      	b.n	8006d58 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d105      	bne.n	8006d10 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d04:	893b      	ldrh	r3, [r7, #8]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	629a      	str	r2, [r3, #40]	; 0x28
 8006d0e:	e015      	b.n	8006d3c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d10:	893b      	ldrh	r3, [r7, #8]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	69b9      	ldr	r1, [r7, #24]
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f8d6 	bl	8006ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e012      	b.n	8006d58 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d32:	893b      	ldrh	r3, [r7, #8]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2180      	movs	r1, #128	; 0x80
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f884 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	80002000 	.word	0x80002000

08006d64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	817b      	strh	r3, [r7, #10]
 8006d76:	460b      	mov	r3, r1
 8006d78:	813b      	strh	r3, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	8979      	ldrh	r1, [r7, #10]
 8006d84:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <I2C_RequestMemoryRead+0xa4>)
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f984 	bl	8007098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	69b9      	ldr	r1, [r7, #24]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f89d 	bl	8006ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e02c      	b.n	8006dfe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d105      	bne.n	8006db6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006daa:	893b      	ldrh	r3, [r7, #8]
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
 8006db4:	e015      	b.n	8006de2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006db6:	893b      	ldrh	r3, [r7, #8]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	69b9      	ldr	r1, [r7, #24]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f883 	bl	8006ed4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e012      	b.n	8006dfe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd8:	893b      	ldrh	r3, [r7, #8]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	2200      	movs	r2, #0
 8006dea:	2140      	movs	r1, #64	; 0x40
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f831 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	80002000 	.word	0x80002000

08006e0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d103      	bne.n	8006e2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d007      	beq.n	8006e48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	619a      	str	r2, [r3, #24]
  }
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	4613      	mov	r3, r2
 8006e62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e64:	e022      	b.n	8006eac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d01e      	beq.n	8006eac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6e:	f7fc fa39 	bl	80032e4 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d302      	bcc.n	8006e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d113      	bne.n	8006eac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	f043 0220 	orr.w	r2, r3, #32
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e00f      	b.n	8006ecc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	bf0c      	ite	eq
 8006ebc:	2301      	moveq	r3, #1
 8006ebe:	2300      	movne	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d0cd      	beq.n	8006e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ee0:	e02c      	b.n	8006f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f870 	bl	8006fcc <I2C_IsAcknowledgeFailed>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e02a      	b.n	8006f4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d01e      	beq.n	8006f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efe:	f7fc f9f1 	bl	80032e4 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d113      	bne.n	8006f3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f18:	f043 0220 	orr.w	r2, r3, #32
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e007      	b.n	8006f4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d1cb      	bne.n	8006ee2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f60:	e028      	b.n	8006fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f830 	bl	8006fcc <I2C_IsAcknowledgeFailed>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e026      	b.n	8006fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f76:	f7fc f9b5 	bl	80032e4 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d302      	bcc.n	8006f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d113      	bne.n	8006fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f90:	f043 0220 	orr.w	r2, r3, #32
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e007      	b.n	8006fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d1cf      	bne.n	8006f62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f003 0310 	and.w	r3, r3, #16
 8006fe2:	2b10      	cmp	r3, #16
 8006fe4:	d151      	bne.n	800708a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fe6:	e022      	b.n	800702e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d01e      	beq.n	800702e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff0:	f7fc f978 	bl	80032e4 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <I2C_IsAcknowledgeFailed+0x3a>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d113      	bne.n	800702e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e02e      	b.n	800708c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b20      	cmp	r3, #32
 800703a:	d1d5      	bne.n	8006fe8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2210      	movs	r2, #16
 8007042:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2220      	movs	r2, #32
 800704a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff fedd 	bl	8006e0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6859      	ldr	r1, [r3, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <I2C_IsAcknowledgeFailed+0xc8>)
 800705e:	400b      	ands	r3, r1
 8007060:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	f043 0204 	orr.w	r2, r3, #4
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607b      	str	r3, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	817b      	strh	r3, [r7, #10]
 80070a6:	4613      	mov	r3, r2
 80070a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	0d5b      	lsrs	r3, r3, #21
 80070b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <I2C_TransferConfig+0x58>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	43db      	mvns	r3, r3
 80070be:	ea02 0103 	and.w	r1, r2, r3
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80070c8:	7a7b      	ldrb	r3, [r7, #9]
 80070ca:	041b      	lsls	r3, r3, #16
 80070cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	431a      	orrs	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	03ff63ff 	.word	0x03ff63ff

080070f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b20      	cmp	r3, #32
 8007108:	d138      	bne.n	800717c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007110:	2b01      	cmp	r3, #1
 8007112:	d101      	bne.n	8007118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007114:	2302      	movs	r3, #2
 8007116:	e032      	b.n	800717e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2224      	movs	r2, #36	; 0x24
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	e000      	b.n	800717e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800717c:	2302      	movs	r3, #2
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b20      	cmp	r3, #32
 800719e:	d139      	bne.n	8007214 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e033      	b.n	8007216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2224      	movs	r2, #36	; 0x24
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0201 	bic.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e0bf      	b.n	80073b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f014 fbb0 	bl	801b9b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007266:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6999      	ldr	r1, [r3, #24]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800727c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6899      	ldr	r1, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b4a      	ldr	r3, [pc, #296]	; (80073c0 <HAL_LTDC_Init+0x19c>)
 8007298:	400b      	ands	r3, r1
 800729a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	041b      	lsls	r3, r3, #16
 80072a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6899      	ldr	r1, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	431a      	orrs	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68d9      	ldr	r1, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <HAL_LTDC_Init+0x19c>)
 80072c6:	400b      	ands	r3, r1
 80072c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68d9      	ldr	r1, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1a      	ldr	r2, [r3, #32]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6919      	ldr	r1, [r3, #16]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b33      	ldr	r3, [pc, #204]	; (80073c0 <HAL_LTDC_Init+0x19c>)
 80072f4:	400b      	ands	r3, r1
 80072f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	041b      	lsls	r3, r3, #16
 80072fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6919      	ldr	r1, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6959      	ldr	r1, [r3, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <HAL_LTDC_Init+0x19c>)
 8007322:	400b      	ands	r3, r1
 8007324:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0206 	orr.w	r2, r2, #6
 8007392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	f000f800 	.word	0xf000f800

080073c4 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f014 fbb7 	bl	801bb40 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	2b00      	cmp	r3, #0
 8007414:	d023      	beq.n	800745e <HAL_LTDC_IRQHandler+0x6a>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0204 	bic.w	r2, r2, #4
 800742e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2204      	movs	r2, #4
 8007436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800743e:	f043 0201 	orr.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2204      	movs	r2, #4
 800744c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f86f 	bl	800753c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d023      	beq.n	80074b0 <HAL_LTDC_IRQHandler+0xbc>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01e      	beq.n	80074b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0202 	bic.w	r2, r2, #2
 8007480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2202      	movs	r2, #2
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007490:	f043 0202 	orr.w	r2, r3, #2
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2204      	movs	r2, #4
 800749e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f846 	bl	800753c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01b      	beq.n	80074f2 <HAL_LTDC_IRQHandler+0xfe>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d016      	beq.n	80074f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0201 	bic.w	r2, r2, #1
 80074d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2201      	movs	r2, #1
 80074da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f015 fb57 	bl	801cba0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01b      	beq.n	8007534 <HAL_LTDC_IRQHandler+0x140>
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0208 	bic.w	r2, r2, #8
 8007514:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2208      	movs	r2, #8
 800751c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f80e 	bl	8007550 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007534:	bf00      	nop
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007564:	b5b0      	push	{r4, r5, r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_LTDC_ConfigLayer+0x1a>
 800757a:	2302      	movs	r3, #2
 800757c:	e02c      	b.n	80075d8 <HAL_LTDC_ConfigLayer+0x74>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2134      	movs	r1, #52	; 0x34
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4614      	mov	r4, r2
 80075a2:	461d      	mov	r5, r3
 80075a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f8cf 	bl	800775c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bdb0      	pop	{r4, r5, r7, pc}

080075e0 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b089      	sub	sp, #36	; 0x24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_LTDC_SetPitch+0x1a>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e06e      	b.n	80076d8 <HAL_LTDC_SetPitch+0xf8>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2134      	movs	r1, #52	; 0x34
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	4413      	add	r3, r2
 8007616:	3348      	adds	r3, #72	; 0x48
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8007622:	2304      	movs	r3, #4
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e016      	b.n	8007656 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d102      	bne.n	8007634 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800762e:	2303      	movs	r3, #3
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	e010      	b.n	8007656 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b04      	cmp	r3, #4
 8007638:	d008      	beq.n	800764c <HAL_LTDC_SetPitch+0x6c>
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d005      	beq.n	800764c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d002      	beq.n	800764c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	2b07      	cmp	r3, #7
 800764a:	d102      	bne.n	8007652 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800764c:	2302      	movs	r3, #2
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e001      	b.n	8007656 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8007652:	2301      	movs	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	01db      	lsls	r3, r3, #7
 800766c:	4413      	add	r3, r2
 800766e:	3384      	adds	r3, #132	; 0x84
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4619      	mov	r1, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	01db      	lsls	r3, r3, #7
 800767c:	440b      	add	r3, r1
 800767e:	3384      	adds	r3, #132	; 0x84
 8007680:	4619      	mov	r1, r3
 8007682:	4b18      	ldr	r3, [pc, #96]	; (80076e4 <HAL_LTDC_SetPitch+0x104>)
 8007684:	4013      	ands	r3, r2
 8007686:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007688:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <HAL_LTDC_SetPitch+0x108>)
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_LTDC_SetPitch+0x108>)
 800768e:	f043 0301 	orr.w	r3, r3, #1
 8007692:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	01db      	lsls	r3, r3, #7
 800769e:	4413      	add	r3, r2
 80076a0:	3384      	adds	r3, #132	; 0x84
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4619      	mov	r1, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	01db      	lsls	r3, r3, #7
 80076ae:	440b      	add	r3, r1
 80076b0:	3384      	adds	r3, #132	; 0x84
 80076b2:	4619      	mov	r1, r3
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80076ba:	4b0b      	ldr	r3, [pc, #44]	; (80076e8 <HAL_LTDC_SetPitch+0x108>)
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	4a0a      	ldr	r2, [pc, #40]	; (80076e8 <HAL_LTDC_SetPitch+0x108>)
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3724      	adds	r7, #36	; 0x24
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	e000ffff 	.word	0xe000ffff
 80076e8:	40016800 	.word	0x40016800

080076ec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_LTDC_ProgramLineEvent+0x18>
 8007700:	2302      	movs	r3, #2
 8007702:	e023      	b.n	800774c <HAL_LTDC_ProgramLineEvent+0x60>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0201 	bic.w	r2, r2, #1
 8007722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007724:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0201 	orr.w	r2, r2, #1
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40016800 	.word	0x40016800

0800775c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	; 0x24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007778:	4413      	add	r3, r2
 800777a:	041b      	lsls	r3, r3, #16
 800777c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	01db      	lsls	r3, r3, #7
 8007788:	4413      	add	r3, r2
 800778a:	3384      	adds	r3, #132	; 0x84
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	4611      	mov	r1, r2
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	01d2      	lsls	r2, r2, #7
 8007798:	440a      	add	r2, r1
 800779a:	3284      	adds	r2, #132	; 0x84
 800779c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80077a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077b2:	4413      	add	r3, r2
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4619      	mov	r1, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	440b      	add	r3, r1
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	4619      	mov	r1, r3
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077da:	4413      	add	r3, r2
 80077dc:	041b      	lsls	r3, r3, #16
 80077de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	01db      	lsls	r3, r3, #7
 80077ea:	4413      	add	r3, r2
 80077ec:	3384      	adds	r3, #132	; 0x84
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	4611      	mov	r1, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	01d2      	lsls	r2, r2, #7
 80077fa:	440a      	add	r2, r1
 80077fc:	3284      	adds	r2, #132	; 0x84
 80077fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007802:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007812:	4413      	add	r3, r2
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4619      	mov	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	01db      	lsls	r3, r3, #7
 8007820:	440b      	add	r3, r1
 8007822:	3384      	adds	r3, #132	; 0x84
 8007824:	4619      	mov	r1, r3
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4313      	orrs	r3, r2
 800782a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	01db      	lsls	r3, r3, #7
 8007836:	4413      	add	r3, r2
 8007838:	3384      	adds	r3, #132	; 0x84
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	4611      	mov	r1, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	01d2      	lsls	r2, r2, #7
 8007846:	440a      	add	r2, r1
 8007848:	3284      	adds	r2, #132	; 0x84
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	01db      	lsls	r3, r3, #7
 800785a:	4413      	add	r3, r2
 800785c:	3384      	adds	r3, #132	; 0x84
 800785e:	461a      	mov	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007876:	041b      	lsls	r3, r3, #16
 8007878:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	01db      	lsls	r3, r3, #7
 800788c:	4413      	add	r3, r2
 800788e:	3384      	adds	r3, #132	; 0x84
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	01db      	lsls	r3, r3, #7
 800789c:	4413      	add	r3, r2
 800789e:	3384      	adds	r3, #132	; 0x84
 80078a0:	461a      	mov	r2, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078ac:	461a      	mov	r2, r3
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4619      	mov	r1, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	01db      	lsls	r3, r3, #7
 80078c0:	440b      	add	r3, r1
 80078c2:	3384      	adds	r3, #132	; 0x84
 80078c4:	4619      	mov	r1, r3
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	01db      	lsls	r3, r3, #7
 80078d6:	4413      	add	r3, r2
 80078d8:	3384      	adds	r3, #132	; 0x84
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	4611      	mov	r1, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	01d2      	lsls	r2, r2, #7
 80078e6:	440a      	add	r2, r1
 80078e8:	3284      	adds	r2, #132	; 0x84
 80078ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	01db      	lsls	r3, r3, #7
 80078fa:	4413      	add	r3, r2
 80078fc:	3384      	adds	r3, #132	; 0x84
 80078fe:	461a      	mov	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	01db      	lsls	r3, r3, #7
 8007910:	4413      	add	r3, r2
 8007912:	3384      	adds	r3, #132	; 0x84
 8007914:	69da      	ldr	r2, [r3, #28]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	440b      	add	r3, r1
 8007922:	3384      	adds	r3, #132	; 0x84
 8007924:	4619      	mov	r1, r3
 8007926:	4b58      	ldr	r3, [pc, #352]	; (8007a88 <LTDC_SetConfig+0x32c>)
 8007928:	4013      	ands	r3, r2
 800792a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	68f9      	ldr	r1, [r7, #12]
 8007936:	6809      	ldr	r1, [r1, #0]
 8007938:	4608      	mov	r0, r1
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	01c9      	lsls	r1, r1, #7
 800793e:	4401      	add	r1, r0
 8007940:	3184      	adds	r1, #132	; 0x84
 8007942:	4313      	orrs	r3, r2
 8007944:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	01db      	lsls	r3, r3, #7
 8007950:	4413      	add	r3, r2
 8007952:	3384      	adds	r3, #132	; 0x84
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	4413      	add	r3, r2
 8007962:	3384      	adds	r3, #132	; 0x84
 8007964:	461a      	mov	r2, r3
 8007966:	2300      	movs	r3, #0
 8007968:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	4413      	add	r3, r2
 8007976:	3384      	adds	r3, #132	; 0x84
 8007978:	461a      	mov	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007988:	2304      	movs	r3, #4
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	e01b      	b.n	80079c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d102      	bne.n	800799c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007996:	2303      	movs	r3, #3
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	e014      	b.n	80079c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d00b      	beq.n	80079bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d007      	beq.n	80079bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d003      	beq.n	80079bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80079b8:	2b07      	cmp	r3, #7
 80079ba:	d102      	bne.n	80079c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80079bc:	2302      	movs	r3, #2
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	e001      	b.n	80079c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	01db      	lsls	r3, r3, #7
 80079d0:	4413      	add	r3, r2
 80079d2:	3384      	adds	r3, #132	; 0x84
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	4611      	mov	r1, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	01d2      	lsls	r2, r2, #7
 80079e0:	440a      	add	r2, r1
 80079e2:	3284      	adds	r2, #132	; 0x84
 80079e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80079e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	041a      	lsls	r2, r3, #16
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6859      	ldr	r1, [r3, #4]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	1acb      	subs	r3, r1, r3
 8007a00:	69f9      	ldr	r1, [r7, #28]
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	3303      	adds	r3, #3
 8007a08:	68f9      	ldr	r1, [r7, #12]
 8007a0a:	6809      	ldr	r1, [r1, #0]
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	01c9      	lsls	r1, r1, #7
 8007a12:	4401      	add	r1, r0
 8007a14:	3184      	adds	r1, #132	; 0x84
 8007a16:	4313      	orrs	r3, r2
 8007a18:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	01db      	lsls	r3, r3, #7
 8007a24:	4413      	add	r3, r2
 8007a26:	3384      	adds	r3, #132	; 0x84
 8007a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	01db      	lsls	r3, r3, #7
 8007a34:	440b      	add	r3, r1
 8007a36:	3384      	adds	r3, #132	; 0x84
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <LTDC_SetConfig+0x330>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	01db      	lsls	r3, r3, #7
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3384      	adds	r3, #132	; 0x84
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	4413      	add	r3, r2
 8007a62:	3384      	adds	r3, #132	; 0x84
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	01d2      	lsls	r2, r2, #7
 8007a70:	440a      	add	r2, r1
 8007a72:	3284      	adds	r2, #132	; 0x84
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	6013      	str	r3, [r2, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3724      	adds	r7, #36	; 0x24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	fffff8f8 	.word	0xfffff8f8
 8007a8c:	fffff800 	.word	0xfffff800

08007a90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a04      	ldr	r2, [pc, #16]	; (8007aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9e:	6013      	str	r3, [r2, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40007000 	.word	0x40007000

08007ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007aba:	4b23      	ldr	r3, [pc, #140]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	4a22      	ldr	r2, [pc, #136]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8007ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac6:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1d      	ldr	r2, [pc, #116]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ade:	f7fb fc01 	bl	80032e4 <HAL_GetTick>
 8007ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ae4:	e009      	b.n	8007afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ae6:	f7fb fbfd 	bl	80032e4 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af4:	d901      	bls.n	8007afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e022      	b.n	8007b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007afa:	4b14      	ldr	r3, [pc, #80]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b06:	d1ee      	bne.n	8007ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b08:	4b10      	ldr	r3, [pc, #64]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a0f      	ldr	r2, [pc, #60]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b14:	f7fb fbe6 	bl	80032e4 <HAL_GetTick>
 8007b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b1a:	e009      	b.n	8007b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b1c:	f7fb fbe2 	bl	80032e4 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b2a:	d901      	bls.n	8007b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e007      	b.n	8007b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b3c:	d1ee      	bne.n	8007b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	40007000 	.word	0x40007000

08007b50 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007b5c:	f7fb fbc2 	bl	80032e4 <HAL_GetTick>
 8007b60:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e073      	b.n	8007c54 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_QSPI_Init+0x2c>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e06b      	b.n	8007c54 <HAL_QSPI_Init+0x104>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fa fd75 	bl	8002688 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8007b9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fb65 	bl	8008272 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	021a      	lsls	r2, r3, #8
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2120      	movs	r1, #32
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb5d 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d135      	bne.n	8007c4a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <HAL_QSPI_Init+0x10c>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6852      	ldr	r2, [r2, #4]
 8007bec:	0611      	lsls	r1, r2, #24
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68d2      	ldr	r2, [r2, #12]
 8007bf2:	4311      	orrs	r1, r2
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	69d2      	ldr	r2, [r2, #28]
 8007bf8:	4311      	orrs	r1, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6a12      	ldr	r2, [r2, #32]
 8007bfe:	4311      	orrs	r1, r2
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <HAL_QSPI_Init+0x110>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6912      	ldr	r2, [r2, #16]
 8007c16:	0411      	lsls	r1, r2, #16
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6952      	ldr	r2, [r2, #20]
 8007c1c:	4311      	orrs	r1, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6992      	ldr	r2, [r2, #24]
 8007c22:	4311      	orrs	r1, r2
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	00ffff2f 	.word	0x00ffff2f
 8007c60:	ffe0f8fe 	.word	0xffe0f8fe

08007c64 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e022      	b.n	8007cbc <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d101      	bne.n	8007c86 <HAL_QSPI_DeInit+0x22>
 8007c82:	2302      	movs	r3, #2
 8007c84:	e01a      	b.n	8007cbc <HAL_QSPI_DeInit+0x58>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fa fd82 	bl	80027a8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 8007cd4:	f7fb fb06 	bl	80032e4 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_QSPI_Command+0x26>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e048      	b.n	8007d7c <HAL_QSPI_Command+0xb8>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d137      	bne.n	8007d6e <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2200      	movs	r2, #0
 8007d14:	2120      	movs	r1, #32
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fab9 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d125      	bne.n	8007d72 <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007d26:	2200      	movs	r2, #0
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fae6 	bl	80082fc <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d115      	bne.n	8007d64 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2102      	movs	r1, #2
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 faa3 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10f      	bne.n	8007d72 <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2202      	movs	r2, #2
 8007d58:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d62:	e006      	b.n	8007d72 <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d6c:	e001      	b.n	8007d72 <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 8007d6e:	2302      	movs	r3, #2
 8007d70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	; 0x28
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007d94:	f7fb faa6 	bl	80032e4 <HAL_GetTick>
 8007d98:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3320      	adds	r3, #32
 8007da0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <HAL_QSPI_Transmit+0x2e>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e079      	b.n	8007ea6 <HAL_QSPI_Transmit+0x122>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d168      	bne.n	8007e98 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d059      	beq.n	8007e86 <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2212      	movs	r2, #18
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695a      	ldr	r2, [r3, #20]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007e06:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 8007e08:	e019      	b.n	8007e3e <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2201      	movs	r2, #1
 8007e12:	2104      	movs	r1, #4
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fa3a 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007e1e:	7ffb      	ldrb	r3, [r7, #31]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d111      	bne.n	8007e48 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	1c59      	adds	r1, r3, #1
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	6251      	str	r1, [r2, #36]	; 0x24
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	1e5a      	subs	r2, r3, #1
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e1      	bne.n	8007e0a <HAL_QSPI_Transmit+0x86>
 8007e46:	e000      	b.n	8007e4a <HAL_QSPI_Transmit+0xc6>
          break;
 8007e48:	bf00      	nop
      }
    
      if (status == HAL_OK)
 8007e4a:	7ffb      	ldrb	r3, [r7, #31]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d115      	bne.n	8007e7c <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2201      	movs	r2, #1
 8007e58:	2102      	movs	r1, #2
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fa17 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007e60:	4603      	mov	r3, r0
 8007e62:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007e64:	7ffb      	ldrb	r3, [r7, #31]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d108      	bne.n	8007e7c <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 f998 	bl	80081a8 <HAL_QSPI_Abort>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e84:	e00a      	b.n	8007e9c <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	f043 0208 	orr.w	r2, r3, #8
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e001      	b.n	8007e9c <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b08a      	sub	sp, #40	; 0x28
 8007eb2:	af02      	add	r7, sp, #8
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	60b9      	str	r1, [r7, #8]
 8007eb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007ebe:	f7fb fa11 	bl	80032e4 <HAL_GetTick>
 8007ec2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3320      	adds	r3, #32
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_QSPI_Receive+0x36>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e080      	b.n	8007fe6 <HAL_QSPI_Receive+0x138>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d16f      	bne.n	8007fd8 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d060      	beq.n	8007fc6 <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2222      	movs	r2, #34	; 0x22
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f3c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 8007f46:	e01a      	b.n	8007f7e <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	2106      	movs	r1, #6
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f99b 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007f5c:	7ffb      	ldrb	r3, [r7, #31]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d112      	bne.n	8007f88 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	1c59      	adds	r1, r3, #1
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	6311      	str	r1, [r2, #48]	; 0x30
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	7812      	ldrb	r2, [r2, #0]
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f78:	1e5a      	subs	r2, r3, #1
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e0      	bne.n	8007f48 <HAL_QSPI_Receive+0x9a>
 8007f86:	e000      	b.n	8007f8a <HAL_QSPI_Receive+0xdc>
          break;
 8007f88:	bf00      	nop
      }
    
      if (status == HAL_OK)
 8007f8a:	7ffb      	ldrb	r3, [r7, #31]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d115      	bne.n	8007fbc <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2201      	movs	r2, #1
 8007f98:	2102      	movs	r1, #2
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f977 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007fa4:	7ffb      	ldrb	r3, [r7, #31]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d108      	bne.n	8007fbc <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f8f8 	bl	80081a8 <HAL_QSPI_Abort>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fc4:	e00a      	b.n	8007fdc <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fca:	f043 0208 	orr.w	r2, r3, #8
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	e001      	b.n	8007fdc <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b088      	sub	sp, #32
 8007ff2:	af02      	add	r7, sp, #8
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 8008000:	f7fb f970 	bl	80032e4 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_QSPI_AutoPolling+0x28>
 8008012:	2302      	movs	r3, #2
 8008014:	e060      	b.n	80080d8 <HAL_QSPI_AutoPolling+0xea>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d14f      	bne.n	80080ca <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2242      	movs	r2, #66	; 0x42
 8008034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2200      	movs	r2, #0
 8008040:	2120      	movs	r1, #32
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f923 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d13d      	bne.n	80080ce <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6852      	ldr	r2, [r2, #4]
 8008064:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6892      	ldr	r2, [r2, #8]
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	431a      	orrs	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008088:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008096:	68b9      	ldr	r1, [r7, #8]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f92f 	bl	80082fc <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2201      	movs	r2, #1
 80080a6:	2108      	movs	r1, #8
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f8f0 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2208      	movs	r2, #8
 80080be:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080c8:	e001      	b.n	80080ce <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 80080ca:	2302      	movs	r3, #2
 80080cc:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80080f0:	f7fb f8f8 	bl	80032e4 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_QSPI_MemoryMapped+0x26>
 8008102:	2302      	movs	r3, #2
 8008104:	e04c      	b.n	80081a0 <HAL_QSPI_MemoryMapped+0xc0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d13b      	bne.n	8008192 <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2282      	movs	r2, #130	; 0x82
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2200      	movs	r2, #0
 8008132:	2120      	movs	r1, #32
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f8aa 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d128      	bne.n	8008196 <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f023 0108 	bic.w	r1, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	430a      	orrs	r2, r1
 8008158:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2b08      	cmp	r3, #8
 8008160:	d110      	bne.n	8008184 <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2210      	movs	r2, #16
 8008172:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008182:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008184:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f8b6 	bl	80082fc <QSPI_Config>
 8008190:	e001      	b.n	8008196 <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 8008192:	2302      	movs	r3, #2
 8008194:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 800819e:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af02      	add	r7, sp, #8
 80081ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80081b4:	f7fb f896 	bl	80032e4 <HAL_GetTick>
 80081b8:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d04e      	beq.n	8008268 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d017      	beq.n	8008210 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0204 	bic.w	r2, r2, #4
 80081ee:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fb fe45 	bl	8003e84 <HAL_DMA_Abort>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008208:	f043 0204 	orr.w	r2, r3, #4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0202 	orr.w	r2, r2, #2
 800821e:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2201      	movs	r2, #1
 800822a:	2102      	movs	r1, #2
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f82e 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10e      	bne.n	800825a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2202      	movs	r2, #2
 8008242:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2200      	movs	r2, #0
 800824e:	2120      	movs	r1, #32
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f81c 	bl	800828e <QSPI_WaitFlagStateUntilTimeout>
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d103      	bne.n	8008268 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	603b      	str	r3, [r7, #0]
 800829a:	4613      	mov	r3, r2
 800829c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800829e:	e01a      	b.n	80082d6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a6:	d016      	beq.n	80082d6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <QSPI_WaitFlagStateUntilTimeout+0x30>
 80082ae:	f7fb f819 	bl	80032e4 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d20b      	bcs.n	80082d6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2204      	movs	r2, #4
 80082c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	f043 0201 	orr.w	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e00e      	b.n	80082f4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d1d6      	bne.n	80082a0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <QSPI_Config+0x28>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008316:	d005      	beq.n	8008324 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3a01      	subs	r2, #1
 8008322:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 80b9 	beq.w	80084a0 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d05f      	beq.n	80083f6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	6892      	ldr	r2, [r2, #8]
 800833e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d031      	beq.n	80083ac <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	431a      	orrs	r2, r3
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	431a      	orrs	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	431a      	orrs	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	049b      	lsls	r3, r3, #18
 8008364:	431a      	orrs	r2, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	431a      	orrs	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	431a      	orrs	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	431a      	orrs	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	431a      	orrs	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	431a      	orrs	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	ea42 0103 	orr.w	r1, r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	430a      	orrs	r2, r1
 8008394:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800839c:	f000 812e 	beq.w	80085fc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	6852      	ldr	r2, [r2, #4]
 80083a8:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80083aa:	e127      	b.n	80085fc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	431a      	orrs	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	431a      	orrs	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	049b      	lsls	r3, r3, #18
 80083c8:	431a      	orrs	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	431a      	orrs	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	431a      	orrs	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	ea42 0103 	orr.w	r1, r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	615a      	str	r2, [r3, #20]
}
 80083f4:	e102      	b.n	80085fc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02e      	beq.n	800845c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008406:	431a      	orrs	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	431a      	orrs	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	431a      	orrs	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	049b      	lsls	r3, r3, #18
 800841a:	431a      	orrs	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	431a      	orrs	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	431a      	orrs	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	431a      	orrs	r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	431a      	orrs	r2, r3
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	ea42 0103 	orr.w	r1, r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	430a      	orrs	r2, r1
 8008444:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800844c:	f000 80d6 	beq.w	80085fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	6852      	ldr	r2, [r2, #4]
 8008458:	619a      	str	r2, [r3, #24]
}
 800845a:	e0cf      	b.n	80085fc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	431a      	orrs	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	431a      	orrs	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	431a      	orrs	r2, r3
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	049b      	lsls	r3, r3, #18
 8008478:	431a      	orrs	r2, r3
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	431a      	orrs	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	431a      	orrs	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	431a      	orrs	r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	ea42 0103 	orr.w	r1, r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	430a      	orrs	r2, r1
 800849c:	615a      	str	r2, [r3, #20]
}
 800849e:	e0ad      	b.n	80085fc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d058      	beq.n	800855a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	6892      	ldr	r2, [r2, #8]
 80084b0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02d      	beq.n	8008516 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c8:	431a      	orrs	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	431a      	orrs	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	049b      	lsls	r3, r3, #18
 80084d6:	431a      	orrs	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	431a      	orrs	r2, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	ea42 0103 	orr.w	r1, r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	430a      	orrs	r2, r1
 8008500:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008508:	d078      	beq.n	80085fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	6852      	ldr	r2, [r2, #4]
 8008512:	619a      	str	r2, [r3, #24]
}
 8008514:	e072      	b.n	80085fc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	431a      	orrs	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	431a      	orrs	r2, r3
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	431a      	orrs	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	049b      	lsls	r3, r3, #18
 8008532:	431a      	orrs	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	431a      	orrs	r2, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	431a      	orrs	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	431a      	orrs	r2, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	ea42 0103 	orr.w	r1, r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	430a      	orrs	r2, r1
 8008556:	615a      	str	r2, [r3, #20]
}
 8008558:	e050      	b.n	80085fc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d02a      	beq.n	80085b8 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	431a      	orrs	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	431a      	orrs	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	431a      	orrs	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	049b      	lsls	r3, r3, #18
 800857e:	431a      	orrs	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	431a      	orrs	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	431a      	orrs	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	431a      	orrs	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	ea42 0103 	orr.w	r1, r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80085aa:	d027      	beq.n	80085fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	6852      	ldr	r2, [r2, #4]
 80085b4:	619a      	str	r2, [r3, #24]
}
 80085b6:	e021      	b.n	80085fc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01d      	beq.n	80085fc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	431a      	orrs	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	431a      	orrs	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	431a      	orrs	r2, r3
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	049b      	lsls	r3, r3, #18
 80085dc:	431a      	orrs	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	ea42 0103 	orr.w	r1, r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	615a      	str	r2, [r3, #20]
}
 80085fc:	bf00      	nop
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e25c      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 8087 	beq.w	800873a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800862c:	4b96      	ldr	r3, [pc, #600]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 030c 	and.w	r3, r3, #12
 8008634:	2b04      	cmp	r3, #4
 8008636:	d00c      	beq.n	8008652 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008638:	4b93      	ldr	r3, [pc, #588]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 030c 	and.w	r3, r3, #12
 8008640:	2b08      	cmp	r3, #8
 8008642:	d112      	bne.n	800866a <HAL_RCC_OscConfig+0x62>
 8008644:	4b90      	ldr	r3, [pc, #576]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800864c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008650:	d10b      	bne.n	800866a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008652:	4b8d      	ldr	r3, [pc, #564]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d06c      	beq.n	8008738 <HAL_RCC_OscConfig+0x130>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d168      	bne.n	8008738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e236      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008672:	d106      	bne.n	8008682 <HAL_RCC_OscConfig+0x7a>
 8008674:	4b84      	ldr	r3, [pc, #528]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a83      	ldr	r2, [pc, #524]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800867a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e02e      	b.n	80086e0 <HAL_RCC_OscConfig+0xd8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <HAL_RCC_OscConfig+0x9c>
 800868a:	4b7f      	ldr	r3, [pc, #508]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a7e      	ldr	r2, [pc, #504]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4b7c      	ldr	r3, [pc, #496]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a7b      	ldr	r2, [pc, #492]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800869c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	e01d      	b.n	80086e0 <HAL_RCC_OscConfig+0xd8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCC_OscConfig+0xc0>
 80086ae:	4b76      	ldr	r3, [pc, #472]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a75      	ldr	r2, [pc, #468]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	4b73      	ldr	r3, [pc, #460]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a72      	ldr	r2, [pc, #456]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e00b      	b.n	80086e0 <HAL_RCC_OscConfig+0xd8>
 80086c8:	4b6f      	ldr	r3, [pc, #444]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a6e      	ldr	r2, [pc, #440]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	4b6c      	ldr	r3, [pc, #432]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a6b      	ldr	r2, [pc, #428]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80086da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d013      	beq.n	8008710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fa fdfc 	bl	80032e4 <HAL_GetTick>
 80086ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086f0:	f7fa fdf8 	bl	80032e4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b64      	cmp	r3, #100	; 0x64
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e1ea      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008702:	4b61      	ldr	r3, [pc, #388]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0xe8>
 800870e:	e014      	b.n	800873a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fa fde8 	bl	80032e4 <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008718:	f7fa fde4 	bl	80032e4 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b64      	cmp	r3, #100	; 0x64
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e1d6      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800872a:	4b57      	ldr	r3, [pc, #348]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1f0      	bne.n	8008718 <HAL_RCC_OscConfig+0x110>
 8008736:	e000      	b.n	800873a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d069      	beq.n	800881a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008746:	4b50      	ldr	r3, [pc, #320]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008752:	4b4d      	ldr	r3, [pc, #308]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 030c 	and.w	r3, r3, #12
 800875a:	2b08      	cmp	r3, #8
 800875c:	d11c      	bne.n	8008798 <HAL_RCC_OscConfig+0x190>
 800875e:	4b4a      	ldr	r3, [pc, #296]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d116      	bne.n	8008798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800876a:	4b47      	ldr	r3, [pc, #284]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <HAL_RCC_OscConfig+0x17a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d001      	beq.n	8008782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e1aa      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008782:	4b41      	ldr	r3, [pc, #260]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	493d      	ldr	r1, [pc, #244]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008792:	4313      	orrs	r3, r2
 8008794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008796:	e040      	b.n	800881a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d023      	beq.n	80087e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087a0:	4b39      	ldr	r3, [pc, #228]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a38      	ldr	r2, [pc, #224]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ac:	f7fa fd9a 	bl	80032e4 <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087b4:	f7fa fd96 	bl	80032e4 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e188      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c6:	4b30      	ldr	r3, [pc, #192]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d2:	4b2d      	ldr	r3, [pc, #180]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4929      	ldr	r1, [pc, #164]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	600b      	str	r3, [r1, #0]
 80087e6:	e018      	b.n	800881a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087e8:	4b27      	ldr	r3, [pc, #156]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a26      	ldr	r2, [pc, #152]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fa fd76 	bl	80032e4 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087fc:	f7fa fd72 	bl	80032e4 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e164      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800880e:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f0      	bne.n	80087fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d038      	beq.n	8008898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d019      	beq.n	8008862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800882e:	4b16      	ldr	r3, [pc, #88]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	4a15      	ldr	r2, [pc, #84]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883a:	f7fa fd53 	bl	80032e4 <HAL_GetTick>
 800883e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008840:	e008      	b.n	8008854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008842:	f7fa fd4f 	bl	80032e4 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e141      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0f0      	beq.n	8008842 <HAL_RCC_OscConfig+0x23a>
 8008860:	e01a      	b.n	8008898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008866:	4a08      	ldr	r2, [pc, #32]	; (8008888 <HAL_RCC_OscConfig+0x280>)
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886e:	f7fa fd39 	bl	80032e4 <HAL_GetTick>
 8008872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008874:	e00a      	b.n	800888c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008876:	f7fa fd35 	bl	80032e4 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d903      	bls.n	800888c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e127      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
 8008888:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800888c:	4b94      	ldr	r3, [pc, #592]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800888e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1ee      	bne.n	8008876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80a4 	beq.w	80089ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088a6:	4b8e      	ldr	r3, [pc, #568]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10d      	bne.n	80088ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80088b2:	4b8b      	ldr	r3, [pc, #556]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	4a8a      	ldr	r2, [pc, #552]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80088b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088bc:	6413      	str	r3, [r2, #64]	; 0x40
 80088be:	4b88      	ldr	r3, [pc, #544]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80088ca:	2301      	movs	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ce:	4b85      	ldr	r3, [pc, #532]	; (8008ae4 <HAL_RCC_OscConfig+0x4dc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d118      	bne.n	800890c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80088da:	4b82      	ldr	r3, [pc, #520]	; (8008ae4 <HAL_RCC_OscConfig+0x4dc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a81      	ldr	r2, [pc, #516]	; (8008ae4 <HAL_RCC_OscConfig+0x4dc>)
 80088e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088e6:	f7fa fcfd 	bl	80032e4 <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ec:	e008      	b.n	8008900 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088ee:	f7fa fcf9 	bl	80032e4 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b64      	cmp	r3, #100	; 0x64
 80088fa:	d901      	bls.n	8008900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e0eb      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008900:	4b78      	ldr	r3, [pc, #480]	; (8008ae4 <HAL_RCC_OscConfig+0x4dc>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f0      	beq.n	80088ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d106      	bne.n	8008922 <HAL_RCC_OscConfig+0x31a>
 8008914:	4b72      	ldr	r3, [pc, #456]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008918:	4a71      	ldr	r2, [pc, #452]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	6713      	str	r3, [r2, #112]	; 0x70
 8008920:	e02d      	b.n	800897e <HAL_RCC_OscConfig+0x376>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10c      	bne.n	8008944 <HAL_RCC_OscConfig+0x33c>
 800892a:	4b6d      	ldr	r3, [pc, #436]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	4a6c      	ldr	r2, [pc, #432]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	6713      	str	r3, [r2, #112]	; 0x70
 8008936:	4b6a      	ldr	r3, [pc, #424]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893a:	4a69      	ldr	r2, [pc, #420]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	6713      	str	r3, [r2, #112]	; 0x70
 8008942:	e01c      	b.n	800897e <HAL_RCC_OscConfig+0x376>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b05      	cmp	r3, #5
 800894a:	d10c      	bne.n	8008966 <HAL_RCC_OscConfig+0x35e>
 800894c:	4b64      	ldr	r3, [pc, #400]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800894e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008950:	4a63      	ldr	r2, [pc, #396]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008952:	f043 0304 	orr.w	r3, r3, #4
 8008956:	6713      	str	r3, [r2, #112]	; 0x70
 8008958:	4b61      	ldr	r3, [pc, #388]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800895a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895c:	4a60      	ldr	r2, [pc, #384]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	6713      	str	r3, [r2, #112]	; 0x70
 8008964:	e00b      	b.n	800897e <HAL_RCC_OscConfig+0x376>
 8008966:	4b5e      	ldr	r3, [pc, #376]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	4a5d      	ldr	r2, [pc, #372]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 800896c:	f023 0301 	bic.w	r3, r3, #1
 8008970:	6713      	str	r3, [r2, #112]	; 0x70
 8008972:	4b5b      	ldr	r3, [pc, #364]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	4a5a      	ldr	r2, [pc, #360]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008978:	f023 0304 	bic.w	r3, r3, #4
 800897c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d015      	beq.n	80089b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008986:	f7fa fcad 	bl	80032e4 <HAL_GetTick>
 800898a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800898c:	e00a      	b.n	80089a4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800898e:	f7fa fca9 	bl	80032e4 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f241 3288 	movw	r2, #5000	; 0x1388
 800899c:	4293      	cmp	r3, r2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e099      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089a4:	4b4e      	ldr	r3, [pc, #312]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0ee      	beq.n	800898e <HAL_RCC_OscConfig+0x386>
 80089b0:	e014      	b.n	80089dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b2:	f7fa fc97 	bl	80032e4 <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089b8:	e00a      	b.n	80089d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ba:	f7fa fc93 	bl	80032e4 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e083      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089d0:	4b43      	ldr	r3, [pc, #268]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80089d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1ee      	bne.n	80089ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d105      	bne.n	80089ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089e2:	4b3f      	ldr	r3, [pc, #252]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	4a3e      	ldr	r2, [pc, #248]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80089e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d06f      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089f6:	4b3a      	ldr	r3, [pc, #232]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 030c 	and.w	r3, r3, #12
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d067      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d149      	bne.n	8008a9e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a0a:	4b35      	ldr	r3, [pc, #212]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a34      	ldr	r2, [pc, #208]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a16:	f7fa fc65 	bl	80032e4 <HAL_GetTick>
 8008a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a1e:	f7fa fc61 	bl	80032e4 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e053      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a30:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f0      	bne.n	8008a1e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	431a      	orrs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	019b      	lsls	r3, r3, #6
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	3b01      	subs	r3, #1
 8008a56:	041b      	lsls	r3, r3, #16
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5e:	061b      	lsls	r3, r3, #24
 8008a60:	4313      	orrs	r3, r2
 8008a62:	4a1f      	ldr	r2, [pc, #124]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a68:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a76:	f7fa fc35 	bl	80032e4 <HAL_GetTick>
 8008a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a7c:	e008      	b.n	8008a90 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a7e:	f7fa fc31 	bl	80032e4 <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e023      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0f0      	beq.n	8008a7e <HAL_RCC_OscConfig+0x476>
 8008a9c:	e01b      	b.n	8008ad6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a9e:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aaa:	f7fa fc1b 	bl	80032e4 <HAL_GetTick>
 8008aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ab2:	f7fa fc17 	bl	80032e4 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e009      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <HAL_RCC_OscConfig+0x4d8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1f0      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x4aa>
 8008ad0:	e001      	b.n	8008ad6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e000      	b.n	8008ad8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40007000 	.word	0x40007000

08008ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0ce      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b00:	4b69      	ldr	r3, [pc, #420]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d910      	bls.n	8008b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0e:	4b66      	ldr	r3, [pc, #408]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f023 020f 	bic.w	r2, r3, #15
 8008b16:	4964      	ldr	r1, [pc, #400]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1e:	4b62      	ldr	r3, [pc, #392]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d001      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0b6      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d020      	beq.n	8008b7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b48:	4b58      	ldr	r3, [pc, #352]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	4a57      	ldr	r2, [pc, #348]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b60:	4b52      	ldr	r3, [pc, #328]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	4a51      	ldr	r2, [pc, #324]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b6c:	4b4f      	ldr	r3, [pc, #316]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	494c      	ldr	r1, [pc, #304]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d040      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d107      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b92:	4b46      	ldr	r3, [pc, #280]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d115      	bne.n	8008bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e07d      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d107      	bne.n	8008bba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008baa:	4b40      	ldr	r3, [pc, #256]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e071      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bba:	4b3c      	ldr	r3, [pc, #240]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e069      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bca:	4b38      	ldr	r3, [pc, #224]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f023 0203 	bic.w	r2, r3, #3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4935      	ldr	r1, [pc, #212]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bdc:	f7fa fb82 	bl	80032e4 <HAL_GetTick>
 8008be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be2:	e00a      	b.n	8008bfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008be4:	f7fa fb7e 	bl	80032e4 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e051      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bfa:	4b2c      	ldr	r3, [pc, #176]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 020c 	and.w	r2, r3, #12
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d1eb      	bne.n	8008be4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c0c:	4b26      	ldr	r3, [pc, #152]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d210      	bcs.n	8008c3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1a:	4b23      	ldr	r3, [pc, #140]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f023 020f 	bic.w	r2, r3, #15
 8008c22:	4921      	ldr	r1, [pc, #132]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d001      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e030      	b.n	8008c9e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c48:	4b18      	ldr	r3, [pc, #96]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	4915      	ldr	r1, [pc, #84]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0308 	and.w	r3, r3, #8
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d009      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c66:	4b11      	ldr	r3, [pc, #68]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	490d      	ldr	r1, [pc, #52]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c7a:	f000 f81d 	bl	8008cb8 <HAL_RCC_GetSysClockFreq>
 8008c7e:	4601      	mov	r1, r0
 8008c80:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <HAL_RCC_ClockConfig+0x1c4>)
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	091b      	lsrs	r3, r3, #4
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008c8c:	5cd3      	ldrb	r3, [r2, r3]
 8008c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8008c92:	4a08      	ldr	r2, [pc, #32]	; (8008cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8008c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008c96:	2000      	movs	r0, #0
 8008c98:	f7fa f93a 	bl	8002f10 <HAL_InitTick>

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	40023c00 	.word	0x40023c00
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	0802465c 	.word	0x0802465c
 8008cb4:	20000134 	.word	0x20000134

08008cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cce:	4b50      	ldr	r3, [pc, #320]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x158>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 030c 	and.w	r3, r3, #12
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d007      	beq.n	8008cea <HAL_RCC_GetSysClockFreq+0x32>
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d008      	beq.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x38>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f040 808d 	bne.w	8008dfe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ce4:	4b4b      	ldr	r3, [pc, #300]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008ce6:	60bb      	str	r3, [r7, #8]
       break;
 8008ce8:	e08c      	b.n	8008e04 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cea:	4b4b      	ldr	r3, [pc, #300]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8008cec:	60bb      	str	r3, [r7, #8]
      break;
 8008cee:	e089      	b.n	8008e04 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cf0:	4b47      	ldr	r3, [pc, #284]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x158>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cf8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008cfa:	4b45      	ldr	r3, [pc, #276]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x158>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d023      	beq.n	8008d4e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d06:	4b42      	ldr	r3, [pc, #264]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x158>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	099b      	lsrs	r3, r3, #6
 8008d0c:	f04f 0400 	mov.w	r4, #0
 8008d10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	ea03 0501 	and.w	r5, r3, r1
 8008d1c:	ea04 0602 	and.w	r6, r4, r2
 8008d20:	4a3d      	ldr	r2, [pc, #244]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d22:	fb02 f106 	mul.w	r1, r2, r6
 8008d26:	2200      	movs	r2, #0
 8008d28:	fb02 f205 	mul.w	r2, r2, r5
 8008d2c:	440a      	add	r2, r1
 8008d2e:	493a      	ldr	r1, [pc, #232]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d30:	fba5 0101 	umull	r0, r1, r5, r1
 8008d34:	1853      	adds	r3, r2, r1
 8008d36:	4619      	mov	r1, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f04f 0400 	mov.w	r4, #0
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4623      	mov	r3, r4
 8008d42:	f7f7 fab5 	bl	80002b0 <__aeabi_uldivmod>
 8008d46:	4603      	mov	r3, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e049      	b.n	8008de2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d4e:	4b30      	ldr	r3, [pc, #192]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x158>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	099b      	lsrs	r3, r3, #6
 8008d54:	f04f 0400 	mov.w	r4, #0
 8008d58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	ea03 0501 	and.w	r5, r3, r1
 8008d64:	ea04 0602 	and.w	r6, r4, r2
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	f04f 0300 	mov.w	r3, #0
 8008d70:	f04f 0400 	mov.w	r4, #0
 8008d74:	0154      	lsls	r4, r2, #5
 8008d76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d7a:	014b      	lsls	r3, r1, #5
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4622      	mov	r2, r4
 8008d80:	1b49      	subs	r1, r1, r5
 8008d82:	eb62 0206 	sbc.w	r2, r2, r6
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	f04f 0400 	mov.w	r4, #0
 8008d8e:	0194      	lsls	r4, r2, #6
 8008d90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d94:	018b      	lsls	r3, r1, #6
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	eb64 0402 	sbc.w	r4, r4, r2
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	00e2      	lsls	r2, r4, #3
 8008da6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008daa:	00d9      	lsls	r1, r3, #3
 8008dac:	460b      	mov	r3, r1
 8008dae:	4614      	mov	r4, r2
 8008db0:	195b      	adds	r3, r3, r5
 8008db2:	eb44 0406 	adc.w	r4, r4, r6
 8008db6:	f04f 0100 	mov.w	r1, #0
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	02a2      	lsls	r2, r4, #10
 8008dc0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008dc4:	0299      	lsls	r1, r3, #10
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4614      	mov	r4, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	4621      	mov	r1, r4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f04f 0400 	mov.w	r4, #0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4623      	mov	r3, r4
 8008dd8:	f7f7 fa6a 	bl	80002b0 <__aeabi_uldivmod>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8008de2:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <HAL_RCC_GetSysClockFreq+0x158>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	0c1b      	lsrs	r3, r3, #16
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	3301      	adds	r3, #1
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfa:	60bb      	str	r3, [r7, #8]
      break;
 8008dfc:	e002      	b.n	8008e04 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008e00:	60bb      	str	r3, [r7, #8]
      break;
 8008e02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e04:	68bb      	ldr	r3, [r7, #8]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	40023800 	.word	0x40023800
 8008e14:	00f42400 	.word	0x00f42400
 8008e18:	017d7840 	.word	0x017d7840

08008e1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e20:	4b03      	ldr	r3, [pc, #12]	; (8008e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e22:	681b      	ldr	r3, [r3, #0]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	20000134 	.word	0x20000134

08008e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e38:	f7ff fff0 	bl	8008e1c <HAL_RCC_GetHCLKFreq>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	0a9b      	lsrs	r3, r3, #10
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	4a03      	ldr	r2, [pc, #12]	; (8008e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e4a:	5cd3      	ldrb	r3, [r2, r3]
 8008e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40023800 	.word	0x40023800
 8008e58:	0802466c 	.word	0x0802466c

08008e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e60:	f7ff ffdc 	bl	8008e1c <HAL_RCC_GetHCLKFreq>
 8008e64:	4601      	mov	r1, r0
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	0b5b      	lsrs	r3, r3, #13
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	4a03      	ldr	r2, [pc, #12]	; (8008e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e72:	5cd3      	ldrb	r3, [r2, r3]
 8008e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	0802466c 	.word	0x0802466c

08008e84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	220f      	movs	r2, #15
 8008e92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f003 0203 	and.w	r2, r3, #3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008eac:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <HAL_RCC_GetClockConfig+0x5c>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	08db      	lsrs	r3, r3, #3
 8008ebe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <HAL_RCC_GetClockConfig+0x60>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 020f 	and.w	r2, r3, #15
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	601a      	str	r2, [r3, #0]
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	40023c00 	.word	0x40023c00

08008ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d012      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f10:	4b69      	ldr	r3, [pc, #420]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4a68      	ldr	r2, [pc, #416]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008f1a:	6093      	str	r3, [r2, #8]
 8008f1c:	4b66      	ldr	r3, [pc, #408]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f24:	4964      	ldr	r1, [pc, #400]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008f32:	2301      	movs	r3, #1
 8008f34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d017      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f42:	4b5d      	ldr	r3, [pc, #372]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f50:	4959      	ldr	r1, [pc, #356]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f60:	d101      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008f62:	2301      	movs	r3, #1
 8008f64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d017      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f7e:	4b4e      	ldr	r3, [pc, #312]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	494a      	ldr	r1, [pc, #296]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f9c:	d101      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008faa:	2301      	movs	r3, #1
 8008fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 808b 	beq.w	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fcc:	4b3a      	ldr	r3, [pc, #232]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	4a39      	ldr	r2, [pc, #228]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd8:	4b37      	ldr	r3, [pc, #220]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008fe4:	4b35      	ldr	r3, [pc, #212]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a34      	ldr	r2, [pc, #208]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ff0:	f7fa f978 	bl	80032e4 <HAL_GetTick>
 8008ff4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ff8:	f7fa f974 	bl	80032e4 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	; 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e355      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800900a:	4b2c      	ldr	r3, [pc, #176]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f0      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009016:	4b28      	ldr	r3, [pc, #160]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800901e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d035      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	429a      	cmp	r2, r3
 8009032:	d02e      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009034:	4b20      	ldr	r3, [pc, #128]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800903c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800903e:	4b1e      	ldr	r3, [pc, #120]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009042:	4a1d      	ldr	r2, [pc, #116]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009048:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800904a:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800904c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904e:	4a1a      	ldr	r2, [pc, #104]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009056:	4a18      	ldr	r2, [pc, #96]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800905c:	4b16      	ldr	r3, [pc, #88]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800905e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b01      	cmp	r3, #1
 8009066:	d114      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009068:	f7fa f93c 	bl	80032e4 <HAL_GetTick>
 800906c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800906e:	e00a      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009070:	f7fa f938 	bl	80032e4 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	f241 3288 	movw	r2, #5000	; 0x1388
 800907e:	4293      	cmp	r3, r2
 8009080:	d901      	bls.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e317      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009086:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0ee      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800909e:	d111      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090ae:	400b      	ands	r3, r1
 80090b0:	4901      	ldr	r1, [pc, #4]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	608b      	str	r3, [r1, #8]
 80090b6:	e00b      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80090b8:	40023800 	.word	0x40023800
 80090bc:	40007000 	.word	0x40007000
 80090c0:	0ffffcff 	.word	0x0ffffcff
 80090c4:	4bb0      	ldr	r3, [pc, #704]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	4aaf      	ldr	r2, [pc, #700]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80090ce:	6093      	str	r3, [r2, #8]
 80090d0:	4bad      	ldr	r3, [pc, #692]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090dc:	49aa      	ldr	r1, [pc, #680]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0310 	and.w	r3, r3, #16
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d010      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090ee:	4ba6      	ldr	r3, [pc, #664]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f4:	4aa4      	ldr	r2, [pc, #656]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80090f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80090fe:	4ba2      	ldr	r3, [pc, #648]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	499f      	ldr	r1, [pc, #636]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800911c:	4b9a      	ldr	r3, [pc, #616]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800911e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912a:	4997      	ldr	r1, [pc, #604]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800913e:	4b92      	ldr	r3, [pc, #584]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800914c:	498e      	ldr	r1, [pc, #568]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800914e:	4313      	orrs	r3, r2
 8009150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009160:	4b89      	ldr	r3, [pc, #548]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916e:	4986      	ldr	r1, [pc, #536]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009170:	4313      	orrs	r3, r2
 8009172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009182:	4b81      	ldr	r3, [pc, #516]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009188:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009190:	497d      	ldr	r1, [pc, #500]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009192:	4313      	orrs	r3, r2
 8009194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091a4:	4b78      	ldr	r3, [pc, #480]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091aa:	f023 0203 	bic.w	r2, r3, #3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	4975      	ldr	r1, [pc, #468]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091c6:	4b70      	ldr	r3, [pc, #448]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091cc:	f023 020c 	bic.w	r2, r3, #12
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091d4:	496c      	ldr	r1, [pc, #432]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80091e8:	4b67      	ldr	r3, [pc, #412]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f6:	4964      	ldr	r1, [pc, #400]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800920a:	4b5f      	ldr	r3, [pc, #380]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009210:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009218:	495b      	ldr	r1, [pc, #364]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800921a:	4313      	orrs	r3, r2
 800921c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800922c:	4b56      	ldr	r3, [pc, #344]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800922e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	4953      	ldr	r1, [pc, #332]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800923c:	4313      	orrs	r3, r2
 800923e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800924e:	4b4e      	ldr	r3, [pc, #312]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925c:	494a      	ldr	r1, [pc, #296]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800925e:	4313      	orrs	r3, r2
 8009260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009270:	4b45      	ldr	r3, [pc, #276]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800927e:	4942      	ldr	r1, [pc, #264]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009280:	4313      	orrs	r3, r2
 8009282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009292:	4b3d      	ldr	r3, [pc, #244]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a0:	4939      	ldr	r1, [pc, #228]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00a      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092b4:	4b34      	ldr	r3, [pc, #208]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c2:	4931      	ldr	r1, [pc, #196]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d011      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80092d6:	4b2c      	ldr	r3, [pc, #176]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e4:	4928      	ldr	r1, [pc, #160]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092f4:	d101      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80092f6:	2301      	movs	r3, #1
 80092f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009306:	2301      	movs	r3, #1
 8009308:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009316:	4b1c      	ldr	r3, [pc, #112]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800931c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009324:	4918      	ldr	r1, [pc, #96]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009326:	4313      	orrs	r3, r2
 8009328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009338:	4b13      	ldr	r3, [pc, #76]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800933a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009348:	490f      	ldr	r1, [pc, #60]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800934a:	4313      	orrs	r3, r2
 800934c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d005      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800935e:	f040 80d8 	bne.w	8009512 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a08      	ldr	r2, [pc, #32]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800936c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800936e:	f7f9 ffb9 	bl	80032e4 <HAL_GetTick>
 8009372:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009374:	e00a      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009376:	f7f9 ffb5 	bl	80032e4 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b64      	cmp	r3, #100	; 0x64
 8009382:	d903      	bls.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e196      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009388:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800938c:	4b6c      	ldr	r3, [pc, #432]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1ee      	bne.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d021      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11d      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80093ac:	4b64      	ldr	r3, [pc, #400]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80093ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80093ba:	4b61      	ldr	r3, [pc, #388]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80093bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c0:	0e1b      	lsrs	r3, r3, #24
 80093c2:	f003 030f 	and.w	r3, r3, #15
 80093c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	019a      	lsls	r2, r3, #6
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	431a      	orrs	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	061b      	lsls	r3, r3, #24
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	071b      	lsls	r3, r3, #28
 80093e0:	4957      	ldr	r1, [pc, #348]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d004      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x516>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093fc:	d00a      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009406:	2b00      	cmp	r3, #0
 8009408:	d02e      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009412:	d129      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009414:	4b4a      	ldr	r3, [pc, #296]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800941a:	0c1b      	lsrs	r3, r3, #16
 800941c:	f003 0303 	and.w	r3, r3, #3
 8009420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009422:	4b47      	ldr	r3, [pc, #284]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009428:	0f1b      	lsrs	r3, r3, #28
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	019a      	lsls	r2, r3, #6
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	061b      	lsls	r3, r3, #24
 8009442:	431a      	orrs	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	071b      	lsls	r3, r3, #28
 8009448:	493d      	ldr	r1, [pc, #244]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800944a:	4313      	orrs	r3, r2
 800944c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009450:	4b3b      	ldr	r3, [pc, #236]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009456:	f023 021f 	bic.w	r2, r3, #31
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	3b01      	subs	r3, #1
 8009460:	4937      	ldr	r1, [pc, #220]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d01d      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009474:	4b32      	ldr	r3, [pc, #200]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800947a:	0e1b      	lsrs	r3, r3, #24
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009482:	4b2f      	ldr	r3, [pc, #188]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009488:	0f1b      	lsrs	r3, r3, #28
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	019a      	lsls	r2, r3, #6
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	041b      	lsls	r3, r3, #16
 800949c:	431a      	orrs	r2, r3
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	061b      	lsls	r3, r3, #24
 80094a2:	431a      	orrs	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	071b      	lsls	r3, r3, #28
 80094a8:	4925      	ldr	r1, [pc, #148]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d011      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	019a      	lsls	r2, r3, #6
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	061b      	lsls	r3, r3, #24
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	071b      	lsls	r3, r3, #28
 80094d8:	4919      	ldr	r1, [pc, #100]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80094e0:	4b17      	ldr	r3, [pc, #92]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a16      	ldr	r2, [pc, #88]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80094e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ec:	f7f9 fefa 	bl	80032e4 <HAL_GetTick>
 80094f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80094f2:	e008      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094f4:	f7f9 fef6 	bl	80032e4 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	2b64      	cmp	r3, #100	; 0x64
 8009500:	d901      	bls.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e0d7      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009506:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0f0      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b01      	cmp	r3, #1
 8009516:	f040 80cd 	bne.w	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a08      	ldr	r2, [pc, #32]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009526:	f7f9 fedd 	bl	80032e4 <HAL_GetTick>
 800952a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800952c:	e00a      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800952e:	f7f9 fed9 	bl	80032e4 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b64      	cmp	r3, #100	; 0x64
 800953a:	d903      	bls.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e0ba      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009544:	4b5e      	ldr	r3, [pc, #376]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800954c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009550:	d0ed      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d009      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02e      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d12a      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800957a:	4b51      	ldr	r3, [pc, #324]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009580:	0c1b      	lsrs	r3, r3, #16
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009588:	4b4d      	ldr	r3, [pc, #308]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800958a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958e:	0f1b      	lsrs	r3, r3, #28
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	019a      	lsls	r2, r3, #6
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	041b      	lsls	r3, r3, #16
 80095a0:	431a      	orrs	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	061b      	lsls	r3, r3, #24
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	071b      	lsls	r3, r3, #28
 80095ae:	4944      	ldr	r1, [pc, #272]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80095b6:	4b42      	ldr	r3, [pc, #264]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c4:	3b01      	subs	r3, #1
 80095c6:	021b      	lsls	r3, r3, #8
 80095c8:	493d      	ldr	r1, [pc, #244]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d022      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095e4:	d11d      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80095e6:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ec:	0e1b      	lsrs	r3, r3, #24
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80095f4:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80095f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	f003 0307 	and.w	r3, r3, #7
 8009600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	019a      	lsls	r2, r3, #6
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	041b      	lsls	r3, r3, #16
 800960e:	431a      	orrs	r2, r3
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	061b      	lsls	r3, r3, #24
 8009614:	431a      	orrs	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	071b      	lsls	r3, r3, #28
 800961a:	4929      	ldr	r1, [pc, #164]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d028      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800962e:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009634:	0e1b      	lsrs	r3, r3, #24
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800963c:	4b20      	ldr	r3, [pc, #128]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800963e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009642:	0c1b      	lsrs	r3, r3, #16
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	019a      	lsls	r2, r3, #6
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	041b      	lsls	r3, r3, #16
 8009654:	431a      	orrs	r2, r3
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	061b      	lsls	r3, r3, #24
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	071b      	lsls	r3, r3, #28
 8009662:	4917      	ldr	r1, [pc, #92]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800966a:	4b15      	ldr	r3, [pc, #84]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	4911      	ldr	r1, [pc, #68]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009680:	4b0f      	ldr	r3, [pc, #60]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a0e      	ldr	r2, [pc, #56]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800968a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800968c:	f7f9 fe2a 	bl	80032e4 <HAL_GetTick>
 8009690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009692:	e008      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009694:	f7f9 fe26 	bl	80032e4 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b64      	cmp	r3, #100	; 0x64
 80096a0:	d901      	bls.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e007      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80096a6:	4b06      	ldr	r3, [pc, #24]	; (80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b2:	d1ef      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	40023800 	.word	0x40023800

080096c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096e2:	f040 8086 	bne.w	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80096e6:	4b8d      	ldr	r3, [pc, #564]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80096e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096ec:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80096f4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096fc:	d03e      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80096fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009702:	d073      	beq.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d000      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009708:	e074      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800970a:	4b84      	ldr	r3, [pc, #528]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d108      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009716:	4b81      	ldr	r3, [pc, #516]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800971e:	4a80      	ldr	r2, [pc, #512]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009720:	fbb2 f3f3 	udiv	r3, r2, r3
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	e007      	b.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009728:	4b7c      	ldr	r3, [pc, #496]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009730:	4a7c      	ldr	r2, [pc, #496]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009732:	fbb2 f3f3 	udiv	r3, r2, r3
 8009736:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009738:	4b78      	ldr	r3, [pc, #480]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973e:	0e1b      	lsrs	r3, r3, #24
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009746:	4b75      	ldr	r3, [pc, #468]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974c:	099b      	lsrs	r3, r3, #6
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	fb02 f203 	mul.w	r2, r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	fbb2 f3f3 	udiv	r3, r2, r3
 800975e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009760:	4b6e      	ldr	r3, [pc, #440]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009766:	0a1b      	lsrs	r3, r3, #8
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	3301      	adds	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	fbb2 f3f3 	udiv	r3, r2, r3
 8009778:	617b      	str	r3, [r7, #20]
        break;
 800977a:	e03b      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800977c:	4b67      	ldr	r3, [pc, #412]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d108      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009788:	4b64      	ldr	r3, [pc, #400]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009790:	4a63      	ldr	r2, [pc, #396]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009792:	fbb2 f3f3 	udiv	r3, r2, r3
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	e007      	b.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800979a:	4b60      	ldr	r3, [pc, #384]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097a2:	4a60      	ldr	r2, [pc, #384]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80097a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80097aa:	4b5c      	ldr	r3, [pc, #368]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80097ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097b0:	0e1b      	lsrs	r3, r3, #24
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80097b8:	4b58      	ldr	r3, [pc, #352]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80097ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097be:	099b      	lsrs	r3, r3, #6
 80097c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	fb02 f203 	mul.w	r2, r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80097d2:	4b52      	ldr	r3, [pc, #328]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80097d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	3301      	adds	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e8:	617b      	str	r3, [r7, #20]
        break;
 80097ea:	e003      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80097ec:	4b4e      	ldr	r3, [pc, #312]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80097ee:	617b      	str	r3, [r7, #20]
        break;
 80097f0:	e000      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80097f2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097fa:	f040 8086 	bne.w	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80097fe:	4b47      	ldr	r3, [pc, #284]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009804:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800980c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009814:	d03e      	beq.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800981a:	d073      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800981c:	2b00      	cmp	r3, #0
 800981e:	d000      	beq.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009820:	e074      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009822:	4b3e      	ldr	r3, [pc, #248]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d108      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800982e:	4b3b      	ldr	r3, [pc, #236]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009836:	4a3a      	ldr	r2, [pc, #232]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009838:	fbb2 f3f3 	udiv	r3, r2, r3
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	e007      	b.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009840:	4b36      	ldr	r3, [pc, #216]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009848:	4a36      	ldr	r2, [pc, #216]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800984a:	fbb2 f3f3 	udiv	r3, r2, r3
 800984e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009850:	4b32      	ldr	r3, [pc, #200]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009856:	0e1b      	lsrs	r3, r3, #24
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800985e:	4b2f      	ldr	r3, [pc, #188]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	099b      	lsrs	r3, r3, #6
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	fb02 f203 	mul.w	r2, r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	fbb2 f3f3 	udiv	r3, r2, r3
 8009876:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009878:	4b28      	ldr	r3, [pc, #160]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800987a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	3301      	adds	r3, #1
 8009886:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	617b      	str	r3, [r7, #20]
        break;
 8009892:	e03b      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009894:	4b21      	ldr	r3, [pc, #132]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d108      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80098a0:	4b1e      	ldr	r3, [pc, #120]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a8:	4a1d      	ldr	r2, [pc, #116]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80098aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ae:	613b      	str	r3, [r7, #16]
 80098b0:	e007      	b.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80098b2:	4b1a      	ldr	r3, [pc, #104]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ba:	4a1a      	ldr	r2, [pc, #104]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80098bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80098c2:	4b16      	ldr	r3, [pc, #88]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098c8:	0e1b      	lsrs	r3, r3, #24
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80098d0:	4b12      	ldr	r3, [pc, #72]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d6:	099b      	lsrs	r3, r3, #6
 80098d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	fb02 f203 	mul.w	r2, r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80098ea:	4b0c      	ldr	r3, [pc, #48]	; (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	3301      	adds	r3, #1
 80098f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	617b      	str	r3, [r7, #20]
        break;
 8009902:	e003      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009904:	4b08      	ldr	r3, [pc, #32]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009906:	617b      	str	r3, [r7, #20]
        break;
 8009908:	e000      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800990a:	bf00      	nop

  return frequency;
 800990c:	697b      	ldr	r3, [r7, #20]
}
 800990e:	4618      	mov	r0, r3
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40023800 	.word	0x40023800
 8009920:	00f42400 	.word	0x00f42400
 8009924:	017d7840 	.word	0x017d7840
 8009928:	00bb8000 	.word	0x00bb8000

0800992c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e06b      	b.n	8009a16 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7f5b      	ldrb	r3, [r3, #29]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d105      	bne.n	8009954 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7f8 ff54 	bl	80027fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	22ca      	movs	r2, #202	; 0xca
 8009960:	625a      	str	r2, [r3, #36]	; 0x24
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2253      	movs	r2, #83	; 0x53
 8009968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb00 	bl	8009f70 <RTC_EnterInitMode>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	22ff      	movs	r2, #255	; 0xff
 800997c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2204      	movs	r2, #4
 8009982:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e046      	b.n	8009a16 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6899      	ldr	r1, [r3, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	4b23      	ldr	r3, [pc, #140]	; (8009a20 <HAL_RTC_Init+0xf4>)
 8009994:	400b      	ands	r3, r1
 8009996:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6899      	ldr	r1, [r3, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68d2      	ldr	r2, [r2, #12]
 80099be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6919      	ldr	r1, [r3, #16]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	041a      	lsls	r2, r3, #16
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099e2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0208 	bic.w	r2, r2, #8
 80099f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	22ff      	movs	r2, #255	; 0xff
 8009a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009a14:	2300      	movs	r3, #0
  }
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	ff8fffbf 	.word	0xff8fffbf

08009a24 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a24:	b590      	push	{r4, r7, lr}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	7f1b      	ldrb	r3, [r3, #28]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_RTC_SetTime+0x1c>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	e0a8      	b.n	8009b92 <HAL_RTC_SetTime+0x16e>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d126      	bne.n	8009aa0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d102      	bne.n	8009a66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2200      	movs	r2, #0
 8009a64:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 faac 	bl	8009fc8 <RTC_ByteToBcd2>
 8009a70:	4603      	mov	r3, r0
 8009a72:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 faa5 	bl	8009fc8 <RTC_ByteToBcd2>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009a82:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	789b      	ldrb	r3, [r3, #2]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fa9d 	bl	8009fc8 <RTC_ByteToBcd2>
 8009a8e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009a90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	7b1b      	ldrb	r3, [r3, #12]
 8009a98:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	e018      	b.n	8009ad2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ac0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009ac6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	7b1b      	ldrb	r3, [r3, #12]
 8009acc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	22ca      	movs	r2, #202	; 0xca
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2253      	movs	r2, #83	; 0x53
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f000 fa44 	bl	8009f70 <RTC_EnterInitMode>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00b      	beq.n	8009b06 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	22ff      	movs	r2, #255	; 0xff
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2204      	movs	r2, #4
 8009afa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e045      	b.n	8009b92 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	6979      	ldr	r1, [r7, #20]
 8009b0c:	4b23      	ldr	r3, [pc, #140]	; (8009b9c <HAL_RTC_SetTime+0x178>)
 8009b0e:	400b      	ands	r3, r1
 8009b10:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6899      	ldr	r1, [r3, #8]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	430a      	orrs	r2, r1
 8009b38:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b48:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d111      	bne.n	8009b7c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f9e1 	bl	8009f20 <HAL_RTC_WaitForSynchro>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	22ff      	movs	r2, #255	; 0xff
 8009b6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2204      	movs	r2, #4
 8009b70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e00a      	b.n	8009b92 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	22ff      	movs	r2, #255	; 0xff
 8009b82:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009b90:	2300      	movs	r3, #0
  }
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd90      	pop	{r4, r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	007f7f7f 	.word	0x007f7f7f

08009ba0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ba0:	b590      	push	{r4, r7, lr}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	7f1b      	ldrb	r3, [r3, #28]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d101      	bne.n	8009bbc <HAL_RTC_SetDate+0x1c>
 8009bb8:	2302      	movs	r3, #2
 8009bba:	e092      	b.n	8009ce2 <HAL_RTC_SetDate+0x142>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10e      	bne.n	8009bec <HAL_RTC_SetDate+0x4c>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	785b      	ldrb	r3, [r3, #1]
 8009bd2:	f003 0310 	and.w	r3, r3, #16
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d008      	beq.n	8009bec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	f023 0310 	bic.w	r3, r3, #16
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	330a      	adds	r3, #10
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d11c      	bne.n	8009c2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	78db      	ldrb	r3, [r3, #3]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f9e6 	bl	8009fc8 <RTC_ByteToBcd2>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 f9df 	bl	8009fc8 <RTC_ByteToBcd2>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009c0e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	789b      	ldrb	r3, [r3, #2]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 f9d7 	bl	8009fc8 <RTC_ByteToBcd2>
 8009c1a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009c1c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]
 8009c2a:	e00e      	b.n	8009c4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	78db      	ldrb	r3, [r3, #3]
 8009c30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009c38:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009c3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009c46:	4313      	orrs	r3, r2
 8009c48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	22ca      	movs	r2, #202	; 0xca
 8009c50:	625a      	str	r2, [r3, #36]	; 0x24
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2253      	movs	r2, #83	; 0x53
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f988 	bl	8009f70 <RTC_EnterInitMode>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00b      	beq.n	8009c7e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	22ff      	movs	r2, #255	; 0xff
 8009c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2204      	movs	r2, #4
 8009c72:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e031      	b.n	8009ce2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	6979      	ldr	r1, [r7, #20]
 8009c84:	4b19      	ldr	r3, [pc, #100]	; (8009cec <HAL_RTC_SetDate+0x14c>)
 8009c86:	400b      	ands	r3, r1
 8009c88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c98:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f003 0320 	and.w	r3, r3, #32
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d111      	bne.n	8009ccc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f939 	bl	8009f20 <HAL_RTC_WaitForSynchro>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	22ff      	movs	r2, #255	; 0xff
 8009cba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2204      	movs	r2, #4
 8009cc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e00a      	b.n	8009ce2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	22ff      	movs	r2, #255	; 0xff
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
  }
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd90      	pop	{r4, r7, pc}
 8009cea:	bf00      	nop
 8009cec:	00ffff3f 	.word	0x00ffff3f

08009cf0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009cf0:	b590      	push	{r4, r7, lr}
 8009cf2:	b089      	sub	sp, #36	; 0x24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	7f1b      	ldrb	r3, [r3, #28]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_RTC_SetAlarm+0x24>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e101      	b.n	8009f18 <HAL_RTC_SetAlarm+0x228>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d137      	bne.n	8009d96 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2200      	movs	r2, #0
 8009d38:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 f942 	bl	8009fc8 <RTC_ByteToBcd2>
 8009d44:	4603      	mov	r3, r0
 8009d46:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 f93b 	bl	8009fc8 <RTC_ByteToBcd2>
 8009d52:	4603      	mov	r3, r0
 8009d54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009d56:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	789b      	ldrb	r3, [r3, #2]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f933 	bl	8009fc8 <RTC_ByteToBcd2>
 8009d62:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009d64:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	7b1b      	ldrb	r3, [r3, #12]
 8009d6c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009d6e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f925 	bl	8009fc8 <RTC_ByteToBcd2>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009d82:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009d8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009d90:	4313      	orrs	r3, r2
 8009d92:	61fb      	str	r3, [r7, #28]
 8009d94:	e023      	b.n	8009dde <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d102      	bne.n	8009daa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	785b      	ldrb	r3, [r3, #1]
 8009db4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009db6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009dbc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	7b1b      	ldrb	r3, [r3, #12]
 8009dc2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009dc4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009dce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009dd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	22ca      	movs	r2, #202	; 0xca
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2253      	movs	r2, #83	; 0x53
 8009df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e02:	d13f      	bne.n	8009e84 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e12:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e22:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e24:	f7f9 fa5e 	bl	80032e4 <HAL_GetTick>
 8009e28:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009e2a:	e013      	b.n	8009e54 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e2c:	f7f9 fa5a 	bl	80032e4 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e3a:	d90b      	bls.n	8009e54 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	22ff      	movs	r2, #255	; 0xff
 8009e42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2203      	movs	r2, #3
 8009e48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e061      	b.n	8009f18 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0e4      	beq.n	8009e2c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e80:	609a      	str	r2, [r3, #8]
 8009e82:	e03e      	b.n	8009f02 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689a      	ldr	r2, [r3, #8]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e92:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ea2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ea4:	f7f9 fa1e 	bl	80032e4 <HAL_GetTick>
 8009ea8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009eaa:	e013      	b.n	8009ed4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009eac:	f7f9 fa1a 	bl	80032e4 <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eba:	d90b      	bls.n	8009ed4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	22ff      	movs	r2, #255	; 0xff
 8009ec2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2203      	movs	r2, #3
 8009ec8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e021      	b.n	8009f18 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0e4      	beq.n	8009eac <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f00:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	22ff      	movs	r2, #255	; 0xff
 8009f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3724      	adds	r7, #36	; 0x24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd90      	pop	{r4, r7, pc}

08009f20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f3c:	f7f9 f9d2 	bl	80032e4 <HAL_GetTick>
 8009f40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009f42:	e009      	b.n	8009f58 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f44:	f7f9 f9ce 	bl	80032e4 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f52:	d901      	bls.n	8009f58 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e007      	b.n	8009f68 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0ee      	beq.n	8009f44 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d119      	bne.n	8009fbe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f94:	f7f9 f9a6 	bl	80032e4 <HAL_GetTick>
 8009f98:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f9a:	e009      	b.n	8009fb0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f9c:	f7f9 f9a2 	bl	80032e4 <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009faa:	d901      	bls.n	8009fb0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e007      	b.n	8009fc0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0ee      	beq.n	8009f9c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009fd6:	e005      	b.n	8009fe4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	3b0a      	subs	r3, #10
 8009fe2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	2b09      	cmp	r3, #9
 8009fe8:	d8f6      	bhi.n	8009fd8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	b2db      	uxtb	r3, r3
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	7f1b      	ldrb	r3, [r3, #28]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e03e      	b.n	800a09e <HAL_RTCEx_SetTimeStamp+0x9a>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2201      	movs	r2, #1
 800a024:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2202      	movs	r2, #2
 800a02a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a034:	4013      	ands	r3, r2
 800a036:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	22ca      	movs	r2, #202	; 0xca
 800a046:	625a      	str	r2, [r3, #36]	; 0x24
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2253      	movs	r2, #83	; 0x53
 800a04e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f022 0206 	bic.w	r2, r2, #6
 800a05e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a086:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	22ff      	movs	r2, #255	; 0xff
 800a08e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2201      	movs	r2, #1
 800a094:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	fffff7f7 	.word	0xfffff7f7

0800a0b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e149      	b.n	800a362 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f8 feaa 	bl	8002e3c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f94f 	bl	800a394 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d007      	beq.n	800a10e <HAL_SAI_Init+0x5e>
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d302      	bcc.n	800a108 <HAL_SAI_Init+0x58>
 800a102:	2b02      	cmp	r3, #2
 800a104:	d006      	beq.n	800a114 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800a106:	e008      	b.n	800a11a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	61fb      	str	r3, [r7, #28]
      break;
 800a10c:	e005      	b.n	800a11a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a10e:	2310      	movs	r3, #16
 800a110:	61fb      	str	r3, [r7, #28]
      break;
 800a112:	e002      	b.n	800a11a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a114:	2320      	movs	r3, #32
 800a116:	61fb      	str	r3, [r7, #28]
      break;
 800a118:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d81d      	bhi.n	800a15e <HAL_SAI_Init+0xae>
 800a122:	a201      	add	r2, pc, #4	; (adr r2, 800a128 <HAL_SAI_Init+0x78>)
 800a124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a128:	0800a139 	.word	0x0800a139
 800a12c:	0800a13f 	.word	0x0800a13f
 800a130:	0800a147 	.word	0x0800a147
 800a134:	0800a14f 	.word	0x0800a14f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	617b      	str	r3, [r7, #20]
      }
      break;
 800a13c:	e010      	b.n	800a160 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800a13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a142:	617b      	str	r3, [r7, #20]
      }
      break;
 800a144:	e00c      	b.n	800a160 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800a146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a14a:	617b      	str	r3, [r7, #20]
      }
      break;
 800a14c:	e008      	b.n	800a160 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800a14e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a152:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800a15c:	e000      	b.n	800a160 <HAL_SAI_Init+0xb0>
  default:
    break;
 800a15e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a81      	ldr	r2, [pc, #516]	; (800a36c <HAL_SAI_Init+0x2bc>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d004      	beq.n	800a174 <HAL_SAI_Init+0xc4>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a80      	ldr	r2, [pc, #512]	; (800a370 <HAL_SAI_Init+0x2c0>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d103      	bne.n	800a17c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800a174:	4a7f      	ldr	r2, [pc, #508]	; (800a374 <HAL_SAI_Init+0x2c4>)
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e002      	b.n	800a182 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a17c:	4a7e      	ldr	r2, [pc, #504]	; (800a378 <HAL_SAI_Init+0x2c8>)
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d043      	beq.n	800a212 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a76      	ldr	r2, [pc, #472]	; (800a36c <HAL_SAI_Init+0x2bc>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d004      	beq.n	800a1a2 <HAL_SAI_Init+0xf2>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a74      	ldr	r2, [pc, #464]	; (800a370 <HAL_SAI_Init+0x2c0>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d104      	bne.n	800a1ac <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a1a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a1a6:	f7ff fa8d 	bl	80096c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a1aa:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a72      	ldr	r2, [pc, #456]	; (800a37c <HAL_SAI_Init+0x2cc>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d004      	beq.n	800a1c0 <HAL_SAI_Init+0x110>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a71      	ldr	r2, [pc, #452]	; (800a380 <HAL_SAI_Init+0x2d0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d104      	bne.n	800a1ca <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a1c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a1c4:	f7ff fa7e 	bl	80096c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800a1c8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	025b      	lsls	r3, r3, #9
 800a1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4a67      	ldr	r2, [pc, #412]	; (800a384 <HAL_SAI_Init+0x2d4>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	08da      	lsrs	r2, r3, #3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	4b64      	ldr	r3, [pc, #400]	; (800a384 <HAL_SAI_Init+0x2d4>)
 800a1f4:	fba3 2301 	umull	r2, r3, r3, r1
 800a1f8:	08da      	lsrs	r2, r3, #3
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	1aca      	subs	r2, r1, r3
 800a204:	2a08      	cmp	r2, #8
 800a206:	d904      	bls.n	800a212 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_SAI_Init+0x172>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d109      	bne.n	800a236 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_SAI_Init+0x17e>
 800a22a:	2300      	movs	r3, #0
 800a22c:	e001      	b.n	800a232 <HAL_SAI_Init+0x182>
 800a22e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	e008      	b.n	800a248 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d102      	bne.n	800a244 <HAL_SAI_Init+0x194>
 800a23e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a242:	e000      	b.n	800a246 <HAL_SAI_Init+0x196>
 800a244:	2300      	movs	r3, #0
 800a246:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4b4d      	ldr	r3, [pc, #308]	; (800a388 <HAL_SAI_Init+0x2d8>)
 800a254:	400b      	ands	r3, r1
 800a256:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a266:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a26c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	431a      	orrs	r2, r3
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800a280:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a28c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	051b      	lsls	r3, r3, #20
 800a294:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	6859      	ldr	r1, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	4b38      	ldr	r3, [pc, #224]	; (800a38c <HAL_SAI_Init+0x2dc>)
 800a2aa:	400b      	ands	r3, r1
 800a2ac:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6859      	ldr	r1, [r3, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	699a      	ldr	r2, [r3, #24]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6899      	ldr	r1, [r3, #8]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4b2e      	ldr	r3, [pc, #184]	; (800a390 <HAL_SAI_Init+0x2e0>)
 800a2d8:	400b      	ands	r3, r1
 800a2da:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6899      	ldr	r1, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800a2ec:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800a2f2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800a2f8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fe:	3b01      	subs	r3, #1
 800a300:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800a302:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68d9      	ldr	r1, [r3, #12]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a31a:	400b      	ands	r3, r1
 800a31c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68d9      	ldr	r1, [r3, #12]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a332:	041b      	lsls	r3, r3, #16
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a33a:	3b01      	subs	r3, #1
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40015804 	.word	0x40015804
 800a370:	40015824 	.word	0x40015824
 800a374:	40015800 	.word	0x40015800
 800a378:	40015c00 	.word	0x40015c00
 800a37c:	40015c04 	.word	0x40015c04
 800a380:	40015c24 	.word	0x40015c24
 800a384:	cccccccd 	.word	0xcccccccd
 800a388:	ff05c010 	.word	0xff05c010
 800a38c:	ffff1ff0 	.word	0xffff1ff0
 800a390:	fff88000 	.word	0xfff88000

0800a394 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a394:	b490      	push	{r4, r7}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800a39c:	4b16      	ldr	r3, [pc, #88]	; (800a3f8 <SAI_Disable+0x64>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a16      	ldr	r2, [pc, #88]	; (800a3fc <SAI_Disable+0x68>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	0b1b      	lsrs	r3, r3, #12
 800a3a8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a3bc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a3be:	4623      	mov	r3, r4
 800a3c0:	1e5c      	subs	r4, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10a      	bne.n	800a3dc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3da:	e006      	b.n	800a3ea <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e9      	bne.n	800a3be <SAI_Disable+0x2a>

  return status;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bc90      	pop	{r4, r7}
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	20000134 	.word	0x20000134
 800a3fc:	95cbec1b 	.word	0x95cbec1b

0800a400 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e01d      	b.n	800a44e <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d105      	bne.n	800a42a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7f8 fa03 	bl	8002830 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2203      	movs	r2, #3
 800a42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f80f 	bl	800a456 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a456:	b5b0      	push	{r4, r5, r7, lr}
 800a458:	b08e      	sub	sp, #56	; 0x38
 800a45a:	af04      	add	r7, sp, #16
 800a45c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a45e:	2300      	movs	r3, #0
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a466:	2300      	movs	r3, #0
 800a468:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a46e:	2300      	movs	r3, #0
 800a470:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a476:	2376      	movs	r3, #118	; 0x76
 800a478:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681d      	ldr	r5, [r3, #0]
 800a47e:	466c      	mov	r4, sp
 800a480:	f107 0318 	add.w	r3, r7, #24
 800a484:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a48c:	f107 030c 	add.w	r3, r7, #12
 800a490:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a492:	4628      	mov	r0, r5
 800a494:	f003 faf8 	bl	800da88 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4a6:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f003 fb24 	bl	800dafa <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4c0:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800a4c2:	2002      	movs	r0, #2
 800a4c4:	f7f8 ff1a 	bl	80032fc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fe24 	bl	800b116 <SD_PowerON>
 800a4ce:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e013      	b.n	800a516 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fd48 	bl	800af84 <SD_InitCard>
 800a4f4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e000      	b.n	800a516 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3728      	adds	r7, #40	; 0x28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a520 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08c      	sub	sp, #48	; 0x30
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a52e:	2300      	movs	r3, #0
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d107      	bne.n	800a548 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e0b0      	b.n	800a6aa <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b01      	cmp	r3, #1
 800a552:	f040 80a9 	bne.w	800a6a8 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	441a      	add	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a566:	429a      	cmp	r2, r3
 800a568:	d907      	bls.n	800a57a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e097      	b.n	800a6aa <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2203      	movs	r2, #3
 800a57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a598:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59e:	4a45      	ldr	r2, [pc, #276]	; (800a6b4 <HAL_SD_ReadBlocks_DMA+0x194>)
 800a5a0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a6:	4a44      	ldr	r2, [pc, #272]	; (800a6b8 <HAL_SD_ReadBlocks_DMA+0x198>)
 800a5a8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3380      	adds	r3, #128	; 0x80
 800a5bc:	4619      	mov	r1, r3
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	025b      	lsls	r3, r3, #9
 800a5c4:	089b      	lsrs	r3, r3, #2
 800a5c6:	f7f9 fbfd 	bl	8003dc4 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f042 0208 	orr.w	r2, r2, #8
 800a5d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d002      	beq.n	800a5e8 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	025b      	lsls	r3, r3, #9
 800a5e6:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ec:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	025b      	lsls	r3, r3, #9
 800a5f2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a5f4:	2390      	movs	r3, #144	; 0x90
 800a5f6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800a600:	2301      	movs	r3, #1
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f107 0214 	add.w	r2, r7, #20
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f003 fadc 	bl	800dbcc <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a61c:	4618      	mov	r0, r3
 800a61e:	f003 fb01 	bl	800dc24 <SDMMC_CmdBlockLength>
 800a622:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d010      	beq.n	800a64c <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	431a      	orrs	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e02e      	b.n	800a6aa <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d90a      	bls.n	800a668 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2282      	movs	r2, #130	; 0x82
 800a656:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	4618      	mov	r0, r3
 800a660:	f003 fb28 	bl	800dcb4 <SDMMC_CmdReadMultiBlock>
 800a664:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a666:	e009      	b.n	800a67c <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2281      	movs	r2, #129	; 0x81
 800a66c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	4618      	mov	r0, r3
 800a676:	f003 faf9 	bl	800dc6c <SDMMC_CmdReadSingleBlock>
 800a67a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d010      	beq.n	800a6a4 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a68a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	431a      	orrs	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e002      	b.n	800a6aa <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e000      	b.n	800a6aa <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800a6a8:	2302      	movs	r3, #2
  }
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3730      	adds	r7, #48	; 0x30
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800ae81 	.word	0x0800ae81
 800a6b8:	0800aeef 	.word	0x0800aeef

0800a6bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08c      	sub	sp, #48	; 0x30
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d107      	bne.n	800a6e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0b0      	b.n	800a846 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	f040 80a9 	bne.w	800a844 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	441a      	add	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a702:	429a      	cmp	r2, r3
 800a704:	d907      	bls.n	800a716 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e097      	b.n	800a846 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2203      	movs	r2, #3
 800a71a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 021a 	orr.w	r2, r2, #26
 800a734:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	4a45      	ldr	r2, [pc, #276]	; (800a850 <HAL_SD_WriteBlocks_DMA+0x194>)
 800a73c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	4a44      	ldr	r2, [pc, #272]	; (800a854 <HAL_SD_WriteBlocks_DMA+0x198>)
 800a744:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74a:	2200      	movs	r2, #0
 800a74c:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a752:	2b01      	cmp	r3, #1
 800a754:	d002      	beq.n	800a75c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	025b      	lsls	r3, r3, #9
 800a75a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a764:	4618      	mov	r0, r3
 800a766:	f003 fa5d 	bl	800dc24 <SDMMC_CmdBlockLength>
 800a76a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d010      	beq.n	800a794 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a77a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	431a      	orrs	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e058      	b.n	800a846 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d90a      	bls.n	800a7b0 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	22a0      	movs	r2, #160	; 0xa0
 800a79e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f003 facc 	bl	800dd44 <SDMMC_CmdWriteMultiBlock>
 800a7ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a7ae:	e009      	b.n	800a7c4 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2290      	movs	r2, #144	; 0x90
 800a7b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f003 fa9d 	bl	800dcfc <SDMMC_CmdWriteSingleBlock>
 800a7c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d010      	beq.n	800a7ec <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e02c      	b.n	800a846 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0208 	orr.w	r2, r2, #8
 800a7fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3380      	adds	r3, #128	; 0x80
 800a808:	461a      	mov	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	025b      	lsls	r3, r3, #9
 800a80e:	089b      	lsrs	r3, r3, #2
 800a810:	f7f9 fad8 	bl	8003dc4 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a814:	f04f 33ff 	mov.w	r3, #4294967295
 800a818:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	025b      	lsls	r3, r3, #9
 800a81e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a820:	2390      	movs	r3, #144	; 0x90
 800a822:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a824:	2300      	movs	r3, #0
 800a826:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a828:	2300      	movs	r3, #0
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800a82c:	2301      	movs	r3, #1
 800a82e:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f107 0214 	add.w	r2, r7, #20
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f003 f9c6 	bl	800dbcc <SDMMC_ConfigData>
    
    return HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	e000      	b.n	800a846 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800a844:	2302      	movs	r3, #2
  }
}
 800a846:	4618      	mov	r0, r3
 800a848:	3730      	adds	r7, #48	; 0x30
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	0800ae57 	.word	0x0800ae57
 800a854:	0800aeef 	.word	0x0800aeef

0800a858 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87e:	0e1b      	lsrs	r3, r3, #24
 800a880:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	099b      	lsrs	r3, r3, #6
 800a886:	b2db      	uxtb	r3, r3
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	089b      	lsrs	r3, r3, #2
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b4:	0c1b      	lsrs	r3, r3, #16
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c6:	0a1b      	lsrs	r3, r3, #8
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e8:	0e1b      	lsrs	r3, r3, #24
 800a8ea:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8fc:	0c1b      	lsrs	r3, r3, #16
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	88db      	ldrh	r3, [r3, #6]
 800a906:	b29a      	uxth	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	b29b      	uxth	r3, r3
 800a914:	4313      	orrs	r3, r2
 800a916:	b29a      	uxth	r2, r3
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f003 030f 	and.w	r3, r3, #15
 800a924:	b2da      	uxtb	r2, r3
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	b2db      	uxtb	r3, r3
 800a932:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	09db      	lsrs	r3, r3, #7
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	099b      	lsrs	r3, r3, #6
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	095b      	lsrs	r3, r3, #5
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	091b      	lsrs	r3, r3, #4
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	2200      	movs	r2, #0
 800a978:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f040 8086 	bne.w	800aa90 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	029b      	lsls	r3, r3, #10
 800a988:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a994:	b2db      	uxtb	r3, r3
 800a996:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	691a      	ldr	r2, [r3, #16]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9aa:	0e1b      	lsrs	r3, r3, #24
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	099b      	lsrs	r3, r3, #6
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	08db      	lsrs	r3, r3, #3
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 0307 	and.w	r3, r3, #7
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e4:	0c1b      	lsrs	r3, r3, #16
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	095b      	lsrs	r3, r3, #5
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	089b      	lsrs	r3, r3, #2
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f003 0307 	and.w	r3, r3, #7
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0306 	and.w	r3, r3, #6
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa20:	0a1b      	lsrs	r3, r3, #8
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	7e1b      	ldrb	r3, [r3, #24]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	09db      	lsrs	r3, r3, #7
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	7e1b      	ldrb	r3, [r3, #24]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	3302      	adds	r3, #2
 800aa52:	2201      	movs	r2, #1
 800aa54:	409a      	lsls	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5a:	fb02 f203 	mul.w	r2, r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	7a1b      	ldrb	r3, [r3, #8]
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	461a      	mov	r2, r3
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4093      	lsls	r3, r2
 800aa6e:	461a      	mov	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800aa7c:	0a52      	lsrs	r2, r2, #9
 800aa7e:	fb02 f203 	mul.w	r2, r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa8c:	661a      	str	r2, [r3, #96]	; 0x60
 800aa8e:	e04d      	b.n	800ab2c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d138      	bne.n	800ab0a <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	041b      	lsls	r3, r3, #16
 800aaa4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab0:	0e1b      	lsrs	r3, r3, #24
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	691a      	ldr	r2, [r3, #16]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	431a      	orrs	r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac8:	0c1b      	lsrs	r3, r3, #16
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	691a      	ldr	r2, [r3, #16]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	431a      	orrs	r2, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aade:	0a1b      	lsrs	r3, r3, #8
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	3301      	adds	r3, #1
 800aaea:	029a      	lsls	r2, r3, #10
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	655a      	str	r2, [r3, #84]	; 0x54
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aafe:	659a      	str	r2, [r3, #88]	; 0x58
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	661a      	str	r2, [r3, #96]	; 0x60
 800ab08:	e010      	b.n	800ab2c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e0c1      	b.n	800acb0 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	099b      	lsrs	r3, r3, #6
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	7e9b      	ldrb	r3, [r3, #26]
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	09db      	lsrs	r3, r3, #7
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	0e1b      	lsrs	r3, r3, #24
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	09db      	lsrs	r3, r3, #7
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	095b      	lsrs	r3, r3, #5
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	089b      	lsrs	r3, r3, #2
 800abac:	b2db      	uxtb	r3, r3
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	f003 030c 	and.w	r3, r3, #12
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abce:	0c1b      	lsrs	r3, r3, #16
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	7fdb      	ldrb	r3, [r3, #31]
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	099b      	lsrs	r3, r3, #6
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	4313      	orrs	r3, r2
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	095b      	lsrs	r3, r3, #5
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	f003 0301 	and.w	r3, r3, #1
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1c:	0a1b      	lsrs	r3, r3, #8
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	09db      	lsrs	r3, r3, #7
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	099b      	lsrs	r3, r3, #6
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	095b      	lsrs	r3, r3, #5
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	091b      	lsrs	r3, r3, #4
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	089b      	lsrs	r3, r3, #2
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	f003 0303 	and.w	r3, r3, #3
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	085b      	lsrs	r3, r3, #1
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ad14:	b5b0      	push	{r4, r5, r7, lr}
 800ad16:	b08e      	sub	sp, #56	; 0x38
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2203      	movs	r2, #3
 800ad26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d02e      	beq.n	800ad90 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad38:	d106      	bne.n	800ad48 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
 800ad46:	e029      	b.n	800ad9c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad4e:	d10a      	bne.n	800ad66 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fab2 	bl	800b2ba <SD_WideBus_Enable>
 800ad56:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	431a      	orrs	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	639a      	str	r2, [r3, #56]	; 0x38
 800ad64:	e01a      	b.n	800ad9c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 faf1 	bl	800b354 <SD_WideBus_Disable>
 800ad72:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	639a      	str	r2, [r3, #56]	; 0x38
 800ad80:	e00c      	b.n	800ad9c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	639a      	str	r2, [r3, #56]	; 0x38
 800ad8e:	e005      	b.n	800ad9c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800adac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e024      	b.n	800ae04 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681d      	ldr	r5, [r3, #0]
 800ade0:	466c      	mov	r4, sp
 800ade2:	f107 0318 	add.w	r3, r7, #24
 800ade6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800adea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800adee:	f107 030c 	add.w	r3, r7, #12
 800adf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800adf4:	4628      	mov	r0, r5
 800adf6:	f002 fe47 	bl	800da88 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3728      	adds	r7, #40	; 0x28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800ae14:	2304      	movs	r3, #4
 800ae16:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800ae20:	f107 030c 	add.w	r3, r7, #12
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fa1d 	bl	800b266 <SD_SendStatus>
 800ae2c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	0a5b      	lsrs	r3, r3, #9
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	f003 030f 	and.w	r3, r3, #15
 800ae4a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800ae56:	b480      	push	{r7}
 800ae58:	b085      	sub	sp, #20
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae62:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae72:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	2b82      	cmp	r3, #130	; 0x82
 800ae98:	d111      	bne.n	800aebe <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f002 ff74 	bl	800dd8c <SDMMC_CmdStopTransfer>
 800aea4:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d008      	beq.n	800aebe <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff fccd 	bl	800a858 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 0208 	bic.w	r2, r2, #8
 800aecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f004 fae3 	bl	800f4ac <HAL_SD_RxCpltCallback>
#endif
}
 800aee6:	bf00      	nop
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7f9 f853 	bl	8003fa8 <HAL_DMA_GetError>
 800af02:	4603      	mov	r3, r0
 800af04:	2b02      	cmp	r3, #2
 800af06:	d039      	beq.n	800af7c <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d004      	beq.n	800af1c <SD_DMAError+0x2e>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d12c      	bne.n	800af76 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800af24:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800af34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff ff62 	bl	800ae0c <HAL_SD_GetCardState>
 800af48:	4603      	mov	r3, r0
 800af4a:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af4c:	7afb      	ldrb	r3, [r7, #11]
 800af4e:	2b06      	cmp	r3, #6
 800af50:	d002      	beq.n	800af58 <SD_DMAError+0x6a>
 800af52:	7afb      	ldrb	r3, [r7, #11]
 800af54:	2b05      	cmp	r3, #5
 800af56:	d10a      	bne.n	800af6e <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 ff15 	bl	800dd8c <SDMMC_CmdStopTransfer>
 800af62:	4602      	mov	r2, r0
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	431a      	orrs	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff fc6e 	bl	800a858 <HAL_SD_ErrorCallback>
#endif
  }
}
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800af84:	b5b0      	push	{r4, r5, r7, lr}
 800af86:	b094      	sub	sp, #80	; 0x50
 800af88:	af04      	add	r7, sp, #16
 800af8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800af90:	2301      	movs	r3, #1
 800af92:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4618      	mov	r0, r3
 800af9a:	f002 fdbc 	bl	800db16 <SDMMC_GetPowerState>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d102      	bne.n	800afaa <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afa4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afa8:	e0b1      	b.n	800b10e <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d02f      	beq.n	800b012 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f003 f803 	bl	800dfc2 <SDMMC_CmdSendCID>
 800afbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <SD_InitCard+0x44>
    {
      return errorstate;
 800afc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc6:	e0a2      	b.n	800b10e <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f002 fde7 	bl	800dba2 <SDMMC_GetResponse>
 800afd4:	4602      	mov	r2, r0
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2104      	movs	r1, #4
 800afe0:	4618      	mov	r0, r3
 800afe2:	f002 fdde 	bl	800dba2 <SDMMC_GetResponse>
 800afe6:	4602      	mov	r2, r0
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2108      	movs	r1, #8
 800aff2:	4618      	mov	r0, r3
 800aff4:	f002 fdd5 	bl	800dba2 <SDMMC_GetResponse>
 800aff8:	4602      	mov	r2, r0
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	210c      	movs	r1, #12
 800b004:	4618      	mov	r0, r3
 800b006:	f002 fdcc 	bl	800dba2 <SDMMC_GetResponse>
 800b00a:	4602      	mov	r2, r0
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b016:	2b03      	cmp	r3, #3
 800b018:	d00d      	beq.n	800b036 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f107 020e 	add.w	r2, r7, #14
 800b022:	4611      	mov	r1, r2
 800b024:	4618      	mov	r0, r3
 800b026:	f003 f80d 	bl	800e044 <SDMMC_CmdSetRelAdd>
 800b02a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <SD_InitCard+0xb2>
    {
      return errorstate;
 800b032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b034:	e06b      	b.n	800b10e <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d036      	beq.n	800b0ac <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b03e:	89fb      	ldrh	r3, [r7, #14]
 800b040:	461a      	mov	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04e:	041b      	lsls	r3, r3, #16
 800b050:	4619      	mov	r1, r3
 800b052:	4610      	mov	r0, r2
 800b054:	f002 ffd5 	bl	800e002 <SDMMC_CmdSendCSD>
 800b058:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <SD_InitCard+0xe0>
    {
      return errorstate;
 800b060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b062:	e054      	b.n	800b10e <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f002 fd99 	bl	800dba2 <SDMMC_GetResponse>
 800b070:	4602      	mov	r2, r0
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2104      	movs	r1, #4
 800b07c:	4618      	mov	r0, r3
 800b07e:	f002 fd90 	bl	800dba2 <SDMMC_GetResponse>
 800b082:	4602      	mov	r2, r0
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2108      	movs	r1, #8
 800b08e:	4618      	mov	r0, r3
 800b090:	f002 fd87 	bl	800dba2 <SDMMC_GetResponse>
 800b094:	4602      	mov	r2, r0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	210c      	movs	r1, #12
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 fd7e 	bl	800dba2 <SDMMC_GetResponse>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2104      	movs	r1, #4
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 fd75 	bl	800dba2 <SDMMC_GetResponse>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	0d1a      	lsrs	r2, r3, #20
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800b0c0:	f107 0310 	add.w	r3, r7, #16
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fbd0 	bl	800a86c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d4:	041b      	lsls	r3, r3, #16
 800b0d6:	f04f 0400 	mov.w	r4, #0
 800b0da:	461a      	mov	r2, r3
 800b0dc:	4623      	mov	r3, r4
 800b0de:	4608      	mov	r0, r1
 800b0e0:	f002 fe78 	bl	800ddd4 <SDMMC_CmdSelDesel>
 800b0e4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ee:	e00e      	b.n	800b10e <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681d      	ldr	r5, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	466c      	mov	r4, sp
 800b0f8:	f103 0210 	add.w	r2, r3, #16
 800b0fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800b0fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b102:	3304      	adds	r3, #4
 800b104:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b106:	4628      	mov	r0, r5
 800b108:	f002 fcbe 	bl	800da88 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3740      	adds	r7, #64	; 0x40
 800b112:	46bd      	mov	sp, r7
 800b114:	bdb0      	pop	{r4, r5, r7, pc}

0800b116 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b086      	sub	sp, #24
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
 800b126:	2300      	movs	r3, #0
 800b128:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4618      	mov	r0, r3
 800b134:	f002 fe73 	bl	800de1e <SDMMC_CmdGoIdleState>
 800b138:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <SD_PowerON+0x2e>
  {
    return errorstate;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	e08c      	b.n	800b25e <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f002 fe88 	bl	800de5e <SDMMC_CmdOperCond>
 800b14e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d03d      	beq.n	800b1d2 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800b15c:	e032      	b.n	800b1c4 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	60ba      	str	r2, [r7, #8]
 800b164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b168:	4293      	cmp	r3, r2
 800b16a:	d102      	bne.n	800b172 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b16c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b170:	e075      	b.n	800b25e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2100      	movs	r1, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fe91 	bl	800dea0 <SDMMC_CmdAppCommand>
 800b17e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b18a:	e068      	b.n	800b25e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2100      	movs	r1, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f002 fea8 	bl	800dee8 <SDMMC_CmdAppOperCommand>
 800b198:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1a4:	e05b      	b.n	800b25e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f002 fcf8 	bl	800dba2 <SDMMC_GetResponse>
 800b1b2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	0fdb      	lsrs	r3, r3, #31
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	bf0c      	ite	eq
 800b1bc:	2301      	moveq	r3, #1
 800b1be:	2300      	movne	r3, #0
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0c9      	beq.n	800b15e <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	645a      	str	r2, [r3, #68]	; 0x44
 800b1d0:	e044      	b.n	800b25c <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800b1d8:	e031      	b.n	800b23e <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	60ba      	str	r2, [r7, #8]
 800b1e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d102      	bne.n	800b1ee <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b1e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b1ec:	e037      	b.n	800b25e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f002 fe53 	bl	800dea0 <SDMMC_CmdAppCommand>
 800b1fa:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <SD_PowerON+0xf0>
      {
        return errorstate;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	e02b      	b.n	800b25e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b20e:	4618      	mov	r0, r3
 800b210:	f002 fe6a 	bl	800dee8 <SDMMC_CmdAppOperCommand>
 800b214:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <SD_PowerON+0x10a>
      {
        return errorstate;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	e01e      	b.n	800b25e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f002 fcbb 	bl	800dba2 <SDMMC_GetResponse>
 800b22c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	0fdb      	lsrs	r3, r3, #31
 800b232:	2b01      	cmp	r3, #1
 800b234:	bf0c      	ite	eq
 800b236:	2301      	moveq	r3, #1
 800b238:	2300      	movne	r3, #0
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0ca      	beq.n	800b1da <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2201      	movs	r2, #1
 800b252:	645a      	str	r2, [r3, #68]	; 0x44
 800b254:	e002      	b.n	800b25c <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b27a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b27e:	e018      	b.n	800b2b2 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b288:	041b      	lsls	r3, r3, #16
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f002 fefc 	bl	800e08a <SDMMC_CmdSendStatus>
 800b292:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <SD_SendStatus+0x38>
  {
    return errorstate;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	e009      	b.n	800b2b2 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f002 fc7c 	bl	800dba2 <SDMMC_GetResponse>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b086      	sub	sp, #24
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f002 fc64 	bl	800dba2 <SDMMC_GetResponse>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2e4:	d102      	bne.n	800b2ec <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2ea:	e02f      	b.n	800b34c <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b2ec:	f107 030c 	add.w	r3, r7, #12
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f87b 	bl	800b3ee <SD_FindSCR>
 800b2f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	e023      	b.n	800b34c <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01c      	beq.n	800b348 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b316:	041b      	lsls	r3, r3, #16
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f002 fdc0 	bl	800dea0 <SDMMC_CmdAppCommand>
 800b320:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	e00f      	b.n	800b34c <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2102      	movs	r1, #2
 800b332:	4618      	mov	r0, r3
 800b334:	f002 fdfe 	bl	800df34 <SDMMC_CmdBusWidth>
 800b338:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	e003      	b.n	800b34c <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800b344:	2300      	movs	r3, #0
 800b346:	e001      	b.n	800b34c <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b348:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800b35c:	2300      	movs	r3, #0
 800b35e:	60fb      	str	r3, [r7, #12]
 800b360:	2300      	movs	r3, #0
 800b362:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f002 fc17 	bl	800dba2 <SDMMC_GetResponse>
 800b374:	4603      	mov	r3, r0
 800b376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b37a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b37e:	d102      	bne.n	800b386 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b384:	e02f      	b.n	800b3e6 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b386:	f107 030c 	add.w	r3, r7, #12
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f82e 	bl	800b3ee <SD_FindSCR>
 800b392:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	e023      	b.n	800b3e6 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01c      	beq.n	800b3e2 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f002 fd73 	bl	800dea0 <SDMMC_CmdAppCommand>
 800b3ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	e00f      	b.n	800b3e6 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f002 fdb1 	bl	800df34 <SDMMC_CmdBusWidth>
 800b3d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	e003      	b.n	800b3e6 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e001      	b.n	800b3e6 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b3ee:	b590      	push	{r4, r7, lr}
 800b3f0:	b08f      	sub	sp, #60	; 0x3c
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800b3fc:	f7f7 ff72 	bl	80032e4 <HAL_GetTick>
 800b400:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
 800b40a:	2300      	movs	r3, #0
 800b40c:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2108      	movs	r1, #8
 800b414:	4618      	mov	r0, r3
 800b416:	f002 fc05 	bl	800dc24 <SDMMC_CmdBlockLength>
 800b41a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	e0a8      	b.n	800b578 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f002 fd34 	bl	800dea0 <SDMMC_CmdAppCommand>
 800b438:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	e099      	b.n	800b578 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b444:	f04f 33ff 	mov.w	r3, #4294967295
 800b448:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800b44a:	2308      	movs	r3, #8
 800b44c:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b44e:	2330      	movs	r3, #48	; 0x30
 800b450:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b452:	2302      	movs	r3, #2
 800b454:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b456:	2300      	movs	r3, #0
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b45a:	2301      	movs	r3, #1
 800b45c:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f107 0214 	add.w	r2, r7, #20
 800b466:	4611      	mov	r1, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	f002 fbaf 	bl	800dbcc <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4618      	mov	r0, r3
 800b474:	f002 fd82 	bl	800df7c <SDMMC_CmdSendSCR>
 800b478:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d022      	beq.n	800b4c6 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b482:	e079      	b.n	800b578 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00e      	beq.n	800b4b0 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6819      	ldr	r1, [r3, #0]
 800b496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	f107 020c 	add.w	r2, r7, #12
 800b49e:	18d4      	adds	r4, r2, r3
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	f002 fb1d 	bl	800dae0 <SDMMC_ReadFIFO>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6023      	str	r3, [r4, #0]
      index++;
 800b4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b4b0:	f7f7 ff18 	bl	80032e4 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4be:	d102      	bne.n	800b4c6 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b4c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4c4:	e058      	b.n	800b578 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4cc:	f240 432a 	movw	r3, #1066	; 0x42a
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0d6      	beq.n	800b484 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b4ec:	2308      	movs	r3, #8
 800b4ee:	e043      	b.n	800b578 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d005      	beq.n	800b50a <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2202      	movs	r2, #2
 800b504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b506:	2302      	movs	r3, #2
 800b508:	e036      	b.n	800b578 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b510:	f003 0320 	and.w	r3, r3, #32
 800b514:	2b00      	cmp	r3, #0
 800b516:	d005      	beq.n	800b524 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2220      	movs	r2, #32
 800b51e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800b520:	2320      	movs	r3, #32
 800b522:	e029      	b.n	800b578 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b52c:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	061a      	lsls	r2, r3, #24
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b53a:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	0a1b      	lsrs	r3, r3, #8
 800b540:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b544:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800b550:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b552:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	061a      	lsls	r2, r3, #24
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	021b      	lsls	r3, r3, #8
 800b55c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b560:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	0a1b      	lsrs	r3, r3, #8
 800b566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b56a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	0e1b      	lsrs	r3, r3, #24
 800b570:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	373c      	adds	r7, #60	; 0x3c
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd90      	pop	{r4, r7, pc}

0800b580 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	e025      	b.n	800b5e0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d106      	bne.n	800b5ae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f010 fb95 	bl	801bcd8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3304      	adds	r3, #4
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	f002 f93b 	bl	800d83c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	f002 f9a5 	bl	800d920 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d101      	bne.n	800b604 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800b600:	2302      	movs	r3, #2
 800b602:	e018      	b.n	800b636 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	4618      	mov	r0, r3
 800b616:	f002 fa03 	bl	800da20 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d104      	bne.n	800b62c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2205      	movs	r2, #5
 800b626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b62a:	e003      	b.n	800b634 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b02      	cmp	r3, #2
 800b652:	d101      	bne.n	800b658 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b654:	2302      	movs	r3, #2
 800b656:	e00e      	b.n	800b676 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2202      	movs	r2, #2
 800b65c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	4618      	mov	r0, r3
 800b668:	f002 f9fb 	bl	800da62 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
	...

0800b680 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e04c      	b.n	800b72c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7f7 f924 	bl	80028f4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f022 0203 	bic.w	r2, r2, #3
 800b6c2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4b19      	ldr	r3, [pc, #100]	; (800b734 <HAL_SPDIFRX_Init+0xb4>)
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b6dc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b6e2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b6e8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b6ee:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b6f4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b6fa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b700:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b706:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b70c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	4313      	orrs	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	fff88407 	.word	0xfff88407

0800b738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e084      	b.n	800b854 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7f7 f907 	bl	8002978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2202      	movs	r2, #2
 800b76e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b780:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b78a:	d902      	bls.n	800b792 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b78c:	2300      	movs	r3, #0
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	e002      	b.n	800b798 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b796:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b7a0:	d007      	beq.n	800b7b2 <HAL_SPI_Init+0x7a>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7aa:	d002      	beq.n	800b7b2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10b      	bne.n	800b7d2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7c2:	d903      	bls.n	800b7cc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	631a      	str	r2, [r3, #48]	; 0x30
 800b7ca:	e002      	b.n	800b7d2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	ea42 0103 	orr.w	r1, r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	430a      	orrs	r2, r1
 800b80a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	0c1b      	lsrs	r3, r3, #16
 800b812:	f003 0204 	and.w	r2, r3, #4
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	431a      	orrs	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	ea42 0103 	orr.w	r1, r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	430a      	orrs	r2, r1
 800b832:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	69da      	ldr	r2, [r3, #28]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b842:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e01d      	b.n	800b8aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7f7 f8da 	bl	8002a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3304      	adds	r3, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f000 fba2 	bl	800bfe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	4b0e      	ldr	r3, [pc, #56]	; (800b904 <HAL_TIM_Base_Start+0x50>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b06      	cmp	r3, #6
 800b8d4:	d00b      	beq.n	800b8ee <HAL_TIM_Base_Start+0x3a>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8dc:	d007      	beq.n	800b8ee <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f042 0201 	orr.w	r2, r2, #1
 800b8ec:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	00010007 	.word	0x00010007

0800b908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68da      	ldr	r2, [r3, #12]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f042 0201 	orr.w	r2, r2, #1
 800b91e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <HAL_TIM_Base_Start_IT+0x50>)
 800b928:	4013      	ands	r3, r2
 800b92a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b06      	cmp	r3, #6
 800b930:	d00b      	beq.n	800b94a <HAL_TIM_Base_Start_IT+0x42>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b938:	d007      	beq.n	800b94a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f042 0201 	orr.w	r2, r2, #1
 800b948:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	00010007 	.word	0x00010007

0800b95c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e01d      	b.n	800b9aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7f7 f8c8 	bl	8002b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3304      	adds	r3, #4
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f000 fb22 	bl	800bfe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	f003 0302 	and.w	r3, r3, #2
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d122      	bne.n	800ba0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f003 0302 	and.w	r3, r3, #2
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d11b      	bne.n	800ba0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f06f 0202 	mvn.w	r2, #2
 800b9de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	f003 0303 	and.w	r3, r3, #3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fad7 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800b9fa:	e005      	b.n	800ba08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fac9 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fada 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d122      	bne.n	800ba62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f003 0304 	and.w	r3, r3, #4
 800ba26:	2b04      	cmp	r3, #4
 800ba28:	d11b      	bne.n	800ba62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f06f 0204 	mvn.w	r2, #4
 800ba32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2202      	movs	r2, #2
 800ba38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 faad 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800ba4e:	e005      	b.n	800ba5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fa9f 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fab0 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	f003 0308 	and.w	r3, r3, #8
 800ba6c:	2b08      	cmp	r3, #8
 800ba6e:	d122      	bne.n	800bab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f003 0308 	and.w	r3, r3, #8
 800ba7a:	2b08      	cmp	r3, #8
 800ba7c:	d11b      	bne.n	800bab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f06f 0208 	mvn.w	r2, #8
 800ba86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	f003 0303 	and.w	r3, r3, #3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fa83 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800baa2:	e005      	b.n	800bab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa75 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fa86 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	f003 0310 	and.w	r3, r3, #16
 800bac0:	2b10      	cmp	r3, #16
 800bac2:	d122      	bne.n	800bb0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	f003 0310 	and.w	r3, r3, #16
 800bace:	2b10      	cmp	r3, #16
 800bad0:	d11b      	bne.n	800bb0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f06f 0210 	mvn.w	r2, #16
 800bada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2208      	movs	r2, #8
 800bae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fa59 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800baf6:	e005      	b.n	800bb04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fa4b 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fa5c 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d10e      	bne.n	800bb36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d107      	bne.n	800bb36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f06f 0201 	mvn.w	r2, #1
 800bb2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7f6 fb83 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb40:	2b80      	cmp	r3, #128	; 0x80
 800bb42:	d10e      	bne.n	800bb62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb4e:	2b80      	cmp	r3, #128	; 0x80
 800bb50:	d107      	bne.n	800bb62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 febd 	bl	800c8dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb70:	d10e      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7c:	2b80      	cmp	r3, #128	; 0x80
 800bb7e:	d107      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 feb0 	bl	800c8f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b40      	cmp	r3, #64	; 0x40
 800bb9c:	d10e      	bne.n	800bbbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba8:	2b40      	cmp	r3, #64	; 0x40
 800bbaa:	d107      	bne.n	800bbbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa0a 	bl	800bfd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	d10e      	bne.n	800bbe8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	f003 0320 	and.w	r3, r3, #32
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d107      	bne.n	800bbe8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f06f 0220 	mvn.w	r2, #32
 800bbe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fe70 	bl	800c8c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e105      	b.n	800be16 <HAL_TIM_PWM_ConfigChannel+0x226>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2202      	movs	r2, #2
 800bc16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b14      	cmp	r3, #20
 800bc1e:	f200 80f0 	bhi.w	800be02 <HAL_TIM_PWM_ConfigChannel+0x212>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc7d 	.word	0x0800bc7d
 800bc2c:	0800be03 	.word	0x0800be03
 800bc30:	0800be03 	.word	0x0800be03
 800bc34:	0800be03 	.word	0x0800be03
 800bc38:	0800bcbd 	.word	0x0800bcbd
 800bc3c:	0800be03 	.word	0x0800be03
 800bc40:	0800be03 	.word	0x0800be03
 800bc44:	0800be03 	.word	0x0800be03
 800bc48:	0800bcff 	.word	0x0800bcff
 800bc4c:	0800be03 	.word	0x0800be03
 800bc50:	0800be03 	.word	0x0800be03
 800bc54:	0800be03 	.word	0x0800be03
 800bc58:	0800bd3f 	.word	0x0800bd3f
 800bc5c:	0800be03 	.word	0x0800be03
 800bc60:	0800be03 	.word	0x0800be03
 800bc64:	0800be03 	.word	0x0800be03
 800bc68:	0800bd81 	.word	0x0800bd81
 800bc6c:	0800be03 	.word	0x0800be03
 800bc70:	0800be03 	.word	0x0800be03
 800bc74:	0800be03 	.word	0x0800be03
 800bc78:	0800bdc1 	.word	0x0800bdc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fa4e 	bl	800c124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	699a      	ldr	r2, [r3, #24]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f042 0208 	orr.w	r2, r2, #8
 800bc96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	699a      	ldr	r2, [r3, #24]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f022 0204 	bic.w	r2, r2, #4
 800bca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6999      	ldr	r1, [r3, #24]
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	691a      	ldr	r2, [r3, #16]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	430a      	orrs	r2, r1
 800bcb8:	619a      	str	r2, [r3, #24]
      break;
 800bcba:	e0a3      	b.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68b9      	ldr	r1, [r7, #8]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 faa0 	bl	800c208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	699a      	ldr	r2, [r3, #24]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6999      	ldr	r1, [r3, #24]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	021a      	lsls	r2, r3, #8
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	619a      	str	r2, [r3, #24]
      break;
 800bcfc:	e082      	b.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68b9      	ldr	r1, [r7, #8]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 faf7 	bl	800c2f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69da      	ldr	r2, [r3, #28]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f042 0208 	orr.w	r2, r2, #8
 800bd18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	69da      	ldr	r2, [r3, #28]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 0204 	bic.w	r2, r2, #4
 800bd28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	69d9      	ldr	r1, [r3, #28]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	691a      	ldr	r2, [r3, #16]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	61da      	str	r2, [r3, #28]
      break;
 800bd3c:	e062      	b.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fb4d 	bl	800c3e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69da      	ldr	r2, [r3, #28]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	69da      	ldr	r2, [r3, #28]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69d9      	ldr	r1, [r3, #28]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	021a      	lsls	r2, r3, #8
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	61da      	str	r2, [r3, #28]
      break;
 800bd7e:	e041      	b.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fb84 	bl	800c494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f042 0208 	orr.w	r2, r2, #8
 800bd9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 0204 	bic.w	r2, r2, #4
 800bdaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdbe:	e021      	b.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fbb6 	bl	800c538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	021a      	lsls	r2, r3, #8
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be00:	e000      	b.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800be02:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop

0800be20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be30:	2b01      	cmp	r3, #1
 800be32:	d101      	bne.n	800be38 <HAL_TIM_ConfigClockSource+0x18>
 800be34:	2302      	movs	r3, #2
 800be36:	e0a6      	b.n	800bf86 <HAL_TIM_ConfigClockSource+0x166>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4b4f      	ldr	r3, [pc, #316]	; (800bf90 <HAL_TIM_ConfigClockSource+0x170>)
 800be54:	4013      	ands	r3, r2
 800be56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b40      	cmp	r3, #64	; 0x40
 800be6e:	d067      	beq.n	800bf40 <HAL_TIM_ConfigClockSource+0x120>
 800be70:	2b40      	cmp	r3, #64	; 0x40
 800be72:	d80b      	bhi.n	800be8c <HAL_TIM_ConfigClockSource+0x6c>
 800be74:	2b10      	cmp	r3, #16
 800be76:	d073      	beq.n	800bf60 <HAL_TIM_ConfigClockSource+0x140>
 800be78:	2b10      	cmp	r3, #16
 800be7a:	d802      	bhi.n	800be82 <HAL_TIM_ConfigClockSource+0x62>
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d06f      	beq.n	800bf60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800be80:	e078      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be82:	2b20      	cmp	r3, #32
 800be84:	d06c      	beq.n	800bf60 <HAL_TIM_ConfigClockSource+0x140>
 800be86:	2b30      	cmp	r3, #48	; 0x30
 800be88:	d06a      	beq.n	800bf60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800be8a:	e073      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be8c:	2b70      	cmp	r3, #112	; 0x70
 800be8e:	d00d      	beq.n	800beac <HAL_TIM_ConfigClockSource+0x8c>
 800be90:	2b70      	cmp	r3, #112	; 0x70
 800be92:	d804      	bhi.n	800be9e <HAL_TIM_ConfigClockSource+0x7e>
 800be94:	2b50      	cmp	r3, #80	; 0x50
 800be96:	d033      	beq.n	800bf00 <HAL_TIM_ConfigClockSource+0xe0>
 800be98:	2b60      	cmp	r3, #96	; 0x60
 800be9a:	d041      	beq.n	800bf20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800be9c:	e06a      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea2:	d066      	beq.n	800bf72 <HAL_TIM_ConfigClockSource+0x152>
 800bea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea8:	d017      	beq.n	800beda <HAL_TIM_ConfigClockSource+0xba>
      break;
 800beaa:	e063      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	6899      	ldr	r1, [r3, #8]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	f000 fc0a 	bl	800c6d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bece:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	609a      	str	r2, [r3, #8]
      break;
 800bed8:	e04c      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6818      	ldr	r0, [r3, #0]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	6899      	ldr	r1, [r3, #8]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	f000 fbf3 	bl	800c6d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689a      	ldr	r2, [r3, #8]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800befc:	609a      	str	r2, [r3, #8]
      break;
 800befe:	e039      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	6859      	ldr	r1, [r3, #4]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	f000 fb67 	bl	800c5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2150      	movs	r1, #80	; 0x50
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 fbc0 	bl	800c69e <TIM_ITRx_SetConfig>
      break;
 800bf1e:	e029      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	6859      	ldr	r1, [r3, #4]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f000 fb86 	bl	800c63e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2160      	movs	r1, #96	; 0x60
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fbb0 	bl	800c69e <TIM_ITRx_SetConfig>
      break;
 800bf3e:	e019      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6818      	ldr	r0, [r3, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	6859      	ldr	r1, [r3, #4]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	f000 fb47 	bl	800c5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2140      	movs	r1, #64	; 0x40
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 fba0 	bl	800c69e <TIM_ITRx_SetConfig>
      break;
 800bf5e:	e009      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f000 fb97 	bl	800c69e <TIM_ITRx_SetConfig>
      break;
 800bf70:	e000      	b.n	800bf74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bf72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	fffeff88 	.word	0xfffeff88

0800bf94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfc4:	bf00      	nop
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a40      	ldr	r2, [pc, #256]	; (800c0f8 <TIM_Base_SetConfig+0x114>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d013      	beq.n	800c024 <TIM_Base_SetConfig+0x40>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c002:	d00f      	beq.n	800c024 <TIM_Base_SetConfig+0x40>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a3d      	ldr	r2, [pc, #244]	; (800c0fc <TIM_Base_SetConfig+0x118>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d00b      	beq.n	800c024 <TIM_Base_SetConfig+0x40>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a3c      	ldr	r2, [pc, #240]	; (800c100 <TIM_Base_SetConfig+0x11c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d007      	beq.n	800c024 <TIM_Base_SetConfig+0x40>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a3b      	ldr	r2, [pc, #236]	; (800c104 <TIM_Base_SetConfig+0x120>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d003      	beq.n	800c024 <TIM_Base_SetConfig+0x40>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a3a      	ldr	r2, [pc, #232]	; (800c108 <TIM_Base_SetConfig+0x124>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d108      	bne.n	800c036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	4313      	orrs	r3, r2
 800c034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a2f      	ldr	r2, [pc, #188]	; (800c0f8 <TIM_Base_SetConfig+0x114>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d02b      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c044:	d027      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a2c      	ldr	r2, [pc, #176]	; (800c0fc <TIM_Base_SetConfig+0x118>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d023      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a2b      	ldr	r2, [pc, #172]	; (800c100 <TIM_Base_SetConfig+0x11c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d01f      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a2a      	ldr	r2, [pc, #168]	; (800c104 <TIM_Base_SetConfig+0x120>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d01b      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a29      	ldr	r2, [pc, #164]	; (800c108 <TIM_Base_SetConfig+0x124>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d017      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a28      	ldr	r2, [pc, #160]	; (800c10c <TIM_Base_SetConfig+0x128>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d013      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a27      	ldr	r2, [pc, #156]	; (800c110 <TIM_Base_SetConfig+0x12c>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d00f      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a26      	ldr	r2, [pc, #152]	; (800c114 <TIM_Base_SetConfig+0x130>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d00b      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a25      	ldr	r2, [pc, #148]	; (800c118 <TIM_Base_SetConfig+0x134>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d007      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a24      	ldr	r2, [pc, #144]	; (800c11c <TIM_Base_SetConfig+0x138>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d003      	beq.n	800c096 <TIM_Base_SetConfig+0xb2>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a23      	ldr	r2, [pc, #140]	; (800c120 <TIM_Base_SetConfig+0x13c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d108      	bne.n	800c0a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c09c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	695b      	ldr	r3, [r3, #20]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	689a      	ldr	r2, [r3, #8]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a0a      	ldr	r2, [pc, #40]	; (800c0f8 <TIM_Base_SetConfig+0x114>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d003      	beq.n	800c0dc <TIM_Base_SetConfig+0xf8>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a0c      	ldr	r2, [pc, #48]	; (800c108 <TIM_Base_SetConfig+0x124>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d103      	bne.n	800c0e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	691a      	ldr	r2, [r3, #16]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	615a      	str	r2, [r3, #20]
}
 800c0ea:	bf00      	nop
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	40010000 	.word	0x40010000
 800c0fc:	40000400 	.word	0x40000400
 800c100:	40000800 	.word	0x40000800
 800c104:	40000c00 	.word	0x40000c00
 800c108:	40010400 	.word	0x40010400
 800c10c:	40014000 	.word	0x40014000
 800c110:	40014400 	.word	0x40014400
 800c114:	40014800 	.word	0x40014800
 800c118:	40001800 	.word	0x40001800
 800c11c:	40001c00 	.word	0x40001c00
 800c120:	40002000 	.word	0x40002000

0800c124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c124:	b480      	push	{r7}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	f023 0201 	bic.w	r2, r3, #1
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	699b      	ldr	r3, [r3, #24]
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	4b2b      	ldr	r3, [pc, #172]	; (800c1fc <TIM_OC1_SetConfig+0xd8>)
 800c150:	4013      	ands	r3, r2
 800c152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f023 0303 	bic.w	r3, r3, #3
 800c15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f023 0302 	bic.w	r3, r3, #2
 800c16c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	4313      	orrs	r3, r2
 800c176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a21      	ldr	r2, [pc, #132]	; (800c200 <TIM_OC1_SetConfig+0xdc>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d003      	beq.n	800c188 <TIM_OC1_SetConfig+0x64>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a20      	ldr	r2, [pc, #128]	; (800c204 <TIM_OC1_SetConfig+0xe0>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d10c      	bne.n	800c1a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f023 0308 	bic.w	r3, r3, #8
 800c18e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	4313      	orrs	r3, r2
 800c198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f023 0304 	bic.w	r3, r3, #4
 800c1a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a16      	ldr	r2, [pc, #88]	; (800c200 <TIM_OC1_SetConfig+0xdc>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_OC1_SetConfig+0x8e>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a15      	ldr	r2, [pc, #84]	; (800c204 <TIM_OC1_SetConfig+0xe0>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d111      	bne.n	800c1d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	621a      	str	r2, [r3, #32]
}
 800c1f0:	bf00      	nop
 800c1f2:	371c      	adds	r7, #28
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	fffeff8f 	.word	0xfffeff8f
 800c200:	40010000 	.word	0x40010000
 800c204:	40010400 	.word	0x40010400

0800c208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	f023 0210 	bic.w	r2, r3, #16
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	4b2e      	ldr	r3, [pc, #184]	; (800c2ec <TIM_OC2_SetConfig+0xe4>)
 800c234:	4013      	ands	r3, r2
 800c236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	4313      	orrs	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f023 0320 	bic.w	r3, r3, #32
 800c252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	011b      	lsls	r3, r3, #4
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a23      	ldr	r2, [pc, #140]	; (800c2f0 <TIM_OC2_SetConfig+0xe8>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d003      	beq.n	800c270 <TIM_OC2_SetConfig+0x68>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a22      	ldr	r2, [pc, #136]	; (800c2f4 <TIM_OC2_SetConfig+0xec>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d10d      	bne.n	800c28c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	011b      	lsls	r3, r3, #4
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c28a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a18      	ldr	r2, [pc, #96]	; (800c2f0 <TIM_OC2_SetConfig+0xe8>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <TIM_OC2_SetConfig+0x94>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a17      	ldr	r2, [pc, #92]	; (800c2f4 <TIM_OC2_SetConfig+0xec>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d113      	bne.n	800c2c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	621a      	str	r2, [r3, #32]
}
 800c2de:	bf00      	nop
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	feff8fff 	.word	0xfeff8fff
 800c2f0:	40010000 	.word	0x40010000
 800c2f4:	40010400 	.word	0x40010400

0800c2f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	69db      	ldr	r3, [r3, #28]
 800c31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4b2d      	ldr	r3, [pc, #180]	; (800c3d8 <TIM_OC3_SetConfig+0xe0>)
 800c324:	4013      	ands	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	f023 0303 	bic.w	r3, r3, #3
 800c32e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	4313      	orrs	r3, r2
 800c338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a22      	ldr	r2, [pc, #136]	; (800c3dc <TIM_OC3_SetConfig+0xe4>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d003      	beq.n	800c35e <TIM_OC3_SetConfig+0x66>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a21      	ldr	r2, [pc, #132]	; (800c3e0 <TIM_OC3_SetConfig+0xe8>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d10d      	bne.n	800c37a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	021b      	lsls	r3, r3, #8
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a17      	ldr	r2, [pc, #92]	; (800c3dc <TIM_OC3_SetConfig+0xe4>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d003      	beq.n	800c38a <TIM_OC3_SetConfig+0x92>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a16      	ldr	r2, [pc, #88]	; (800c3e0 <TIM_OC3_SetConfig+0xe8>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d113      	bne.n	800c3b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	011b      	lsls	r3, r3, #4
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	699b      	ldr	r3, [r3, #24]
 800c3aa:	011b      	lsls	r3, r3, #4
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	621a      	str	r2, [r3, #32]
}
 800c3cc:	bf00      	nop
 800c3ce:	371c      	adds	r7, #28
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	fffeff8f 	.word	0xfffeff8f
 800c3dc:	40010000 	.word	0x40010000
 800c3e0:	40010400 	.word	0x40010400

0800c3e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	4b1e      	ldr	r3, [pc, #120]	; (800c488 <TIM_OC4_SetConfig+0xa4>)
 800c410:	4013      	ands	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	021b      	lsls	r3, r3, #8
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c42e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	031b      	lsls	r3, r3, #12
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	4313      	orrs	r3, r2
 800c43a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a13      	ldr	r2, [pc, #76]	; (800c48c <TIM_OC4_SetConfig+0xa8>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d003      	beq.n	800c44c <TIM_OC4_SetConfig+0x68>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a12      	ldr	r2, [pc, #72]	; (800c490 <TIM_OC4_SetConfig+0xac>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d109      	bne.n	800c460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	019b      	lsls	r3, r3, #6
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	621a      	str	r2, [r3, #32]
}
 800c47a:	bf00      	nop
 800c47c:	371c      	adds	r7, #28
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	feff8fff 	.word	0xfeff8fff
 800c48c:	40010000 	.word	0x40010000
 800c490:	40010400 	.word	0x40010400

0800c494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4b1b      	ldr	r3, [pc, #108]	; (800c52c <TIM_OC5_SetConfig+0x98>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	041b      	lsls	r3, r3, #16
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4a12      	ldr	r2, [pc, #72]	; (800c530 <TIM_OC5_SetConfig+0x9c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d003      	beq.n	800c4f2 <TIM_OC5_SetConfig+0x5e>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a11      	ldr	r2, [pc, #68]	; (800c534 <TIM_OC5_SetConfig+0xa0>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d109      	bne.n	800c506 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	021b      	lsls	r3, r3, #8
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	4313      	orrs	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	621a      	str	r2, [r3, #32]
}
 800c520:	bf00      	nop
 800c522:	371c      	adds	r7, #28
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	fffeff8f 	.word	0xfffeff8f
 800c530:	40010000 	.word	0x40010000
 800c534:	40010400 	.word	0x40010400

0800c538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c538:	b480      	push	{r7}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4b1c      	ldr	r3, [pc, #112]	; (800c5d4 <TIM_OC6_SetConfig+0x9c>)
 800c564:	4013      	ands	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	021b      	lsls	r3, r3, #8
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	4313      	orrs	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c57a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	051b      	lsls	r3, r3, #20
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	4313      	orrs	r3, r2
 800c586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a13      	ldr	r2, [pc, #76]	; (800c5d8 <TIM_OC6_SetConfig+0xa0>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d003      	beq.n	800c598 <TIM_OC6_SetConfig+0x60>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a12      	ldr	r2, [pc, #72]	; (800c5dc <TIM_OC6_SetConfig+0xa4>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d109      	bne.n	800c5ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c59e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	029b      	lsls	r3, r3, #10
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	697a      	ldr	r2, [r7, #20]
 800c5b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	621a      	str	r2, [r3, #32]
}
 800c5c6:	bf00      	nop
 800c5c8:	371c      	adds	r7, #28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	feff8fff 	.word	0xfeff8fff
 800c5d8:	40010000 	.word	0x40010000
 800c5dc:	40010400 	.word	0x40010400

0800c5e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b087      	sub	sp, #28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	f023 0201 	bic.w	r2, r3, #1
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c60a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	011b      	lsls	r3, r3, #4
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	4313      	orrs	r3, r2
 800c614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	f023 030a 	bic.w	r3, r3, #10
 800c61c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	4313      	orrs	r3, r2
 800c624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	621a      	str	r2, [r3, #32]
}
 800c632:	bf00      	nop
 800c634:	371c      	adds	r7, #28
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c63e:	b480      	push	{r7}
 800c640:	b087      	sub	sp, #28
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	f023 0210 	bic.w	r2, r3, #16
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	031b      	lsls	r3, r3, #12
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4313      	orrs	r3, r2
 800c672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c67a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	011b      	lsls	r3, r3, #4
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	4313      	orrs	r3, r2
 800c684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	693a      	ldr	r2, [r7, #16]
 800c690:	621a      	str	r2, [r3, #32]
}
 800c692:	bf00      	nop
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b085      	sub	sp, #20
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	f043 0307 	orr.w	r3, r3, #7
 800c6c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	609a      	str	r2, [r3, #8]
}
 800c6c8:	bf00      	nop
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	021a      	lsls	r2, r3, #8
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	609a      	str	r2, [r3, #8]
}
 800c708:	bf00      	nop
 800c70a:	371c      	adds	r7, #28
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c724:	2b01      	cmp	r3, #1
 800c726:	d101      	bne.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c728:	2302      	movs	r3, #2
 800c72a:	e045      	b.n	800c7b8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a1c      	ldr	r2, [pc, #112]	; (800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d004      	beq.n	800c760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a1b      	ldr	r2, [pc, #108]	; (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d108      	bne.n	800c772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	4313      	orrs	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c778:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	4313      	orrs	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c78a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	4313      	orrs	r3, r2
 800c794:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	40010000 	.word	0x40010000
 800c7c8:	40010400 	.word	0x40010400

0800c7cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d101      	bne.n	800c7e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	e065      	b.n	800c8b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	4313      	orrs	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	4313      	orrs	r3, r2
 800c818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4313      	orrs	r3, r2
 800c826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	4313      	orrs	r3, r2
 800c834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	4313      	orrs	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	041b      	lsls	r3, r3, #16
 800c85e:	4313      	orrs	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a16      	ldr	r2, [pc, #88]	; (800c8c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d004      	beq.n	800c876 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a14      	ldr	r2, [pc, #80]	; (800c8c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d115      	bne.n	800c8a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	051b      	lsls	r3, r3, #20
 800c882:	4313      	orrs	r3, r2
 800c884:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	4313      	orrs	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	40010000 	.word	0x40010000
 800c8c4:	40010400 	.word	0x40010400

0800c8c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e040      	b.n	800c998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7f6 f9e4 	bl	8002cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2224      	movs	r2, #36	; 0x24
 800c930:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f022 0201 	bic.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fa50 	bl	800cde8 <UART_SetConfig>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d101      	bne.n	800c952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e022      	b.n	800c998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fce8 	bl	800d330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c96e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c97e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f042 0201 	orr.w	r2, r2, #1
 800c98e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fd6f 	bl	800d474 <UART_CheckIdleState>
 800c996:	4603      	mov	r3, r0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9b2:	2b20      	cmp	r3, #32
 800c9b4:	d144      	bne.n	800ca40 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <HAL_UART_Transmit_IT+0x22>
 800c9bc:	88fb      	ldrh	r3, [r7, #6]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e03d      	b.n	800ca42 <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d101      	bne.n	800c9d4 <HAL_UART_Transmit_IT+0x34>
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e036      	b.n	800ca42 <HAL_UART_Transmit_IT+0xa2>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	88fa      	ldrh	r2, [r7, #6]
 800c9e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	88fa      	ldrh	r2, [r7, #6]
 800c9ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2221      	movs	r2, #33	; 0x21
 800ca02:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca0c:	d107      	bne.n	800ca1e <HAL_UART_Transmit_IT+0x7e>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d103      	bne.n	800ca1e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4a0d      	ldr	r2, [pc, #52]	; (800ca50 <HAL_UART_Transmit_IT+0xb0>)
 800ca1a:	665a      	str	r2, [r3, #100]	; 0x64
 800ca1c:	e002      	b.n	800ca24 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	4a0c      	ldr	r2, [pc, #48]	; (800ca54 <HAL_UART_Transmit_IT+0xb4>)
 800ca22:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca3a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e000      	b.n	800ca42 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800ca40:	2302      	movs	r3, #2
  }
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	0800d641 	.word	0x0800d641
 800ca54:	0800d5cf 	.word	0x0800d5cf

0800ca58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca6a:	2b20      	cmp	r3, #32
 800ca6c:	f040 808a 	bne.w	800cb84 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <HAL_UART_Receive_IT+0x24>
 800ca76:	88fb      	ldrh	r3, [r7, #6]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e082      	b.n	800cb86 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d101      	bne.n	800ca8e <HAL_UART_Receive_IT+0x36>
 800ca8a:	2302      	movs	r3, #2
 800ca8c:	e07b      	b.n	800cb86 <HAL_UART_Receive_IT+0x12e>
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	88fa      	ldrh	r2, [r7, #6]
 800caa0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	88fa      	ldrh	r2, [r7, #6]
 800caa8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caba:	d10e      	bne.n	800cada <HAL_UART_Receive_IT+0x82>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d105      	bne.n	800cad0 <HAL_UART_Receive_IT+0x78>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800caca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cace:	e02d      	b.n	800cb2c <HAL_UART_Receive_IT+0xd4>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	22ff      	movs	r2, #255	; 0xff
 800cad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cad8:	e028      	b.n	800cb2c <HAL_UART_Receive_IT+0xd4>
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10d      	bne.n	800cafe <HAL_UART_Receive_IT+0xa6>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d104      	bne.n	800caf4 <HAL_UART_Receive_IT+0x9c>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	22ff      	movs	r2, #255	; 0xff
 800caee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800caf2:	e01b      	b.n	800cb2c <HAL_UART_Receive_IT+0xd4>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	227f      	movs	r2, #127	; 0x7f
 800caf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cafc:	e016      	b.n	800cb2c <HAL_UART_Receive_IT+0xd4>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb06:	d10d      	bne.n	800cb24 <HAL_UART_Receive_IT+0xcc>
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d104      	bne.n	800cb1a <HAL_UART_Receive_IT+0xc2>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	227f      	movs	r2, #127	; 0x7f
 800cb14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cb18:	e008      	b.n	800cb2c <HAL_UART_Receive_IT+0xd4>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	223f      	movs	r2, #63	; 0x3f
 800cb1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cb22:	e003      	b.n	800cb2c <HAL_UART_Receive_IT+0xd4>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2222      	movs	r2, #34	; 0x22
 800cb36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	689a      	ldr	r2, [r3, #8]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f042 0201 	orr.w	r2, r2, #1
 800cb46:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb50:	d107      	bne.n	800cb62 <HAL_UART_Receive_IT+0x10a>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	4a0d      	ldr	r2, [pc, #52]	; (800cb94 <HAL_UART_Receive_IT+0x13c>)
 800cb5e:	661a      	str	r2, [r3, #96]	; 0x60
 800cb60:	e002      	b.n	800cb68 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	4a0c      	ldr	r2, [pc, #48]	; (800cb98 <HAL_UART_Receive_IT+0x140>)
 800cb66:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800cb7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e000      	b.n	800cb86 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800cb84:	2302      	movs	r3, #2
  }
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	0800d795 	.word	0x0800d795
 800cb98:	0800d6ef 	.word	0x0800d6ef

0800cb9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	69db      	ldr	r3, [r3, #28]
 800cbaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	f003 030f 	and.w	r3, r3, #15
 800cbc2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d113      	bne.n	800cbf2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	f003 0320 	and.w	r3, r3, #32
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00e      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	f003 0320 	and.w	r3, r3, #32
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d009      	beq.n	800cbf2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 80eb 	beq.w	800cdbe <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	4798      	blx	r3
      }
      return;
 800cbf0:	e0e5      	b.n	800cdbe <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 80c0 	beq.w	800cd7a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d105      	bne.n	800cc10 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80b5 	beq.w	800cd7a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00e      	beq.n	800cc38 <HAL_UART_IRQHandler+0x9c>
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d009      	beq.n	800cc38 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc30:	f043 0201 	orr.w	r2, r3, #1
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	f003 0302 	and.w	r3, r3, #2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00e      	beq.n	800cc60 <HAL_UART_IRQHandler+0xc4>
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f003 0301 	and.w	r3, r3, #1
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d009      	beq.n	800cc60 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2202      	movs	r2, #2
 800cc52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc58:	f043 0204 	orr.w	r2, r3, #4
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	f003 0304 	and.w	r3, r3, #4
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00e      	beq.n	800cc88 <HAL_UART_IRQHandler+0xec>
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d009      	beq.n	800cc88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2204      	movs	r2, #4
 800cc7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc80:	f043 0202 	orr.w	r2, r3, #2
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	f003 0308 	and.w	r3, r3, #8
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d013      	beq.n	800ccba <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	f003 0320 	and.w	r3, r3, #32
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d104      	bne.n	800cca6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d009      	beq.n	800ccba <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2208      	movs	r2, #8
 800ccac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccb2:	f043 0208 	orr.w	r2, r3, #8
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d07f      	beq.n	800cdc2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00c      	beq.n	800cce6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d007      	beq.n	800cce6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d003      	beq.n	800cce6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf6:	2b40      	cmp	r3, #64	; 0x40
 800ccf8:	d004      	beq.n	800cd04 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d031      	beq.n	800cd68 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fc2c 	bl	800d562 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd14:	2b40      	cmp	r3, #64	; 0x40
 800cd16:	d123      	bne.n	800cd60 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd26:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d013      	beq.n	800cd58 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd34:	4a26      	ldr	r2, [pc, #152]	; (800cdd0 <HAL_UART_IRQHandler+0x234>)
 800cd36:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7f7 f911 	bl	8003f64 <HAL_DMA_Abort_IT>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d016      	beq.n	800cd76 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cd52:	4610      	mov	r0, r2
 800cd54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd56:	e00e      	b.n	800cd76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f83b 	bl	800cdd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd5e:	e00a      	b.n	800cd76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f837 	bl	800cdd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd66:	e006      	b.n	800cd76 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f833 	bl	800cdd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800cd74:	e025      	b.n	800cdc2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd76:	bf00      	nop
    return;
 800cd78:	e023      	b.n	800cdc2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00d      	beq.n	800cda0 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d008      	beq.n	800cda0 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d017      	beq.n	800cdc6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	4798      	blx	r3
    }
    return;
 800cd9e:	e012      	b.n	800cdc6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00e      	beq.n	800cdc8 <HAL_UART_IRQHandler+0x22c>
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d009      	beq.n	800cdc8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fc81 	bl	800d6bc <UART_EndTransmit_IT>
    return;
 800cdba:	bf00      	nop
 800cdbc:	e004      	b.n	800cdc8 <HAL_UART_IRQHandler+0x22c>
      return;
 800cdbe:	bf00      	nop
 800cdc0:	e002      	b.n	800cdc8 <HAL_UART_IRQHandler+0x22c>
    return;
 800cdc2:	bf00      	nop
 800cdc4:	e000      	b.n	800cdc8 <HAL_UART_IRQHandler+0x22c>
    return;
 800cdc6:	bf00      	nop
  }

}
 800cdc8:	3720      	adds	r7, #32
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	0800d5a3 	.word	0x0800d5a3

0800cdd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	431a      	orrs	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	431a      	orrs	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	4bb1      	ldr	r3, [pc, #708]	; (800d0dc <UART_SetConfig+0x2f4>)
 800ce18:	4013      	ands	r3, r2
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6812      	ldr	r2, [r2, #0]
 800ce1e:	6939      	ldr	r1, [r7, #16]
 800ce20:	430b      	orrs	r3, r1
 800ce22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	699b      	ldr	r3, [r3, #24]
 800ce3e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a1b      	ldr	r3, [r3, #32]
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	430a      	orrs	r2, r1
 800ce5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a9f      	ldr	r2, [pc, #636]	; (800d0e0 <UART_SetConfig+0x2f8>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d121      	bne.n	800ceac <UART_SetConfig+0xc4>
 800ce68:	4b9e      	ldr	r3, [pc, #632]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800ce6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d816      	bhi.n	800cea4 <UART_SetConfig+0xbc>
 800ce76:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <UART_SetConfig+0x94>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce8d 	.word	0x0800ce8d
 800ce80:	0800ce99 	.word	0x0800ce99
 800ce84:	0800ce93 	.word	0x0800ce93
 800ce88:	0800ce9f 	.word	0x0800ce9f
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	77fb      	strb	r3, [r7, #31]
 800ce90:	e151      	b.n	800d136 <UART_SetConfig+0x34e>
 800ce92:	2302      	movs	r3, #2
 800ce94:	77fb      	strb	r3, [r7, #31]
 800ce96:	e14e      	b.n	800d136 <UART_SetConfig+0x34e>
 800ce98:	2304      	movs	r3, #4
 800ce9a:	77fb      	strb	r3, [r7, #31]
 800ce9c:	e14b      	b.n	800d136 <UART_SetConfig+0x34e>
 800ce9e:	2308      	movs	r3, #8
 800cea0:	77fb      	strb	r3, [r7, #31]
 800cea2:	e148      	b.n	800d136 <UART_SetConfig+0x34e>
 800cea4:	2310      	movs	r3, #16
 800cea6:	77fb      	strb	r3, [r7, #31]
 800cea8:	bf00      	nop
 800ceaa:	e144      	b.n	800d136 <UART_SetConfig+0x34e>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a8d      	ldr	r2, [pc, #564]	; (800d0e8 <UART_SetConfig+0x300>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d134      	bne.n	800cf20 <UART_SetConfig+0x138>
 800ceb6:	4b8b      	ldr	r3, [pc, #556]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800ceb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cebc:	f003 030c 	and.w	r3, r3, #12
 800cec0:	2b0c      	cmp	r3, #12
 800cec2:	d829      	bhi.n	800cf18 <UART_SetConfig+0x130>
 800cec4:	a201      	add	r2, pc, #4	; (adr r2, 800cecc <UART_SetConfig+0xe4>)
 800cec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceca:	bf00      	nop
 800cecc:	0800cf01 	.word	0x0800cf01
 800ced0:	0800cf19 	.word	0x0800cf19
 800ced4:	0800cf19 	.word	0x0800cf19
 800ced8:	0800cf19 	.word	0x0800cf19
 800cedc:	0800cf0d 	.word	0x0800cf0d
 800cee0:	0800cf19 	.word	0x0800cf19
 800cee4:	0800cf19 	.word	0x0800cf19
 800cee8:	0800cf19 	.word	0x0800cf19
 800ceec:	0800cf07 	.word	0x0800cf07
 800cef0:	0800cf19 	.word	0x0800cf19
 800cef4:	0800cf19 	.word	0x0800cf19
 800cef8:	0800cf19 	.word	0x0800cf19
 800cefc:	0800cf13 	.word	0x0800cf13
 800cf00:	2300      	movs	r3, #0
 800cf02:	77fb      	strb	r3, [r7, #31]
 800cf04:	e117      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf06:	2302      	movs	r3, #2
 800cf08:	77fb      	strb	r3, [r7, #31]
 800cf0a:	e114      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	77fb      	strb	r3, [r7, #31]
 800cf10:	e111      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf12:	2308      	movs	r3, #8
 800cf14:	77fb      	strb	r3, [r7, #31]
 800cf16:	e10e      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf18:	2310      	movs	r3, #16
 800cf1a:	77fb      	strb	r3, [r7, #31]
 800cf1c:	bf00      	nop
 800cf1e:	e10a      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a71      	ldr	r2, [pc, #452]	; (800d0ec <UART_SetConfig+0x304>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d120      	bne.n	800cf6c <UART_SetConfig+0x184>
 800cf2a:	4b6e      	ldr	r3, [pc, #440]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800cf2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cf34:	2b10      	cmp	r3, #16
 800cf36:	d00f      	beq.n	800cf58 <UART_SetConfig+0x170>
 800cf38:	2b10      	cmp	r3, #16
 800cf3a:	d802      	bhi.n	800cf42 <UART_SetConfig+0x15a>
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <UART_SetConfig+0x164>
 800cf40:	e010      	b.n	800cf64 <UART_SetConfig+0x17c>
 800cf42:	2b20      	cmp	r3, #32
 800cf44:	d005      	beq.n	800cf52 <UART_SetConfig+0x16a>
 800cf46:	2b30      	cmp	r3, #48	; 0x30
 800cf48:	d009      	beq.n	800cf5e <UART_SetConfig+0x176>
 800cf4a:	e00b      	b.n	800cf64 <UART_SetConfig+0x17c>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	77fb      	strb	r3, [r7, #31]
 800cf50:	e0f1      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf52:	2302      	movs	r3, #2
 800cf54:	77fb      	strb	r3, [r7, #31]
 800cf56:	e0ee      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	77fb      	strb	r3, [r7, #31]
 800cf5c:	e0eb      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf5e:	2308      	movs	r3, #8
 800cf60:	77fb      	strb	r3, [r7, #31]
 800cf62:	e0e8      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf64:	2310      	movs	r3, #16
 800cf66:	77fb      	strb	r3, [r7, #31]
 800cf68:	bf00      	nop
 800cf6a:	e0e4      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a5f      	ldr	r2, [pc, #380]	; (800d0f0 <UART_SetConfig+0x308>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d120      	bne.n	800cfb8 <UART_SetConfig+0x1d0>
 800cf76:	4b5b      	ldr	r3, [pc, #364]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800cf78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cf80:	2b40      	cmp	r3, #64	; 0x40
 800cf82:	d00f      	beq.n	800cfa4 <UART_SetConfig+0x1bc>
 800cf84:	2b40      	cmp	r3, #64	; 0x40
 800cf86:	d802      	bhi.n	800cf8e <UART_SetConfig+0x1a6>
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <UART_SetConfig+0x1b0>
 800cf8c:	e010      	b.n	800cfb0 <UART_SetConfig+0x1c8>
 800cf8e:	2b80      	cmp	r3, #128	; 0x80
 800cf90:	d005      	beq.n	800cf9e <UART_SetConfig+0x1b6>
 800cf92:	2bc0      	cmp	r3, #192	; 0xc0
 800cf94:	d009      	beq.n	800cfaa <UART_SetConfig+0x1c2>
 800cf96:	e00b      	b.n	800cfb0 <UART_SetConfig+0x1c8>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	77fb      	strb	r3, [r7, #31]
 800cf9c:	e0cb      	b.n	800d136 <UART_SetConfig+0x34e>
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	77fb      	strb	r3, [r7, #31]
 800cfa2:	e0c8      	b.n	800d136 <UART_SetConfig+0x34e>
 800cfa4:	2304      	movs	r3, #4
 800cfa6:	77fb      	strb	r3, [r7, #31]
 800cfa8:	e0c5      	b.n	800d136 <UART_SetConfig+0x34e>
 800cfaa:	2308      	movs	r3, #8
 800cfac:	77fb      	strb	r3, [r7, #31]
 800cfae:	e0c2      	b.n	800d136 <UART_SetConfig+0x34e>
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	77fb      	strb	r3, [r7, #31]
 800cfb4:	bf00      	nop
 800cfb6:	e0be      	b.n	800d136 <UART_SetConfig+0x34e>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a4d      	ldr	r2, [pc, #308]	; (800d0f4 <UART_SetConfig+0x30c>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d124      	bne.n	800d00c <UART_SetConfig+0x224>
 800cfc2:	4b48      	ldr	r3, [pc, #288]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800cfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfd0:	d012      	beq.n	800cff8 <UART_SetConfig+0x210>
 800cfd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfd6:	d802      	bhi.n	800cfde <UART_SetConfig+0x1f6>
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d007      	beq.n	800cfec <UART_SetConfig+0x204>
 800cfdc:	e012      	b.n	800d004 <UART_SetConfig+0x21c>
 800cfde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfe2:	d006      	beq.n	800cff2 <UART_SetConfig+0x20a>
 800cfe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfe8:	d009      	beq.n	800cffe <UART_SetConfig+0x216>
 800cfea:	e00b      	b.n	800d004 <UART_SetConfig+0x21c>
 800cfec:	2300      	movs	r3, #0
 800cfee:	77fb      	strb	r3, [r7, #31]
 800cff0:	e0a1      	b.n	800d136 <UART_SetConfig+0x34e>
 800cff2:	2302      	movs	r3, #2
 800cff4:	77fb      	strb	r3, [r7, #31]
 800cff6:	e09e      	b.n	800d136 <UART_SetConfig+0x34e>
 800cff8:	2304      	movs	r3, #4
 800cffa:	77fb      	strb	r3, [r7, #31]
 800cffc:	e09b      	b.n	800d136 <UART_SetConfig+0x34e>
 800cffe:	2308      	movs	r3, #8
 800d000:	77fb      	strb	r3, [r7, #31]
 800d002:	e098      	b.n	800d136 <UART_SetConfig+0x34e>
 800d004:	2310      	movs	r3, #16
 800d006:	77fb      	strb	r3, [r7, #31]
 800d008:	bf00      	nop
 800d00a:	e094      	b.n	800d136 <UART_SetConfig+0x34e>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a39      	ldr	r2, [pc, #228]	; (800d0f8 <UART_SetConfig+0x310>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d124      	bne.n	800d060 <UART_SetConfig+0x278>
 800d016:	4b33      	ldr	r3, [pc, #204]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800d018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d01c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d024:	d012      	beq.n	800d04c <UART_SetConfig+0x264>
 800d026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d02a:	d802      	bhi.n	800d032 <UART_SetConfig+0x24a>
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d007      	beq.n	800d040 <UART_SetConfig+0x258>
 800d030:	e012      	b.n	800d058 <UART_SetConfig+0x270>
 800d032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d036:	d006      	beq.n	800d046 <UART_SetConfig+0x25e>
 800d038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d03c:	d009      	beq.n	800d052 <UART_SetConfig+0x26a>
 800d03e:	e00b      	b.n	800d058 <UART_SetConfig+0x270>
 800d040:	2301      	movs	r3, #1
 800d042:	77fb      	strb	r3, [r7, #31]
 800d044:	e077      	b.n	800d136 <UART_SetConfig+0x34e>
 800d046:	2302      	movs	r3, #2
 800d048:	77fb      	strb	r3, [r7, #31]
 800d04a:	e074      	b.n	800d136 <UART_SetConfig+0x34e>
 800d04c:	2304      	movs	r3, #4
 800d04e:	77fb      	strb	r3, [r7, #31]
 800d050:	e071      	b.n	800d136 <UART_SetConfig+0x34e>
 800d052:	2308      	movs	r3, #8
 800d054:	77fb      	strb	r3, [r7, #31]
 800d056:	e06e      	b.n	800d136 <UART_SetConfig+0x34e>
 800d058:	2310      	movs	r3, #16
 800d05a:	77fb      	strb	r3, [r7, #31]
 800d05c:	bf00      	nop
 800d05e:	e06a      	b.n	800d136 <UART_SetConfig+0x34e>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a25      	ldr	r2, [pc, #148]	; (800d0fc <UART_SetConfig+0x314>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d124      	bne.n	800d0b4 <UART_SetConfig+0x2cc>
 800d06a:	4b1e      	ldr	r3, [pc, #120]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800d06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d070:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d078:	d012      	beq.n	800d0a0 <UART_SetConfig+0x2b8>
 800d07a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d07e:	d802      	bhi.n	800d086 <UART_SetConfig+0x29e>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d007      	beq.n	800d094 <UART_SetConfig+0x2ac>
 800d084:	e012      	b.n	800d0ac <UART_SetConfig+0x2c4>
 800d086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d08a:	d006      	beq.n	800d09a <UART_SetConfig+0x2b2>
 800d08c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d090:	d009      	beq.n	800d0a6 <UART_SetConfig+0x2be>
 800d092:	e00b      	b.n	800d0ac <UART_SetConfig+0x2c4>
 800d094:	2300      	movs	r3, #0
 800d096:	77fb      	strb	r3, [r7, #31]
 800d098:	e04d      	b.n	800d136 <UART_SetConfig+0x34e>
 800d09a:	2302      	movs	r3, #2
 800d09c:	77fb      	strb	r3, [r7, #31]
 800d09e:	e04a      	b.n	800d136 <UART_SetConfig+0x34e>
 800d0a0:	2304      	movs	r3, #4
 800d0a2:	77fb      	strb	r3, [r7, #31]
 800d0a4:	e047      	b.n	800d136 <UART_SetConfig+0x34e>
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	77fb      	strb	r3, [r7, #31]
 800d0aa:	e044      	b.n	800d136 <UART_SetConfig+0x34e>
 800d0ac:	2310      	movs	r3, #16
 800d0ae:	77fb      	strb	r3, [r7, #31]
 800d0b0:	bf00      	nop
 800d0b2:	e040      	b.n	800d136 <UART_SetConfig+0x34e>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a11      	ldr	r2, [pc, #68]	; (800d100 <UART_SetConfig+0x318>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d139      	bne.n	800d132 <UART_SetConfig+0x34a>
 800d0be:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <UART_SetConfig+0x2fc>)
 800d0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d0c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0cc:	d027      	beq.n	800d11e <UART_SetConfig+0x336>
 800d0ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0d2:	d817      	bhi.n	800d104 <UART_SetConfig+0x31c>
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d01c      	beq.n	800d112 <UART_SetConfig+0x32a>
 800d0d8:	e027      	b.n	800d12a <UART_SetConfig+0x342>
 800d0da:	bf00      	nop
 800d0dc:	efff69f3 	.word	0xefff69f3
 800d0e0:	40011000 	.word	0x40011000
 800d0e4:	40023800 	.word	0x40023800
 800d0e8:	40004400 	.word	0x40004400
 800d0ec:	40004800 	.word	0x40004800
 800d0f0:	40004c00 	.word	0x40004c00
 800d0f4:	40005000 	.word	0x40005000
 800d0f8:	40011400 	.word	0x40011400
 800d0fc:	40007800 	.word	0x40007800
 800d100:	40007c00 	.word	0x40007c00
 800d104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d108:	d006      	beq.n	800d118 <UART_SetConfig+0x330>
 800d10a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d10e:	d009      	beq.n	800d124 <UART_SetConfig+0x33c>
 800d110:	e00b      	b.n	800d12a <UART_SetConfig+0x342>
 800d112:	2300      	movs	r3, #0
 800d114:	77fb      	strb	r3, [r7, #31]
 800d116:	e00e      	b.n	800d136 <UART_SetConfig+0x34e>
 800d118:	2302      	movs	r3, #2
 800d11a:	77fb      	strb	r3, [r7, #31]
 800d11c:	e00b      	b.n	800d136 <UART_SetConfig+0x34e>
 800d11e:	2304      	movs	r3, #4
 800d120:	77fb      	strb	r3, [r7, #31]
 800d122:	e008      	b.n	800d136 <UART_SetConfig+0x34e>
 800d124:	2308      	movs	r3, #8
 800d126:	77fb      	strb	r3, [r7, #31]
 800d128:	e005      	b.n	800d136 <UART_SetConfig+0x34e>
 800d12a:	2310      	movs	r3, #16
 800d12c:	77fb      	strb	r3, [r7, #31]
 800d12e:	bf00      	nop
 800d130:	e001      	b.n	800d136 <UART_SetConfig+0x34e>
 800d132:	2310      	movs	r3, #16
 800d134:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	69db      	ldr	r3, [r3, #28]
 800d13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d13e:	d17c      	bne.n	800d23a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800d140:	7ffb      	ldrb	r3, [r7, #31]
 800d142:	2b08      	cmp	r3, #8
 800d144:	d859      	bhi.n	800d1fa <UART_SetConfig+0x412>
 800d146:	a201      	add	r2, pc, #4	; (adr r2, 800d14c <UART_SetConfig+0x364>)
 800d148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14c:	0800d171 	.word	0x0800d171
 800d150:	0800d18f 	.word	0x0800d18f
 800d154:	0800d1ad 	.word	0x0800d1ad
 800d158:	0800d1fb 	.word	0x0800d1fb
 800d15c:	0800d1c5 	.word	0x0800d1c5
 800d160:	0800d1fb 	.word	0x0800d1fb
 800d164:	0800d1fb 	.word	0x0800d1fb
 800d168:	0800d1fb 	.word	0x0800d1fb
 800d16c:	0800d1e3 	.word	0x0800d1e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d170:	f7fb fe60 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 800d174:	4603      	mov	r3, r0
 800d176:	005a      	lsls	r2, r3, #1
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	085b      	lsrs	r3, r3, #1
 800d17e:	441a      	add	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	fbb2 f3f3 	udiv	r3, r2, r3
 800d188:	b29b      	uxth	r3, r3
 800d18a:	61bb      	str	r3, [r7, #24]
        break;
 800d18c:	e038      	b.n	800d200 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d18e:	f7fb fe65 	bl	8008e5c <HAL_RCC_GetPCLK2Freq>
 800d192:	4603      	mov	r3, r0
 800d194:	005a      	lsls	r2, r3, #1
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	085b      	lsrs	r3, r3, #1
 800d19c:	441a      	add	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	61bb      	str	r3, [r7, #24]
        break;
 800d1aa:	e029      	b.n	800d200 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	085a      	lsrs	r2, r3, #1
 800d1b2:	4b5d      	ldr	r3, [pc, #372]	; (800d328 <UART_SetConfig+0x540>)
 800d1b4:	4413      	add	r3, r2
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6852      	ldr	r2, [r2, #4]
 800d1ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	61bb      	str	r3, [r7, #24]
        break;
 800d1c2:	e01d      	b.n	800d200 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d1c4:	f7fb fd78 	bl	8008cb8 <HAL_RCC_GetSysClockFreq>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	005a      	lsls	r2, r3, #1
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	085b      	lsrs	r3, r3, #1
 800d1d2:	441a      	add	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	61bb      	str	r3, [r7, #24]
        break;
 800d1e0:	e00e      	b.n	800d200 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	61bb      	str	r3, [r7, #24]
        break;
 800d1f8:	e002      	b.n	800d200 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	75fb      	strb	r3, [r7, #23]
        break;
 800d1fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	2b0f      	cmp	r3, #15
 800d204:	d916      	bls.n	800d234 <UART_SetConfig+0x44c>
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d20c:	d212      	bcs.n	800d234 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	b29b      	uxth	r3, r3
 800d212:	f023 030f 	bic.w	r3, r3, #15
 800d216:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	085b      	lsrs	r3, r3, #1
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	f003 0307 	and.w	r3, r3, #7
 800d222:	b29a      	uxth	r2, r3
 800d224:	89fb      	ldrh	r3, [r7, #14]
 800d226:	4313      	orrs	r3, r2
 800d228:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	89fa      	ldrh	r2, [r7, #14]
 800d230:	60da      	str	r2, [r3, #12]
 800d232:	e06e      	b.n	800d312 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	75fb      	strb	r3, [r7, #23]
 800d238:	e06b      	b.n	800d312 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800d23a:	7ffb      	ldrb	r3, [r7, #31]
 800d23c:	2b08      	cmp	r3, #8
 800d23e:	d857      	bhi.n	800d2f0 <UART_SetConfig+0x508>
 800d240:	a201      	add	r2, pc, #4	; (adr r2, 800d248 <UART_SetConfig+0x460>)
 800d242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d246:	bf00      	nop
 800d248:	0800d26d 	.word	0x0800d26d
 800d24c:	0800d289 	.word	0x0800d289
 800d250:	0800d2a5 	.word	0x0800d2a5
 800d254:	0800d2f1 	.word	0x0800d2f1
 800d258:	0800d2bd 	.word	0x0800d2bd
 800d25c:	0800d2f1 	.word	0x0800d2f1
 800d260:	0800d2f1 	.word	0x0800d2f1
 800d264:	0800d2f1 	.word	0x0800d2f1
 800d268:	0800d2d9 	.word	0x0800d2d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d26c:	f7fb fde2 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 800d270:	4602      	mov	r2, r0
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	441a      	add	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d282:	b29b      	uxth	r3, r3
 800d284:	61bb      	str	r3, [r7, #24]
        break;
 800d286:	e036      	b.n	800d2f6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d288:	f7fb fde8 	bl	8008e5c <HAL_RCC_GetPCLK2Freq>
 800d28c:	4602      	mov	r2, r0
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	085b      	lsrs	r3, r3, #1
 800d294:	441a      	add	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	61bb      	str	r3, [r7, #24]
        break;
 800d2a2:	e028      	b.n	800d2f6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	085a      	lsrs	r2, r3, #1
 800d2aa:	4b20      	ldr	r3, [pc, #128]	; (800d32c <UART_SetConfig+0x544>)
 800d2ac:	4413      	add	r3, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	6852      	ldr	r2, [r2, #4]
 800d2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	61bb      	str	r3, [r7, #24]
        break;
 800d2ba:	e01c      	b.n	800d2f6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d2bc:	f7fb fcfc 	bl	8008cb8 <HAL_RCC_GetSysClockFreq>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	441a      	add	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	61bb      	str	r3, [r7, #24]
        break;
 800d2d6:	e00e      	b.n	800d2f6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	085b      	lsrs	r3, r3, #1
 800d2de:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	61bb      	str	r3, [r7, #24]
        break;
 800d2ee:	e002      	b.n	800d2f6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	75fb      	strb	r3, [r7, #23]
        break;
 800d2f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b0f      	cmp	r3, #15
 800d2fa:	d908      	bls.n	800d30e <UART_SetConfig+0x526>
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d302:	d204      	bcs.n	800d30e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	69ba      	ldr	r2, [r7, #24]
 800d30a:	60da      	str	r2, [r3, #12]
 800d30c:	e001      	b.n	800d312 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	01e84800 	.word	0x01e84800
 800d32c:	00f42400 	.word	0x00f42400

0800d330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00a      	beq.n	800d35a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35e:	f003 0302 	and.w	r3, r3, #2
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00a      	beq.n	800d37c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00a      	beq.n	800d39e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	430a      	orrs	r2, r1
 800d39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	f003 0308 	and.w	r3, r3, #8
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00a      	beq.n	800d3c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	430a      	orrs	r2, r1
 800d3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	f003 0310 	and.w	r3, r3, #16
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	f003 0320 	and.w	r3, r3, #32
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00a      	beq.n	800d404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	430a      	orrs	r2, r1
 800d402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01a      	beq.n	800d446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d42e:	d10a      	bne.n	800d446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00a      	beq.n	800d468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	430a      	orrs	r2, r1
 800d466:	605a      	str	r2, [r3, #4]
  }
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af02      	add	r7, sp, #8
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d482:	f7f5 ff2f 	bl	80032e4 <HAL_GetTick>
 800d486:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f003 0308 	and.w	r3, r3, #8
 800d492:	2b08      	cmp	r3, #8
 800d494:	d10e      	bne.n	800d4b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d496:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f814 	bl	800d4d2 <UART_WaitOnFlagUntilTimeout>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e00a      	b.n	800d4ca <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2220      	movs	r2, #32
 800d4b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	60f8      	str	r0, [r7, #12]
 800d4da:	60b9      	str	r1, [r7, #8]
 800d4dc:	603b      	str	r3, [r7, #0]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4e2:	e02a      	b.n	800d53a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ea:	d026      	beq.n	800d53a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ec:	f7f5 fefa 	bl	80032e4 <HAL_GetTick>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d302      	bcc.n	800d502 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d11b      	bne.n	800d53a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d510:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f022 0201 	bic.w	r2, r2, #1
 800d520:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2220      	movs	r2, #32
 800d526:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2220      	movs	r2, #32
 800d52c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2200      	movs	r2, #0
 800d532:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d536:	2303      	movs	r3, #3
 800d538:	e00f      	b.n	800d55a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	69da      	ldr	r2, [r3, #28]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	4013      	ands	r3, r2
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	429a      	cmp	r2, r3
 800d548:	bf0c      	ite	eq
 800d54a:	2301      	moveq	r3, #1
 800d54c:	2300      	movne	r3, #0
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	461a      	mov	r2, r3
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	429a      	cmp	r2, r3
 800d556:	d0c5      	beq.n	800d4e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d578:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	689a      	ldr	r2, [r3, #8]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f022 0201 	bic.w	r2, r2, #1
 800d588:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2220      	movs	r2, #32
 800d58e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d596:	bf00      	nop
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff fc07 	bl	800cdd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5c6:	bf00      	nop
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5da:	2b21      	cmp	r3, #33	; 0x21
 800d5dc:	d12a      	bne.n	800d634 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d110      	bne.n	800d60c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5f8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d608:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d60a:	e013      	b.n	800d634 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d610:	781a      	ldrb	r2, [r3, #0]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3b01      	subs	r3, #1
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d64c:	2b21      	cmp	r3, #33	; 0x21
 800d64e:	d12f      	bne.n	800d6b0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d656:	b29b      	uxth	r3, r3
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d110      	bne.n	800d67e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d66a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d67a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d67c:	e018      	b.n	800d6b0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d682:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d692:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d698:	1c9a      	adds	r2, r3, #2
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d6b0:	bf00      	nop
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6d2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2220      	movs	r2, #32
 800d6d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7f4 fd96 	bl	8002212 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6e6:	bf00      	nop
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6fc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d702:	2b22      	cmp	r3, #34	; 0x22
 800d704:	d13a      	bne.n	800d77c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d70e:	89bb      	ldrh	r3, [r7, #12]
 800d710:	b2d9      	uxtb	r1, r3
 800d712:	89fb      	ldrh	r3, [r7, #14]
 800d714:	b2da      	uxtb	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d71a:	400a      	ands	r2, r1
 800d71c:	b2d2      	uxtb	r2, r2
 800d71e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d724:	1c5a      	adds	r2, r3, #1
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d730:	b29b      	uxth	r3, r3
 800d732:	3b01      	subs	r3, #1
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d742:	b29b      	uxth	r3, r3
 800d744:	2b00      	cmp	r3, #0
 800d746:	d121      	bne.n	800d78c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d756:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	689a      	ldr	r2, [r3, #8]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f022 0201 	bic.w	r2, r2, #1
 800d766:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2220      	movs	r2, #32
 800d76c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7f4 fd56 	bl	8002226 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d77a:	e007      	b.n	800d78c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	699a      	ldr	r2, [r3, #24]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f042 0208 	orr.w	r2, r2, #8
 800d78a:	619a      	str	r2, [r3, #24]
}
 800d78c:	bf00      	nop
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7a8:	2b22      	cmp	r3, #34	; 0x22
 800d7aa:	d13a      	bne.n	800d822 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7b8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800d7ba:	89ba      	ldrh	r2, [r7, #12]
 800d7bc:	89fb      	ldrh	r3, [r7, #14]
 800d7be:	4013      	ands	r3, r2
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ca:	1c9a      	adds	r2, r3, #2
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d121      	bne.n	800d832 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d7fc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	689a      	ldr	r2, [r3, #8]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f022 0201 	bic.w	r2, r2, #1
 800d80c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2220      	movs	r2, #32
 800d812:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7f4 fd03 	bl	8002226 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d820:	e007      	b.n	800d832 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	699a      	ldr	r2, [r3, #24]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f042 0208 	orr.w	r2, r2, #8
 800d830:	619a      	str	r2, [r3, #24]
}
 800d832:	bf00      	nop
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
	...

0800d83c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800d846:	2300      	movs	r3, #0
 800d848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d027      	beq.n	800d8a6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	4b2f      	ldr	r3, [pc, #188]	; (800d91c <FMC_SDRAM_Init+0xe0>)
 800d860:	4013      	ands	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d86c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800d872:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800d878:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800d87e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800d884:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800d88a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800d890:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d896:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	e032      	b.n	800d90c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d8b2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d8bc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d8c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	4b12      	ldr	r3, [pc, #72]	; (800d91c <FMC_SDRAM_Init+0xe0>)
 800d8d4:	4013      	ands	r3, r2
 800d8d6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d8e0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800d8e6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800d8ec:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800d8f2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800d8f8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	ffff8000 	.word	0xffff8000

0800d920 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d02e      	beq.n	800d998 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d946:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	3b01      	subs	r3, #1
 800d954:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d956:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d960:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	3b01      	subs	r3, #1
 800d968:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d96a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	3b01      	subs	r3, #1
 800d972:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d974:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	695b      	ldr	r3, [r3, #20]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d97e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	3b01      	subs	r3, #1
 800d986:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d988:	4313      	orrs	r3, r2
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	609a      	str	r2, [r3, #8]
 800d996:	e039      	b.n	800da0c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	4b1e      	ldr	r3, [pc, #120]	; (800da1c <FMC_SDRAM_Timing_Init+0xfc>)
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d9ca:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d9da:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d9e4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d9ee:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	371c      	adds	r7, #28
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	ff0f0fff 	.word	0xff0f0fff

0800da20 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800da20:	b480      	push	{r7}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800da38:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	3b01      	subs	r3, #1
 800da40:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800da42:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800da4a:	4313      	orrs	r3, r2
 800da4c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800da62:	b480      	push	{r7}
 800da64:	b083      	sub	sp, #12
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
 800da6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695a      	ldr	r2, [r3, #20]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	005b      	lsls	r3, r3, #1
 800da74:	431a      	orrs	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800da88:	b084      	sub	sp, #16
 800da8a:	b480      	push	{r7}
 800da8c:	b085      	sub	sp, #20
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	f107 001c 	add.w	r0, r7, #28
 800da96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800da9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800daa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800daa2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800daa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800daaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800daae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dab2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	4b07      	ldr	r3, [pc, #28]	; (800dadc <SDMMC_Init+0x54>)
 800dac0:	4013      	ands	r3, r2
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	431a      	orrs	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	b004      	add	sp, #16
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	ffff8100 	.word	0xffff8100

0800dae0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800daee:	4618      	mov	r0, r3
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2203      	movs	r2, #3
 800db06:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800db16:	b480      	push	{r7}
 800db18:	b083      	sub	sp, #12
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 0303 	and.w	r3, r3, #3
}
 800db26:	4618      	mov	r0, r3
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
	...

0800db34 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800db52:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800db58:	431a      	orrs	r2, r3
                       Command->CPSM);
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800db5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4313      	orrs	r3, r2
 800db64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68da      	ldr	r2, [r3, #12]
 800db6a:	4b06      	ldr	r3, [pc, #24]	; (800db84 <SDMMC_SendCommand+0x50>)
 800db6c:	4013      	ands	r3, r2
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	431a      	orrs	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	fffff000 	.word	0xfffff000

0800db88 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	b2db      	uxtb	r3, r3
}
 800db96:	4618      	mov	r0, r3
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dba2:	b480      	push	{r7}
 800dba4:	b085      	sub	sp, #20
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	3314      	adds	r3, #20
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	4413      	add	r3, r2
 800dbba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
}  
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	685a      	ldr	r2, [r3, #4]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dbf2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dbf8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dbfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dc00:	68fa      	ldr	r2, [r7, #12]
 800dc02:	4313      	orrs	r3, r2
 800dc04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dc16:	2300      	movs	r3, #0

}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dc36:	2310      	movs	r3, #16
 800dc38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc3a:	2340      	movs	r3, #64	; 0x40
 800dc3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc46:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc48:	f107 0308 	add.w	r3, r7, #8
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff ff70 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dc54:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc58:	2110      	movs	r1, #16
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fa64 	bl	800e128 <SDMMC_GetCmdResp1>
 800dc60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc62:	69fb      	ldr	r3, [r7, #28]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3720      	adds	r7, #32
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dc76:	2300      	movs	r3, #0
 800dc78:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dc7e:	2311      	movs	r3, #17
 800dc80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc82:	2340      	movs	r3, #64	; 0x40
 800dc84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc86:	2300      	movs	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc8e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc90:	f107 0308 	add.w	r3, r7, #8
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff ff4c 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dc9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dca0:	2111      	movs	r1, #17
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fa40 	bl	800e128 <SDMMC_GetCmdResp1>
 800dca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcaa:	69fb      	ldr	r3, [r7, #28]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3720      	adds	r7, #32
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dcc6:	2312      	movs	r3, #18
 800dcc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcca:	2340      	movs	r3, #64	; 0x40
 800dccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcd6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcd8:	f107 0308 	add.w	r3, r7, #8
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff ff28 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dce8:	2112      	movs	r1, #18
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fa1c 	bl	800e128 <SDMMC_GetCmdResp1>
 800dcf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcf2:	69fb      	ldr	r3, [r7, #28]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3720      	adds	r7, #32
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b088      	sub	sp, #32
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dd0e:	2318      	movs	r3, #24
 800dd10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd12:	2340      	movs	r3, #64	; 0x40
 800dd14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd1e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd20:	f107 0308 	add.w	r3, r7, #8
 800dd24:	4619      	mov	r1, r3
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f7ff ff04 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dd2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd30:	2118      	movs	r1, #24
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f9f8 	bl	800e128 <SDMMC_GetCmdResp1>
 800dd38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3720      	adds	r7, #32
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dd56:	2319      	movs	r3, #25
 800dd58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd5a:	2340      	movs	r3, #64	; 0x40
 800dd5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd66:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd68:	f107 0308 	add.w	r3, r7, #8
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7ff fee0 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dd74:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd78:	2119      	movs	r1, #25
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f9d4 	bl	800e128 <SDMMC_GetCmdResp1>
 800dd80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd82:	69fb      	ldr	r3, [r7, #28]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3720      	adds	r7, #32
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b088      	sub	sp, #32
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dd94:	2300      	movs	r3, #0
 800dd96:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dd9c:	230c      	movs	r3, #12
 800dd9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dda0:	2340      	movs	r3, #64	; 0x40
 800dda2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dda4:	2300      	movs	r3, #0
 800dda6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dda8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddae:	f107 0308 	add.w	r3, r7, #8
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff febd 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ddba:	4a05      	ldr	r2, [pc, #20]	; (800ddd0 <SDMMC_CmdStopTransfer+0x44>)
 800ddbc:	210c      	movs	r1, #12
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f9b2 	bl	800e128 <SDMMC_GetCmdResp1>
 800ddc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddc6:	69fb      	ldr	r3, [r7, #28]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3720      	adds	r7, #32
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	05f5e100 	.word	0x05f5e100

0800ddd4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08a      	sub	sp, #40	; 0x28
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dde8:	2307      	movs	r3, #7
 800ddea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddec:	2340      	movs	r3, #64	; 0x40
 800ddee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddf8:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddfa:	f107 0310 	add.w	r3, r7, #16
 800ddfe:	4619      	mov	r1, r3
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f7ff fe97 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800de06:	f241 3288 	movw	r2, #5000	; 0x1388
 800de0a:	2107      	movs	r1, #7
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 f98b 	bl	800e128 <SDMMC_GetCmdResp1>
 800de12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de16:	4618      	mov	r0, r3
 800de18:	3728      	adds	r7, #40	; 0x28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b088      	sub	sp, #32
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800de26:	2300      	movs	r3, #0
 800de28:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800de32:	2300      	movs	r3, #0
 800de34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fe74 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f941 	bl	800e0d4 <SDMMC_GetCmdError>
 800de52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de54:	69fb      	ldr	r3, [r7, #28]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3720      	adds	r7, #32
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b088      	sub	sp, #32
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800de66:	2300      	movs	r3, #0
 800de68:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800de6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800de6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800de70:	2308      	movs	r3, #8
 800de72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de74:	2340      	movs	r3, #64	; 0x40
 800de76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de78:	2300      	movs	r3, #0
 800de7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7ff fe53 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 fb12 	bl	800e4b8 <SDMMC_GetCmdResp7>
 800de94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de96:	69fb      	ldr	r3, [r7, #28]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3720      	adds	r7, #32
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800deaa:	2300      	movs	r3, #0
 800deac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800deb2:	2337      	movs	r3, #55	; 0x37
 800deb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800deb6:	2340      	movs	r3, #64	; 0x40
 800deb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deba:	2300      	movs	r3, #0
 800debc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800debe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dec2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dec4:	f107 0308 	add.w	r3, r7, #8
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff fe32 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ded0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ded4:	2137      	movs	r1, #55	; 0x37
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 f926 	bl	800e128 <SDMMC_GetCmdResp1>
 800dedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dede:	69fb      	ldr	r3, [r7, #28]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800def2:	2300      	movs	r3, #0
 800def4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	4b0d      	ldr	r3, [pc, #52]	; (800df30 <SDMMC_CmdAppOperCommand+0x48>)
 800defa:	4313      	orrs	r3, r2
 800defc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800defe:	2329      	movs	r3, #41	; 0x29
 800df00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df02:	2340      	movs	r3, #64	; 0x40
 800df04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df06:	2300      	movs	r3, #0
 800df08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df0e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df10:	f107 0308 	add.w	r3, r7, #8
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff fe0c 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fa29 	bl	800e374 <SDMMC_GetCmdResp3>
 800df22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df24:	69fb      	ldr	r3, [r7, #28]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3720      	adds	r7, #32
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	80100000 	.word	0x80100000

0800df34 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800df3e:	2300      	movs	r3, #0
 800df40:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800df46:	2306      	movs	r3, #6
 800df48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df4a:	2340      	movs	r3, #64	; 0x40
 800df4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df4e:	2300      	movs	r3, #0
 800df50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df56:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df58:	f107 0308 	add.w	r3, r7, #8
 800df5c:	4619      	mov	r1, r3
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7ff fde8 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800df64:	f241 3288 	movw	r2, #5000	; 0x1388
 800df68:	2106      	movs	r1, #6
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f8dc 	bl	800e128 <SDMMC_GetCmdResp1>
 800df70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df72:	69fb      	ldr	r3, [r7, #28]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3720      	adds	r7, #32
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b088      	sub	sp, #32
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800df84:	2300      	movs	r3, #0
 800df86:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800df88:	2300      	movs	r3, #0
 800df8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800df8c:	2333      	movs	r3, #51	; 0x33
 800df8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df90:	2340      	movs	r3, #64	; 0x40
 800df92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df94:	2300      	movs	r3, #0
 800df96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df9c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df9e:	f107 0308 	add.w	r3, r7, #8
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7ff fdc5 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dfaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfae:	2133      	movs	r1, #51	; 0x33
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f8b9 	bl	800e128 <SDMMC_GetCmdResp1>
 800dfb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3720      	adds	r7, #32
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b088      	sub	sp, #32
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dfd6:	23c0      	movs	r3, #192	; 0xc0
 800dfd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfe2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfe4:	f107 0308 	add.w	r3, r7, #8
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff fda2 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f97f 	bl	800e2f4 <SDMMC_GetCmdResp2>
 800dff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dff8:	69fb      	ldr	r3, [r7, #28]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3720      	adds	r7, #32
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b088      	sub	sp, #32
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e00c:	2300      	movs	r3, #0
 800e00e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e014:	2309      	movs	r3, #9
 800e016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e018:	23c0      	movs	r3, #192	; 0xc0
 800e01a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e01c:	2300      	movs	r3, #0
 800e01e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e024:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e026:	f107 0308 	add.w	r3, r7, #8
 800e02a:	4619      	mov	r1, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff fd81 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f95e 	bl	800e2f4 <SDMMC_GetCmdResp2>
 800e038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e03a:	69fb      	ldr	r3, [r7, #28]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3720      	adds	r7, #32
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e04e:	2300      	movs	r3, #0
 800e050:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e056:	2303      	movs	r3, #3
 800e058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e05a:	2340      	movs	r3, #64	; 0x40
 800e05c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e066:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e068:	f107 0308 	add.w	r3, r7, #8
 800e06c:	4619      	mov	r1, r3
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7ff fd60 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	2103      	movs	r1, #3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f9af 	bl	800e3dc <SDMMC_GetCmdResp6>
 800e07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e080:	69fb      	ldr	r3, [r7, #28]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3720      	adds	r7, #32
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b088      	sub	sp, #32
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e094:	2300      	movs	r3, #0
 800e096:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e09c:	230d      	movs	r3, #13
 800e09e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0a0:	2340      	movs	r3, #64	; 0x40
 800e0a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ae:	f107 0308 	add.w	r3, r7, #8
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff fd3d 	bl	800db34 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0be:	210d      	movs	r1, #13
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f831 	bl	800e128 <SDMMC_GetCmdResp1>
 800e0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3720      	adds	r7, #32
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
	...

0800e0d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e0d4:	b490      	push	{r4, r7}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e0dc:	4b10      	ldr	r3, [pc, #64]	; (800e120 <SDMMC_GetCmdError+0x4c>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a10      	ldr	r2, [pc, #64]	; (800e124 <SDMMC_GetCmdError+0x50>)
 800e0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e6:	0a5b      	lsrs	r3, r3, #9
 800e0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e0f0:	4623      	mov	r3, r4
 800e0f2:	1e5c      	subs	r4, r3, #1
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0fc:	e00a      	b.n	800e114 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e106:	2b00      	cmp	r3, #0
 800e108:	d0f2      	beq.n	800e0f0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e110:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bc90      	pop	{r4, r7}
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	20000134 	.word	0x20000134
 800e124:	10624dd3 	.word	0x10624dd3

0800e128 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e128:	b590      	push	{r4, r7, lr}
 800e12a:	b087      	sub	sp, #28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	460b      	mov	r3, r1
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800e136:	4b6c      	ldr	r3, [pc, #432]	; (800e2e8 <SDMMC_GetCmdResp1+0x1c0>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a6c      	ldr	r2, [pc, #432]	; (800e2ec <SDMMC_GetCmdResp1+0x1c4>)
 800e13c:	fba2 2303 	umull	r2, r3, r2, r3
 800e140:	0a5b      	lsrs	r3, r3, #9
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e148:	4623      	mov	r3, r4
 800e14a:	1e5c      	subs	r4, r3, #1
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d102      	bne.n	800e156 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e154:	e0c3      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d0f2      	beq.n	800e148 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e166:	f003 0304 	and.w	r3, r3, #4
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d004      	beq.n	800e178 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2204      	movs	r2, #4
 800e172:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e174:	2304      	movs	r3, #4
 800e176:	e0b2      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	2b00      	cmp	r3, #0
 800e182:	d004      	beq.n	800e18e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2201      	movs	r2, #1
 800e188:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e0a7      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7ff fcfa 	bl	800db88 <SDMMC_GetCommandResponse>
 800e194:	4603      	mov	r3, r0
 800e196:	461a      	mov	r2, r3
 800e198:	7afb      	ldrb	r3, [r7, #11]
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d001      	beq.n	800e1a2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e09d      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e1a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f7ff fcf8 	bl	800dba2 <SDMMC_GetResponse>
 800e1b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	4b4e      	ldr	r3, [pc, #312]	; (800e2f0 <SDMMC_GetCmdResp1+0x1c8>)
 800e1b8:	4013      	ands	r3, r2
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e08d      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	da02      	bge.n	800e1ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e1c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e1cc:	e087      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e1d8:	2340      	movs	r3, #64	; 0x40
 800e1da:	e080      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e1e6:	2380      	movs	r3, #128	; 0x80
 800e1e8:	e079      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e1f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1f8:	e071      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e208:	e069      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e210:	2b00      	cmp	r3, #0
 800e212:	d002      	beq.n	800e21a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e218:	e061      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e228:	e059      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e238:	e051      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e248:	e049      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e258:	e041      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800e264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e268:	e039      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e278:	e031      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e288:	e029      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e298:	e021      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e2a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e2a8:	e019      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e2b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e2b8:	e011      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e2c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e2c8:	e009      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f003 0308 	and.w	r3, r3, #8
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e2d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e2d8:	e001      	b.n	800e2de <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	371c      	adds	r7, #28
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd90      	pop	{r4, r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20000134 	.word	0x20000134
 800e2ec:	10624dd3 	.word	0x10624dd3
 800e2f0:	fdffe008 	.word	0xfdffe008

0800e2f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e2f4:	b490      	push	{r4, r7}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e2fc:	4b1b      	ldr	r3, [pc, #108]	; (800e36c <SDMMC_GetCmdResp2+0x78>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a1b      	ldr	r2, [pc, #108]	; (800e370 <SDMMC_GetCmdResp2+0x7c>)
 800e302:	fba2 2303 	umull	r2, r3, r2, r3
 800e306:	0a5b      	lsrs	r3, r3, #9
 800e308:	f241 3288 	movw	r2, #5000	; 0x1388
 800e30c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e310:	4623      	mov	r3, r4
 800e312:	1e5c      	subs	r4, r3, #1
 800e314:	2b00      	cmp	r3, #0
 800e316:	d102      	bne.n	800e31e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e31c:	e020      	b.n	800e360 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e322:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e326:	2b00      	cmp	r3, #0
 800e328:	d0f2      	beq.n	800e310 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32e:	f003 0304 	and.w	r3, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	d004      	beq.n	800e340 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2204      	movs	r2, #4
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e33c:	2304      	movs	r3, #4
 800e33e:	e00f      	b.n	800e360 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e344:	f003 0301 	and.w	r3, r3, #1
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d004      	beq.n	800e356 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e352:	2301      	movs	r3, #1
 800e354:	e004      	b.n	800e360 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bc90      	pop	{r4, r7}
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	20000134 	.word	0x20000134
 800e370:	10624dd3 	.word	0x10624dd3

0800e374 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e374:	b490      	push	{r4, r7}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e37c:	4b15      	ldr	r3, [pc, #84]	; (800e3d4 <SDMMC_GetCmdResp3+0x60>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a15      	ldr	r2, [pc, #84]	; (800e3d8 <SDMMC_GetCmdResp3+0x64>)
 800e382:	fba2 2303 	umull	r2, r3, r2, r3
 800e386:	0a5b      	lsrs	r3, r3, #9
 800e388:	f241 3288 	movw	r2, #5000	; 0x1388
 800e38c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e390:	4623      	mov	r3, r4
 800e392:	1e5c      	subs	r4, r3, #1
 800e394:	2b00      	cmp	r3, #0
 800e396:	d102      	bne.n	800e39e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e39c:	e015      	b.n	800e3ca <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0f2      	beq.n	800e390 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ae:	f003 0304 	and.w	r3, r3, #4
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d004      	beq.n	800e3c0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2204      	movs	r2, #4
 800e3ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3bc:	2304      	movs	r3, #4
 800e3be:	e004      	b.n	800e3ca <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e3c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bc90      	pop	{r4, r7}
 800e3d2:	4770      	bx	lr
 800e3d4:	20000134 	.word	0x20000134
 800e3d8:	10624dd3 	.word	0x10624dd3

0800e3dc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e3dc:	b590      	push	{r4, r7, lr}
 800e3de:	b087      	sub	sp, #28
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	607a      	str	r2, [r7, #4]
 800e3e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e3ea:	4b31      	ldr	r3, [pc, #196]	; (800e4b0 <SDMMC_GetCmdResp6+0xd4>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4a31      	ldr	r2, [pc, #196]	; (800e4b4 <SDMMC_GetCmdResp6+0xd8>)
 800e3f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f4:	0a5b      	lsrs	r3, r3, #9
 800e3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3fa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e3fe:	4623      	mov	r3, r4
 800e400:	1e5c      	subs	r4, r3, #1
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e406:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e40a:	e04c      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e410:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e414:	2b00      	cmp	r3, #0
 800e416:	d0f2      	beq.n	800e3fe <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d004      	beq.n	800e42e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2204      	movs	r2, #4
 800e428:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e42a:	2304      	movs	r3, #4
 800e42c:	e03b      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e432:	f003 0301 	and.w	r3, r3, #1
 800e436:	2b00      	cmp	r3, #0
 800e438:	d004      	beq.n	800e444 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2201      	movs	r2, #1
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e440:	2301      	movs	r3, #1
 800e442:	e030      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7ff fb9f 	bl	800db88 <SDMMC_GetCommandResponse>
 800e44a:	4603      	mov	r3, r0
 800e44c:	461a      	mov	r2, r3
 800e44e:	7afb      	ldrb	r3, [r7, #11]
 800e450:	4293      	cmp	r3, r2
 800e452:	d001      	beq.n	800e458 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e454:	2301      	movs	r3, #1
 800e456:	e026      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e45e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e460:	2100      	movs	r1, #0
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f7ff fb9d 	bl	800dba2 <SDMMC_GetResponse>
 800e468:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d106      	bne.n	800e482 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	0c1b      	lsrs	r3, r3, #16
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e47e:	2300      	movs	r3, #0
 800e480:	e011      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d002      	beq.n	800e492 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e490:	e009      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4a0:	e001      	b.n	800e4a6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e4a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	371c      	adds	r7, #28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20000134 	.word	0x20000134
 800e4b4:	10624dd3 	.word	0x10624dd3

0800e4b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e4b8:	b490      	push	{r4, r7}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800e4c0:	4b18      	ldr	r3, [pc, #96]	; (800e524 <SDMMC_GetCmdResp7+0x6c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a18      	ldr	r2, [pc, #96]	; (800e528 <SDMMC_GetCmdResp7+0x70>)
 800e4c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ca:	0a5b      	lsrs	r3, r3, #9
 800e4cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800e4d4:	4623      	mov	r3, r4
 800e4d6:	1e5c      	subs	r4, r3, #1
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d102      	bne.n	800e4e2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4e0:	e01a      	b.n	800e518 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0f2      	beq.n	800e4d4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f2:	f003 0304 	and.w	r3, r3, #4
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d004      	beq.n	800e504 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2240      	movs	r2, #64	; 0x40
 800e4fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e500:	2304      	movs	r3, #4
 800e502:	e009      	b.n	800e518 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d002      	beq.n	800e516 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2240      	movs	r2, #64	; 0x40
 800e514:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e516:	2300      	movs	r3, #0
  
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bc90      	pop	{r4, r7}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	20000134 	.word	0x20000134
 800e528:	10624dd3 	.word	0x10624dd3

0800e52c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e52c:	b084      	sub	sp, #16
 800e52e:	b580      	push	{r7, lr}
 800e530:	b084      	sub	sp, #16
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	f107 001c 	add.w	r0, r7, #28
 800e53a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	2b01      	cmp	r3, #1
 800e542:	d120      	bne.n	800e586 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	4b20      	ldr	r3, [pc, #128]	; (800e5d8 <USB_CoreInit+0xac>)
 800e556:	4013      	ands	r3, r2
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d105      	bne.n	800e57a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f942 	bl	800e804 <USB_CoreReset>
 800e580:	4603      	mov	r3, r0
 800e582:	73fb      	strb	r3, [r7, #15]
 800e584:	e010      	b.n	800e5a8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 f936 	bl	800e804 <USB_CoreReset>
 800e598:	4603      	mov	r3, r0
 800e59a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d10b      	bne.n	800e5c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	689b      	ldr	r3, [r3, #8]
 800e5b2:	f043 0206 	orr.w	r2, r3, #6
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	f043 0220 	orr.w	r2, r3, #32
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5d2:	b004      	add	sp, #16
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	ffbdffbf 	.word	0xffbdffbf

0800e5dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	f043 0201 	orr.w	r2, r3, #1
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f023 0201 	bic.w	r2, r3, #1
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e638:	78fb      	ldrb	r3, [r7, #3]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d106      	bne.n	800e64c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	60da      	str	r2, [r3, #12]
 800e64a:	e00b      	b.n	800e664 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e64c:	78fb      	ldrb	r3, [r7, #3]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	60da      	str	r2, [r3, #12]
 800e65e:	e001      	b.n	800e664 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e003      	b.n	800e66c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e664:	2032      	movs	r0, #50	; 0x32
 800e666:	f7f4 fe49 	bl	80032fc <HAL_Delay>

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e67e:	2300      	movs	r3, #0
 800e680:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	019b      	lsls	r3, r3, #6
 800e686:	f043 0220 	orr.w	r2, r3, #32
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3301      	adds	r3, #1
 800e692:	60fb      	str	r3, [r7, #12]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	4a09      	ldr	r2, [pc, #36]	; (800e6bc <USB_FlushTxFifo+0x48>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d901      	bls.n	800e6a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e69c:	2303      	movs	r3, #3
 800e69e:	e006      	b.n	800e6ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	691b      	ldr	r3, [r3, #16]
 800e6a4:	f003 0320 	and.w	r3, r3, #32
 800e6a8:	2b20      	cmp	r3, #32
 800e6aa:	d0f0      	beq.n	800e68e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop
 800e6bc:	00030d40 	.word	0x00030d40

0800e6c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2210      	movs	r2, #16
 800e6d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	4a09      	ldr	r2, [pc, #36]	; (800e700 <USB_FlushRxFifo+0x40>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d901      	bls.n	800e6e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e6e0:	2303      	movs	r3, #3
 800e6e2:	e006      	b.n	800e6f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	691b      	ldr	r3, [r3, #16]
 800e6e8:	f003 0310 	and.w	r3, r3, #16
 800e6ec:	2b10      	cmp	r3, #16
 800e6ee:	d0f0      	beq.n	800e6d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	00030d40 	.word	0x00030d40

0800e704 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e704:	b480      	push	{r7}
 800e706:	b089      	sub	sp, #36	; 0x24
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	4611      	mov	r1, r2
 800e710:	461a      	mov	r2, r3
 800e712:	460b      	mov	r3, r1
 800e714:	71fb      	strb	r3, [r7, #7]
 800e716:	4613      	mov	r3, r2
 800e718:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e722:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e726:	2b00      	cmp	r3, #0
 800e728:	d11a      	bne.n	800e760 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e72a:	88bb      	ldrh	r3, [r7, #4]
 800e72c:	3303      	adds	r3, #3
 800e72e:	089b      	lsrs	r3, r3, #2
 800e730:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e732:	2300      	movs	r3, #0
 800e734:	61bb      	str	r3, [r7, #24]
 800e736:	e00f      	b.n	800e758 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800e738:	79fb      	ldrb	r3, [r7, #7]
 800e73a:	031a      	lsls	r2, r3, #12
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	4413      	add	r3, r2
 800e740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e744:	461a      	mov	r2, r3
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	3304      	adds	r3, #4
 800e750:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	3301      	adds	r3, #1
 800e756:	61bb      	str	r3, [r7, #24]
 800e758:	69ba      	ldr	r2, [r7, #24]
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d3eb      	bcc.n	800e738 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3724      	adds	r7, #36	; 0x24
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e76e:	b480      	push	{r7}
 800e770:	b089      	sub	sp, #36	; 0x24
 800e772:	af00      	add	r7, sp, #0
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	4613      	mov	r3, r2
 800e77a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e784:	88fb      	ldrh	r3, [r7, #6]
 800e786:	3303      	adds	r3, #3
 800e788:	089b      	lsrs	r3, r3, #2
 800e78a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e78c:	2300      	movs	r3, #0
 800e78e:	61bb      	str	r3, [r7, #24]
 800e790:	e00b      	b.n	800e7aa <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	601a      	str	r2, [r3, #0]
    pDest++;
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	61bb      	str	r3, [r7, #24]
 800e7aa:	69ba      	ldr	r2, [r7, #24]
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d3ef      	bcc.n	800e792 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e7b2:	69fb      	ldr	r3, [r7, #28]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3724      	adds	r7, #36	; 0x24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	699b      	ldr	r3, [r3, #24]
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b083      	sub	sp, #12
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
	...

0800e804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	3301      	adds	r3, #1
 800e814:	60fb      	str	r3, [r7, #12]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	4a13      	ldr	r2, [pc, #76]	; (800e868 <USB_CoreReset+0x64>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d901      	bls.n	800e822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e81e:	2303      	movs	r3, #3
 800e820:	e01b      	b.n	800e85a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	2b00      	cmp	r3, #0
 800e828:	daf2      	bge.n	800e810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e82a:	2300      	movs	r3, #0
 800e82c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	691b      	ldr	r3, [r3, #16]
 800e832:	f043 0201 	orr.w	r2, r3, #1
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3301      	adds	r3, #1
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4a09      	ldr	r2, [pc, #36]	; (800e868 <USB_CoreReset+0x64>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d901      	bls.n	800e84c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e848:	2303      	movs	r3, #3
 800e84a:	e006      	b.n	800e85a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	f003 0301 	and.w	r3, r3, #1
 800e854:	2b01      	cmp	r3, #1
 800e856:	d0f0      	beq.n	800e83a <USB_CoreReset+0x36>

  return HAL_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	00030d40 	.word	0x00030d40

0800e86c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e86c:	b084      	sub	sp, #16
 800e86e:	b580      	push	{r7, lr}
 800e870:	b084      	sub	sp, #16
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
 800e876:	f107 001c 	add.w	r0, r7, #28
 800e87a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e888:	461a      	mov	r2, r3
 800e88a:	2300      	movs	r3, #0
 800e88c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e892:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d018      	beq.n	800e8d8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d10a      	bne.n	800e8c2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e8ba:	f043 0304 	orr.w	r3, r3, #4
 800e8be:	6013      	str	r3, [r2, #0]
 800e8c0:	e014      	b.n	800e8ec <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e8d0:	f023 0304 	bic.w	r3, r3, #4
 800e8d4:	6013      	str	r3, [r2, #0]
 800e8d6:	e009      	b.n	800e8ec <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e8e6:	f023 0304 	bic.w	r3, r3, #4
 800e8ea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800e8ec:	2110      	movs	r1, #16
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f7ff fec0 	bl	800e674 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff fee3 	bl	800e6c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	e015      	b.n	800e92c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	4413      	add	r3, r2
 800e908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e90c:	461a      	mov	r2, r3
 800e90e:	f04f 33ff 	mov.w	r3, #4294967295
 800e912:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	015a      	lsls	r2, r3, #5
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	4413      	add	r3, r2
 800e91c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e920:	461a      	mov	r2, r3
 800e922:	2300      	movs	r3, #0
 800e924:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3301      	adds	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	429a      	cmp	r2, r3
 800e932:	d3e5      	bcc.n	800e900 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800e934:	2101      	movs	r1, #1
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 f8ac 	bl	800ea94 <USB_DriveVbus>

  HAL_Delay(200U);
 800e93c:	20c8      	movs	r0, #200	; 0xc8
 800e93e:	f7f4 fcdd 	bl	80032fc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f04f 32ff 	mov.w	r2, #4294967295
 800e94e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00b      	beq.n	800e974 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e962:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a14      	ldr	r2, [pc, #80]	; (800e9b8 <USB_HostInit+0x14c>)
 800e968:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a13      	ldr	r2, [pc, #76]	; (800e9bc <USB_HostInit+0x150>)
 800e96e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e972:	e009      	b.n	800e988 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2280      	movs	r2, #128	; 0x80
 800e978:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a10      	ldr	r2, [pc, #64]	; (800e9c0 <USB_HostInit+0x154>)
 800e97e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	4a10      	ldr	r2, [pc, #64]	; (800e9c4 <USB_HostInit+0x158>)
 800e984:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	699b      	ldr	r3, [r3, #24]
 800e992:	f043 0210 	orr.w	r2, r3, #16
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <USB_HostInit+0x15c>)
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9b2:	b004      	add	sp, #16
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop
 800e9b8:	01000200 	.word	0x01000200
 800e9bc:	00e00300 	.word	0x00e00300
 800e9c0:	00600080 	.word	0x00600080
 800e9c4:	004000e0 	.word	0x004000e0
 800e9c8:	a3200008 	.word	0xa3200008

0800e9cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e9ea:	f023 0303 	bic.w	r3, r3, #3
 800e9ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	78fb      	ldrb	r3, [r7, #3]
 800e9fa:	f003 0303 	and.w	r3, r3, #3
 800e9fe:	68f9      	ldr	r1, [r7, #12]
 800ea00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ea04:	4313      	orrs	r3, r2
 800ea06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ea08:	78fb      	ldrb	r3, [r7, #3]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d107      	bne.n	800ea1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea14:	461a      	mov	r2, r3
 800ea16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ea1a:	6053      	str	r3, [r2, #4]
 800ea1c:	e009      	b.n	800ea32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ea1e:	78fb      	ldrb	r3, [r7, #3]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d106      	bne.n	800ea32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ea30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ea60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ea6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ea70:	2064      	movs	r0, #100	; 0x64
 800ea72:	f7f4 fc43 	bl	80032fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ea7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ea84:	200a      	movs	r0, #10
 800ea86:	f7f4 fc39 	bl	80032fc <HAL_Delay>

  return HAL_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800eab8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d109      	bne.n	800ead8 <USB_DriveVbus+0x44>
 800eac4:	78fb      	ldrb	r3, [r7, #3]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d106      	bne.n	800ead8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ead2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ead6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eae2:	d109      	bne.n	800eaf8 <USB_DriveVbus+0x64>
 800eae4:	78fb      	ldrb	r3, [r7, #3]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800eaf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaf6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b085      	sub	sp, #20
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	0c5b      	lsrs	r3, r3, #17
 800eb24:	f003 0303 	and.w	r3, r3, #3
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	b29b      	uxth	r3, r3
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
	...

0800eb58 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b087      	sub	sp, #28
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	4608      	mov	r0, r1
 800eb62:	4611      	mov	r1, r2
 800eb64:	461a      	mov	r2, r3
 800eb66:	4603      	mov	r3, r0
 800eb68:	70fb      	strb	r3, [r7, #3]
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	70bb      	strb	r3, [r7, #2]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	015a      	lsls	r2, r3, #5
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	4413      	add	r3, r2
 800eb82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb86:	461a      	mov	r2, r3
 800eb88:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800eb8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d87e      	bhi.n	800ec94 <USB_HC_Init+0x13c>
 800eb96:	a201      	add	r2, pc, #4	; (adr r2, 800eb9c <USB_HC_Init+0x44>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ebad 	.word	0x0800ebad
 800eba0:	0800ec57 	.word	0x0800ec57
 800eba4:	0800ebad 	.word	0x0800ebad
 800eba8:	0800ec19 	.word	0x0800ec19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ebac:	78fb      	ldrb	r3, [r7, #3]
 800ebae:	015a      	lsls	r2, r3, #5
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebb8:	461a      	mov	r2, r3
 800ebba:	f240 439d 	movw	r3, #1181	; 0x49d
 800ebbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ebc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	da10      	bge.n	800ebea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ebc8:	78fb      	ldrb	r3, [r7, #3]
 800ebca:	015a      	lsls	r2, r3, #5
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	4413      	add	r3, r2
 800ebd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	78fa      	ldrb	r2, [r7, #3]
 800ebd8:	0151      	lsls	r1, r2, #5
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	440a      	add	r2, r1
 800ebde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ebe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebe6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ebe8:	e057      	b.n	800ec9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d051      	beq.n	800ec9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ebf6:	78fb      	ldrb	r3, [r7, #3]
 800ebf8:	015a      	lsls	r2, r3, #5
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	78fa      	ldrb	r2, [r7, #3]
 800ec06:	0151      	lsls	r1, r2, #5
 800ec08:	68ba      	ldr	r2, [r7, #8]
 800ec0a:	440a      	add	r2, r1
 800ec0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ec10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ec14:	60d3      	str	r3, [r2, #12]
      break;
 800ec16:	e040      	b.n	800ec9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ec18:	78fb      	ldrb	r3, [r7, #3]
 800ec1a:	015a      	lsls	r2, r3, #5
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	4413      	add	r3, r2
 800ec20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec24:	461a      	mov	r2, r3
 800ec26:	f240 639d 	movw	r3, #1693	; 0x69d
 800ec2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ec2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	da34      	bge.n	800ec9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	015a      	lsls	r2, r3, #5
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	78fa      	ldrb	r2, [r7, #3]
 800ec44:	0151      	lsls	r1, r2, #5
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	440a      	add	r2, r1
 800ec4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ec4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec52:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ec54:	e023      	b.n	800ec9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ec56:	78fb      	ldrb	r3, [r7, #3]
 800ec58:	015a      	lsls	r2, r3, #5
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec62:	461a      	mov	r2, r3
 800ec64:	f240 2325 	movw	r3, #549	; 0x225
 800ec68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ec6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	da17      	bge.n	800eca2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ec72:	78fb      	ldrb	r3, [r7, #3]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	78fa      	ldrb	r2, [r7, #3]
 800ec82:	0151      	lsls	r1, r2, #5
 800ec84:	68ba      	ldr	r2, [r7, #8]
 800ec86:	440a      	add	r2, r1
 800ec88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ec8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ec90:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ec92:	e006      	b.n	800eca2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	75fb      	strb	r3, [r7, #23]
      break;
 800ec98:	e004      	b.n	800eca4 <USB_HC_Init+0x14c>
      break;
 800ec9a:	bf00      	nop
 800ec9c:	e002      	b.n	800eca4 <USB_HC_Init+0x14c>
      break;
 800ec9e:	bf00      	nop
 800eca0:	e000      	b.n	800eca4 <USB_HC_Init+0x14c>
      break;
 800eca2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ecaa:	699a      	ldr	r2, [r3, #24]
 800ecac:	78fb      	ldrb	r3, [r7, #3]
 800ecae:	f003 030f 	and.w	r3, r3, #15
 800ecb2:	2101      	movs	r1, #1
 800ecb4:	fa01 f303 	lsl.w	r3, r1, r3
 800ecb8:	68b9      	ldr	r1, [r7, #8]
 800ecba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ecce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	da03      	bge.n	800ecde <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ecd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	e001      	b.n	800ece2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ecde:	2300      	movs	r3, #0
 800ece0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ece2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ece6:	2b02      	cmp	r3, #2
 800ece8:	d103      	bne.n	800ecf2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ecea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	e001      	b.n	800ecf6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ecf6:	787b      	ldrb	r3, [r7, #1]
 800ecf8:	059b      	lsls	r3, r3, #22
 800ecfa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ecfe:	78bb      	ldrb	r3, [r7, #2]
 800ed00:	02db      	lsls	r3, r3, #11
 800ed02:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ed06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ed08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ed0c:	049b      	lsls	r3, r3, #18
 800ed0e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ed12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ed14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ed1a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	0159      	lsls	r1, r3, #5
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	440b      	add	r3, r1
 800ed28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ed2c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ed32:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ed34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ed38:	2b03      	cmp	r3, #3
 800ed3a:	d10f      	bne.n	800ed5c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	78fa      	ldrb	r2, [r7, #3]
 800ed4c:	0151      	lsls	r1, r2, #5
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	440a      	add	r2, r1
 800ed52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ed56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed5a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ed5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	371c      	adds	r7, #28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop

0800ed6c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b08c      	sub	sp, #48	; 0x30
 800ed70:	af02      	add	r7, sp, #8
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	4613      	mov	r3, r2
 800ed78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	785b      	ldrb	r3, [r3, #1]
 800ed82:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ed84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed88:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d028      	beq.n	800ede8 <USB_HC_StartXfer+0x7c>
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	791b      	ldrb	r3, [r3, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d124      	bne.n	800ede8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ed9e:	79fb      	ldrb	r3, [r7, #7]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10b      	bne.n	800edbc <USB_HC_StartXfer+0x50>
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	795b      	ldrb	r3, [r3, #5]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d107      	bne.n	800edbc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	785b      	ldrb	r3, [r3, #1]
 800edb0:	4619      	mov	r1, r3
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f000 fa2e 	bl	800f214 <USB_DoPing>
      return HAL_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	e112      	b.n	800efe2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800edbc:	79fb      	ldrb	r3, [r7, #7]
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d112      	bne.n	800ede8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	015a      	lsls	r2, r3, #5
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	4413      	add	r3, r2
 800edca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	69fa      	ldr	r2, [r7, #28]
 800edd2:	0151      	lsls	r1, r2, #5
 800edd4:	6a3a      	ldr	r2, [r7, #32]
 800edd6:	440a      	add	r2, r1
 800edd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eddc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ede0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	2200      	movs	r2, #0
 800ede6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d018      	beq.n	800ee22 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	691b      	ldr	r3, [r3, #16]
 800edf4:	68ba      	ldr	r2, [r7, #8]
 800edf6:	8912      	ldrh	r2, [r2, #8]
 800edf8:	4413      	add	r3, r2
 800edfa:	3b01      	subs	r3, #1
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	8912      	ldrh	r2, [r2, #8]
 800ee00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee04:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ee06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ee08:	8b7b      	ldrh	r3, [r7, #26]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d90b      	bls.n	800ee26 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800ee0e:	8b7b      	ldrh	r3, [r7, #26]
 800ee10:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ee12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	8912      	ldrh	r2, [r2, #8]
 800ee18:	fb02 f203 	mul.w	r2, r2, r3
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	611a      	str	r2, [r3, #16]
 800ee20:	e001      	b.n	800ee26 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800ee22:	2301      	movs	r3, #1
 800ee24:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	78db      	ldrb	r3, [r3, #3]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d006      	beq.n	800ee3c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800ee2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	8912      	ldrh	r2, [r2, #8]
 800ee34:	fb02 f203 	mul.w	r2, r2, r3
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	691b      	ldr	r3, [r3, #16]
 800ee40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ee44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee46:	04d9      	lsls	r1, r3, #19
 800ee48:	4b68      	ldr	r3, [pc, #416]	; (800efec <USB_HC_StartXfer+0x280>)
 800ee4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ee4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	7a9b      	ldrb	r3, [r3, #10]
 800ee52:	075b      	lsls	r3, r3, #29
 800ee54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ee58:	69f9      	ldr	r1, [r7, #28]
 800ee5a:	0148      	lsls	r0, r1, #5
 800ee5c:	6a39      	ldr	r1, [r7, #32]
 800ee5e:	4401      	add	r1, r0
 800ee60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ee64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ee66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d009      	beq.n	800ee82 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	68d9      	ldr	r1, [r3, #12]
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	015a      	lsls	r2, r3, #5
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	4413      	add	r3, r2
 800ee7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ee7e:	460a      	mov	r2, r1
 800ee80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ee82:	6a3b      	ldr	r3, [r7, #32]
 800ee84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	bf0c      	ite	eq
 800ee92:	2301      	moveq	r3, #1
 800ee94:	2300      	movne	r3, #0
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	015a      	lsls	r2, r3, #5
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	4413      	add	r3, r2
 800eea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	69fa      	ldr	r2, [r7, #28]
 800eeaa:	0151      	lsls	r1, r2, #5
 800eeac:	6a3a      	ldr	r2, [r7, #32]
 800eeae:	440a      	add	r2, r1
 800eeb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eeb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eeb8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	015a      	lsls	r2, r3, #5
 800eebe:	6a3b      	ldr	r3, [r7, #32]
 800eec0:	4413      	add	r3, r2
 800eec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	7e7b      	ldrb	r3, [r7, #25]
 800eeca:	075b      	lsls	r3, r3, #29
 800eecc:	69f9      	ldr	r1, [r7, #28]
 800eece:	0148      	lsls	r0, r1, #5
 800eed0:	6a39      	ldr	r1, [r7, #32]
 800eed2:	4401      	add	r1, r0
 800eed4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800eed8:	4313      	orrs	r3, r2
 800eeda:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	015a      	lsls	r2, r3, #5
 800eee0:	6a3b      	ldr	r3, [r7, #32]
 800eee2:	4413      	add	r3, r2
 800eee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4a41      	ldr	r2, [pc, #260]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800eeec:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800eeee:	4b40      	ldr	r3, [pc, #256]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eef6:	4a3e      	ldr	r2, [pc, #248]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800eef8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	78db      	ldrb	r3, [r3, #3]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d006      	beq.n	800ef10 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ef02:	4b3b      	ldr	r3, [pc, #236]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef0a:	4a39      	ldr	r2, [pc, #228]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef0c:	6013      	str	r3, [r2, #0]
 800ef0e:	e005      	b.n	800ef1c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ef10:	4b37      	ldr	r3, [pc, #220]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ef18:	4a35      	ldr	r2, [pc, #212]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef1a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ef1c:	4b34      	ldr	r3, [pc, #208]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef24:	4a32      	ldr	r2, [pc, #200]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef26:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	015a      	lsls	r2, r3, #5
 800ef2c:	6a3b      	ldr	r3, [r7, #32]
 800ef2e:	4413      	add	r3, r2
 800ef30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ef34:	461a      	mov	r2, r3
 800ef36:	4b2e      	ldr	r3, [pc, #184]	; (800eff0 <USB_HC_StartXfer+0x284>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d14e      	bne.n	800efe0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	78db      	ldrb	r3, [r3, #3]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d14a      	bne.n	800efe0 <USB_HC_StartXfer+0x274>
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d046      	beq.n	800efe0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	79db      	ldrb	r3, [r3, #7]
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d830      	bhi.n	800efbc <USB_HC_StartXfer+0x250>
 800ef5a:	a201      	add	r2, pc, #4	; (adr r2, 800ef60 <USB_HC_StartXfer+0x1f4>)
 800ef5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef60:	0800ef71 	.word	0x0800ef71
 800ef64:	0800ef95 	.word	0x0800ef95
 800ef68:	0800ef71 	.word	0x0800ef71
 800ef6c:	0800ef95 	.word	0x0800ef95
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	691b      	ldr	r3, [r3, #16]
 800ef74:	3303      	adds	r3, #3
 800ef76:	089b      	lsrs	r3, r3, #2
 800ef78:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ef7a:	8afa      	ldrh	r2, [r7, #22]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d91c      	bls.n	800efc0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	f043 0220 	orr.w	r2, r3, #32
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	619a      	str	r2, [r3, #24]
          }
          break;
 800ef92:	e015      	b.n	800efc0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	3303      	adds	r3, #3
 800ef9a:	089b      	lsrs	r3, r3, #2
 800ef9c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ef9e:	8afa      	ldrh	r2, [r7, #22]
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	429a      	cmp	r2, r3
 800efac:	d90a      	bls.n	800efc4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	699b      	ldr	r3, [r3, #24]
 800efb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	619a      	str	r2, [r3, #24]
          }
          break;
 800efba:	e003      	b.n	800efc4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800efbc:	bf00      	nop
 800efbe:	e002      	b.n	800efc6 <USB_HC_StartXfer+0x25a>
          break;
 800efc0:	bf00      	nop
 800efc2:	e000      	b.n	800efc6 <USB_HC_StartXfer+0x25a>
          break;
 800efc4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	68d9      	ldr	r1, [r3, #12]
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	785a      	ldrb	r2, [r3, #1]
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	b298      	uxth	r0, r3
 800efd4:	2300      	movs	r3, #0
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	4603      	mov	r3, r0
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f7ff fb92 	bl	800e704 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3728      	adds	r7, #40	; 0x28
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	1ff80000 	.word	0x1ff80000
 800eff0:	20000adc 	.word	0x20000adc

0800eff4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f006:	695b      	ldr	r3, [r3, #20]
 800f008:	b29b      	uxth	r3, r3
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr

0800f016 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800f016:	b480      	push	{r7}
 800f018:	b087      	sub	sp, #28
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	460b      	mov	r3, r1
 800f020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f02a:	2300      	movs	r3, #0
 800f02c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	015a      	lsls	r2, r3, #5
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	4413      	add	r3, r2
 800f036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	0c9b      	lsrs	r3, r3, #18
 800f03e:	f003 0303 	and.w	r3, r3, #3
 800f042:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d002      	beq.n	800f050 <USB_HC_Halt+0x3a>
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d16c      	bne.n	800f12a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	015a      	lsls	r2, r3, #5
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	4413      	add	r3, r2
 800f058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	0151      	lsls	r1, r2, #5
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	440a      	add	r2, r1
 800f066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f06a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f06e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d143      	bne.n	800f104 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	015a      	lsls	r2, r3, #5
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	4413      	add	r3, r2
 800f084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	0151      	lsls	r1, r2, #5
 800f08e:	693a      	ldr	r2, [r7, #16]
 800f090:	440a      	add	r2, r1
 800f092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f09a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	0151      	lsls	r1, r2, #5
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	440a      	add	r2, r1
 800f0b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f0b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f0ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	0151      	lsls	r1, r2, #5
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	440a      	add	r2, r1
 800f0d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f0d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f0da:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	617b      	str	r3, [r7, #20]
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f0e8:	d81d      	bhi.n	800f126 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	015a      	lsls	r2, r3, #5
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f100:	d0ec      	beq.n	800f0dc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f102:	e080      	b.n	800f206 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	015a      	lsls	r2, r3, #5
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	4413      	add	r3, r2
 800f10c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	0151      	lsls	r1, r2, #5
 800f116:	693a      	ldr	r2, [r7, #16]
 800f118:	440a      	add	r2, r1
 800f11a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f11e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f122:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f124:	e06f      	b.n	800f206 <USB_HC_Halt+0x1f0>
          break;
 800f126:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f128:	e06d      	b.n	800f206 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	015a      	lsls	r2, r3, #5
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	4413      	add	r3, r2
 800f132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	0151      	lsls	r1, r2, #5
 800f13c:	693a      	ldr	r2, [r7, #16]
 800f13e:	440a      	add	r2, r1
 800f140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f148:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f150:	691b      	ldr	r3, [r3, #16]
 800f152:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d143      	bne.n	800f1e2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	015a      	lsls	r2, r3, #5
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	4413      	add	r3, r2
 800f162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	0151      	lsls	r1, r2, #5
 800f16c:	693a      	ldr	r2, [r7, #16]
 800f16e:	440a      	add	r2, r1
 800f170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f178:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	015a      	lsls	r2, r3, #5
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	4413      	add	r3, r2
 800f182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	0151      	lsls	r1, r2, #5
 800f18c:	693a      	ldr	r2, [r7, #16]
 800f18e:	440a      	add	r2, r1
 800f190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f198:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	015a      	lsls	r2, r3, #5
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	0151      	lsls	r1, r2, #5
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	440a      	add	r2, r1
 800f1b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f1b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f1b8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	617b      	str	r3, [r7, #20]
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f1c6:	d81d      	bhi.n	800f204 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	015a      	lsls	r2, r3, #5
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1de:	d0ec      	beq.n	800f1ba <USB_HC_Halt+0x1a4>
 800f1e0:	e011      	b.n	800f206 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	015a      	lsls	r2, r3, #5
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	0151      	lsls	r1, r2, #5
 800f1f4:	693a      	ldr	r2, [r7, #16]
 800f1f6:	440a      	add	r2, r1
 800f1f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f1fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	e000      	b.n	800f206 <USB_HC_Halt+0x1f0>
          break;
 800f204:	bf00      	nop
    }
  }

  return HAL_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	371c      	adds	r7, #28
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f228:	2301      	movs	r3, #1
 800f22a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	04da      	lsls	r2, r3, #19
 800f230:	4b15      	ldr	r3, [pc, #84]	; (800f288 <USB_DoPing+0x74>)
 800f232:	4013      	ands	r3, r2
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	0151      	lsls	r1, r2, #5
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	440a      	add	r2, r1
 800f23c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f244:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f25c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f264:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f272:	461a      	mov	r2, r3
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	371c      	adds	r7, #28
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	1ff80000 	.word	0x1ff80000

0800f28c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b086      	sub	sp, #24
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800f298:	2300      	movs	r3, #0
 800f29a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff f9ae 	bl	800e5fe <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800f2a2:	2110      	movs	r1, #16
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff f9e5 	bl	800e674 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff fa08 	bl	800e6c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	613b      	str	r3, [r7, #16]
 800f2b4:	e01f      	b.n	800f2f6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	015a      	lsls	r2, r3, #5
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	4413      	add	r3, r2
 800f2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f2cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f2dc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	015a      	lsls	r2, r3, #5
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	613b      	str	r3, [r7, #16]
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	2b0f      	cmp	r3, #15
 800f2fa:	d9dc      	bls.n	800f2b6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	613b      	str	r3, [r7, #16]
 800f300:	e034      	b.n	800f36c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	015a      	lsls	r2, r3, #5
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	4413      	add	r3, r2
 800f30a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f318:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f320:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f328:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	015a      	lsls	r2, r3, #5
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	4413      	add	r3, r2
 800f332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f336:	461a      	mov	r2, r3
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	3301      	adds	r3, #1
 800f340:	617b      	str	r3, [r7, #20]
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f348:	d80c      	bhi.n	800f364 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	015a      	lsls	r2, r3, #5
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	4413      	add	r3, r2
 800f352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f35c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f360:	d0ec      	beq.n	800f33c <USB_StopHost+0xb0>
 800f362:	e000      	b.n	800f366 <USB_StopHost+0xda>
        break;
 800f364:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	3301      	adds	r3, #1
 800f36a:	613b      	str	r3, [r7, #16]
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	2b0f      	cmp	r3, #15
 800f370:	d9c7      	bls.n	800f302 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f378:	461a      	mov	r2, r3
 800f37a:	f04f 33ff 	mov.w	r3, #4294967295
 800f37e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f04f 32ff 	mov.w	r2, #4294967295
 800f386:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff f927 	bl	800e5dc <USB_EnableGlobalInt>

  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3718      	adds	r7, #24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f39c:	4904      	ldr	r1, [pc, #16]	; (800f3b0 <MX_FATFS_Init+0x18>)
 800f39e:	4805      	ldr	r0, [pc, #20]	; (800f3b4 <MX_FATFS_Init+0x1c>)
 800f3a0:	f005 fa1c 	bl	80147dc <FATFS_LinkDriver>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	4b03      	ldr	r3, [pc, #12]	; (800f3b8 <MX_FATFS_Init+0x20>)
 800f3aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800f3ac:	bf00      	nop
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	2000a86c 	.word	0x2000a86c
 800f3b4:	08024674 	.word	0x08024674
 800f3b8:	2000a870 	.word	0x2000a870

0800f3bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f3c6:	f000 f87b 	bl	800f4c0 <BSP_SD_IsDetected>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d001      	beq.n	800f3d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	e012      	b.n	800f3fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f3d4:	480b      	ldr	r0, [pc, #44]	; (800f404 <BSP_SD_Init+0x48>)
 800f3d6:	f7fb f813 	bl	800a400 <HAL_SD_Init>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f3de:	79fb      	ldrb	r3, [r7, #7]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d109      	bne.n	800f3f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f3e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f3e8:	4806      	ldr	r0, [pc, #24]	; (800f404 <BSP_SD_Init+0x48>)
 800f3ea:	f7fb fc93 	bl	800ad14 <HAL_SD_ConfigWideBusOperation>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f3f8:	79fb      	ldrb	r3, [r7, #7]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3708      	adds	r7, #8
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	20000750 	.word	0x20000750

0800f408 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	68f9      	ldr	r1, [r7, #12]
 800f41e:	4806      	ldr	r0, [pc, #24]	; (800f438 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f420:	f7fb f87e 	bl	800a520 <HAL_SD_ReadBlocks_DMA>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f42a:	2301      	movs	r3, #1
 800f42c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800f42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	20000750 	.word	0x20000750

0800f43c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f448:	2300      	movs	r3, #0
 800f44a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	68ba      	ldr	r2, [r7, #8]
 800f450:	68f9      	ldr	r1, [r7, #12]
 800f452:	4806      	ldr	r0, [pc, #24]	; (800f46c <BSP_SD_WriteBlocks_DMA+0x30>)
 800f454:	f7fb f932 	bl	800a6bc <HAL_SD_WriteBlocks_DMA>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d001      	beq.n	800f462 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f45e:	2301      	movs	r3, #1
 800f460:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800f462:	7dfb      	ldrb	r3, [r7, #23]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3718      	adds	r7, #24
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20000750 	.word	0x20000750

0800f470 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f474:	4805      	ldr	r0, [pc, #20]	; (800f48c <BSP_SD_GetCardState+0x1c>)
 800f476:	f7fb fcc9 	bl	800ae0c <HAL_SD_GetCardState>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b04      	cmp	r3, #4
 800f47e:	bf14      	ite	ne
 800f480:	2301      	movne	r3, #1
 800f482:	2300      	moveq	r3, #0
 800f484:	b2db      	uxtb	r3, r3
}
 800f486:	4618      	mov	r0, r3
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop
 800f48c:	20000750 	.word	0x20000750

0800f490 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f498:	6879      	ldr	r1, [r7, #4]
 800f49a:	4803      	ldr	r0, [pc, #12]	; (800f4a8 <BSP_SD_GetCardInfo+0x18>)
 800f49c:	f7fb fc0e 	bl	800acbc <HAL_SD_GetCardInfo>
}
 800f4a0:	bf00      	nop
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	20000750 	.word	0x20000750

0800f4ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f4b4:	f000 fa32 	bl	800f91c <BSP_SD_ReadCpltCallback>
}
 800f4b8:	bf00      	nop
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800f4ca:	f000 f80b 	bl	800f4e4 <BSP_PlatformIsDetected>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f4d8:	79fb      	ldrb	r3, [r7, #7]
 800f4da:	b2db      	uxtb	r3, r3
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f4ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f4f2:	4806      	ldr	r0, [pc, #24]	; (800f50c <BSP_PlatformIsDetected+0x28>)
 800f4f4:	f7f5 fc3e 	bl	8004d74 <HAL_GPIO_ReadPin>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f4fe:	2300      	movs	r3, #0
 800f500:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800f502:	79fb      	ldrb	r3, [r7, #7]
}  
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	40020800 	.word	0x40020800

0800f510 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800f518:	f005 f9ac 	bl	8014874 <osKernelSysTick>
 800f51c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800f51e:	e006      	b.n	800f52e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f520:	f7ff ffa6 	bl	800f470 <BSP_SD_GetCardState>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d101      	bne.n	800f52e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	e009      	b.n	800f542 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f52e:	f005 f9a1 	bl	8014874 <osKernelSysTick>
 800f532:	4602      	mov	r2, r0
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d8f0      	bhi.n	800f520 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f53e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f542:	4618      	mov	r0, r3
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
	...

0800f54c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	4603      	mov	r3, r0
 800f554:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f556:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <SD_CheckStatus+0x38>)
 800f558:	2201      	movs	r2, #1
 800f55a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f55c:	f7ff ff88 	bl	800f470 <BSP_SD_GetCardState>
 800f560:	4603      	mov	r3, r0
 800f562:	2b00      	cmp	r3, #0
 800f564:	d107      	bne.n	800f576 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f566:	4b07      	ldr	r3, [pc, #28]	; (800f584 <SD_CheckStatus+0x38>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	f023 0301 	bic.w	r3, r3, #1
 800f570:	b2da      	uxtb	r2, r3
 800f572:	4b04      	ldr	r3, [pc, #16]	; (800f584 <SD_CheckStatus+0x38>)
 800f574:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f576:	4b03      	ldr	r3, [pc, #12]	; (800f584 <SD_CheckStatus+0x38>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	b2db      	uxtb	r3, r3
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	20000139 	.word	0x20000139

0800f588 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f588:	b590      	push	{r4, r7, lr}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800f592:	4b1a      	ldr	r3, [pc, #104]	; (800f5fc <SD_initialize+0x74>)
 800f594:	2201      	movs	r2, #1
 800f596:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800f598:	f005 f960 	bl	801485c <osKernelRunning>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d024      	beq.n	800f5ec <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f5a2:	f7ff ff0b 	bl	800f3bc <BSP_SD_Init>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d107      	bne.n	800f5bc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7ff ffcc 	bl	800f54c <SD_CheckStatus>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	4b10      	ldr	r3, [pc, #64]	; (800f5fc <SD_initialize+0x74>)
 800f5ba:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800f5bc:	4b0f      	ldr	r3, [pc, #60]	; (800f5fc <SD_initialize+0x74>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d012      	beq.n	800f5ec <SD_initialize+0x64>
 800f5c6:	4b0e      	ldr	r3, [pc, #56]	; (800f600 <SD_initialize+0x78>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10e      	bne.n	800f5ec <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f5ce:	4b0d      	ldr	r3, [pc, #52]	; (800f604 <SD_initialize+0x7c>)
 800f5d0:	f107 0408 	add.w	r4, r7, #8
 800f5d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f5d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f5da:	f107 0308 	add.w	r3, r7, #8
 800f5de:	2100      	movs	r1, #0
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f005 f9b7 	bl	8014954 <osMessageCreate>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	4b05      	ldr	r3, [pc, #20]	; (800f600 <SD_initialize+0x78>)
 800f5ea:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 800f5ec:	4b03      	ldr	r3, [pc, #12]	; (800f5fc <SD_initialize+0x74>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	b2db      	uxtb	r3, r3
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	371c      	adds	r7, #28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd90      	pop	{r4, r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20000139 	.word	0x20000139
 800f600:	20000ce0 	.word	0x20000ce0
 800f604:	08023aa0 	.word	0x08023aa0

0800f608 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	4603      	mov	r3, r0
 800f610:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f612:	79fb      	ldrb	r3, [r7, #7]
 800f614:	4618      	mov	r0, r3
 800f616:	f7ff ff99 	bl	800f54c <SD_CheckStatus>
 800f61a:	4603      	mov	r3, r0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3708      	adds	r7, #8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b08e      	sub	sp, #56	; 0x38
 800f628:	af00      	add	r7, sp, #0
 800f62a:	61b9      	str	r1, [r7, #24]
 800f62c:	617a      	str	r2, [r7, #20]
 800f62e:	613b      	str	r3, [r7, #16]
 800f630:	4603      	mov	r3, r0
 800f632:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800f634:	2301      	movs	r3, #1
 800f636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f63a:	f247 5030 	movw	r0, #30000	; 0x7530
 800f63e:	f7ff ff67 	bl	800f510 <SD_CheckStatusWithTimeout>
 800f642:	4603      	mov	r3, r0
 800f644:	2b00      	cmp	r3, #0
 800f646:	da02      	bge.n	800f64e <SD_read+0x2a>
  {
    return res;
 800f648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f64c:	e06c      	b.n	800f728 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	f003 0303 	and.w	r3, r3, #3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11e      	bne.n	800f696 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f658:	693a      	ldr	r2, [r7, #16]
 800f65a:	6979      	ldr	r1, [r7, #20]
 800f65c:	69b8      	ldr	r0, [r7, #24]
 800f65e:	f7ff fed3 	bl	800f408 <BSP_SD_ReadBlocks_DMA>
 800f662:	4603      	mov	r3, r0
 800f664:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 800f668:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d159      	bne.n	800f724 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f670:	4b2f      	ldr	r3, [pc, #188]	; (800f730 <SD_read+0x10c>)
 800f672:	6819      	ldr	r1, [r3, #0]
 800f674:	f107 0320 	add.w	r3, r7, #32
 800f678:	f247 5230 	movw	r2, #30000	; 0x7530
 800f67c:	4618      	mov	r0, r3
 800f67e:	f005 f9d3 	bl	8014a28 <osMessageGet>
      if (event.status == osEventMessage) {
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	2b10      	cmp	r3, #16
 800f686:	d14d      	bne.n	800f724 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d14a      	bne.n	800f724 <SD_read+0x100>
          res = RES_OK;
 800f68e:	2300      	movs	r3, #0
 800f690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f694:	e046      	b.n	800f724 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800f696:	2300      	movs	r3, #0
 800f698:	633b      	str	r3, [r7, #48]	; 0x30
 800f69a:	e032      	b.n	800f702 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	1c5a      	adds	r2, r3, #1
 800f6a0:	617a      	str	r2, [r7, #20]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4823      	ldr	r0, [pc, #140]	; (800f734 <SD_read+0x110>)
 800f6a8:	f7ff feae 	bl	800f408 <BSP_SD_ReadBlocks_DMA>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 800f6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d128      	bne.n	800f70c <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f6ba:	4b1d      	ldr	r3, [pc, #116]	; (800f730 <SD_read+0x10c>)
 800f6bc:	6819      	ldr	r1, [r3, #0]
 800f6be:	463b      	mov	r3, r7
 800f6c0:	f247 5230 	movw	r2, #30000	; 0x7530
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f005 f9af 	bl	8014a28 <osMessageGet>
 800f6ca:	f107 0320 	add.w	r3, r7, #32
 800f6ce:	463a      	mov	r2, r7
 800f6d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f6d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	2b10      	cmp	r3, #16
 800f6da:	d10f      	bne.n	800f6fc <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d10c      	bne.n	800f6fc <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800f6e2:	69bb      	ldr	r3, [r7, #24]
 800f6e4:	4a13      	ldr	r2, [pc, #76]	; (800f734 <SD_read+0x110>)
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	4611      	mov	r1, r2
 800f6ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	f013 f9d8 	bl	8022aa4 <memcpy>
            buff += BLOCKSIZE;
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f6fa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	3301      	adds	r3, #1
 800f700:	633b      	str	r3, [r7, #48]	; 0x30
 800f702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	429a      	cmp	r2, r3
 800f708:	d8c8      	bhi.n	800f69c <SD_read+0x78>
 800f70a:	e000      	b.n	800f70e <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 800f70c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	429a      	cmp	r2, r3
 800f714:	d106      	bne.n	800f724 <SD_read+0x100>
 800f716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d102      	bne.n	800f724 <SD_read+0x100>
      res = RES_OK;
 800f71e:	2300      	movs	r3, #0
 800f720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800f724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 800f728:	4618      	mov	r0, r3
 800f72a:	3738      	adds	r7, #56	; 0x38
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	20000ce0 	.word	0x20000ce0
 800f734:	20000ae0 	.word	0x20000ae0

0800f738 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b090      	sub	sp, #64	; 0x40
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	61b9      	str	r1, [r7, #24]
 800f740:	617a      	str	r2, [r7, #20]
 800f742:	613b      	str	r3, [r7, #16]
 800f744:	4603      	mov	r3, r0
 800f746:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 800f748:	2301      	movs	r3, #1
 800f74a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f74e:	f247 5030 	movw	r0, #30000	; 0x7530
 800f752:	f7ff fedd 	bl	800f510 <SD_CheckStatusWithTimeout>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	da02      	bge.n	800f762 <SD_write+0x2a>
  {
    return res;
 800f75c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f760:	e07c      	b.n	800f85c <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	f003 0303 	and.w	r3, r3, #3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d12e      	bne.n	800f7ca <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f76c:	693a      	ldr	r2, [r7, #16]
 800f76e:	6979      	ldr	r1, [r7, #20]
 800f770:	69b8      	ldr	r0, [r7, #24]
 800f772:	f7ff fe63 	bl	800f43c <BSP_SD_WriteBlocks_DMA>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d16d      	bne.n	800f858 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f77c:	4b39      	ldr	r3, [pc, #228]	; (800f864 <SD_write+0x12c>)
 800f77e:	6819      	ldr	r1, [r3, #0]
 800f780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f784:	f247 5230 	movw	r2, #30000	; 0x7530
 800f788:	4618      	mov	r0, r3
 800f78a:	f005 f94d 	bl	8014a28 <osMessageGet>

      if (event.status == osEventMessage)
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	2b10      	cmp	r3, #16
 800f792:	d161      	bne.n	800f858 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f796:	2b02      	cmp	r3, #2
 800f798:	d15e      	bne.n	800f858 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 800f79a:	f005 f86b 	bl	8014874 <osKernelSysTick>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	f247 5330 	movw	r3, #30000	; 0x7530
 800f7a4:	4413      	add	r3, r2
 800f7a6:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 800f7a8:	e008      	b.n	800f7bc <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f7aa:	f7ff fe61 	bl	800f470 <BSP_SD_GetCardState>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d103      	bne.n	800f7bc <SD_write+0x84>
            {
              res = RES_OK;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800f7ba:	e04d      	b.n	800f858 <SD_write+0x120>
          while(timer > osKernelSysTick())
 800f7bc:	f005 f85a 	bl	8014874 <osKernelSysTick>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d8f0      	bhi.n	800f7aa <SD_write+0x72>
 800f7c8:	e046      	b.n	800f858 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7ce:	e032      	b.n	800f836 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	617a      	str	r2, [r7, #20]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	4619      	mov	r1, r3
 800f7da:	4823      	ldr	r0, [pc, #140]	; (800f868 <SD_write+0x130>)
 800f7dc:	f7ff fe2e 	bl	800f43c <BSP_SD_WriteBlocks_DMA>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 800f7e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d128      	bne.n	800f840 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f7ee:	4b1d      	ldr	r3, [pc, #116]	; (800f864 <SD_write+0x12c>)
 800f7f0:	6819      	ldr	r1, [r3, #0]
 800f7f2:	463b      	mov	r3, r7
 800f7f4:	f247 5230 	movw	r2, #30000	; 0x7530
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f005 f915 	bl	8014a28 <osMessageGet>
 800f7fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f802:	463a      	mov	r2, r7
 800f804:	ca07      	ldmia	r2, {r0, r1, r2}
 800f806:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80c:	2b10      	cmp	r3, #16
 800f80e:	d10f      	bne.n	800f830 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800f810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f812:	2b02      	cmp	r3, #2
 800f814:	d10c      	bne.n	800f830 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	4a13      	ldr	r2, [pc, #76]	; (800f868 <SD_write+0x130>)
 800f81a:	4618      	mov	r0, r3
 800f81c:	4611      	mov	r1, r2
 800f81e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f822:	461a      	mov	r2, r3
 800f824:	f013 f93e 	bl	8022aa4 <memcpy>
            buff += BLOCKSIZE;
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f82e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	3301      	adds	r3, #1
 800f834:	63bb      	str	r3, [r7, #56]	; 0x38
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	693a      	ldr	r2, [r7, #16]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d8c8      	bhi.n	800f7d0 <SD_write+0x98>
 800f83e:	e000      	b.n	800f842 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800f840:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	429a      	cmp	r2, r3
 800f848:	d106      	bne.n	800f858 <SD_write+0x120>
 800f84a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d102      	bne.n	800f858 <SD_write+0x120>
      res = RES_OK;
 800f852:	2300      	movs	r3, #0
 800f854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 800f858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800f85c:	4618      	mov	r0, r3
 800f85e:	3740      	adds	r7, #64	; 0x40
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20000ce0 	.word	0x20000ce0
 800f868:	20000ae0 	.word	0x20000ae0

0800f86c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08c      	sub	sp, #48	; 0x30
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	603a      	str	r2, [r7, #0]
 800f876:	71fb      	strb	r3, [r7, #7]
 800f878:	460b      	mov	r3, r1
 800f87a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f882:	4b25      	ldr	r3, [pc, #148]	; (800f918 <SD_ioctl+0xac>)
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	b2db      	uxtb	r3, r3
 800f888:	f003 0301 	and.w	r3, r3, #1
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d001      	beq.n	800f894 <SD_ioctl+0x28>
 800f890:	2303      	movs	r3, #3
 800f892:	e03c      	b.n	800f90e <SD_ioctl+0xa2>

  switch (cmd)
 800f894:	79bb      	ldrb	r3, [r7, #6]
 800f896:	2b03      	cmp	r3, #3
 800f898:	d834      	bhi.n	800f904 <SD_ioctl+0x98>
 800f89a:	a201      	add	r2, pc, #4	; (adr r2, 800f8a0 <SD_ioctl+0x34>)
 800f89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a0:	0800f8b1 	.word	0x0800f8b1
 800f8a4:	0800f8b9 	.word	0x0800f8b9
 800f8a8:	0800f8d1 	.word	0x0800f8d1
 800f8ac:	0800f8eb 	.word	0x0800f8eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f8b6:	e028      	b.n	800f90a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8b8:	f107 030c 	add.w	r3, r7, #12
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fde7 	bl	800f490 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f8ce:	e01c      	b.n	800f90a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8d0:	f107 030c 	add.w	r3, r7, #12
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff fddb 	bl	800f490 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f8e8:	e00f      	b.n	800f90a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f8ea:	f107 030c 	add.w	r3, r7, #12
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7ff fdce 	bl	800f490 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f6:	0a5a      	lsrs	r2, r3, #9
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f902:	e002      	b.n	800f90a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f904:	2304      	movs	r3, #4
 800f906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f90a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3730      	adds	r7, #48	; 0x30
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	20000139 	.word	0x20000139

0800f91c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 800f920:	4b04      	ldr	r3, [pc, #16]	; (800f934 <BSP_SD_ReadCpltCallback+0x18>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f04f 32ff 	mov.w	r2, #4294967295
 800f928:	2101      	movs	r1, #1
 800f92a:	4618      	mov	r0, r3
 800f92c:	f005 f83c 	bl	80149a8 <osMessagePut>
}
 800f930:	bf00      	nop
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20000ce0 	.word	0x20000ce0

0800f938 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800f938:	b590      	push	{r4, r7, lr}
 800f93a:	b089      	sub	sp, #36	; 0x24
 800f93c:	af04      	add	r7, sp, #16
 800f93e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800f940:	2302      	movs	r3, #2
 800f942:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800f944:	2301      	movs	r3, #1
 800f946:	2202      	movs	r2, #2
 800f948:	2102      	movs	r1, #2
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 fc8c 	bl	8010268 <USBH_FindInterface>
 800f950:	4603      	mov	r3, r0
 800f952:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800f954:	7bbb      	ldrb	r3, [r7, #14]
 800f956:	2bff      	cmp	r3, #255	; 0xff
 800f958:	f000 812a 	beq.w	800fbb0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
 800f95e:	4619      	mov	r1, r3
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 fc65 	bl	8010230 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800f96c:	2050      	movs	r0, #80	; 0x50
 800f96e:	f013 f889 	bl	8022a84 <malloc>
 800f972:	4603      	mov	r3, r0
 800f974:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f97c:	69db      	ldr	r3, [r3, #28]
 800f97e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f980:	7bbb      	ldrb	r3, [r7, #14]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	211a      	movs	r1, #26
 800f986:	fb01 f303 	mul.w	r3, r1, r3
 800f98a:	4413      	add	r3, r2
 800f98c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	b25b      	sxtb	r3, r3
 800f994:	2b00      	cmp	r3, #0
 800f996:	da15      	bge.n	800f9c4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f998:	7bbb      	ldrb	r3, [r7, #14]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	211a      	movs	r1, #26
 800f99e:	fb01 f303 	mul.w	r3, r1, r3
 800f9a2:	4413      	add	r3, r2
 800f9a4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800f9a8:	781a      	ldrb	r2, [r3, #0]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f9ae:	7bbb      	ldrb	r3, [r7, #14]
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	211a      	movs	r1, #26
 800f9b4:	fb01 f303 	mul.w	r3, r1, r3
 800f9b8:	4413      	add	r3, r2
 800f9ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800f9be:	881a      	ldrh	r2, [r3, #0]
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	785b      	ldrb	r3, [r3, #1]
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f001 ff2f 	bl	801182e <USBH_AllocPipe>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	7819      	ldrb	r1, [r3, #0]
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	7858      	ldrb	r0, [r3, #1]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	8952      	ldrh	r2, [r2, #10]
 800f9f0:	9202      	str	r2, [sp, #8]
 800f9f2:	2203      	movs	r2, #3
 800f9f4:	9201      	str	r2, [sp, #4]
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	4623      	mov	r3, r4
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f001 fee7 	bl	80117d0 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	2200      	movs	r2, #0
 800fa08:	4619      	mov	r1, r3
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f00d fd3e 	bl	801d48c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800fa10:	2300      	movs	r3, #0
 800fa12:	2200      	movs	r2, #0
 800fa14:	210a      	movs	r1, #10
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 fc26 	bl	8010268 <USBH_FindInterface>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	2bff      	cmp	r3, #255	; 0xff
 800fa24:	f000 80c4 	beq.w	800fbb0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800fa28:	7bbb      	ldrb	r3, [r7, #14]
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	211a      	movs	r1, #26
 800fa2e:	fb01 f303 	mul.w	r3, r1, r3
 800fa32:	4413      	add	r3, r2
 800fa34:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	b25b      	sxtb	r3, r3
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	da16      	bge.n	800fa6e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fa40:	7bbb      	ldrb	r3, [r7, #14]
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	211a      	movs	r1, #26
 800fa46:	fb01 f303 	mul.w	r3, r1, r3
 800fa4a:	4413      	add	r3, r2
 800fa4c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fa50:	781a      	ldrb	r2, [r3, #0]
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fa56:	7bbb      	ldrb	r3, [r7, #14]
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	211a      	movs	r1, #26
 800fa5c:	fb01 f303 	mul.w	r3, r1, r3
 800fa60:	4413      	add	r3, r2
 800fa62:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800fa66:	881a      	ldrh	r2, [r3, #0]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	835a      	strh	r2, [r3, #26]
 800fa6c:	e015      	b.n	800fa9a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fa6e:	7bbb      	ldrb	r3, [r7, #14]
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	211a      	movs	r1, #26
 800fa74:	fb01 f303 	mul.w	r3, r1, r3
 800fa78:	4413      	add	r3, r2
 800fa7a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800fa7e:	781a      	ldrb	r2, [r3, #0]
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	211a      	movs	r1, #26
 800fa8a:	fb01 f303 	mul.w	r3, r1, r3
 800fa8e:	4413      	add	r3, r2
 800fa90:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800fa94:	881a      	ldrh	r2, [r3, #0]
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800fa9a:	7bbb      	ldrb	r3, [r7, #14]
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	211a      	movs	r1, #26
 800faa0:	fb01 f303 	mul.w	r3, r1, r3
 800faa4:	4413      	add	r3, r2
 800faa6:	f203 3352 	addw	r3, r3, #850	; 0x352
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	b25b      	sxtb	r3, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	da16      	bge.n	800fae0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fab2:	7bbb      	ldrb	r3, [r7, #14]
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	211a      	movs	r1, #26
 800fab8:	fb01 f303 	mul.w	r3, r1, r3
 800fabc:	4413      	add	r3, r2
 800fabe:	f203 3352 	addw	r3, r3, #850	; 0x352
 800fac2:	781a      	ldrb	r2, [r3, #0]
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fac8:	7bbb      	ldrb	r3, [r7, #14]
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	211a      	movs	r1, #26
 800face:	fb01 f303 	mul.w	r3, r1, r3
 800fad2:	4413      	add	r3, r2
 800fad4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800fad8:	881a      	ldrh	r2, [r3, #0]
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	835a      	strh	r2, [r3, #26]
 800fade:	e015      	b.n	800fb0c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	211a      	movs	r1, #26
 800fae6:	fb01 f303 	mul.w	r3, r1, r3
 800faea:	4413      	add	r3, r2
 800faec:	f203 3352 	addw	r3, r3, #850	; 0x352
 800faf0:	781a      	ldrb	r2, [r3, #0]
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800faf6:	7bbb      	ldrb	r3, [r7, #14]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	211a      	movs	r1, #26
 800fafc:	fb01 f303 	mul.w	r3, r1, r3
 800fb00:	4413      	add	r3, r2
 800fb02:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800fb06:	881a      	ldrh	r2, [r3, #0]
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	7b9b      	ldrb	r3, [r3, #14]
 800fb10:	4619      	mov	r1, r3
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f001 fe8b 	bl	801182e <USBH_AllocPipe>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	7bdb      	ldrb	r3, [r3, #15]
 800fb24:	4619      	mov	r1, r3
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f001 fe81 	bl	801182e <USBH_AllocPipe>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	461a      	mov	r2, r3
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	7b59      	ldrb	r1, [r3, #13]
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	7b98      	ldrb	r0, [r3, #14]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	8b12      	ldrh	r2, [r2, #24]
 800fb4c:	9202      	str	r2, [sp, #8]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	9201      	str	r2, [sp, #4]
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	4623      	mov	r3, r4
 800fb56:	4602      	mov	r2, r0
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f001 fe39 	bl	80117d0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	7b19      	ldrb	r1, [r3, #12]
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	7bd8      	ldrb	r0, [r3, #15]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	8b52      	ldrh	r2, [r2, #26]
 800fb76:	9202      	str	r2, [sp, #8]
 800fb78:	2202      	movs	r2, #2
 800fb7a:	9201      	str	r2, [sp, #4]
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	4623      	mov	r3, r4
 800fb80:	4602      	mov	r2, r0
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f001 fe24 	bl	80117d0 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	7b5b      	ldrb	r3, [r3, #13]
 800fb94:	2200      	movs	r2, #0
 800fb96:	4619      	mov	r1, r3
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f00d fc77 	bl	801d48c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	7b1b      	ldrb	r3, [r3, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	4619      	mov	r1, r3
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f00d fc70 	bl	801d48c <USBH_LL_SetToggle>
      status = USBH_OK;
 800fbac:	2300      	movs	r3, #0
 800fbae:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800fbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd90      	pop	{r4, r7, pc}

0800fbba <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b084      	sub	sp, #16
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00e      	beq.n	800fbf2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	4619      	mov	r1, r3
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f001 fe17 	bl	801180e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f001 fe3f 	bl	801186a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	7b1b      	ldrb	r3, [r3, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00e      	beq.n	800fc18 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	7b1b      	ldrb	r3, [r3, #12]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f001 fe04 	bl	801180e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	7b1b      	ldrb	r3, [r3, #12]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f001 fe2c 	bl	801186a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2200      	movs	r2, #0
 800fc16:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	7b5b      	ldrb	r3, [r3, #13]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00e      	beq.n	800fc3e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	7b5b      	ldrb	r3, [r3, #13]
 800fc24:	4619      	mov	r1, r3
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f001 fdf1 	bl	801180e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	7b5b      	ldrb	r3, [r3, #13]
 800fc30:	4619      	mov	r1, r3
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f001 fe19 	bl	801186a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fc44:	69db      	ldr	r3, [r3, #28]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00b      	beq.n	800fc62 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f012 ff1e 	bl	8022a94 <free>
    phost->pActiveClass->pData = 0U;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fc5e:	2200      	movs	r2, #0
 800fc60:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3710      	adds	r7, #16
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800fc74:	2302      	movs	r3, #2
 800fc76:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fc7e:	69db      	ldr	r3, [r3, #28]
 800fc80:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	3340      	adds	r3, #64	; 0x40
 800fc86:	4619      	mov	r1, r3
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f000 f8b2 	bl	800fdf2 <GetLineCoding>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d105      	bne.n	800fca4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fc9e:	2102      	movs	r1, #2
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	4798      	blx	r3
  }
  return status;
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
	...

0800fcb0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fcd0:	2b04      	cmp	r3, #4
 800fcd2:	d877      	bhi.n	800fdc4 <USBH_CDC_Process+0x114>
 800fcd4:	a201      	add	r2, pc, #4	; (adr r2, 800fcdc <USBH_CDC_Process+0x2c>)
 800fcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcda:	bf00      	nop
 800fcdc:	0800fcf1 	.word	0x0800fcf1
 800fce0:	0800fcf7 	.word	0x0800fcf7
 800fce4:	0800fd27 	.word	0x0800fd27
 800fce8:	0800fd9b 	.word	0x0800fd9b
 800fcec:	0800fda9 	.word	0x0800fda9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800fcf4:	e06d      	b.n	800fdd2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 f897 	bl	800fe30 <SetLineCoding>
 800fd02:	4603      	mov	r3, r0
 800fd04:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800fd06:	7bbb      	ldrb	r3, [r7, #14]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d104      	bne.n	800fd16 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	2202      	movs	r2, #2
 800fd10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800fd14:	e058      	b.n	800fdc8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800fd16:	7bbb      	ldrb	r3, [r7, #14]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d055      	beq.n	800fdc8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	2204      	movs	r2, #4
 800fd20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800fd24:	e050      	b.n	800fdc8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	3340      	adds	r3, #64	; 0x40
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f860 	bl	800fdf2 <GetLineCoding>
 800fd32:	4603      	mov	r3, r0
 800fd34:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800fd36:	7bbb      	ldrb	r3, [r7, #14]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d126      	bne.n	800fd8a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd4e:	791b      	ldrb	r3, [r3, #4]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d13b      	bne.n	800fdcc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd5e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d133      	bne.n	800fdcc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd6e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d12b      	bne.n	800fdcc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd7c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d124      	bne.n	800fdcc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f000 f984 	bl	8010090 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800fd88:	e020      	b.n	800fdcc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800fd8a:	7bbb      	ldrb	r3, [r7, #14]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d01d      	beq.n	800fdcc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	2204      	movs	r2, #4
 800fd94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800fd98:	e018      	b.n	800fdcc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f867 	bl	800fe6e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f8f8 	bl	800ff96 <CDC_ProcessReception>
    break;
 800fda6:	e014      	b.n	800fdd2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800fda8:	2100      	movs	r1, #0
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fffa 	bl	8010da4 <USBH_ClrFeature>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800fdb4:	7bbb      	ldrb	r3, [r7, #14]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d10a      	bne.n	800fdd0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800fdc2:	e005      	b.n	800fdd0 <USBH_CDC_Process+0x120>

  default:
    break;
 800fdc4:	bf00      	nop
 800fdc6:	e004      	b.n	800fdd2 <USBH_CDC_Process+0x122>
    break;
 800fdc8:	bf00      	nop
 800fdca:	e002      	b.n	800fdd2 <USBH_CDC_Process+0x122>
    break;
 800fdcc:	bf00      	nop
 800fdce:	e000      	b.n	800fdd2 <USBH_CDC_Process+0x122>
    break;
 800fdd0:	bf00      	nop

  }

  return status;
 800fdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	370c      	adds	r7, #12
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	22a1      	movs	r2, #161	; 0xa1
 800fe00:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2221      	movs	r2, #33	; 0x21
 800fe06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2207      	movs	r2, #7
 800fe18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	2207      	movs	r2, #7
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f001 f99f 	bl	8011164 <USBH_CtlReq>
 800fe26:	4603      	mov	r3, r0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2221      	movs	r2, #33	; 0x21
 800fe3e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2220      	movs	r2, #32
 800fe44:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2207      	movs	r2, #7
 800fe56:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2207      	movs	r2, #7
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f001 f980 	bl	8011164 <USBH_CtlReq>
 800fe64:	4603      	mov	r3, r0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b086      	sub	sp, #24
 800fe72:	af02      	add	r7, sp, #8
 800fe74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800fe7c:	69db      	ldr	r3, [r3, #28]
 800fe7e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fe80:	2300      	movs	r3, #0
 800fe82:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d002      	beq.n	800fe94 <CDC_ProcessTransmission+0x26>
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	d025      	beq.n	800fede <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800fe92:	e07c      	b.n	800ff8e <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	8b12      	ldrh	r2, [r2, #24]
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d90c      	bls.n	800feba <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	69d9      	ldr	r1, [r3, #28]
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	8b1a      	ldrh	r2, [r3, #24]
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	7b58      	ldrb	r0, [r3, #13]
 800feac:	2301      	movs	r3, #1
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	4603      	mov	r3, r0
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 fc49 	bl	801174a <USBH_BulkSendData>
 800feb8:	e00c      	b.n	800fed4 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	7b58      	ldrb	r0, [r3, #13]
 800fec8:	2301      	movs	r3, #1
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	4603      	mov	r3, r0
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f001 fc3b 	bl	801174a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2202      	movs	r2, #2
 800fed8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800fedc:	e057      	b.n	800ff8e <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	7b5b      	ldrb	r3, [r3, #13]
 800fee2:	4619      	mov	r1, r3
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f00d faa7 	bl	801d438 <USBH_LL_GetURBState>
 800feea:	4603      	mov	r3, r0
 800feec:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800feee:	7afb      	ldrb	r3, [r7, #11]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d136      	bne.n	800ff62 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	8b12      	ldrh	r2, [r2, #24]
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d90e      	bls.n	800ff1e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	8b12      	ldrh	r2, [r2, #24]
 800ff08:	1a9a      	subs	r2, r3, r2
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	69db      	ldr	r3, [r3, #28]
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	8b12      	ldrh	r2, [r2, #24]
 800ff16:	441a      	add	r2, r3
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	61da      	str	r2, [r3, #28]
 800ff1c:	e002      	b.n	800ff24 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d004      	beq.n	800ff36 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2201      	movs	r2, #1
 800ff30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ff34:	e006      	b.n	800ff44 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 f892 	bl	8010068 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2204      	movs	r2, #4
 800ff48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff58:	2200      	movs	r2, #0
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	f004 fd24 	bl	80149a8 <osMessagePut>
    break;
 800ff60:	e014      	b.n	800ff8c <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800ff62:	7afb      	ldrb	r3, [r7, #11]
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d111      	bne.n	800ff8c <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2204      	movs	r2, #4
 800ff74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff84:	2200      	movs	r2, #0
 800ff86:	4619      	mov	r1, r3
 800ff88:	f004 fd0e 	bl	80149a8 <osMessagePut>
    break;
 800ff8c:	bf00      	nop
  }
}
 800ff8e:	bf00      	nop
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b086      	sub	sp, #24
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d002      	beq.n	800ffbc <CDC_ProcessReception+0x26>
 800ffb6:	2b04      	cmp	r3, #4
 800ffb8:	d00e      	beq.n	800ffd8 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800ffba:	e051      	b.n	8010060 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	6a19      	ldr	r1, [r3, #32]
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	8b5a      	ldrh	r2, [r3, #26]
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	7b1b      	ldrb	r3, [r3, #12]
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f001 fbe3 	bl	8011794 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	2204      	movs	r2, #4
 800ffd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800ffd6:	e043      	b.n	8010060 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	7b1b      	ldrb	r3, [r3, #12]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f00d fa2a 	bl	801d438 <USBH_LL_GetURBState>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800ffe8:	7cfb      	ldrb	r3, [r7, #19]
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d137      	bne.n	801005e <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	7b1b      	ldrb	r3, [r3, #12]
 800fff2:	4619      	mov	r1, r3
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f00d f98d 	bl	801d314 <USBH_LL_GetLastXferSize>
 800fffa:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	429a      	cmp	r2, r3
 8010004:	d016      	beq.n	8010034 <CDC_ProcessReception+0x9e>
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	8b5b      	ldrh	r3, [r3, #26]
 801000a:	461a      	mov	r2, r3
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4293      	cmp	r3, r2
 8010010:	d910      	bls.n	8010034 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	1ad2      	subs	r2, r2, r3
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	6a1a      	ldr	r2, [r3, #32]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	441a      	add	r2, r3
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2203      	movs	r2, #3
 801002e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8010032:	e006      	b.n	8010042 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f81d 	bl	801007c <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2204      	movs	r2, #4
 8010046:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010056:	2200      	movs	r2, #0
 8010058:	4619      	mov	r1, r3
 801005a:	f004 fca5 	bl	80149a8 <osMessagePut>
    break;
 801005e:	bf00      	nop
  }
}
 8010060:	bf00      	nop
 8010062:	3718      	adds	r7, #24
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]

}
 8010070:	bf00      	nop
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]

}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]

}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80100a4:	b5b0      	push	{r4, r5, r7, lr}
 80100a6:	b090      	sub	sp, #64	; 0x40
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	4613      	mov	r3, r2
 80100b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d101      	bne.n	80100bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80100b8:	2302      	movs	r3, #2
 80100ba:	e03d      	b.n	8010138 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	79fa      	ldrb	r2, [r7, #7]
 80100c0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f000 f837 	bl	8010148 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d003      	beq.n	80100e8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80100e8:	4b15      	ldr	r3, [pc, #84]	; (8010140 <USBH_Init+0x9c>)
 80100ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80100ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 80100f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80100f8:	2100      	movs	r1, #0
 80100fa:	4618      	mov	r0, r3
 80100fc:	f004 fc2a 	bl	8014954 <osMessageCreate>
 8010100:	4602      	mov	r2, r0
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010108:	4b0e      	ldr	r3, [pc, #56]	; (8010144 <USBH_Init+0xa0>)
 801010a:	f107 0414 	add.w	r4, r7, #20
 801010e:	461d      	mov	r5, r3
 8010110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 801011c:	f107 0314 	add.w	r3, r7, #20
 8010120:	68f9      	ldr	r1, [r7, #12]
 8010122:	4618      	mov	r0, r3
 8010124:	f004 fbb6 	bl	8014894 <osThreadCreate>
 8010128:	4602      	mov	r2, r0
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f00d f83d 	bl	801d1b0 <USBH_LL_Init>

  return USBH_OK;
 8010136:	2300      	movs	r3, #0
}
 8010138:	4618      	mov	r0, r3
 801013a:	3740      	adds	r7, #64	; 0x40
 801013c:	46bd      	mov	sp, r7
 801013e:	bdb0      	pop	{r4, r5, r7, pc}
 8010140:	08023ab4 	.word	0x08023ab4
 8010144:	08023ad0 	.word	0x08023ad0

08010148 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010148:	b480      	push	{r7}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010150:	2300      	movs	r3, #0
 8010152:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8010154:	e008      	b.n	8010168 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68fa      	ldr	r2, [r7, #12]
 801015a:	32e0      	adds	r2, #224	; 0xe0
 801015c:	2100      	movs	r1, #0
 801015e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3301      	adds	r3, #1
 8010166:	60fb      	str	r3, [r7, #12]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2b0e      	cmp	r3, #14
 801016c:	d9f3      	bls.n	8010156 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 801016e:	2300      	movs	r3, #0
 8010170:	60fb      	str	r3, [r7, #12]
 8010172:	e009      	b.n	8010188 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	4413      	add	r3, r2
 801017a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3301      	adds	r3, #1
 8010186:	60fb      	str	r3, [r7, #12]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801018e:	d3f1      	bcc.n	8010174 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2201      	movs	r2, #1
 80101a0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2201      	movs	r2, #1
 80101ae:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2240      	movs	r2, #64	; 0x40
 80101b4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80101cc:	2300      	movs	r3, #0
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3714      	adds	r7, #20
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80101da:	b480      	push	{r7}
 80101dc:	b085      	sub	sp, #20
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
 80101e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d017      	beq.n	801021e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10f      	bne.n	8010218 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80101fe:	1c59      	adds	r1, r3, #1
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	33dc      	adds	r3, #220	; 0xdc
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	73fb      	strb	r3, [r7, #15]
 8010216:	e004      	b.n	8010222 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010218:	2302      	movs	r3, #2
 801021a:	73fb      	strb	r3, [r7, #15]
 801021c:	e001      	b.n	8010222 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801021e:	2302      	movs	r3, #2
 8010220:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010222:	7bfb      	ldrb	r3, [r7, #15]
}
 8010224:	4618      	mov	r0, r3
 8010226:	3714      	adds	r7, #20
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010230:	b480      	push	{r7}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	460b      	mov	r3, r1
 801023a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 801023c:	2300      	movs	r3, #0
 801023e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8010246:	78fa      	ldrb	r2, [r7, #3]
 8010248:	429a      	cmp	r2, r3
 801024a:	d204      	bcs.n	8010256 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	78fa      	ldrb	r2, [r7, #3]
 8010250:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8010254:	e001      	b.n	801025a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010256:	2302      	movs	r3, #2
 8010258:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 801025a:	7bfb      	ldrb	r3, [r7, #15]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3714      	adds	r7, #20
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010268:	b480      	push	{r7}
 801026a:	b087      	sub	sp, #28
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	4608      	mov	r0, r1
 8010272:	4611      	mov	r1, r2
 8010274:	461a      	mov	r2, r3
 8010276:	4603      	mov	r3, r0
 8010278:	70fb      	strb	r3, [r7, #3]
 801027a:	460b      	mov	r3, r1
 801027c:	70bb      	strb	r3, [r7, #2]
 801027e:	4613      	mov	r3, r2
 8010280:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8010282:	2300      	movs	r3, #0
 8010284:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8010286:	2300      	movs	r3, #0
 8010288:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010290:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010292:	e025      	b.n	80102e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010294:	7dfb      	ldrb	r3, [r7, #23]
 8010296:	221a      	movs	r2, #26
 8010298:	fb02 f303 	mul.w	r3, r2, r3
 801029c:	3308      	adds	r3, #8
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	4413      	add	r3, r2
 80102a2:	3302      	adds	r3, #2
 80102a4:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	795b      	ldrb	r3, [r3, #5]
 80102aa:	78fa      	ldrb	r2, [r7, #3]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d002      	beq.n	80102b6 <USBH_FindInterface+0x4e>
 80102b0:	78fb      	ldrb	r3, [r7, #3]
 80102b2:	2bff      	cmp	r3, #255	; 0xff
 80102b4:	d111      	bne.n	80102da <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80102ba:	78ba      	ldrb	r2, [r7, #2]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d002      	beq.n	80102c6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80102c0:	78bb      	ldrb	r3, [r7, #2]
 80102c2:	2bff      	cmp	r3, #255	; 0xff
 80102c4:	d109      	bne.n	80102da <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80102ca:	787a      	ldrb	r2, [r7, #1]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d002      	beq.n	80102d6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80102d0:	787b      	ldrb	r3, [r7, #1]
 80102d2:	2bff      	cmp	r3, #255	; 0xff
 80102d4:	d101      	bne.n	80102da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	e006      	b.n	80102e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80102da:	7dfb      	ldrb	r3, [r7, #23]
 80102dc:	3301      	adds	r3, #1
 80102de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80102e0:	7dfb      	ldrb	r3, [r7, #23]
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d9d6      	bls.n	8010294 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80102e6:	23ff      	movs	r3, #255	; 0xff
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	371c      	adds	r7, #28
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f00c ff93 	bl	801d228 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8010302:	2101      	movs	r1, #1
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f00d f8aa 	bl	801d45e <USBH_LL_DriverVBUS>

  return USBH_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af04      	add	r7, sp, #16
 801031a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801031c:	2302      	movs	r3, #2
 801031e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010320:	2300      	movs	r3, #0
 8010322:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 fb7e 	bl	8010a26 <USBH_IsPortEnabled>
 801032a:	4603      	mov	r3, r0
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10c      	bne.n	801034a <USBH_Process+0x36>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	b2db      	uxtb	r3, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	d007      	beq.n	801034a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	b2db      	uxtb	r3, r3
 8010340:	2b03      	cmp	r3, #3
 8010342:	d002      	beq.n	801034a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2203      	movs	r2, #3
 8010348:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	b2db      	uxtb	r3, r3
 8010350:	2b0b      	cmp	r3, #11
 8010352:	f200 81ab 	bhi.w	80106ac <USBH_Process+0x398>
 8010356:	a201      	add	r2, pc, #4	; (adr r2, 801035c <USBH_Process+0x48>)
 8010358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801035c:	0801038d 	.word	0x0801038d
 8010360:	080103cb 	.word	0x080103cb
 8010364:	080103df 	.word	0x080103df
 8010368:	08010687 	.word	0x08010687
 801036c:	080106ad 	.word	0x080106ad
 8010370:	08010489 	.word	0x08010489
 8010374:	08010621 	.word	0x08010621
 8010378:	080104b9 	.word	0x080104b9
 801037c:	080104f5 	.word	0x080104f5
 8010380:	0801052f 	.word	0x0801052f
 8010384:	08010577 	.word	0x08010577
 8010388:	0801066f 	.word	0x0801066f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	f000 818b 	beq.w	80106b0 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2201      	movs	r2, #1
 801039e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80103a0:	20c8      	movs	r0, #200	; 0xc8
 80103a2:	f00d f8a6 	bl	801d4f2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f00c ff99 	bl	801d2de <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80103c0:	2200      	movs	r2, #0
 80103c2:	4619      	mov	r1, r3
 80103c4:	f004 faf0 	bl	80149a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80103c8:	e172      	b.n	80106b0 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	f040 816f 	bne.w	80106b4 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2202      	movs	r2, #2
 80103da:	701a      	strb	r2, [r3, #0]
    }
    break;
 80103dc:	e16a      	b.n	80106b4 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80103de:	2064      	movs	r0, #100	; 0x64
 80103e0:	f00d f887 	bl	801d4f2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f00c ff55 	bl	801d294 <USBH_LL_GetSpeed>
 80103ea:	4603      	mov	r3, r0
 80103ec:	461a      	mov	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2205      	movs	r2, #5
 80103f8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80103fa:	2100      	movs	r1, #0
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f001 fa16 	bl	801182e <USBH_AllocPipe>
 8010402:	4603      	mov	r3, r0
 8010404:	461a      	mov	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 801040a:	2180      	movs	r1, #128	; 0x80
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f001 fa0e 	bl	801182e <USBH_AllocPipe>
 8010412:	4603      	mov	r3, r0
 8010414:	461a      	mov	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	7919      	ldrb	r1, [r3, #4]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 801042e:	b292      	uxth	r2, r2
 8010430:	9202      	str	r2, [sp, #8]
 8010432:	2200      	movs	r2, #0
 8010434:	9201      	str	r2, [sp, #4]
 8010436:	9300      	str	r3, [sp, #0]
 8010438:	4603      	mov	r3, r0
 801043a:	2280      	movs	r2, #128	; 0x80
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f001 f9c7 	bl	80117d0 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	7959      	ldrb	r1, [r3, #5]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8010456:	b292      	uxth	r2, r2
 8010458:	9202      	str	r2, [sp, #8]
 801045a:	2200      	movs	r2, #0
 801045c:	9201      	str	r2, [sp, #4]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	4603      	mov	r3, r0
 8010462:	2200      	movs	r2, #0
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f001 f9b3 	bl	80117d0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2201      	movs	r2, #1
 801046e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801047e:	2200      	movs	r2, #0
 8010480:	4619      	mov	r1, r3
 8010482:	f004 fa91 	bl	80149a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8010486:	e120      	b.n	80106ca <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 f923 	bl	80106d4 <USBH_HandleEnum>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	f040 8111 	bne.w	80106b8 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d103      	bne.n	80104b0 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2208      	movs	r2, #8
 80104ac:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80104ae:	e103      	b.n	80106b8 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2207      	movs	r2, #7
 80104b4:	701a      	strb	r2, [r3, #0]
    break;
 80104b6:	e0ff      	b.n	80106b8 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80104be:	2b00      	cmp	r3, #0
 80104c0:	f000 80fc 	beq.w	80106bc <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80104ca:	2101      	movs	r1, #1
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2208      	movs	r2, #8
 80104d4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2205      	movs	r2, #5
 80104da:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80104ea:	2200      	movs	r2, #0
 80104ec:	4619      	mov	r1, r3
 80104ee:	f004 fa5b 	bl	80149a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80104f2:	e0e3      	b.n	80106bc <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 fc09 	bl	8010d16 <USBH_SetCfg>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d102      	bne.n	8010510 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2209      	movs	r2, #9
 801050e:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010524:	2200      	movs	r2, #0
 8010526:	4619      	mov	r1, r3
 8010528:	f004 fa3e 	bl	80149a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801052c:	e0cd      	b.n	80106ca <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8010534:	f003 0320 	and.w	r3, r3, #32
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00a      	beq.n	8010552 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 801053c:	2101      	movs	r1, #1
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 fc0c 	bl	8010d5c <USBH_SetFeature>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d106      	bne.n	8010558 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	220a      	movs	r2, #10
 801054e:	701a      	strb	r2, [r3, #0]
 8010550:	e002      	b.n	8010558 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	220a      	movs	r2, #10
 8010556:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2201      	movs	r2, #1
 801055c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801056c:	2200      	movs	r2, #0
 801056e:	4619      	mov	r1, r3
 8010570:	f004 fa1a 	bl	80149a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8010574:	e0a9      	b.n	80106ca <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801057c:	2b00      	cmp	r3, #0
 801057e:	d040      	beq.n	8010602 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010588:	2300      	movs	r3, #0
 801058a:	73fb      	strb	r3, [r7, #15]
 801058c:	e017      	b.n	80105be <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801058e:	7bfb      	ldrb	r3, [r7, #15]
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	33dc      	adds	r3, #220	; 0xdc
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	4413      	add	r3, r2
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	791a      	ldrb	r2, [r3, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d108      	bne.n	80105b8 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	33dc      	adds	r3, #220	; 0xdc
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	4413      	add	r3, r2
 80105b0:	685a      	ldr	r2, [r3, #4]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	3301      	adds	r3, #1
 80105bc:	73fb      	strb	r3, [r7, #15]
 80105be:	7bfb      	ldrb	r3, [r7, #15]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d0e4      	beq.n	801058e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d016      	beq.n	80105fc <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	4798      	blx	r3
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2206      	movs	r2, #6
 80105e4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80105ec:	2103      	movs	r1, #3
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	4798      	blx	r3
 80105f2:	e006      	b.n	8010602 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	220d      	movs	r2, #13
 80105f8:	701a      	strb	r2, [r3, #0]
 80105fa:	e002      	b.n	8010602 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	220d      	movs	r2, #13
 8010600:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2205      	movs	r2, #5
 8010606:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010616:	2200      	movs	r2, #0
 8010618:	4619      	mov	r1, r3
 801061a:	f004 f9c5 	bl	80149a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 801061e:	e054      	b.n	80106ca <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010626:	2b00      	cmp	r3, #0
 8010628:	d00f      	beq.n	801064a <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010630:	691b      	ldr	r3, [r3, #16]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	4798      	blx	r3
 8010636:	4603      	mov	r3, r0
 8010638:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 801063a:	7bbb      	ldrb	r3, [r7, #14]
 801063c:	b2db      	uxtb	r3, r3
 801063e:	2b00      	cmp	r3, #0
 8010640:	d13e      	bne.n	80106c0 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	220b      	movs	r2, #11
 8010646:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8010648:	e03a      	b.n	80106c0 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	220d      	movs	r2, #13
 801064e:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2205      	movs	r2, #5
 8010654:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010664:	2200      	movs	r2, #0
 8010666:	4619      	mov	r1, r3
 8010668:	f004 f99e 	bl	80149a8 <osMessagePut>
    break;
 801066c:	e028      	b.n	80106c0 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010674:	2b00      	cmp	r3, #0
 8010676:	d025      	beq.n	80106c4 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 801067e:	695b      	ldr	r3, [r3, #20]
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	4798      	blx	r3
    }
    break;
 8010684:	e01e      	b.n	80106c4 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ff fd5e 	bl	8010148 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8010692:	2b00      	cmp	r3, #0
 8010694:	d018      	beq.n	80106c8 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80106aa:	e00d      	b.n	80106c8 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 80106ac:	bf00      	nop
 80106ae:	e00c      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106b0:	bf00      	nop
 80106b2:	e00a      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106b4:	bf00      	nop
 80106b6:	e008      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106b8:	bf00      	nop
 80106ba:	e006      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106bc:	bf00      	nop
 80106be:	e004      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106c0:	bf00      	nop
 80106c2:	e002      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106c4:	bf00      	nop
 80106c6:	e000      	b.n	80106ca <USBH_Process+0x3b6>
    break;
 80106c8:	bf00      	nop
  }
 return USBH_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b088      	sub	sp, #32
 80106d8:	af04      	add	r7, sp, #16
 80106da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80106dc:	2301      	movs	r3, #1
 80106de:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	785b      	ldrb	r3, [r3, #1]
 80106e4:	2b07      	cmp	r3, #7
 80106e6:	f200 8132 	bhi.w	801094e <USBH_HandleEnum+0x27a>
 80106ea:	a201      	add	r2, pc, #4	; (adr r2, 80106f0 <USBH_HandleEnum+0x1c>)
 80106ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f0:	08010711 	.word	0x08010711
 80106f4:	08010783 	.word	0x08010783
 80106f8:	0801079b 	.word	0x0801079b
 80106fc:	08010811 	.word	0x08010811
 8010700:	08010829 	.word	0x08010829
 8010704:	08010847 	.word	0x08010847
 8010708:	080108b3 	.word	0x080108b3
 801070c:	08010903 	.word	0x08010903
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8010710:	2108      	movs	r1, #8
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 fa2f 	bl	8010b76 <USBH_Get_DevDesc>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	f040 8119 	bne.w	8010952 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2201      	movs	r2, #1
 801072e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	7919      	ldrb	r1, [r3, #4]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8010744:	b292      	uxth	r2, r2
 8010746:	9202      	str	r2, [sp, #8]
 8010748:	2200      	movs	r2, #0
 801074a:	9201      	str	r2, [sp, #4]
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	4603      	mov	r3, r0
 8010750:	2280      	movs	r2, #128	; 0x80
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f001 f83c 	bl	80117d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	7959      	ldrb	r1, [r3, #5]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 801076c:	b292      	uxth	r2, r2
 801076e:	9202      	str	r2, [sp, #8]
 8010770:	2200      	movs	r2, #0
 8010772:	9201      	str	r2, [sp, #4]
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	4603      	mov	r3, r0
 8010778:	2200      	movs	r2, #0
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f001 f828 	bl	80117d0 <USBH_OpenPipe>

    }
    break;
 8010780:	e0e7      	b.n	8010952 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8010782:	2112      	movs	r1, #18
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 f9f6 	bl	8010b76 <USBH_Get_DevDesc>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	f040 80e2 	bne.w	8010956 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2202      	movs	r2, #2
 8010796:	705a      	strb	r2, [r3, #1]

    }
    break;
 8010798:	e0dd      	b.n	8010956 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 801079a:	2101      	movs	r1, #1
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 fa96 	bl	8010cce <USBH_SetAddress>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f040 80d8 	bne.w	801095a <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 80107aa:	2002      	movs	r0, #2
 80107ac:	f00c fea1 	bl	801d4f2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2201      	movs	r2, #1
 80107b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2203      	movs	r2, #3
 80107bc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	7919      	ldrb	r1, [r3, #4]
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80107d2:	b292      	uxth	r2, r2
 80107d4:	9202      	str	r2, [sp, #8]
 80107d6:	2200      	movs	r2, #0
 80107d8:	9201      	str	r2, [sp, #4]
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	4603      	mov	r3, r0
 80107de:	2280      	movs	r2, #128	; 0x80
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fff5 	bl	80117d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	7959      	ldrb	r1, [r3, #5]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80107fa:	b292      	uxth	r2, r2
 80107fc:	9202      	str	r2, [sp, #8]
 80107fe:	2200      	movs	r2, #0
 8010800:	9201      	str	r2, [sp, #4]
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	4603      	mov	r3, r0
 8010806:	2200      	movs	r2, #0
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 ffe1 	bl	80117d0 <USBH_OpenPipe>
    }
    break;
 801080e:	e0a4      	b.n	801095a <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8010810:	2109      	movs	r1, #9
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f9d7 	bl	8010bc6 <USBH_Get_CfgDesc>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	f040 809f 	bne.w	801095e <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2204      	movs	r2, #4
 8010824:	705a      	strb	r2, [r3, #1]
    }
    break;
 8010826:	e09a      	b.n	801095e <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f9c8 	bl	8010bc6 <USBH_Get_CfgDesc>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	f040 8092 	bne.w	8010962 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2205      	movs	r2, #5
 8010842:	705a      	strb	r2, [r3, #1]
    }
    break;
 8010844:	e08d      	b.n	8010962 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 801084c:	2b00      	cmp	r3, #0
 801084e:	d01e      	beq.n	801088e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 801085c:	23ff      	movs	r3, #255	; 0xff
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 f9d5 	bl	8010c0e <USBH_Get_StringDesc>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d17d      	bne.n	8010966 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2206      	movs	r2, #6
 801086e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2205      	movs	r2, #5
 8010874:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010884:	2200      	movs	r2, #0
 8010886:	4619      	mov	r1, r3
 8010888:	f004 f88e 	bl	80149a8 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801088c:	e06b      	b.n	8010966 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2206      	movs	r2, #6
 8010892:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2205      	movs	r2, #5
 8010898:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108a8:	2200      	movs	r2, #0
 80108aa:	4619      	mov	r1, r3
 80108ac:	f004 f87c 	bl	80149a8 <osMessagePut>
    break;
 80108b0:	e059      	b.n	8010966 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d010      	beq.n	80108de <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80108c8:	23ff      	movs	r3, #255	; 0xff
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f000 f99f 	bl	8010c0e <USBH_Get_StringDesc>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d149      	bne.n	801096a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2207      	movs	r2, #7
 80108da:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80108dc:	e045      	b.n	801096a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2207      	movs	r2, #7
 80108e2:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2205      	movs	r2, #5
 80108e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108f8:	2200      	movs	r2, #0
 80108fa:	4619      	mov	r1, r3
 80108fc:	f004 f854 	bl	80149a8 <osMessagePut>
    break;
 8010900:	e033      	b.n	801096a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00f      	beq.n	801092c <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8010918:	23ff      	movs	r3, #255	; 0xff
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 f977 	bl	8010c0e <USBH_Get_StringDesc>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d123      	bne.n	801096e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8010926:	2300      	movs	r3, #0
 8010928:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 801092a:	e020      	b.n	801096e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 801092c:	2300      	movs	r3, #0
 801092e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2205      	movs	r2, #5
 8010934:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010944:	2200      	movs	r2, #0
 8010946:	4619      	mov	r1, r3
 8010948:	f004 f82e 	bl	80149a8 <osMessagePut>
    break;
 801094c:	e00f      	b.n	801096e <USBH_HandleEnum+0x29a>

  default:
    break;
 801094e:	bf00      	nop
 8010950:	e00e      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 8010952:	bf00      	nop
 8010954:	e00c      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 8010956:	bf00      	nop
 8010958:	e00a      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 801095a:	bf00      	nop
 801095c:	e008      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 801095e:	bf00      	nop
 8010960:	e006      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 8010962:	bf00      	nop
 8010964:	e004      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 8010966:	bf00      	nop
 8010968:	e002      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 801096a:	bf00      	nop
 801096c:	e000      	b.n	8010970 <USBH_HandleEnum+0x29c>
    break;
 801096e:	bf00      	nop
  }
  return Status;
 8010970:	7bfb      	ldrb	r3, [r7, #15]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop

0801097c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 801097c:	b480      	push	{r7}
 801097e:	b083      	sub	sp, #12
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 801098e:	bf00      	nop
 8010990:	370c      	adds	r7, #12
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b082      	sub	sp, #8
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80109a8:	1c5a      	adds	r2, r3, #1
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 f804 	bl	80109be <USBH_HandleSof>
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b082      	sub	sp, #8
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	2b0b      	cmp	r3, #11
 80109ce:	d10a      	bne.n	80109e6 <USBH_HandleSof+0x28>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d005      	beq.n	80109e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	4798      	blx	r3
  }
}
 80109e6:	bf00      	nop
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80109ee:	b480      	push	{r7}
 80109f0:	b083      	sub	sp, #12
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2201      	movs	r2, #1
 80109fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80109fe:	bf00      	nop
}
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b083      	sub	sp, #12
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8010a1a:	bf00      	nop
}
 8010a1c:	370c      	adds	r7, #12
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr

08010a26 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8010a26:	b480      	push	{r7}
 8010a28:	b083      	sub	sp, #12
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d10f      	bne.n	8010a72 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00e      	beq.n	8010a82 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010a6a:	2104      	movs	r1, #4
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	4798      	blx	r3
 8010a70:	e007      	b.n	8010a82 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d102      	bne.n	8010a82 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2202      	movs	r2, #2
 8010a80:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2201      	movs	r2, #1
 8010a86:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a96:	2200      	movs	r2, #0
 8010a98:	4619      	mov	r1, r3
 8010a9a:	f003 ff85 	bl	80149a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f00c fbd4 	bl	801d25e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	791b      	ldrb	r3, [r3, #4]
 8010aba:	4619      	mov	r1, r3
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f000 fed4 	bl	801186a <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	795b      	ldrb	r3, [r3, #5]
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f000 fece 	bl	801186a <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d005      	beq.n	8010aec <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010ae6:	2105      	movs	r1, #5
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f00c fb9b 	bl	801d228 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2203      	movs	r2, #3
 8010af6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	4619      	mov	r1, r3
 8010b10:	f003 ff4a 	bl	80149a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010b14:	2300      	movs	r3, #0
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3708      	adds	r7, #8
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}

08010b1e <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b086      	sub	sp, #24
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8010b2c:	f107 030c 	add.w	r3, r7, #12
 8010b30:	f04f 32ff 	mov.w	r2, #4294967295
 8010b34:	4618      	mov	r0, r3
 8010b36:	f003 ff77 	bl	8014a28 <osMessageGet>
    if(event.status == osEventMessage)
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2b10      	cmp	r3, #16
 8010b3e:	d1f2      	bne.n	8010b26 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f7ff fbe7 	bl	8010314 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010b46:	e7ee      	b.n	8010b26 <USBH_Process_OS+0x8>

08010b48 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2201      	movs	r2, #1
 8010b54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010b64:	2200      	movs	r2, #0
 8010b66:	4619      	mov	r1, r3
 8010b68:	f003 ff1e 	bl	80149a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8010b6c:	2300      	movs	r3, #0
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b086      	sub	sp, #24
 8010b7a:	af02      	add	r7, sp, #8
 8010b7c:	6078      	str	r0, [r7, #4]
 8010b7e:	460b      	mov	r3, r1
 8010b80:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8010b88:	78fb      	ldrb	r3, [r7, #3]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	4613      	mov	r3, r2
 8010b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b94:	2100      	movs	r1, #0
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 f864 	bl	8010c64 <USBH_GetDescriptor>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73fb      	strb	r3, [r7, #15]
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d10a      	bne.n	8010bbc <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f203 3022 	addw	r0, r3, #802	; 0x322
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010bb2:	78fa      	ldrb	r2, [r7, #3]
 8010bb4:	b292      	uxth	r2, r2
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	f000 f918 	bl	8010dec <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3710      	adds	r7, #16
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b086      	sub	sp, #24
 8010bca:	af02      	add	r7, sp, #8
 8010bcc:	6078      	str	r0, [r7, #4]
 8010bce:	460b      	mov	r3, r1
 8010bd0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	331c      	adds	r3, #28
 8010bd6:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8010bd8:	887b      	ldrh	r3, [r7, #2]
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010be2:	2100      	movs	r1, #0
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 f83d 	bl	8010c64 <USBH_GetDescriptor>
 8010bea:	4603      	mov	r3, r0
 8010bec:	72fb      	strb	r3, [r7, #11]
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d107      	bne.n	8010c04 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010bfa:	887a      	ldrh	r2, [r7, #2]
 8010bfc:	68f9      	ldr	r1, [r7, #12]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 f964 	bl	8010ecc <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8010c04:	7afb      	ldrb	r3, [r7, #11]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}

08010c0e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8010c0e:	b580      	push	{r7, lr}
 8010c10:	b088      	sub	sp, #32
 8010c12:	af02      	add	r7, sp, #8
 8010c14:	60f8      	str	r0, [r7, #12]
 8010c16:	607a      	str	r2, [r7, #4]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	72fb      	strb	r3, [r7, #11]
 8010c1e:	4613      	mov	r3, r2
 8010c20:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8010c22:	7afb      	ldrb	r3, [r7, #11]
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010c2a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8010c32:	893b      	ldrh	r3, [r7, #8]
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	460b      	mov	r3, r1
 8010c38:	2100      	movs	r1, #0
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f000 f812 	bl	8010c64 <USBH_GetDescriptor>
 8010c40:	4603      	mov	r3, r0
 8010c42:	75fb      	strb	r3, [r7, #23]
 8010c44:	7dfb      	ldrb	r3, [r7, #23]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d107      	bne.n	8010c5a <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010c50:	893a      	ldrh	r2, [r7, #8]
 8010c52:	6879      	ldr	r1, [r7, #4]
 8010c54:	4618      	mov	r0, r3
 8010c56:	f000 fa37 	bl	80110c8 <USBH_ParseStringDesc>
  }
  return status;
 8010c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3718      	adds	r7, #24
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	607b      	str	r3, [r7, #4]
 8010c6e:	460b      	mov	r3, r1
 8010c70:	72fb      	strb	r3, [r7, #11]
 8010c72:	4613      	mov	r3, r2
 8010c74:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	789b      	ldrb	r3, [r3, #2]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d11c      	bne.n	8010cb8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010c7e:	7afb      	ldrb	r3, [r7, #11]
 8010c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2206      	movs	r2, #6
 8010c8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	893a      	ldrh	r2, [r7, #8]
 8010c94:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010c96:	893b      	ldrh	r3, [r7, #8]
 8010c98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ca0:	d104      	bne.n	8010cac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f240 4209 	movw	r2, #1033	; 0x409
 8010ca8:	829a      	strh	r2, [r3, #20]
 8010caa:	e002      	b.n	8010cb2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	8b3a      	ldrh	r2, [r7, #24]
 8010cb6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8010cb8:	8b3b      	ldrh	r3, [r7, #24]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	6879      	ldr	r1, [r7, #4]
 8010cbe:	68f8      	ldr	r0, [r7, #12]
 8010cc0:	f000 fa50 	bl	8011164 <USBH_CtlReq>
 8010cc4:	4603      	mov	r3, r0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	789b      	ldrb	r3, [r3, #2]
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d10f      	bne.n	8010d02 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2205      	movs	r2, #5
 8010cec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010cee:	78fb      	ldrb	r3, [r7, #3]
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8010d02:	2200      	movs	r2, #0
 8010d04:	2100      	movs	r1, #0
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 fa2c 	bl	8011164 <USBH_CtlReq>
 8010d0c:	4603      	mov	r3, r0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b082      	sub	sp, #8
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
 8010d1e:	460b      	mov	r3, r1
 8010d20:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	789b      	ldrb	r3, [r3, #2]
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d10e      	bne.n	8010d48 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2209      	movs	r2, #9
 8010d34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	887a      	ldrh	r2, [r7, #2]
 8010d3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2200      	movs	r2, #0
 8010d46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8010d48:	2200      	movs	r2, #0
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 fa09 	bl	8011164 <USBH_CtlReq>
 8010d52:	4603      	mov	r3, r0
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	460b      	mov	r3, r1
 8010d66:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	789b      	ldrb	r3, [r3, #2]
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d10f      	bne.n	8010d90 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2203      	movs	r2, #3
 8010d7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010d7c:	78fb      	ldrb	r3, [r7, #3]
 8010d7e:	b29a      	uxth	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8010d90:	2200      	movs	r2, #0
 8010d92:	2100      	movs	r1, #0
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f9e5 	bl	8011164 <USBH_CtlReq>
 8010d9a:	4603      	mov	r3, r0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	460b      	mov	r3, r1
 8010dae:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	789b      	ldrb	r3, [r3, #2]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d10f      	bne.n	8010dd8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010dca:	78fb      	ldrb	r3, [r7, #3]
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8010dd8:	2200      	movs	r2, #0
 8010dda:	2100      	movs	r1, #0
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 f9c1 	bl	8011164 <USBH_CtlReq>
 8010de2:	4603      	mov	r3, r0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	4613      	mov	r3, r2
 8010df8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	781a      	ldrb	r2, [r3, #0]
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	785a      	ldrb	r2, [r3, #1]
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	3302      	adds	r3, #2
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	3303      	adds	r3, #3
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	021b      	lsls	r3, r3, #8
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	4313      	orrs	r3, r2
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	791a      	ldrb	r2, [r3, #4]
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	795a      	ldrb	r2, [r3, #5]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	799a      	ldrb	r2, [r3, #6]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	79da      	ldrb	r2, [r3, #7]
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8010e46:	88fb      	ldrh	r3, [r7, #6]
 8010e48:	2b08      	cmp	r3, #8
 8010e4a:	d939      	bls.n	8010ec0 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	3308      	adds	r3, #8
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	3309      	adds	r3, #9
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	021b      	lsls	r3, r3, #8
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	4313      	orrs	r3, r2
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	330a      	adds	r3, #10
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	330b      	adds	r3, #11
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	021b      	lsls	r3, r3, #8
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	b29a      	uxth	r2, r3
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	330c      	adds	r3, #12
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	330d      	adds	r3, #13
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	021b      	lsls	r3, r3, #8
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	4313      	orrs	r3, r2
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	7b9a      	ldrb	r2, [r3, #14]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	7bda      	ldrb	r2, [r3, #15]
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	7c1a      	ldrb	r2, [r3, #16]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	7c5a      	ldrb	r2, [r3, #17]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	745a      	strb	r2, [r3, #17]
  }
}
 8010ec0:	bf00      	nop
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b08a      	sub	sp, #40	; 0x28
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	781a      	ldrb	r2, [r3, #0]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	785a      	ldrb	r2, [r3, #1]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	3302      	adds	r3, #2
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	3303      	adds	r3, #3
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	021b      	lsls	r3, r3, #8
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	4313      	orrs	r3, r2
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	791a      	ldrb	r2, [r3, #4]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	795a      	ldrb	r2, [r3, #5]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	799a      	ldrb	r2, [r3, #6]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	79da      	ldrb	r2, [r3, #7]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	7a1a      	ldrb	r2, [r3, #8]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010f42:	88fb      	ldrh	r3, [r7, #6]
 8010f44:	2b09      	cmp	r3, #9
 8010f46:	d95f      	bls.n	8011008 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8010f48:	2309      	movs	r3, #9
 8010f4a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010f50:	e051      	b.n	8010ff6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010f52:	f107 0316 	add.w	r3, r7, #22
 8010f56:	4619      	mov	r1, r3
 8010f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f5a:	f000 f8e8 	bl	801112e <USBH_GetNextDesc>
 8010f5e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8010f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f62:	785b      	ldrb	r3, [r3, #1]
 8010f64:	2b04      	cmp	r3, #4
 8010f66:	d146      	bne.n	8010ff6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8010f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f6c:	221a      	movs	r2, #26
 8010f6e:	fb02 f303 	mul.w	r3, r2, r3
 8010f72:	3308      	adds	r3, #8
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	4413      	add	r3, r2
 8010f78:	3302      	adds	r3, #2
 8010f7a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8010f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f7e:	69f8      	ldr	r0, [r7, #28]
 8010f80:	f000 f846 	bl	8011010 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010f84:	2300      	movs	r3, #0
 8010f86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010f8e:	e022      	b.n	8010fd6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8010f90:	f107 0316 	add.w	r3, r7, #22
 8010f94:	4619      	mov	r1, r3
 8010f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f98:	f000 f8c9 	bl	801112e <USBH_GetNextDesc>
 8010f9c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8010f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa0:	785b      	ldrb	r3, [r3, #1]
 8010fa2:	2b05      	cmp	r3, #5
 8010fa4:	d117      	bne.n	8010fd6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010faa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010fae:	3201      	adds	r2, #1
 8010fb0:	00d2      	lsls	r2, r2, #3
 8010fb2:	211a      	movs	r1, #26
 8010fb4:	fb01 f303 	mul.w	r3, r1, r3
 8010fb8:	4413      	add	r3, r2
 8010fba:	3308      	adds	r3, #8
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8010fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fc6:	69b8      	ldr	r0, [r7, #24]
 8010fc8:	f000 f851 	bl	801106e <USBH_ParseEPDesc>
            ep_ix++;
 8010fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	791b      	ldrb	r3, [r3, #4]
 8010fda:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d204      	bcs.n	8010fec <USBH_ParseCfgDesc+0x120>
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	885a      	ldrh	r2, [r3, #2]
 8010fe6:	8afb      	ldrh	r3, [r7, #22]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d8d1      	bhi.n	8010f90 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8010fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010ff6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d804      	bhi.n	8011008 <USBH_ParseCfgDesc+0x13c>
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	885a      	ldrh	r2, [r3, #2]
 8011002:	8afb      	ldrh	r3, [r7, #22]
 8011004:	429a      	cmp	r2, r3
 8011006:	d8a4      	bhi.n	8010f52 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8011008:	bf00      	nop
 801100a:	3728      	adds	r7, #40	; 0x28
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8011010:	b480      	push	{r7}
 8011012:	b083      	sub	sp, #12
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	781a      	ldrb	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	785a      	ldrb	r2, [r3, #1]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	789a      	ldrb	r2, [r3, #2]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	78da      	ldrb	r2, [r3, #3]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	791a      	ldrb	r2, [r3, #4]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	795a      	ldrb	r2, [r3, #5]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	799a      	ldrb	r2, [r3, #6]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	79da      	ldrb	r2, [r3, #7]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	7a1a      	ldrb	r2, [r3, #8]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	721a      	strb	r2, [r3, #8]
}
 8011062:	bf00      	nop
 8011064:	370c      	adds	r7, #12
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr

0801106e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 801106e:	b480      	push	{r7}
 8011070:	b083      	sub	sp, #12
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
 8011076:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	781a      	ldrb	r2, [r3, #0]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	785a      	ldrb	r2, [r3, #1]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	789a      	ldrb	r2, [r3, #2]
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	78da      	ldrb	r2, [r3, #3]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	3304      	adds	r3, #4
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	b29a      	uxth	r2, r3
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	3305      	adds	r3, #5
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	021b      	lsls	r3, r3, #8
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	4313      	orrs	r3, r2
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	799a      	ldrb	r2, [r3, #6]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	719a      	strb	r2, [r3, #6]
}
 80110bc:	bf00      	nop
 80110be:	370c      	adds	r7, #12
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b087      	sub	sp, #28
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	4613      	mov	r3, r2
 80110d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	3301      	adds	r3, #1
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	2b03      	cmp	r3, #3
 80110de:	d120      	bne.n	8011122 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	1e9a      	subs	r2, r3, #2
 80110e6:	88fb      	ldrh	r3, [r7, #6]
 80110e8:	4293      	cmp	r3, r2
 80110ea:	bf28      	it	cs
 80110ec:	4613      	movcs	r3, r2
 80110ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	3302      	adds	r3, #2
 80110f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80110f6:	2300      	movs	r3, #0
 80110f8:	82fb      	strh	r3, [r7, #22]
 80110fa:	e00b      	b.n	8011114 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80110fc:	8afb      	ldrh	r3, [r7, #22]
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	4413      	add	r3, r2
 8011102:	781a      	ldrb	r2, [r3, #0]
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	3301      	adds	r3, #1
 801110c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801110e:	8afb      	ldrh	r3, [r7, #22]
 8011110:	3302      	adds	r3, #2
 8011112:	82fb      	strh	r3, [r7, #22]
 8011114:	8afa      	ldrh	r2, [r7, #22]
 8011116:	8abb      	ldrh	r3, [r7, #20]
 8011118:	429a      	cmp	r2, r3
 801111a:	d3ef      	bcc.n	80110fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2200      	movs	r2, #0
 8011120:	701a      	strb	r2, [r3, #0]
  }
}
 8011122:	bf00      	nop
 8011124:	371c      	adds	r7, #28
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 801112e:	b480      	push	{r7}
 8011130:	b085      	sub	sp, #20
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
 8011136:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	881a      	ldrh	r2, [r3, #0]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	b29b      	uxth	r3, r3
 8011142:	4413      	add	r3, r2
 8011144:	b29a      	uxth	r2, r3
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	4413      	add	r3, r2
 8011154:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8011156:	68fb      	ldr	r3, [r7, #12]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3714      	adds	r7, #20
 801115c:	46bd      	mov	sp, r7
 801115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011162:	4770      	bx	lr

08011164 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	4613      	mov	r3, r2
 8011170:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011172:	2301      	movs	r3, #1
 8011174:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	789b      	ldrb	r3, [r3, #2]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d002      	beq.n	8011184 <USBH_CtlReq+0x20>
 801117e:	2b02      	cmp	r3, #2
 8011180:	d01d      	beq.n	80111be <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8011182:	e042      	b.n	801120a <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	68ba      	ldr	r2, [r7, #8]
 8011188:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	88fa      	ldrh	r2, [r7, #6]
 801118e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2201      	movs	r2, #1
 8011194:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2202      	movs	r2, #2
 801119a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 801119c:	2301      	movs	r3, #1
 801119e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2203      	movs	r2, #3
 80111a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80111b4:	2200      	movs	r2, #0
 80111b6:	4619      	mov	r1, r3
 80111b8:	f003 fbf6 	bl	80149a8 <osMessagePut>
    break;
 80111bc:	e025      	b.n	801120a <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f000 f828 	bl	8011214 <USBH_HandleControl>
 80111c4:	4603      	mov	r3, r0
 80111c6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 80111c8:	7dfb      	ldrb	r3, [r7, #23]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d108      	bne.n	80111e0 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2201      	movs	r2, #1
 80111d2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2200      	movs	r2, #0
 80111d8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80111da:	2300      	movs	r3, #0
 80111dc:	75fb      	strb	r3, [r7, #23]
    break;
 80111de:	e013      	b.n	8011208 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 80111e0:	7dfb      	ldrb	r3, [r7, #23]
 80111e2:	2b03      	cmp	r3, #3
 80111e4:	d108      	bne.n	80111f8 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2201      	movs	r2, #1
 80111ea:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2200      	movs	r2, #0
 80111f0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80111f2:	2303      	movs	r3, #3
 80111f4:	75fb      	strb	r3, [r7, #23]
    break;
 80111f6:	e007      	b.n	8011208 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80111f8:	7dfb      	ldrb	r3, [r7, #23]
 80111fa:	2b02      	cmp	r3, #2
 80111fc:	d104      	bne.n	8011208 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2201      	movs	r2, #1
 8011202:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8011204:	2302      	movs	r3, #2
 8011206:	75fb      	strb	r3, [r7, #23]
    break;
 8011208:	bf00      	nop
  }
  return status;
 801120a:	7dfb      	ldrb	r3, [r7, #23]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3718      	adds	r7, #24
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af02      	add	r7, sp, #8
 801121a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801121c:	2301      	movs	r3, #1
 801121e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011220:	2300      	movs	r3, #0
 8011222:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	7e1b      	ldrb	r3, [r3, #24]
 8011228:	3b01      	subs	r3, #1
 801122a:	2b0a      	cmp	r3, #10
 801122c:	f200 821f 	bhi.w	801166e <USBH_HandleControl+0x45a>
 8011230:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <USBH_HandleControl+0x24>)
 8011232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011236:	bf00      	nop
 8011238:	08011265 	.word	0x08011265
 801123c:	0801127f 	.word	0x0801127f
 8011240:	08011321 	.word	0x08011321
 8011244:	08011347 	.word	0x08011347
 8011248:	080113d3 	.word	0x080113d3
 801124c:	080113ff 	.word	0x080113ff
 8011250:	080114c1 	.word	0x080114c1
 8011254:	080114e3 	.word	0x080114e3
 8011258:	08011575 	.word	0x08011575
 801125c:	0801159d 	.word	0x0801159d
 8011260:	0801162f 	.word	0x0801162f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f103 0110 	add.w	r1, r3, #16
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	795b      	ldrb	r3, [r3, #5]
 801126e:	461a      	mov	r2, r3
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f000 fa0d 	bl	8011690 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2202      	movs	r2, #2
 801127a:	761a      	strb	r2, [r3, #24]
    break;
 801127c:	e202      	b.n	8011684 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	795b      	ldrb	r3, [r3, #5]
 8011282:	4619      	mov	r1, r3
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f00c f8d7 	bl	801d438 <USBH_LL_GetURBState>
 801128a:	4603      	mov	r3, r0
 801128c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 801128e:	7bbb      	ldrb	r3, [r7, #14]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d12c      	bne.n	80112ee <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	7c1b      	ldrb	r3, [r3, #16]
 8011298:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801129c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	8adb      	ldrh	r3, [r3, #22]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00a      	beq.n	80112bc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80112a6:	7b7b      	ldrb	r3, [r7, #13]
 80112a8:	2b80      	cmp	r3, #128	; 0x80
 80112aa:	d103      	bne.n	80112b4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2203      	movs	r2, #3
 80112b0:	761a      	strb	r2, [r3, #24]
 80112b2:	e00d      	b.n	80112d0 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2205      	movs	r2, #5
 80112b8:	761a      	strb	r2, [r3, #24]
 80112ba:	e009      	b.n	80112d0 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 80112bc:	7b7b      	ldrb	r3, [r7, #13]
 80112be:	2b80      	cmp	r3, #128	; 0x80
 80112c0:	d103      	bne.n	80112ca <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2209      	movs	r2, #9
 80112c6:	761a      	strb	r2, [r3, #24]
 80112c8:	e002      	b.n	80112d0 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2207      	movs	r2, #7
 80112ce:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2203      	movs	r2, #3
 80112d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80112e4:	2200      	movs	r2, #0
 80112e6:	4619      	mov	r1, r3
 80112e8:	f003 fb5e 	bl	80149a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80112ec:	e1c1      	b.n	8011672 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80112ee:	7bbb      	ldrb	r3, [r7, #14]
 80112f0:	2b04      	cmp	r3, #4
 80112f2:	d003      	beq.n	80112fc <USBH_HandleControl+0xe8>
 80112f4:	7bbb      	ldrb	r3, [r7, #14]
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	f040 81bb 	bne.w	8011672 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	220b      	movs	r2, #11
 8011300:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2203      	movs	r2, #3
 8011306:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011316:	2200      	movs	r2, #0
 8011318:	4619      	mov	r1, r3
 801131a:	f003 fb45 	bl	80149a8 <osMessagePut>
    break;
 801131e:	e1a8      	b.n	8011672 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8011326:	b29a      	uxth	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6899      	ldr	r1, [r3, #8]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	899a      	ldrh	r2, [r3, #12]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	791b      	ldrb	r3, [r3, #4]
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 f9e8 	bl	801170e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2204      	movs	r2, #4
 8011342:	761a      	strb	r2, [r3, #24]
    break;
 8011344:	e19e      	b.n	8011684 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	791b      	ldrb	r3, [r3, #4]
 801134a:	4619      	mov	r1, r3
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f00c f873 	bl	801d438 <USBH_LL_GetURBState>
 8011352:	4603      	mov	r3, r0
 8011354:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8011356:	7bbb      	ldrb	r3, [r7, #14]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d110      	bne.n	801137e <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2209      	movs	r2, #9
 8011360:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2203      	movs	r2, #3
 8011366:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011376:	2200      	movs	r2, #0
 8011378:	4619      	mov	r1, r3
 801137a:	f003 fb15 	bl	80149a8 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 801137e:	7bbb      	ldrb	r3, [r7, #14]
 8011380:	2b05      	cmp	r3, #5
 8011382:	d110      	bne.n	80113a6 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8011384:	2303      	movs	r3, #3
 8011386:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2203      	movs	r2, #3
 801138c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801139c:	2200      	movs	r2, #0
 801139e:	4619      	mov	r1, r3
 80113a0:	f003 fb02 	bl	80149a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80113a4:	e167      	b.n	8011676 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 80113a6:	7bbb      	ldrb	r3, [r7, #14]
 80113a8:	2b04      	cmp	r3, #4
 80113aa:	f040 8164 	bne.w	8011676 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	220b      	movs	r2, #11
 80113b2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2203      	movs	r2, #3
 80113b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80113c8:	2200      	movs	r2, #0
 80113ca:	4619      	mov	r1, r3
 80113cc:	f003 faec 	bl	80149a8 <osMessagePut>
    break;
 80113d0:	e151      	b.n	8011676 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6899      	ldr	r1, [r3, #8]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	899a      	ldrh	r2, [r3, #12]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	7958      	ldrb	r0, [r3, #5]
 80113de:	2301      	movs	r3, #1
 80113e0:	9300      	str	r3, [sp, #0]
 80113e2:	4603      	mov	r3, r0
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f96d 	bl	80116c4 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2206      	movs	r2, #6
 80113fa:	761a      	strb	r2, [r3, #24]
    break;
 80113fc:	e142      	b.n	8011684 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	795b      	ldrb	r3, [r3, #5]
 8011402:	4619      	mov	r1, r3
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f00c f817 	bl	801d438 <USBH_LL_GetURBState>
 801140a:	4603      	mov	r3, r0
 801140c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 801140e:	7bbb      	ldrb	r3, [r7, #14]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d111      	bne.n	8011438 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2207      	movs	r2, #7
 8011418:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2203      	movs	r2, #3
 801141e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801142e:	2200      	movs	r2, #0
 8011430:	4619      	mov	r1, r3
 8011432:	f003 fab9 	bl	80149a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8011436:	e120      	b.n	801167a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8011438:	7bbb      	ldrb	r3, [r7, #14]
 801143a:	2b05      	cmp	r3, #5
 801143c:	d113      	bne.n	8011466 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	220c      	movs	r2, #12
 8011442:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8011444:	2303      	movs	r3, #3
 8011446:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2203      	movs	r2, #3
 801144c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801145c:	2200      	movs	r2, #0
 801145e:	4619      	mov	r1, r3
 8011460:	f003 faa2 	bl	80149a8 <osMessagePut>
    break;
 8011464:	e109      	b.n	801167a <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8011466:	7bbb      	ldrb	r3, [r7, #14]
 8011468:	2b02      	cmp	r3, #2
 801146a:	d111      	bne.n	8011490 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2205      	movs	r2, #5
 8011470:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2203      	movs	r2, #3
 8011476:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011486:	2200      	movs	r2, #0
 8011488:	4619      	mov	r1, r3
 801148a:	f003 fa8d 	bl	80149a8 <osMessagePut>
    break;
 801148e:	e0f4      	b.n	801167a <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8011490:	7bbb      	ldrb	r3, [r7, #14]
 8011492:	2b04      	cmp	r3, #4
 8011494:	f040 80f1 	bne.w	801167a <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	220b      	movs	r2, #11
 801149c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 801149e:	2302      	movs	r3, #2
 80114a0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2203      	movs	r2, #3
 80114a6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80114b6:	2200      	movs	r2, #0
 80114b8:	4619      	mov	r1, r3
 80114ba:	f003 fa75 	bl	80149a8 <osMessagePut>
    break;
 80114be:	e0dc      	b.n	801167a <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	791b      	ldrb	r3, [r3, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	2100      	movs	r1, #0
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f000 f920 	bl	801170e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2208      	movs	r2, #8
 80114de:	761a      	strb	r2, [r3, #24]

    break;
 80114e0:	e0d0      	b.n	8011684 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	791b      	ldrb	r3, [r3, #4]
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f00b ffa5 	bl	801d438 <USBH_LL_GetURBState>
 80114ee:	4603      	mov	r3, r0
 80114f0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80114f2:	7bbb      	ldrb	r3, [r7, #14]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d113      	bne.n	8011520 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	220d      	movs	r2, #13
 80114fc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2203      	movs	r2, #3
 8011506:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011516:	2200      	movs	r2, #0
 8011518:	4619      	mov	r1, r3
 801151a:	f003 fa45 	bl	80149a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 801151e:	e0ae      	b.n	801167e <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8011520:	7bbb      	ldrb	r3, [r7, #14]
 8011522:	2b04      	cmp	r3, #4
 8011524:	d111      	bne.n	801154a <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	220b      	movs	r2, #11
 801152a:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2203      	movs	r2, #3
 8011530:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011540:	2200      	movs	r2, #0
 8011542:	4619      	mov	r1, r3
 8011544:	f003 fa30 	bl	80149a8 <osMessagePut>
    break;
 8011548:	e099      	b.n	801167e <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 801154a:	7bbb      	ldrb	r3, [r7, #14]
 801154c:	2b05      	cmp	r3, #5
 801154e:	f040 8096 	bne.w	801167e <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 8011552:	2303      	movs	r3, #3
 8011554:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2203      	movs	r2, #3
 801155a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801156a:	2200      	movs	r2, #0
 801156c:	4619      	mov	r1, r3
 801156e:	f003 fa1b 	bl	80149a8 <osMessagePut>
    break;
 8011572:	e084      	b.n	801167e <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	795a      	ldrb	r2, [r3, #5]
 8011578:	2301      	movs	r3, #1
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	4613      	mov	r3, r2
 801157e:	2200      	movs	r2, #0
 8011580:	2100      	movs	r1, #0
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 f89e 	bl	80116c4 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	220a      	movs	r2, #10
 8011598:	761a      	strb	r2, [r3, #24]
    break;
 801159a:	e073      	b.n	8011684 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	795b      	ldrb	r3, [r3, #5]
 80115a0:	4619      	mov	r1, r3
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f00b ff48 	bl	801d438 <USBH_LL_GetURBState>
 80115a8:	4603      	mov	r3, r0
 80115aa:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80115ac:	7bbb      	ldrb	r3, [r7, #14]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d113      	bne.n	80115da <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 80115b2:	2300      	movs	r3, #0
 80115b4:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	220d      	movs	r2, #13
 80115ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2203      	movs	r2, #3
 80115c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80115d0:	2200      	movs	r2, #0
 80115d2:	4619      	mov	r1, r3
 80115d4:	f003 f9e8 	bl	80149a8 <osMessagePut>
#endif
#endif
      }

    }
    break;
 80115d8:	e053      	b.n	8011682 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80115da:	7bbb      	ldrb	r3, [r7, #14]
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d111      	bne.n	8011604 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2209      	movs	r2, #9
 80115e4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2203      	movs	r2, #3
 80115ea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80115fa:	2200      	movs	r2, #0
 80115fc:	4619      	mov	r1, r3
 80115fe:	f003 f9d3 	bl	80149a8 <osMessagePut>
    break;
 8011602:	e03e      	b.n	8011682 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8011604:	7bbb      	ldrb	r3, [r7, #14]
 8011606:	2b04      	cmp	r3, #4
 8011608:	d13b      	bne.n	8011682 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	220b      	movs	r2, #11
 801160e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2203      	movs	r2, #3
 8011614:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011624:	2200      	movs	r2, #0
 8011626:	4619      	mov	r1, r3
 8011628:	f003 f9be 	bl	80149a8 <osMessagePut>
    break;
 801162c:	e029      	b.n	8011682 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	7e5b      	ldrb	r3, [r3, #25]
 8011632:	3301      	adds	r3, #1
 8011634:	b2da      	uxtb	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	765a      	strb	r2, [r3, #25]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	7e5b      	ldrb	r3, [r3, #25]
 801163e:	2b02      	cmp	r3, #2
 8011640:	d809      	bhi.n	8011656 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f00b fe0b 	bl	801d25e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2201      	movs	r2, #1
 801164c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2201      	movs	r2, #1
 8011652:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8011654:	e016      	b.n	8011684 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801165c:	2106      	movs	r1, #6
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2200      	movs	r2, #0
 8011666:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8011668:	2302      	movs	r3, #2
 801166a:	73fb      	strb	r3, [r7, #15]
    break;
 801166c:	e00a      	b.n	8011684 <USBH_HandleControl+0x470>

  default:
    break;
 801166e:	bf00      	nop
 8011670:	e008      	b.n	8011684 <USBH_HandleControl+0x470>
    break;
 8011672:	bf00      	nop
 8011674:	e006      	b.n	8011684 <USBH_HandleControl+0x470>
    break;
 8011676:	bf00      	nop
 8011678:	e004      	b.n	8011684 <USBH_HandleControl+0x470>
    break;
 801167a:	bf00      	nop
 801167c:	e002      	b.n	8011684 <USBH_HandleControl+0x470>
    break;
 801167e:	bf00      	nop
 8011680:	e000      	b.n	8011684 <USBH_HandleControl+0x470>
    break;
 8011682:	bf00      	nop
  }
  return status;
 8011684:	7bfb      	ldrb	r3, [r7, #15]
}
 8011686:	4618      	mov	r0, r3
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop

08011690 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af04      	add	r7, sp, #16
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	4613      	mov	r3, r2
 801169c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801169e:	79f9      	ldrb	r1, [r7, #7]
 80116a0:	2300      	movs	r3, #0
 80116a2:	9303      	str	r3, [sp, #12]
 80116a4:	2308      	movs	r3, #8
 80116a6:	9302      	str	r3, [sp, #8]
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	9301      	str	r3, [sp, #4]
 80116ac:	2300      	movs	r3, #0
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	2300      	movs	r3, #0
 80116b2:	2200      	movs	r2, #0
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f00b fe8e 	bl	801d3d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b088      	sub	sp, #32
 80116c8:	af04      	add	r7, sp, #16
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	4611      	mov	r1, r2
 80116d0:	461a      	mov	r2, r3
 80116d2:	460b      	mov	r3, r1
 80116d4:	80fb      	strh	r3, [r7, #6]
 80116d6:	4613      	mov	r3, r2
 80116d8:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d001      	beq.n	80116e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80116e4:	2300      	movs	r3, #0
 80116e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80116e8:	7979      	ldrb	r1, [r7, #5]
 80116ea:	7e3b      	ldrb	r3, [r7, #24]
 80116ec:	9303      	str	r3, [sp, #12]
 80116ee:	88fb      	ldrh	r3, [r7, #6]
 80116f0:	9302      	str	r3, [sp, #8]
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	9301      	str	r3, [sp, #4]
 80116f6:	2301      	movs	r3, #1
 80116f8:	9300      	str	r3, [sp, #0]
 80116fa:	2300      	movs	r3, #0
 80116fc:	2200      	movs	r2, #0
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f00b fe69 	bl	801d3d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011704:	2300      	movs	r3, #0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}

0801170e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b088      	sub	sp, #32
 8011712:	af04      	add	r7, sp, #16
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	4611      	mov	r1, r2
 801171a:	461a      	mov	r2, r3
 801171c:	460b      	mov	r3, r1
 801171e:	80fb      	strh	r3, [r7, #6]
 8011720:	4613      	mov	r3, r2
 8011722:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8011724:	7979      	ldrb	r1, [r7, #5]
 8011726:	2300      	movs	r3, #0
 8011728:	9303      	str	r3, [sp, #12]
 801172a:	88fb      	ldrh	r3, [r7, #6]
 801172c:	9302      	str	r3, [sp, #8]
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	9301      	str	r3, [sp, #4]
 8011732:	2301      	movs	r3, #1
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	2300      	movs	r3, #0
 8011738:	2201      	movs	r2, #1
 801173a:	68f8      	ldr	r0, [r7, #12]
 801173c:	f00b fe4b 	bl	801d3d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011740:	2300      	movs	r3, #0

}
 8011742:	4618      	mov	r0, r3
 8011744:	3710      	adds	r7, #16
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}

0801174a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 801174a:	b580      	push	{r7, lr}
 801174c:	b088      	sub	sp, #32
 801174e:	af04      	add	r7, sp, #16
 8011750:	60f8      	str	r0, [r7, #12]
 8011752:	60b9      	str	r1, [r7, #8]
 8011754:	4611      	mov	r1, r2
 8011756:	461a      	mov	r2, r3
 8011758:	460b      	mov	r3, r1
 801175a:	80fb      	strh	r3, [r7, #6]
 801175c:	4613      	mov	r3, r2
 801175e:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011766:	2b00      	cmp	r3, #0
 8011768:	d001      	beq.n	801176e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801176a:	2300      	movs	r3, #0
 801176c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801176e:	7979      	ldrb	r1, [r7, #5]
 8011770:	7e3b      	ldrb	r3, [r7, #24]
 8011772:	9303      	str	r3, [sp, #12]
 8011774:	88fb      	ldrh	r3, [r7, #6]
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	9301      	str	r3, [sp, #4]
 801177c:	2301      	movs	r3, #1
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	2302      	movs	r3, #2
 8011782:	2200      	movs	r2, #0
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f00b fe26 	bl	801d3d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801178a:	2300      	movs	r3, #0
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b088      	sub	sp, #32
 8011798:	af04      	add	r7, sp, #16
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	4611      	mov	r1, r2
 80117a0:	461a      	mov	r2, r3
 80117a2:	460b      	mov	r3, r1
 80117a4:	80fb      	strh	r3, [r7, #6]
 80117a6:	4613      	mov	r3, r2
 80117a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80117aa:	7979      	ldrb	r1, [r7, #5]
 80117ac:	2300      	movs	r3, #0
 80117ae:	9303      	str	r3, [sp, #12]
 80117b0:	88fb      	ldrh	r3, [r7, #6]
 80117b2:	9302      	str	r3, [sp, #8]
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	9301      	str	r3, [sp, #4]
 80117b8:	2301      	movs	r3, #1
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	2302      	movs	r3, #2
 80117be:	2201      	movs	r2, #1
 80117c0:	68f8      	ldr	r0, [r7, #12]
 80117c2:	f00b fe08 	bl	801d3d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80117c6:	2300      	movs	r3, #0
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af04      	add	r7, sp, #16
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	4608      	mov	r0, r1
 80117da:	4611      	mov	r1, r2
 80117dc:	461a      	mov	r2, r3
 80117de:	4603      	mov	r3, r0
 80117e0:	70fb      	strb	r3, [r7, #3]
 80117e2:	460b      	mov	r3, r1
 80117e4:	70bb      	strb	r3, [r7, #2]
 80117e6:	4613      	mov	r3, r2
 80117e8:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80117ea:	7878      	ldrb	r0, [r7, #1]
 80117ec:	78ba      	ldrb	r2, [r7, #2]
 80117ee:	78f9      	ldrb	r1, [r7, #3]
 80117f0:	8b3b      	ldrh	r3, [r7, #24]
 80117f2:	9302      	str	r3, [sp, #8]
 80117f4:	7d3b      	ldrb	r3, [r7, #20]
 80117f6:	9301      	str	r3, [sp, #4]
 80117f8:	7c3b      	ldrb	r3, [r7, #16]
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	4603      	mov	r3, r0
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f00b fd9b 	bl	801d33a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8011804:	2300      	movs	r3, #0

}
 8011806:	4618      	mov	r0, r3
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}

0801180e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 801180e:	b580      	push	{r7, lr}
 8011810:	b082      	sub	sp, #8
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	460b      	mov	r3, r1
 8011818:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 801181a:	78fb      	ldrb	r3, [r7, #3]
 801181c:	4619      	mov	r1, r3
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f00b fdba 	bl	801d398 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011824:	2300      	movs	r3, #0

}
 8011826:	4618      	mov	r0, r3
 8011828:	3708      	adds	r7, #8
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}

0801182e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b084      	sub	sp, #16
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
 8011836:	460b      	mov	r3, r1
 8011838:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f831 	bl	80118a2 <USBH_GetFreePipe>
 8011840:	4603      	mov	r3, r0
 8011842:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011844:	89fb      	ldrh	r3, [r7, #14]
 8011846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801184a:	4293      	cmp	r3, r2
 801184c:	d007      	beq.n	801185e <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 801184e:	78fb      	ldrb	r3, [r7, #3]
 8011850:	89fa      	ldrh	r2, [r7, #14]
 8011852:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	32e0      	adds	r2, #224	; 0xe0
 801185a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 801185e:	89fb      	ldrh	r3, [r7, #14]
 8011860:	b2db      	uxtb	r3, r3
}
 8011862:	4618      	mov	r0, r3
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 801186a:	b480      	push	{r7}
 801186c:	b083      	sub	sp, #12
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
 8011872:	460b      	mov	r3, r1
 8011874:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8011876:	78fb      	ldrb	r3, [r7, #3]
 8011878:	2b0a      	cmp	r3, #10
 801187a:	d80b      	bhi.n	8011894 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 801187c:	78fa      	ldrb	r2, [r7, #3]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	32e0      	adds	r2, #224	; 0xe0
 8011882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011886:	78fa      	ldrb	r2, [r7, #3]
 8011888:	f3c3 010e 	ubfx	r1, r3, #0, #15
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	32e0      	adds	r2, #224	; 0xe0
 8011890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	370c      	adds	r7, #12
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr

080118a2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80118a2:	b480      	push	{r7}
 80118a4:	b085      	sub	sp, #20
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80118aa:	2300      	movs	r3, #0
 80118ac:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80118ae:	2300      	movs	r3, #0
 80118b0:	73fb      	strb	r3, [r7, #15]
 80118b2:	e00e      	b.n	80118d2 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80118b4:	7bfa      	ldrb	r2, [r7, #15]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	32e0      	adds	r2, #224	; 0xe0
 80118ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d102      	bne.n	80118cc <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80118c6:	7bfb      	ldrb	r3, [r7, #15]
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	e007      	b.n	80118dc <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	3301      	adds	r3, #1
 80118d0:	73fb      	strb	r3, [r7, #15]
 80118d2:	7bfb      	ldrb	r3, [r7, #15]
 80118d4:	2b0a      	cmp	r3, #10
 80118d6:	d9ed      	bls.n	80118b4 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80118d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3714      	adds	r7, #20
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr

080118e8 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
    {
 80118f0:	4a04      	ldr	r2, [pc, #16]	; (8011904 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	601a      	str	r2, [r3, #0]
    }
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4618      	mov	r0, r3
 80118fa:	370c      	adds	r7, #12
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr
 8011904:	08024690 	.word	0x08024690

08011908 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
    }
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7ff ffe9 	bl	80118e8 <_ZN8touchgfx15TouchControllerD1Ev>
 8011916:	2104      	movs	r1, #4
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f011 f81c 	bl	8022956 <_ZdlPvj>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4618      	mov	r0, r3
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8011928:	b480      	push	{r7}
 801192a:	b085      	sub	sp, #20
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	4608      	mov	r0, r1
 8011932:	4611      	mov	r1, r2
 8011934:	461a      	mov	r2, r3
 8011936:	4603      	mov	r3, r0
 8011938:	817b      	strh	r3, [r7, #10]
 801193a:	460b      	mov	r3, r1
 801193c:	813b      	strh	r3, [r7, #8]
 801193e:	4613      	mov	r3, r2
 8011940:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	897a      	ldrh	r2, [r7, #10]
 8011946:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	893a      	ldrh	r2, [r7, #8]
 801194c:	805a      	strh	r2, [r3, #2]
        this->width = width;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	88fa      	ldrh	r2, [r7, #6]
 8011952:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	8b3a      	ldrh	r2, [r7, #24]
 8011958:	80da      	strh	r2, [r3, #6]
    }
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	4618      	mov	r0, r3
 801195e:	3714      	adds	r7, #20
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011976:	b29a      	uxth	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801197e:	b29b      	uxth	r3, r3
 8011980:	4413      	add	r3, r2
 8011982:	b29b      	uxth	r3, r3
 8011984:	b21b      	sxth	r3, r3
    }
 8011986:	4618      	mov	r0, r3
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr

08011992 <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 8011992:	b480      	push	{r7}
 8011994:	b083      	sub	sp, #12
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	4413      	add	r3, r2
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	b21b      	sxth	r3, r3
    }
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	460b      	mov	r3, r1
 80119c6:	807b      	strh	r3, [r7, #2]
 80119c8:	4613      	mov	r3, r2
 80119ca:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 80119d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	db1a      	blt.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7ff ffc4 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 80119e0:	4603      	mov	r3, r0
 80119e2:	461a      	mov	r2, r3
 80119e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80119e8:	4293      	cmp	r3, r2
 80119ea:	da11      	bge.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 80119f2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	db0a      	blt.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff ffc9 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011a00:	4603      	mov	r3, r0
 8011a02:	461a      	mov	r2, r3
 8011a04:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	da01      	bge.n	8011a10 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e000      	b.n	8011a12 <_ZNK8touchgfx4Rect9intersectEss+0x56>
 8011a10:	2300      	movs	r3, #0
    }
 8011a12:	4618      	mov	r0, r3
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 8011a1a:	b590      	push	{r4, r7, lr}
 8011a1c:	b083      	sub	sp, #12
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f9b3 4000 	ldrsh.w	r4, [r3]
 8011a2a:	6838      	ldr	r0, [r7, #0]
 8011a2c:	f7ff ff9c 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011a30:	4603      	mov	r3, r0
 8011a32:	429c      	cmp	r4, r3
 8011a34:	da1e      	bge.n	8011a74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f7ff ff96 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	461a      	mov	r2, r3
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	dd14      	ble.n	8011a74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8011a50:	6838      	ldr	r0, [r7, #0]
 8011a52:	f7ff ff9e 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011a56:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 8011a58:	429c      	cmp	r4, r3
 8011a5a:	da0b      	bge.n	8011a74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7ff ff98 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011a62:	4603      	mov	r3, r0
 8011a64:	461a      	mov	r2, r3
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	dd01      	ble.n	8011a74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 8011a70:	2301      	movs	r3, #1
 8011a72:	e000      	b.n	8011a76 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 8011a74:	2300      	movs	r3, #0
    }
 8011a76:	4618      	mov	r0, r3
 8011a78:	370c      	adds	r7, #12
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd90      	pop	{r4, r7, pc}

08011a7e <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b084      	sub	sp, #16
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	60f8      	str	r0, [r7, #12]
 8011a86:	60b9      	str	r1, [r7, #8]
 8011a88:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	6811      	ldr	r1, [r2, #0]
 8011a90:	6852      	ldr	r2, [r2, #4]
 8011a92:	6019      	str	r1, [r3, #0]
 8011a94:	605a      	str	r2, [r3, #4]
        r &= other;
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f000 f805 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 8011a9e:	bf00      	nop
    }
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	3710      	adds	r7, #16
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 8011aa8:	b590      	push	{r4, r7, lr}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 8011ab2:	6839      	ldr	r1, [r7, #0]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f7ff ffb0 	bl	8011a1a <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d05f      	beq.n	8011b80 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	dd03      	ble.n	8011ad8 <_ZN8touchgfx4RectaNERKS0_+0x30>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ad6:	e002      	b.n	8011ade <_ZN8touchgfx4RectaNERKS0_+0x36>
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ade:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	dd04      	ble.n	8011afa <_ZN8touchgfx4RectaNERKS0_+0x52>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	3302      	adds	r3, #2
 8011af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011af8:	e002      	b.n	8011b00 <_ZN8touchgfx4RectaNERKS0_+0x58>
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011b00:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7ff ff30 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	461c      	mov	r4, r3
 8011b0c:	6838      	ldr	r0, [r7, #0]
 8011b0e:	f7ff ff2b 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011b12:	4603      	mov	r3, r0
 8011b14:	429c      	cmp	r4, r3
 8011b16:	da05      	bge.n	8011b24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7ff ff25 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	e004      	b.n	8011b2e <_ZN8touchgfx4RectaNERKS0_+0x86>
 8011b24:	6838      	ldr	r0, [r7, #0]
 8011b26:	f7ff ff1f 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	89fa      	ldrh	r2, [r7, #14]
 8011b30:	1a9b      	subs	r3, r3, r2
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	b21a      	sxth	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff ff29 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461c      	mov	r4, r3
 8011b44:	6838      	ldr	r0, [r7, #0]
 8011b46:	f7ff ff24 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	429c      	cmp	r4, r3
 8011b4e:	da05      	bge.n	8011b5c <_ZN8touchgfx4RectaNERKS0_+0xb4>
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f7ff ff1e 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011b56:	4603      	mov	r3, r0
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	e004      	b.n	8011b66 <_ZN8touchgfx4RectaNERKS0_+0xbe>
 8011b5c:	6838      	ldr	r0, [r7, #0]
 8011b5e:	f7ff ff18 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011b62:	4603      	mov	r3, r0
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	89ba      	ldrh	r2, [r7, #12]
 8011b68:	1a9b      	subs	r3, r3, r2
 8011b6a:	b29b      	uxth	r3, r3
 8011b6c:	b21a      	sxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	80da      	strh	r2, [r3, #6]
            x = newX;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	89fa      	ldrh	r2, [r7, #14]
 8011b76:	801a      	strh	r2, [r3, #0]
            y = newY;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	89ba      	ldrh	r2, [r7, #12]
 8011b7c:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 8011b7e:	e00b      	b.n	8011b98 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	801a      	strh	r2, [r3, #0]
            y = 0;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	805a      	strh	r2, [r3, #2]
            width = 0;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	809a      	strh	r2, [r3, #4]
            height = 0;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	80da      	strh	r2, [r3, #6]
    }
 8011b98:	bf00      	nop
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd90      	pop	{r4, r7, pc}

08011ba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 8011ba0:	b590      	push	{r4, r7, lr}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 8011baa:	6838      	ldr	r0, [r7, #0]
 8011bac:	f000 f884 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	f083 0301 	eor.w	r3, r3, #1
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d079      	beq.n	8011cb0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f000 f87b 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d014      	beq.n	8011bf2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	801a      	strh	r2, [r3, #0]
                y = other.y;
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	805a      	strh	r2, [r3, #2]
                width = other.width;
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	809a      	strh	r2, [r3, #4]
                height = other.height;
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 8011bf0:	e05e      	b.n	8011cb0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	da03      	bge.n	8011c0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c08:	e002      	b.n	8011c10 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c10:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	da04      	bge.n	8011c2c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	3302      	adds	r3, #2
 8011c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c2a:	e002      	b.n	8011c32 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c32:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7ff fe97 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	461c      	mov	r4, r3
 8011c3e:	6838      	ldr	r0, [r7, #0]
 8011c40:	f7ff fe92 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011c44:	4603      	mov	r3, r0
 8011c46:	429c      	cmp	r4, r3
 8011c48:	dd04      	ble.n	8011c54 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff fe8c 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011c50:	4603      	mov	r3, r0
 8011c52:	e003      	b.n	8011c5c <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 8011c54:	6838      	ldr	r0, [r7, #0]
 8011c56:	f7ff fe87 	bl	8011968 <_ZNK8touchgfx4Rect5rightEv>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7ff fe97 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011c64:	4603      	mov	r3, r0
 8011c66:	461c      	mov	r4, r3
 8011c68:	6838      	ldr	r0, [r7, #0]
 8011c6a:	f7ff fe92 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	429c      	cmp	r4, r3
 8011c72:	dd04      	ble.n	8011c7e <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f7ff fe8c 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	e003      	b.n	8011c86 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 8011c7e:	6838      	ldr	r0, [r7, #0]
 8011c80:	f7ff fe87 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 8011c84:	4603      	mov	r3, r0
 8011c86:	813b      	strh	r3, [r7, #8]
                x = newX;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	89fa      	ldrh	r2, [r7, #14]
 8011c8c:	801a      	strh	r2, [r3, #0]
                y = newY;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	89ba      	ldrh	r2, [r7, #12]
 8011c92:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 8011c94:	897a      	ldrh	r2, [r7, #10]
 8011c96:	89fb      	ldrh	r3, [r7, #14]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	b21a      	sxth	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 8011ca2:	893a      	ldrh	r2, [r7, #8]
 8011ca4:	89bb      	ldrh	r3, [r7, #12]
 8011ca6:	1ad3      	subs	r3, r2, r3
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	b21a      	sxth	r2, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	80da      	strh	r2, [r3, #6]
    }
 8011cb0:	bf00      	nop
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd90      	pop	{r4, r7, pc}

08011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d004      	beq.n	8011cd4 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d101      	bne.n	8011cd8 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	e000      	b.n	8011cda <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 8011cd8:	2300      	movs	r3, #0
    }
 8011cda:	4618      	mov	r0, r3
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr
	...

08011ce8 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	4a04      	ldr	r2, [pc, #16]	; (8011d04 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	601a      	str	r2, [r3, #0]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	080260c4 	.word	0x080260c4

08011d08 <_ZN8touchgfx8DrawableD0Ev>:
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ffe9 	bl	8011ce8 <_ZN8touchgfx8DrawableD1Ev>
 8011d16:	2128      	movs	r1, #40	; 0x28
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f010 fe1c 	bl	8022956 <_ZdlPvj>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	3304      	adds	r3, #4
    }
 8011d34:	4618      	mov	r0, r3
 8011d36:	370c      	adds	r7, #12
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr

08011d40 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	4608      	mov	r0, r1
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	4603      	mov	r3, r0
 8011d50:	817b      	strh	r3, [r7, #10]
 8011d52:	460b      	mov	r3, r1
 8011d54:	813b      	strh	r3, [r7, #8]
 8011d56:	4613      	mov	r3, r2
 8011d58:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	3334      	adds	r3, #52	; 0x34
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d66:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	4798      	blx	r3
        setWidth(width);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3338      	adds	r3, #56	; 0x38
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	4798      	blx	r3
        setHeight(height);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	333c      	adds	r3, #60	; 0x3c
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	68f8      	ldr	r0, [r7, #12]
 8011d90:	4798      	blx	r3
    };
 8011d92:	bf00      	nop
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}

08011d9a <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8011d9a:	b480      	push	{r7}
 8011d9c:	b083      	sub	sp, #12
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8011da8:	4618      	mov	r0, r3
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr

08011db4 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	370c      	adds	r7, #12
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dcc:	4770      	bx	lr

08011dce <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8011dce:	b480      	push	{r7}
 8011dd0:	b083      	sub	sp, #12
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	887a      	ldrh	r2, [r7, #2]
 8011dde:	809a      	strh	r2, [r3, #4]
    }
 8011de0:	bf00      	nop
 8011de2:	370c      	adds	r7, #12
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	460b      	mov	r3, r1
 8011df6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	887a      	ldrh	r2, [r7, #2]
 8011dfc:	80da      	strh	r2, [r3, #6]
    }
 8011dfe:	bf00      	nop
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr

08011e0a <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b082      	sub	sp, #8
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
 8011e12:	460b      	mov	r3, r1
 8011e14:	807b      	strh	r3, [r7, #2]
 8011e16:	4613      	mov	r3, r2
 8011e18:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	332c      	adds	r3, #44	; 0x2c
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011e26:	4611      	mov	r1, r2
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	4798      	blx	r3
        setY(y);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	3330      	adds	r3, #48	; 0x30
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011e38:	4611      	mov	r1, r2
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	4798      	blx	r3
    }
 8011e3e:	bf00      	nop
 8011e40:	3708      	adds	r7, #8
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8011e46:	b480      	push	{r7}
 8011e48:	b083      	sub	sp, #12
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
 8011e4e:	460b      	mov	r3, r1
 8011e50:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	887a      	ldrh	r2, [r7, #2]
 8011e56:	811a      	strh	r2, [r3, #8]
    }
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8011e64:	b480      	push	{r7}
 8011e66:	b083      	sub	sp, #12
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	887a      	ldrh	r2, [r7, #2]
 8011e74:	815a      	strh	r2, [r3, #10]
    }
 8011e76:	bf00      	nop
 8011e78:	370c      	adds	r7, #12
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr

08011e82 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8011e82:	b480      	push	{r7}
 8011e84:	b083      	sub	sp, #12
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	bf00      	nop
 8011e8c:	370c      	adds	r7, #12
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e94:	4770      	bx	lr

08011e96 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8011e96:	b480      	push	{r7}
 8011e98:	b083      	sub	sp, #12
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
 8011e9e:	6039      	str	r1, [r7, #0]
 8011ea0:	bf00      	nop
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
 8011eb6:	bf00      	nop
 8011eb8:	370c      	adds	r7, #12
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr

08011ec2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8011ec2:	b480      	push	{r7}
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
 8011eca:	6039      	str	r1, [r7, #0]
 8011ecc:	bf00      	nop
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	bf00      	nop
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8011efa:	4618      	mov	r0, r3
 8011efc:	370c      	adds	r7, #12
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr

08011f06 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8011f06:	b480      	push	{r7}
 8011f08:	b083      	sub	sp, #12
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8011f14:	4618      	mov	r0, r3
 8011f16:	370c      	adds	r7, #12
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	807b      	strh	r3, [r7, #2]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	3354      	adds	r3, #84	; 0x54
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	8879      	ldrh	r1, [r7, #2]
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011f40:	b292      	uxth	r2, r2
 8011f42:	1a8a      	subs	r2, r1, r2
 8011f44:	b292      	uxth	r2, r2
 8011f46:	b210      	sxth	r0, r2
 8011f48:	8839      	ldrh	r1, [r7, #0]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011f50:	b292      	uxth	r2, r2
 8011f52:	1a8a      	subs	r2, r1, r2
 8011f54:	b292      	uxth	r2, r2
 8011f56:	b212      	sxth	r2, r2
 8011f58:	4601      	mov	r1, r0
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	4798      	blx	r3
    }
 8011f5e:	bf00      	nop
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
	...

08011f68 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	4a05      	ldr	r2, [pc, #20]	; (8011f88 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7ff feb5 	bl	8011ce8 <_ZN8touchgfx8DrawableD1Ev>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	080246a8 	.word	0x080246a8

08011f8c <_ZN8touchgfx9ContainerD0Ev>:
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7ff ffe7 	bl	8011f68 <_ZN8touchgfx9ContainerD1Ev>
 8011f9a:	212c      	movs	r1, #44	; 0x2c
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f010 fcda 	bl	8022956 <_ZdlPvj>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 8011fb4:	2312      	movs	r3, #18
    }
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	370c      	adds	r7, #12
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b085      	sub	sp, #20
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
 8011fca:	6039      	str	r1, [r7, #0]
    bool found = false;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fd4:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00d      	beq.n	8011ff8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 8011fdc:	7bfb      	ldrb	r3, [r7, #15]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d10a      	bne.n	8011ff8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	bf0c      	ite	eq
 8011fea:	2301      	moveq	r3, #1
 8011fec:	2300      	movne	r3, #0
 8011fee:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 8011ff6:	e7ee      	b.n	8011fd6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3714      	adds	r7, #20
 8011ffe:	46bd      	mov	sp, r7
 8012000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012004:	4770      	bx	lr
	...

08012008 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	683a      	ldr	r2, [r7, #0]
 8012016:	429a      	cmp	r2, r3
 8012018:	d105      	bne.n	8012026 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801201a:	4b22      	ldr	r3, [pc, #136]	; (80120a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 801201c:	4a22      	ldr	r2, [pc, #136]	; (80120a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 801201e:	2123      	movs	r1, #35	; 0x23
 8012020:	4822      	ldr	r0, [pc, #136]	; (80120ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8012022:	f010 fcb5 	bl	8022990 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	695b      	ldr	r3, [r3, #20]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d005      	beq.n	801203a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 801202e:	4b20      	ldr	r3, [pc, #128]	; (80120b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 8012030:	4a1d      	ldr	r2, [pc, #116]	; (80120a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8012032:	2124      	movs	r1, #36	; 0x24
 8012034:	481d      	ldr	r0, [pc, #116]	; (80120ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8012036:	f010 fcab 	bl	8022990 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	2200      	movs	r2, #0
 8012044:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801204a:	2b00      	cmp	r3, #0
 801204c:	d103      	bne.n	8012056 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	683a      	ldr	r2, [r7, #0]
 8012052:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 8012054:	e021      	b.n	801209a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801205a:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	699b      	ldr	r3, [r3, #24]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d00d      	beq.n	8012080 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	429a      	cmp	r2, r3
 801206a:	d105      	bne.n	8012078 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 801206c:	4b11      	ldr	r3, [pc, #68]	; (80120b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 801206e:	4a0e      	ldr	r2, [pc, #56]	; (80120a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8012070:	2135      	movs	r1, #53	; 0x35
 8012072:	480e      	ldr	r0, [pc, #56]	; (80120ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8012074:	f010 fc8c 	bl	8022990 <__assert_func>
            head = head->nextSibling;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	699b      	ldr	r3, [r3, #24]
 801207c:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 801207e:	e7ed      	b.n	801205c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 8012080:	68fa      	ldr	r2, [r7, #12]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	429a      	cmp	r2, r3
 8012086:	d105      	bne.n	8012094 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 8012088:	4b0a      	ldr	r3, [pc, #40]	; (80120b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 801208a:	4a07      	ldr	r2, [pc, #28]	; (80120a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 801208c:	2138      	movs	r1, #56	; 0x38
 801208e:	4807      	ldr	r0, [pc, #28]	; (80120ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8012090:	f010 fc7e 	bl	8022990 <__assert_func>
        head->nextSibling = &d;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	619a      	str	r2, [r3, #24]
}
 801209a:	bf00      	nop
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	08023aec 	.word	0x08023aec
 80120a8:	08024730 	.word	0x08024730
 80120ac:	08023b18 	.word	0x08023b18
 80120b0:	08023b70 	.word	0x08023b70
 80120b4:	08023ba8 	.word	0x08023ba8

080120b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 80120b8:	b480      	push	{r7}
 80120ba:	b085      	sub	sp, #20
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d031      	beq.n	801212e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ce:	683a      	ldr	r2, [r7, #0]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d112      	bne.n	80120fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	2200      	movs	r2, #0
 80120d8:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	699b      	ldr	r3, [r3, #24]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d103      	bne.n	80120ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 80120e8:	e022      	b.n	8012130 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	699a      	ldr	r2, [r3, #24]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	2200      	movs	r2, #0
 80120f6:	619a      	str	r2, [r3, #24]
        return;
 80120f8:	e01a      	b.n	8012130 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120fe:	60fb      	str	r3, [r7, #12]

    while (tmp)
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d014      	beq.n	8012130 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	699b      	ldr	r3, [r3, #24]
 801210a:	683a      	ldr	r2, [r7, #0]
 801210c:	429a      	cmp	r2, r3
 801210e:	d10a      	bne.n	8012126 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	699a      	ldr	r2, [r3, #24]
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	2200      	movs	r2, #0
 801211c:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2200      	movs	r2, #0
 8012122:	619a      	str	r2, [r3, #24]
            return;
 8012124:	e004      	b.n	8012130 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	699b      	ldr	r3, [r3, #24]
 801212a:	60fb      	str	r3, [r7, #12]
    while (tmp)
 801212c:	e7e8      	b.n	8012100 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 801212e:	bf00      	nop
        }
    }
}
 8012130:	3714      	adds	r7, #20
 8012132:	46bd      	mov	sp, r7
 8012134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012138:	4770      	bx	lr

0801213a <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 801213a:	b480      	push	{r7}
 801213c:	b085      	sub	sp, #20
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
    while (firstChild)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00e      	beq.n	8012168 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801214e:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012154:	699a      	ldr	r2, [r3, #24]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2200      	movs	r2, #0
 8012164:	619a      	str	r2, [r3, #24]
    while (firstChild)
 8012166:	e7ec      	b.n	8012142 <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 8012168:	bf00      	nop
 801216a:	3714      	adds	r7, #20
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr

08012174 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012182:	bf00      	nop
 8012184:	370c      	adds	r7, #12
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr

0801218e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b088      	sub	sp, #32
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
 8012196:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	4618      	mov	r0, r3
 801219c:	f7ff fea6 	bl	8011eec <_ZNK8touchgfx8Drawable9isVisibleEv>
 80121a0:	4603      	mov	r3, r0
 80121a2:	f083 0301 	eor.w	r3, r3, #1
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d103      	bne.n	80121b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d101      	bne.n	80121b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 80121b4:	2301      	movs	r3, #1
 80121b6:	e000      	b.n	80121ba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 80121b8:	2300      	movs	r3, #0
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d14e      	bne.n	801225c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 80121be:	683a      	ldr	r2, [r7, #0]
 80121c0:	f107 0314 	add.w	r3, r7, #20
 80121c4:	6810      	ldr	r0, [r2, #0]
 80121c6:	6851      	ldr	r1, [r2, #4]
 80121c8:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ce:	61fb      	str	r3, [r7, #28]
    while (d)
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d043      	beq.n	801225e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 80121d6:	69f8      	ldr	r0, [r7, #28]
 80121d8:	f7ff fe88 	bl	8011eec <_ZNK8touchgfx8Drawable9isVisibleEv>
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d038      	beq.n	8012254 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 80121e2:	69f8      	ldr	r0, [r7, #28]
 80121e4:	f7ff fda0 	bl	8011d28 <_ZNK8touchgfx8Drawable7getRectEv>
 80121e8:	4602      	mov	r2, r0
 80121ea:	f107 030c 	add.w	r3, r7, #12
 80121ee:	f107 0114 	add.w	r1, r7, #20
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7ff fc43 	bl	8011a7e <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 80121f8:	f107 030c 	add.w	r3, r7, #12
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7ff fd5b 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012202:	4603      	mov	r3, r0
 8012204:	f083 0301 	eor.w	r3, r3, #1
 8012208:	b2db      	uxtb	r3, r3
 801220a:	2b00      	cmp	r3, #0
 801220c:	d022      	beq.n	8012254 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 801220e:	69f8      	ldr	r0, [r7, #28]
 8012210:	f7ff fdc3 	bl	8011d9a <_ZNK8touchgfx8Drawable4getXEv>
 8012214:	4603      	mov	r3, r0
 8012216:	4619      	mov	r1, r3
 8012218:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801221c:	b29a      	uxth	r2, r3
 801221e:	b28b      	uxth	r3, r1
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	b29b      	uxth	r3, r3
 8012224:	b21b      	sxth	r3, r3
 8012226:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 8012228:	69f8      	ldr	r0, [r7, #28]
 801222a:	f7ff fdc3 	bl	8011db4 <_ZNK8touchgfx8Drawable4getYEv>
 801222e:	4603      	mov	r3, r0
 8012230:	4619      	mov	r1, r3
 8012232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012236:	b29a      	uxth	r2, r3
 8012238:	b28b      	uxth	r3, r1
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	b29b      	uxth	r3, r3
 801223e:	b21b      	sxth	r3, r3
 8012240:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	3308      	adds	r3, #8
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f107 020c 	add.w	r2, r7, #12
 801224e:	4611      	mov	r1, r2
 8012250:	69f8      	ldr	r0, [r7, #28]
 8012252:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	699b      	ldr	r3, [r3, #24]
 8012258:	61fb      	str	r3, [r7, #28]
    while (d)
 801225a:	e7b9      	b.n	80121d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 801225c:	bf00      	nop
    }
}
 801225e:	3720      	adds	r7, #32
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 8012264:	b590      	push	{r4, r7, lr}
 8012266:	b087      	sub	sp, #28
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	607b      	str	r3, [r7, #4]
 801226e:	460b      	mov	r3, r1
 8012270:	817b      	strh	r3, [r7, #10]
 8012272:	4613      	mov	r3, r2
 8012274:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	4618      	mov	r0, r3
 801227a:	f7ff fe44 	bl	8011f06 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801227e:	4603      	mov	r3, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 8012284:	68fa      	ldr	r2, [r7, #12]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801228e:	617b      	str	r3, [r7, #20]
    while (d)
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d038      	beq.n	8012308 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 8012296:	6978      	ldr	r0, [r7, #20]
 8012298:	f7ff fe28 	bl	8011eec <_ZNK8touchgfx8Drawable9isVisibleEv>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00e      	beq.n	80122c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80122a2:	6978      	ldr	r0, [r7, #20]
 80122a4:	f7ff fd40 	bl	8011d28 <_ZNK8touchgfx8Drawable7getRectEv>
 80122a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80122ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80122b0:	4619      	mov	r1, r3
 80122b2:	f7ff fb83 	bl	80119bc <_ZNK8touchgfx4Rect9intersectEss>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d001      	beq.n	80122c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80122bc:	2301      	movs	r3, #1
 80122be:	e000      	b.n	80122c2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 80122c0:	2300      	movs	r3, #0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d01c      	beq.n	8012300 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 80122c6:	897c      	ldrh	r4, [r7, #10]
 80122c8:	6978      	ldr	r0, [r7, #20]
 80122ca:	f7ff fd66 	bl	8011d9a <_ZNK8touchgfx8Drawable4getXEv>
 80122ce:	4603      	mov	r3, r0
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	1ae3      	subs	r3, r4, r3
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 80122d8:	893c      	ldrh	r4, [r7, #8]
 80122da:	6978      	ldr	r0, [r7, #20]
 80122dc:	f7ff fd6a 	bl	8011db4 <_ZNK8touchgfx8Drawable4getYEv>
 80122e0:	4603      	mov	r3, r0
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	1ae3      	subs	r3, r4, r3
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	331c      	adds	r3, #28
 80122f0:	681c      	ldr	r4, [r3, #0]
 80122f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80122f6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6978      	ldr	r0, [r7, #20]
 80122fe:	47a0      	blx	r4
        }
        d = d->nextSibling;
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	699b      	ldr	r3, [r3, #24]
 8012304:	617b      	str	r3, [r7, #20]
    while (d)
 8012306:	e7c3      	b.n	8012290 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 8012308:	bf00      	nop
 801230a:	371c      	adds	r7, #28
 801230c:	46bd      	mov	sp, r7
 801230e:	bd90      	pop	{r4, r7, pc}

08012310 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b084      	sub	sp, #16
 8012314:	af02      	add	r7, sp, #8
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 801231a:	2300      	movs	r3, #0
 801231c:	9300      	str	r3, [sp, #0]
 801231e:	2300      	movs	r3, #0
 8012320:	2200      	movs	r2, #0
 8012322:	2100      	movs	r1, #0
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff faff 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
}
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	3708      	adds	r7, #8
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b086      	sub	sp, #24
 8012336:	af02      	add	r7, sp, #8
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012340:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 8012342:	2300      	movs	r3, #0
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	2300      	movs	r3, #0
 8012348:	2200      	movs	r2, #0
 801234a:	2100      	movs	r1, #0
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7ff faeb 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
    while (d)
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00b      	beq.n	8012370 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	f7ff fce5 	bl	8011d28 <_ZNK8touchgfx8Drawable7getRectEv>
 801235e:	4603      	mov	r3, r0
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff fc1c 	bl	8011ba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	699b      	ldr	r3, [r3, #24]
 801236c:	60fb      	str	r3, [r7, #12]
    while (d)
 801236e:	e7f0      	b.n	8012352 <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 8012370:	bf00      	nop
}
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b084      	sub	sp, #16
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	460b      	mov	r3, r1
 8012384:	807b      	strh	r3, [r7, #2]
 8012386:	4613      	mov	r3, r2
 8012388:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801238e:	60fb      	str	r3, [r7, #12]
    while (d)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00d      	beq.n	80123b2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	3354      	adds	r3, #84	; 0x54
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80123a2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	4798      	blx	r3
        d = d->nextSibling;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	699b      	ldr	r3, [r3, #24]
 80123ae:	60fb      	str	r3, [r7, #12]
    while (d)
 80123b0:	e7ee      	b.n	8012390 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 80123b2:	bf00      	nop
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}

080123ba <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b084      	sub	sp, #16
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
 80123c2:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123c8:	60fb      	str	r3, [r7, #12]
    while (d)
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00a      	beq.n	80123e6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	3308      	adds	r3, #8
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68f9      	ldr	r1, [r7, #12]
 80123da:	6838      	ldr	r0, [r7, #0]
 80123dc:	4798      	blx	r3
        d = d->nextSibling;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	699b      	ldr	r3, [r3, #24]
 80123e2:	60fb      	str	r3, [r7, #12]
    while (d)
 80123e4:	e7f1      	b.n	80123ca <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 80123e6:	bf00      	nop
 80123e8:	3710      	adds	r7, #16
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b086      	sub	sp, #24
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	60f8      	str	r0, [r7, #12]
 80123f6:	60b9      	str	r1, [r7, #8]
 80123f8:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d107      	bne.n	8012412 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	3364      	adds	r3, #100	; 0x64
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	6879      	ldr	r1, [r7, #4]
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	4798      	blx	r3
        return;
 8012410:	e026      	b.n	8012460 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10a      	bne.n	801242e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	615a      	str	r2, [r3, #20]
 801242c:	e018      	b.n	8012460 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012432:	617b      	str	r3, [r7, #20]
        while (tmp)
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d012      	beq.n	8012460 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 801243a:	697a      	ldr	r2, [r7, #20]
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	429a      	cmp	r2, r3
 8012440:	d10a      	bne.n	8012458 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	699a      	ldr	r2, [r3, #24]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	619a      	str	r2, [r3, #24]
                d.parent = this;
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	615a      	str	r2, [r3, #20]
                return;
 8012456:	e003      	b.n	8012460 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	699b      	ldr	r3, [r3, #24]
 801245c:	617b      	str	r3, [r7, #20]
        while (tmp)
 801245e:	e7e9      	b.n	8012434 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 8012460:	3718      	adds	r7, #24
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b088      	sub	sp, #32
 801246a:	af00      	add	r7, sp, #0
 801246c:	60f8      	str	r0, [r7, #12]
 801246e:	60b9      	str	r1, [r7, #8]
 8012470:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff fd39 	bl	8011eec <_ZNK8touchgfx8Drawable9isVisibleEv>
 801247a:	4603      	mov	r3, r0
 801247c:	f083 0301 	eor.w	r3, r3, #1
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	d14b      	bne.n	801251e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801248a:	2b00      	cmp	r3, #0
 801248c:	d049      	beq.n	8012522 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012492:	61fb      	str	r3, [r7, #28]
    while (d)
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d044      	beq.n	8012524 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 801249a:	69f8      	ldr	r0, [r7, #28]
 801249c:	f7ff fd26 	bl	8011eec <_ZNK8touchgfx8Drawable9isVisibleEv>
 80124a0:	4603      	mov	r3, r0
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d037      	beq.n	8012516 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 80124a6:	69f8      	ldr	r0, [r7, #28]
 80124a8:	f7ff fc3e 	bl	8011d28 <_ZNK8touchgfx8Drawable7getRectEv>
 80124ac:	4602      	mov	r2, r0
 80124ae:	f107 0314 	add.w	r3, r7, #20
 80124b2:	68b9      	ldr	r1, [r7, #8]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7ff fae2 	bl	8011a7e <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 80124ba:	f107 0314 	add.w	r3, r7, #20
 80124be:	4618      	mov	r0, r3
 80124c0:	f7ff fbfa 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 80124c4:	4603      	mov	r3, r0
 80124c6:	f083 0301 	eor.w	r3, r3, #1
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d022      	beq.n	8012516 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 80124d0:	69f8      	ldr	r0, [r7, #28]
 80124d2:	f7ff fc62 	bl	8011d9a <_ZNK8touchgfx8Drawable4getXEv>
 80124d6:	4603      	mov	r3, r0
 80124d8:	4619      	mov	r1, r3
 80124da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80124de:	b29a      	uxth	r2, r3
 80124e0:	b28b      	uxth	r3, r1
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	b21b      	sxth	r3, r3
 80124e8:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 80124ea:	69f8      	ldr	r0, [r7, #28]
 80124ec:	f7ff fc62 	bl	8011db4 <_ZNK8touchgfx8Drawable4getYEv>
 80124f0:	4603      	mov	r3, r0
 80124f2:	4619      	mov	r1, r3
 80124f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	b28b      	uxth	r3, r1
 80124fc:	1ad3      	subs	r3, r2, r3
 80124fe:	b29b      	uxth	r3, r3
 8012500:	b21b      	sxth	r3, r3
 8012502:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	3360      	adds	r3, #96	; 0x60
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f107 0114 	add.w	r1, r7, #20
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	69f8      	ldr	r0, [r7, #28]
 8012514:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	699b      	ldr	r3, [r3, #24]
 801251a:	61fb      	str	r3, [r7, #28]
    while (d)
 801251c:	e7ba      	b.n	8012494 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 801251e:	bf00      	nop
 8012520:	e000      	b.n	8012524 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 8012522:	bf00      	nop
    }
}
 8012524:	3720      	adds	r7, #32
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801252a:	b480      	push	{r7}
 801252c:	b083      	sub	sp, #12
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
        return rect.width;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8012538:	4618      	mov	r0, r3
 801253a:	370c      	adds	r7, #12
 801253c:	46bd      	mov	sp, r7
 801253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012542:	4770      	bx	lr

08012544 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
        return rect.height;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012552:	4618      	mov	r0, r3
 8012554:	370c      	adds	r7, #12
 8012556:	46bd      	mov	sp, r7
 8012558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255c:	4770      	bx	lr

0801255e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 801255e:	b480      	push	{r7}
 8012560:	b083      	sub	sp, #12
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
 8012566:	6039      	str	r1, [r7, #0]
        color = col;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	683a      	ldr	r2, [r7, #0]
 801256c:	601a      	str	r2, [r3, #0]
    }
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4618      	mov	r0, r3
 8012572:	370c      	adds	r7, #12
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <_ZN8touchgfx4RectC1Ev>:
    Rect()
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
        this->x = 0;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2200      	movs	r2, #0
 801258e:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	80da      	strh	r2, [r3, #6]
    }
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 80125aa:	b480      	push	{r7}
 80125ac:	b083      	sub	sp, #12
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
 80125b2:	460b      	mov	r3, r1
 80125b4:	807b      	strh	r3, [r7, #2]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	887a      	ldrh	r2, [r7, #2]
 80125ba:	801a      	strh	r2, [r3, #0]
    {
    }
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	370c      	adds	r7, #12
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr
	...

080125cc <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	6078      	str	r0, [r7, #4]
        visible(true)
 80125d4:	4a13      	ldr	r2, [pc, #76]	; (8012624 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	1d18      	adds	r0, r3, #4
 80125de:	2300      	movs	r3, #0
 80125e0:	9300      	str	r3, [sp, #0]
 80125e2:	2300      	movs	r3, #0
 80125e4:	2200      	movs	r2, #0
 80125e6:	2100      	movs	r1, #0
 80125e8:	f7ff f99e 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	330c      	adds	r3, #12
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7ff ffc3 	bl	801257c <_ZN8touchgfx4RectC1Ev>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2200      	movs	r2, #0
 80125fa:	615a      	str	r2, [r3, #20]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2200      	movs	r2, #0
 8012600:	619a      	str	r2, [r3, #24]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2200      	movs	r2, #0
 8012606:	61da      	str	r2, [r3, #28]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2200      	movs	r2, #0
 801260c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2201      	movs	r2, #1
 8012614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	4618      	mov	r0, r3
 801261c:	3708      	adds	r7, #8
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	080260c4 	.word	0x080260c4

08012628 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	460b      	mov	r3, r1
 8012632:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	78fa      	ldrb	r2, [r7, #3]
 8012638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801263c:	bf00      	nop
 801263e:	370c      	adds	r7, #12
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr

08012648 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012656:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801265e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012666:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr

08012674 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8012680:	68f8      	ldr	r0, [r7, #12]
 8012682:	f7ff ffe1 	bl	8012648 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	601a      	str	r2, [r3, #0]
    }
 8012694:	bf00      	nop
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
        firstChild(0)
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7ff ff90 	bl	80125cc <_ZN8touchgfx8DrawableC1Ev>
 80126ac:	4a05      	ldr	r2, [pc, #20]	; (80126c4 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	601a      	str	r2, [r3, #0]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2200      	movs	r2, #0
 80126b6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	080246a8 	.word	0x080246a8

080126c8 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7ff ff7a 	bl	80125cc <_ZN8touchgfx8DrawableC1Ev>
 80126d8:	4a03      	ldr	r2, [pc, #12]	; (80126e8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	601a      	str	r2, [r3, #0]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	08024774 	.word	0x08024774

080126ec <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	4a05      	ldr	r2, [pc, #20]	; (801270c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	601a      	str	r2, [r3, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7ff faf3 	bl	8011ce8 <_ZN8touchgfx8DrawableD1Ev>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4618      	mov	r0, r3
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	08024774 	.word	0x08024774

08012710 <_ZN8touchgfx6WidgetD0Ev>:
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff ffe7 	bl	80126ec <_ZN8touchgfx6WidgetD1Ev>
 801271e:	2128      	movs	r1, #40	; 0x28
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f010 f918 	bl	8022956 <_ZdlPvj>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	607b      	str	r3, [r7, #4]
 801273a:	460b      	mov	r3, r1
 801273c:	817b      	strh	r3, [r7, #10]
 801273e:	4613      	mov	r3, r2
 8012740:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff fbd1 	bl	8011eec <_ZNK8touchgfx8Drawable9isVisibleEv>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d008      	beq.n	8012762 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	4618      	mov	r0, r3
 8012754:	f7ff fbd7 	bl	8011f06 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012758:	4603      	mov	r3, r0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801275e:	2301      	movs	r3, #1
 8012760:	e000      	b.n	8012764 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012762:	2300      	movs	r3, #0
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	601a      	str	r2, [r3, #0]
        }
    }
 801276e:	bf00      	nop
 8012770:	3710      	adds	r7, #16
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}

08012776 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 8012776:	b480      	push	{r7}
 8012778:	b083      	sub	sp, #12
 801277a:	af00      	add	r7, sp, #0
 801277c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 801277e:	2301      	movs	r3, #1
    }
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff ff95 	bl	80126c8 <_ZN8touchgfx6WidgetC1Ev>
 801279e:	4a0b      	ldr	r2, [pc, #44]	; (80127cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	601a      	str	r2, [r3, #0]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	3326      	adds	r3, #38	; 0x26
 80127a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7ff fefc 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	22ff      	movs	r2, #255	; 0xff
 80127b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f001 fc4d 	bl	801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	3708      	adds	r7, #8
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	08024cbc 	.word	0x08024cbc

080127d0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	4a05      	ldr	r2, [pc, #20]	; (80127f0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	601a      	str	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7ff ff83 	bl	80126ec <_ZN8touchgfx6WidgetD1Ev>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4618      	mov	r0, r3
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	08024cbc 	.word	0x08024cbc

080127f4 <_ZN8touchgfx5ImageD0Ev>:
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7ff ffe7 	bl	80127d0 <_ZN8touchgfx5ImageD1Ev>
 8012802:	212c      	movs	r1, #44	; 0x2c
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f010 f8a6 	bl	8022956 <_ZdlPvj>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4618      	mov	r0, r3
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	4a04      	ldr	r2, [pc, #16]	; (8012830 <_ZN8touchgfx5EventD1Ev+0x1c>)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	4618      	mov	r0, r3
 8012826:	370c      	adds	r7, #12
 8012828:	46bd      	mov	sp, r7
 801282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282e:	4770      	bx	lr
 8012830:	08024808 	.word	0x08024808

08012834 <_ZN8touchgfx5EventD0Ev>:
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f7ff ffe9 	bl	8012814 <_ZN8touchgfx5EventD1Ev>
 8012842:	2104      	movs	r1, #4
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f010 f886 	bl	8022956 <_ZdlPvj>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	4a05      	ldr	r2, [pc, #20]	; (8012874 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff ffd5 	bl	8012814 <_ZN8touchgfx5EventD1Ev>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	080247f4 	.word	0x080247f4

08012878 <_ZN8touchgfx10ClickEventD0Ev>:
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff ffe7 	bl	8012854 <_ZN8touchgfx10ClickEventD1Ev>
 8012886:	210c      	movs	r1, #12
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	f010 f864 	bl	8022956 <_ZdlPvj>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4618      	mov	r0, r3
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <_ZNK8touchgfx10ClickEvent4getXEv>:
     *
     *        Gets the x coordinate of this event.
     *
     * @return The x coordinate of this event.
     */
    int16_t getX() const
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
    {
        return _x;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 80128a6:	4618      	mov	r0, r3
 80128a8:	370c      	adds	r7, #12
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr

080128b2 <_ZNK8touchgfx10ClickEvent4getYEv>:
     *
     *        Gets the y coordinate of this event.
     *
     * @return The y coordinate of this event.
     */
    int16_t getY() const
 80128b2:	b480      	push	{r7}
 80128b4:	b083      	sub	sp, #12
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	6078      	str	r0, [r7, #4]
    {
        return _y;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 80128c0:	4618      	mov	r0, r3
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 80128cc:	b480      	push	{r7}
 80128ce:	b083      	sub	sp, #12
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
    {
        return _type;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	791b      	ldrb	r3, [r3, #4]
    }
 80128d8:	4618      	mov	r0, r3
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr

080128e4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 80128e4:	b480      	push	{r7}
 80128e6:	b083      	sub	sp, #12
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 80128ec:	2300      	movs	r3, #0
    }
 80128ee:	4618      	mov	r0, r3
 80128f0:	370c      	adds	r7, #12
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr
	...

080128fc <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	4a05      	ldr	r2, [pc, #20]	; (801291c <_ZN8touchgfx9DragEventD1Ev+0x20>)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	601a      	str	r2, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	4618      	mov	r0, r3
 801290e:	f7ff ff81 	bl	8012814 <_ZN8touchgfx5EventD1Ev>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	080247e0 	.word	0x080247e0

08012920 <_ZN8touchgfx9DragEventD0Ev>:
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7ff ffe7 	bl	80128fc <_ZN8touchgfx9DragEventD1Ev>
 801292e:	2110      	movs	r1, #16
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f010 f810 	bl	8022956 <_ZdlPvj>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4618      	mov	r0, r3
 801293a:	3708      	adds	r7, #8
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <_ZNK8touchgfx9DragEvent7getNewXEv>:
     *
     *        Gets the new x coordinate (dragged to).
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
 8012940:	b480      	push	{r7}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
    {
        return _newX;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 801294e:	4618      	mov	r0, r3
 8012950:	370c      	adds	r7, #12
 8012952:	46bd      	mov	sp, r7
 8012954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012958:	4770      	bx	lr

0801295a <_ZNK8touchgfx9DragEvent7getNewYEv>:
     *
     *        Gets the new x coordinate (dragged to).
     *
     * @return The new y coordinate (dragged to).
     */
    int16_t getNewY() const
 801295a:	b480      	push	{r7}
 801295c:	b083      	sub	sp, #12
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
    {
        return _newY;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    }
 8012968:	4618      	mov	r0, r3
 801296a:	370c      	adds	r7, #12
 801296c:	46bd      	mov	sp, r7
 801296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012972:	4770      	bx	lr

08012974 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 801297c:	2301      	movs	r3, #1
    }
 801297e:	4618      	mov	r0, r3
 8012980:	370c      	adds	r7, #12
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
	...

0801298c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 801298c:	b480      	push	{r7}
 801298e:	af00      	add	r7, sp, #0
    {
        return instance;
 8012990:	4b03      	ldr	r3, [pc, #12]	; (80129a0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8012992:	681b      	ldr	r3, [r3, #0]
    }
 8012994:	4618      	mov	r0, r3
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr
 801299e:	bf00      	nop
 80129a0:	2000a290 	.word	0x2000a290

080129a4 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ff fe8a 	bl	80126c8 <_ZN8touchgfx6WidgetC1Ev>
 80129b4:	4a09      	ldr	r2, [pc, #36]	; (80129dc <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	601a      	str	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	629a      	str	r2, [r3, #40]	; 0x28
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2101      	movs	r1, #1
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7ff fe2b 	bl	8012628 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	3708      	adds	r7, #8
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	08024bd8 	.word	0x08024bd8

080129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	683a      	ldr	r2, [r7, #0]
 80129ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80129f0:	bf00      	nop
 80129f2:	370c      	adds	r7, #12
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	4a05      	ldr	r2, [pc, #20]	; (8012a1c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	601a      	str	r2, [r3, #0]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7ff fe6d 	bl	80126ec <_ZN8touchgfx6WidgetD1Ev>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	08024bd8 	.word	0x08024bd8

08012a20 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	f7ff ffe7 	bl	80129fc <_ZN8touchgfx14AbstractButtonD1Ev>
 8012a2e:	2130      	movs	r1, #48	; 0x30
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f00f ff90 	bl	8022956 <_ZdlPvj>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b082      	sub	sp, #8
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff ffaa 	bl	80129a4 <_ZN8touchgfx14AbstractButtonC1Ev>
 8012a50:	4a0c      	ldr	r2, [pc, #48]	; (8012a84 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	601a      	str	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	332e      	adds	r3, #46	; 0x2e
 8012a5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7ff fda3 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3330      	adds	r3, #48	; 0x30
 8012a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7ff fd9c 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	22ff      	movs	r2, #255	; 0xff
 8012a76:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	08024c48 	.word	0x08024c48

08012a88 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	4a05      	ldr	r2, [pc, #20]	; (8012aa8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7ff ffaf 	bl	80129fc <_ZN8touchgfx14AbstractButtonD1Ev>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	08024c48 	.word	0x08024c48

08012aac <_ZN8touchgfx6ButtonD0Ev>:
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f7ff ffe7 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 8012aba:	2134      	movs	r1, #52	; 0x34
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f00f ff4a 	bl	8022956 <_ZdlPvj>
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3708      	adds	r7, #8
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	4a04      	ldr	r2, [pc, #16]	; (8012ae8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	601a      	str	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4618      	mov	r0, r3
 8012ade:	370c      	adds	r7, #12
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	0802481c 	.word	0x0802481c

08012aec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8012aec:	b480      	push	{r7}
 8012aee:	b083      	sub	sp, #12
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
    {
    }
 8012af4:	4a04      	ldr	r2, [pc, #16]	; (8012b08 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	0802481c 	.word	0x0802481c

08012b0c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
    }
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff ffe9 	bl	8012aec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012b1a:	2104      	movs	r1, #4
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f00f ff1a 	bl	8022956 <_ZdlPvj>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8012b3a:	b29b      	uxth	r3, r3
    }
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8012b56:	b29b      	uxth	r3, r3
    }
 8012b58:	4618      	mov	r0, r3
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <_ZNK8touchgfx6Slider11getMinValueEv>:
     *
     * @return The minimum value.
     * @see setValueRange
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
 8012b64:	b480      	push	{r7}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMin;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b70:	b29b      	uxth	r3, r3
    }
 8012b72:	4618      	mov	r0, r3
 8012b74:	370c      	adds	r7, #12
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr

08012b7e <_ZNK8touchgfx6Slider11getMaxValueEv>:
     *
     * @return The maximum value.
     * @see setValueRange
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
 8012b7e:	b480      	push	{r7}
 8012b80:	b083      	sub	sp, #12
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMax;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b8a:	b29b      	uxth	r3, r3
    }
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <_ZNK8touchgfx6Slider7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SLIDER;
 8012ba0:	2318      	movs	r3, #24
    }
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
	...

08012bb0 <_ZN8touchgfx6SliderC1Ev>:

#include <touchgfx/containers/Slider.hpp>

namespace touchgfx
{
Slider::Slider() :
 8012bb0:	b590      	push	{r4, r7, lr}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
    valueRangeMax(1),
    indicatorMinPosition(0),
    indicatorMaxPosition(1),
    startValueCallback(0),
    stopValueCallback(0),
    newValueCallback(0)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7ff fd6e 	bl	801269c <_ZN8touchgfx9ContainerC1Ev>
 8012bc0:	4a42      	ldr	r2, [pc, #264]	; (8012ccc <_ZN8touchgfx6SliderC1Ev+0x11c>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2201      	movs	r2, #1
 8012bde:	639a      	str	r2, [r3, #56]	; 0x38
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8012be6:	f107 030c 	add.w	r3, r7, #12
 8012bea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7ff fcdb 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8012bf4:	f107 030c 	add.w	r3, r7, #12
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f7ff fdc6 	bl	801278c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8012c06:	f107 0310 	add.w	r3, r7, #16
 8012c0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff fccb 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8012c14:	f107 0310 	add.w	r3, r7, #16
 8012c18:	4619      	mov	r1, r3
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f7ff fdb6 	bl	801278c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8012c26:	f107 0314 	add.w	r3, r7, #20
 8012c2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7ff fcbb 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8012c34:	f107 0314 	add.w	r3, r7, #20
 8012c38:	4619      	mov	r1, r3
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	f7ff fda6 	bl	801278c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	33c0      	adds	r3, #192	; 0xc0
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff fd29 	bl	801269c <_ZN8touchgfx9ContainerC1Ev>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2201      	movs	r2, #1
 8012c56:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2200      	movs	r2, #0
 8012c66:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
{
    setTouchable(true);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2101      	movs	r1, #1
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7ff fcd6 	bl	8012628 <_ZN8touchgfx8Drawable12setTouchableEb>

    // The backgroundSelectedViewPort is a container into which the bitmap for the "filled" background
    // is placed. Containers are viewports, so the dimension of this container controls how
    // much of the filled background is visible.
    backgroundSelectedViewPort.add(backgroundSelected);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	3368      	adds	r3, #104	; 0x68
 8012c86:	4619      	mov	r1, r3
 8012c88:	4610      	mov	r0, r2
 8012c8a:	f7ff f9bd 	bl	8012008 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Container::add(background);
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	333c      	adds	r3, #60	; 0x3c
 8012c94:	4619      	mov	r1, r3
 8012c96:	4610      	mov	r0, r2
 8012c98:	f7ff f9b6 	bl	8012008 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(backgroundSelectedViewPort);
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	33c0      	adds	r3, #192	; 0xc0
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	4610      	mov	r0, r2
 8012ca6:	f7ff f9af 	bl	8012008 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(indicator);
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	3394      	adds	r3, #148	; 0x94
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	4610      	mov	r0, r2
 8012cb4:	f7ff f9a8 	bl	8012008 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    // Default value range
    setValueRange(0, 100);
 8012cb8:	2264      	movs	r2, #100	; 0x64
 8012cba:	2100      	movs	r1, #0
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 fce7 	bl	8013690 <_ZN8touchgfx6Slider13setValueRangeEii>
}
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	371c      	adds	r7, #28
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd90      	pop	{r4, r7, pc}
 8012ccc:	08024834 	.word	0x08024834

08012cd0 <_ZN8touchgfx6SliderD1Ev>:

Slider::~Slider()
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	4a0f      	ldr	r2, [pc, #60]	; (8012d18 <_ZN8touchgfx6SliderD1Ev+0x48>)
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	33c0      	adds	r3, #192	; 0xc0
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7ff f940 	bl	8011f68 <_ZN8touchgfx9ContainerD1Ev>
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	3394      	adds	r3, #148	; 0x94
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7ff fd6f 	bl	80127d0 <_ZN8touchgfx5ImageD1Ev>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	3368      	adds	r3, #104	; 0x68
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7ff fd6a 	bl	80127d0 <_ZN8touchgfx5ImageD1Ev>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	333c      	adds	r3, #60	; 0x3c
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fd65 	bl	80127d0 <_ZN8touchgfx5ImageD1Ev>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7ff f92d 	bl	8011f68 <_ZN8touchgfx9ContainerD1Ev>
{
}
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	08024834 	.word	0x08024834

08012d1c <_ZN8touchgfx6SliderD0Ev>:
Slider::~Slider()
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
}
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f7ff ffd3 	bl	8012cd0 <_ZN8touchgfx6SliderD1Ev>
 8012d2a:	21fc      	movs	r1, #252	; 0xfc
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f00f fe12 	bl	8022956 <_ZdlPvj>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:

void Slider::setBitmaps(const Bitmap& sliderBackground, const Bitmap& sliderBackgroundSelected, const Bitmap& indicatorBitmap)
{
 8012d3c:	b590      	push	{r4, r7, lr}
 8012d3e:	b085      	sub	sp, #20
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	607a      	str	r2, [r7, #4]
 8012d48:	603b      	str	r3, [r7, #0]
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 8012d4a:	68b8      	ldr	r0, [r7, #8]
 8012d4c:	f00d fd34 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012d50:	4603      	mov	r3, r0
 8012d52:	461c      	mov	r4, r3
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f00d fd2f 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	429c      	cmp	r4, r3
 8012d5e:	d10a      	bne.n	8012d76 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x3a>
 8012d60:	68b8      	ldr	r0, [r7, #8]
 8012d62:	f00d fd61 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012d66:	4603      	mov	r3, r0
 8012d68:	461c      	mov	r4, r3
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f00d fd5c 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012d70:	4603      	mov	r3, r0
 8012d72:	429c      	cmp	r4, r3
 8012d74:	d005      	beq.n	8012d82 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x46>
 8012d76:	4b1b      	ldr	r3, [pc, #108]	; (8012de4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xa8>)
 8012d78:	4a1b      	ldr	r2, [pc, #108]	; (8012de8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xac>)
 8012d7a:	2137      	movs	r1, #55	; 0x37
 8012d7c:	481b      	ldr	r0, [pc, #108]	; (8012dec <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xb0>)
 8012d7e:	f00f fe07 	bl	8022990 <__assert_func>
 8012d82:	bf00      	nop
           sliderBackground.getHeight() == sliderBackgroundSelected.getHeight() &&
           "Slider::setBitmaps - background and backgroundFilled must have same dimensions");

    background.setBitmap(sliderBackground);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	333c      	adds	r3, #60	; 0x3c
 8012d88:	68b9      	ldr	r1, [r7, #8]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f001 f966 	bl	801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelected.setBitmap(sliderBackgroundSelected);
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	3368      	adds	r3, #104	; 0x68
 8012d94:	6879      	ldr	r1, [r7, #4]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f001 f960 	bl	801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    indicator.setBitmap(indicatorBitmap);
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3394      	adds	r3, #148	; 0x94
 8012da0:	6839      	ldr	r1, [r7, #0]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f001 f95a 	bl	801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelectedViewPort.setWidth(backgroundSelected.getWidth());
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	3368      	adds	r3, #104	; 0x68
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7ff fbb9 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8012db8:	4603      	mov	r3, r0
 8012dba:	4619      	mov	r1, r3
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f7ff f842 	bl	8011e46 <_ZN8touchgfx8Drawable8setWidthEs>
    backgroundSelectedViewPort.setHeight(backgroundSelected.getHeight());
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	3368      	adds	r3, #104	; 0x68
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7ff fbb9 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f7ff f844 	bl	8011e64 <_ZN8touchgfx8Drawable9setHeightEs>
}
 8012ddc:	bf00      	nop
 8012dde:	3714      	adds	r7, #20
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd90      	pop	{r4, r7, pc}
 8012de4:	08023bdc 	.word	0x08023bdc
 8012de8:	080248f8 	.word	0x080248f8
 8012dec:	08023cbc 	.word	0x08023cbc

08012df0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
{
    setBitmaps(Bitmap(sliderBackground), Bitmap(sliderBackgroundSelected), Bitmap(indicatorBitmap));
}

void Slider::setupHorizontalSlider(uint16_t backgroundX, uint16_t backgroundY, uint16_t indicatorY, uint16_t indicatorMinX, uint16_t indicatorMaxX)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b088      	sub	sp, #32
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	4608      	mov	r0, r1
 8012dfa:	4611      	mov	r1, r2
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	4603      	mov	r3, r0
 8012e00:	817b      	strh	r3, [r7, #10]
 8012e02:	460b      	mov	r3, r1
 8012e04:	813b      	strh	r3, [r7, #8]
 8012e06:	4613      	mov	r3, r2
 8012e08:	80fb      	strh	r3, [r7, #6]
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 8012e0a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012e0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d305      	bcc.n	8012e1e <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x2e>
 8012e12:	4b4a      	ldr	r3, [pc, #296]	; (8012f3c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x14c>)
 8012e14:	4a4a      	ldr	r2, [pc, #296]	; (8012f40 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x150>)
 8012e16:	2147      	movs	r1, #71	; 0x47
 8012e18:	484a      	ldr	r0, [pc, #296]	; (8012f44 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x154>)
 8012e1a:	f00f fdb9 	bl	8022990 <__assert_func>

    sliderOrientation = HORIZONTAL;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	2200      	movs	r2, #0
 8012e22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    background.setXY(backgroundX, backgroundY);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	333c      	adds	r3, #60	; 0x3c
 8012e2a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012e2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7fe ffe9 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	33c0      	adds	r3, #192	; 0xc0
 8012e3c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012e40:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7fe ffe0 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelected.setXY(0, 0);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	3368      	adds	r3, #104	; 0x68
 8012e4e:	2200      	movs	r2, #0
 8012e50:	2100      	movs	r1, #0
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fe ffd9 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    indicator.setY(indicatorY);
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	3394      	adds	r3, #148	; 0x94
 8012e5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012e60:	4611      	mov	r1, r2
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fe ffc2 	bl	8011dec <_ZN8touchgfx8Drawable4setYEs>

    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	333c      	adds	r3, #60	; 0x3c
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7ff fb5c 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8012e72:	4603      	mov	r3, r0
 8012e74:	b29a      	uxth	r2, r3
 8012e76:	897b      	ldrh	r3, [r7, #10]
 8012e78:	4413      	add	r3, r2
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	837b      	strh	r3, [r7, #26]
    uint16_t indicatorWidth = indicatorMaxX + static_cast<uint16_t>(indicator.getWidth());
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	3394      	adds	r3, #148	; 0x94
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff fb51 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012e8e:	4413      	add	r3, r2
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	833b      	strh	r3, [r7, #24]
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 8012e94:	8b7a      	ldrh	r2, [r7, #26]
 8012e96:	8b3b      	ldrh	r3, [r7, #24]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d902      	bls.n	8012ea2 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb2>
 8012e9c:	8b7b      	ldrh	r3, [r7, #26]
 8012e9e:	b21b      	sxth	r3, r3
 8012ea0:	e001      	b.n	8012ea6 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb6>
 8012ea2:	8b3b      	ldrh	r3, [r7, #24]
 8012ea4:	b21b      	sxth	r3, r3
 8012ea6:	83fb      	strh	r3, [r7, #30]

    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	333c      	adds	r3, #60	; 0x3c
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ff fb49 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	893b      	ldrh	r3, [r7, #8]
 8012eb8:	4413      	add	r3, r2
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	82fb      	strh	r3, [r7, #22]
    uint16_t indicatorHeight = indicatorY + static_cast<uint16_t>(indicator.getHeight());
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	3394      	adds	r3, #148	; 0x94
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ff fb3e 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	88fb      	ldrh	r3, [r7, #6]
 8012ece:	4413      	add	r3, r2
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	82bb      	strh	r3, [r7, #20]
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 8012ed4:	8afa      	ldrh	r2, [r7, #22]
 8012ed6:	8abb      	ldrh	r3, [r7, #20]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d902      	bls.n	8012ee2 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf2>
 8012edc:	8afb      	ldrh	r3, [r7, #22]
 8012ede:	b21b      	sxth	r3, r3
 8012ee0:	e001      	b.n	8012ee6 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf6>
 8012ee2:	8abb      	ldrh	r3, [r7, #20]
 8012ee4:	b21b      	sxth	r3, r3
 8012ee6:	83bb      	strh	r3, [r7, #28]

    indicatorMinPosition = indicatorMinX;
 8012ee8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxX;
 8012ef2:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

    setWidth(newWidth);
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	3338      	adds	r3, #56	; 0x38
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8012f0a:	4610      	mov	r0, r2
 8012f0c:	4798      	blx	r3
    setHeight(newHeight);
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	333c      	adds	r3, #60	; 0x3c
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8012f1c:	4610      	mov	r0, r2
 8012f1e:	4798      	blx	r3

    setValue(currentValue);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	33a8      	adds	r3, #168	; 0xa8
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	68fa      	ldr	r2, [r7, #12]
 8012f2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	4798      	blx	r3
}
 8012f32:	bf00      	nop
 8012f34:	3720      	adds	r7, #32
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	08023d10 	.word	0x08023d10
 8012f40:	08024968 	.word	0x08024968
 8012f44:	08023cbc 	.word	0x08023cbc

08012f48 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:

void Slider::setupVerticalSlider(uint16_t backgroundX, uint16_t backgroundY, uint16_t indicatorX, uint16_t indicatorMinY, uint16_t indicatorMaxY)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b088      	sub	sp, #32
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	4608      	mov	r0, r1
 8012f52:	4611      	mov	r1, r2
 8012f54:	461a      	mov	r2, r3
 8012f56:	4603      	mov	r3, r0
 8012f58:	817b      	strh	r3, [r7, #10]
 8012f5a:	460b      	mov	r3, r1
 8012f5c:	813b      	strh	r3, [r7, #8]
 8012f5e:	4613      	mov	r3, r2
 8012f60:	80fb      	strh	r3, [r7, #6]
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 8012f62:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d305      	bcc.n	8012f76 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x2e>
 8012f6a:	4b46      	ldr	r3, [pc, #280]	; (8013084 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x13c>)
 8012f6c:	4a46      	ldr	r2, [pc, #280]	; (8013088 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x140>)
 8012f6e:	2163      	movs	r1, #99	; 0x63
 8012f70:	4846      	ldr	r0, [pc, #280]	; (801308c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x144>)
 8012f72:	f00f fd0d 	bl	8022990 <__assert_func>

    sliderOrientation = VERTICAL;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2201      	movs	r2, #1
 8012f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    background.setXY(backgroundX, backgroundY);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	333c      	adds	r3, #60	; 0x3c
 8012f82:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012f86:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f7fe ff3d 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	33c0      	adds	r3, #192	; 0xc0
 8012f94:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8012f98:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fe ff34 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    indicator.setX(indicatorX);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	3394      	adds	r3, #148	; 0x94
 8012fa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012faa:	4611      	mov	r1, r2
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fe ff0e 	bl	8011dce <_ZN8touchgfx8Drawable4setXEs>

    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	333c      	adds	r3, #60	; 0x3c
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff fab7 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	b29a      	uxth	r2, r3
 8012fc0:	897b      	ldrh	r3, [r7, #10]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	837b      	strh	r3, [r7, #26]
    uint16_t indicatorWidth = indicatorX + static_cast<uint16_t>(indicator.getWidth());
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	3394      	adds	r3, #148	; 0x94
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7ff faac 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	88fb      	ldrh	r3, [r7, #6]
 8012fd8:	4413      	add	r3, r2
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	833b      	strh	r3, [r7, #24]
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 8012fde:	8b7a      	ldrh	r2, [r7, #26]
 8012fe0:	8b3b      	ldrh	r3, [r7, #24]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d902      	bls.n	8012fec <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>
 8012fe6:	8b7b      	ldrh	r3, [r7, #26]
 8012fe8:	b21b      	sxth	r3, r3
 8012fea:	e001      	b.n	8012ff0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>
 8012fec:	8b3b      	ldrh	r3, [r7, #24]
 8012fee:	b21b      	sxth	r3, r3
 8012ff0:	83fb      	strh	r3, [r7, #30]

    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	333c      	adds	r3, #60	; 0x3c
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff faa4 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	893b      	ldrh	r3, [r7, #8]
 8013002:	4413      	add	r3, r2
 8013004:	b29b      	uxth	r3, r3
 8013006:	82fb      	strh	r3, [r7, #22]
    uint16_t indicatorHeight = indicatorMaxY + static_cast<uint16_t>(indicator.getHeight());
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	3394      	adds	r3, #148	; 0x94
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff fa99 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013012:	4603      	mov	r3, r0
 8013014:	b29a      	uxth	r2, r3
 8013016:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013018:	4413      	add	r3, r2
 801301a:	b29b      	uxth	r3, r3
 801301c:	82bb      	strh	r3, [r7, #20]
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 801301e:	8afa      	ldrh	r2, [r7, #22]
 8013020:	8abb      	ldrh	r3, [r7, #20]
 8013022:	429a      	cmp	r2, r3
 8013024:	d902      	bls.n	801302c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe4>
 8013026:	8afb      	ldrh	r3, [r7, #22]
 8013028:	b21b      	sxth	r3, r3
 801302a:	e001      	b.n	8013030 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe8>
 801302c:	8abb      	ldrh	r3, [r7, #20]
 801302e:	b21b      	sxth	r3, r3
 8013030:	83bb      	strh	r3, [r7, #28]

    indicatorMinPosition = indicatorMinY;
 8013032:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxY;
 801303c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

    setWidth(newWidth);
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	3338      	adds	r3, #56	; 0x38
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8013054:	4610      	mov	r0, r2
 8013056:	4798      	blx	r3
    setHeight(newHeight);
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	333c      	adds	r3, #60	; 0x3c
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8013066:	4610      	mov	r0, r2
 8013068:	4798      	blx	r3

    setValue(currentValue);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	33a8      	adds	r3, #168	; 0xa8
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	68fa      	ldr	r2, [r7, #12]
 8013074:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013076:	4611      	mov	r1, r2
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	4798      	blx	r3
}
 801307c:	bf00      	nop
 801307e:	3720      	adds	r7, #32
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}
 8013084:	08023d84 	.word	0x08023d84
 8013088:	080249d0 	.word	0x080249d0
 801308c:	08023cbc 	.word	0x08023cbc

08013090 <_ZN8touchgfx6Slider8setValueEi>:

void Slider::setValue(int value)
{
 8013090:	b590      	push	{r4, r7, lr}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
    updateIndicatorPosition(valueToPosition(value));
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	33ac      	adds	r3, #172	; 0xac
 80130a0:	681c      	ldr	r4, [r3, #0]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	33b0      	adds	r3, #176	; 0xb0
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	6839      	ldr	r1, [r7, #0]
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	4798      	blx	r3
 80130b0:	4603      	mov	r3, r0
 80130b2:	4619      	mov	r1, r3
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	47a0      	blx	r4
}
 80130b8:	bf00      	nop
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd90      	pop	{r4, r7, pc}

080130c0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:

void Slider::handleClickEvent(const ClickEvent& evt)
{
 80130c0:	b5b0      	push	{r4, r5, r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
    if ((evt.getType() == ClickEvent::PRESSED) || (evt.getType() == ClickEvent::RELEASED))
 80130ca:	6838      	ldr	r0, [r7, #0]
 80130cc:	f7ff fbfe 	bl	80128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d005      	beq.n	80130e2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x22>
 80130d6:	6838      	ldr	r0, [r7, #0]
 80130d8:	f7ff fbf8 	bl	80128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d101      	bne.n	80130e6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x26>
 80130e2:	2301      	movs	r3, #1
 80130e4:	e000      	b.n	80130e8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x28>
 80130e6:	2300      	movs	r3, #0
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f000 8088 	beq.w	80131fe <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x13e>
    {
        // Communicate the start value if a listener is registered
        if ((evt.getType() == ClickEvent::PRESSED) && (startValueCallback != 0) && startValueCallback->isValid())
 80130ee:	6838      	ldr	r0, [r7, #0]
 80130f0:	f7ff fbec 	bl	80128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d114      	bne.n	8013124 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00f      	beq.n	8013124 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	330c      	adds	r3, #12
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4610      	mov	r0, r2
 8013118:	4798      	blx	r3
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d001      	beq.n	8013124 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 8013120:	2301      	movs	r3, #1
 8013122:	e000      	b.n	8013126 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x66>
 8013124:	2300      	movs	r3, #0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00c      	beq.n	8013144 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x84>
        {
            startValueCallback->execute(*this, currentValue);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3308      	adds	r3, #8
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013140:	6879      	ldr	r1, [r7, #4]
 8013142:	4798      	blx	r3
        }

        if (sliderOrientation == HORIZONTAL)
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801314a:	2b00      	cmp	r3, #0
 801314c:	d116      	bne.n	801317c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xbc>
        {
            updateIndicatorPosition(evt.getX() - getIndicatorRadius());
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	33ac      	adds	r3, #172	; 0xac
 8013154:	681c      	ldr	r4, [r3, #0]
 8013156:	6838      	ldr	r0, [r7, #0]
 8013158:	f7ff fb9e 	bl	8012898 <_ZNK8touchgfx10ClickEvent4getXEv>
 801315c:	4603      	mov	r3, r0
 801315e:	b29d      	uxth	r5, r3
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	33b8      	adds	r3, #184	; 0xb8
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	4798      	blx	r3
 801316c:	4603      	mov	r3, r0
 801316e:	1aeb      	subs	r3, r5, r3
 8013170:	b29b      	uxth	r3, r3
 8013172:	b21b      	sxth	r3, r3
 8013174:	4619      	mov	r1, r3
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	47a0      	blx	r4
 801317a:	e015      	b.n	80131a8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xe8>
        }
        else
        {
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	33ac      	adds	r3, #172	; 0xac
 8013182:	681c      	ldr	r4, [r3, #0]
 8013184:	6838      	ldr	r0, [r7, #0]
 8013186:	f7ff fb94 	bl	80128b2 <_ZNK8touchgfx10ClickEvent4getYEv>
 801318a:	4603      	mov	r3, r0
 801318c:	b29d      	uxth	r5, r3
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	33b8      	adds	r3, #184	; 0xb8
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	4798      	blx	r3
 801319a:	4603      	mov	r3, r0
 801319c:	1aeb      	subs	r3, r5, r3
 801319e:	b29b      	uxth	r3, r3
 80131a0:	b21b      	sxth	r3, r3
 80131a2:	4619      	mov	r1, r3
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	47a0      	blx	r4
        }

        // Communicate the stop value if a listener is registered
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 80131a8:	6838      	ldr	r0, [r7, #0]
 80131aa:	f7ff fb8f 	bl	80128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d114      	bne.n	80131de <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00f      	beq.n	80131de <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	330c      	adds	r3, #12
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4610      	mov	r0, r2
 80131d2:	4798      	blx	r3
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d001      	beq.n	80131de <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 80131da:	2301      	movs	r3, #1
 80131dc:	e000      	b.n	80131e0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x120>
 80131de:	2300      	movs	r3, #0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00c      	beq.n	80131fe <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x13e>
        {
            stopValueCallback->execute(*this, currentValue);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	3308      	adds	r3, #8
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80131fa:	6879      	ldr	r1, [r7, #4]
 80131fc:	4798      	blx	r3
        }
    }
}
 80131fe:	bf00      	nop
 8013200:	3708      	adds	r7, #8
 8013202:	46bd      	mov	sp, r7
 8013204:	bdb0      	pop	{r4, r5, r7, pc}

08013206 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:

void Slider::handleDragEvent(const DragEvent& evt)
{
 8013206:	b5b0      	push	{r4, r5, r7, lr}
 8013208:	b082      	sub	sp, #8
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
 801320e:	6039      	str	r1, [r7, #0]
    if (sliderOrientation == HORIZONTAL)
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d116      	bne.n	8013248 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x42>
    {
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	33ac      	adds	r3, #172	; 0xac
 8013220:	681c      	ldr	r4, [r3, #0]
 8013222:	6838      	ldr	r0, [r7, #0]
 8013224:	f7ff fb8c 	bl	8012940 <_ZNK8touchgfx9DragEvent7getNewXEv>
 8013228:	4603      	mov	r3, r0
 801322a:	b29d      	uxth	r5, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	33b8      	adds	r3, #184	; 0xb8
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	4798      	blx	r3
 8013238:	4603      	mov	r3, r0
 801323a:	1aeb      	subs	r3, r5, r3
 801323c:	b29b      	uxth	r3, r3
 801323e:	b21b      	sxth	r3, r3
 8013240:	4619      	mov	r1, r3
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	47a0      	blx	r4
    }
    else
    {
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
    }
}
 8013246:	e015      	b.n	8013274 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x6e>
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	33ac      	adds	r3, #172	; 0xac
 801324e:	681c      	ldr	r4, [r3, #0]
 8013250:	6838      	ldr	r0, [r7, #0]
 8013252:	f7ff fb82 	bl	801295a <_ZNK8touchgfx9DragEvent7getNewYEv>
 8013256:	4603      	mov	r3, r0
 8013258:	b29d      	uxth	r5, r3
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	33b8      	adds	r3, #184	; 0xb8
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	4798      	blx	r3
 8013266:	4603      	mov	r3, r0
 8013268:	1aeb      	subs	r3, r5, r3
 801326a:	b29b      	uxth	r3, r3
 801326c:	b21b      	sxth	r3, r3
 801326e:	4619      	mov	r1, r3
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	47a0      	blx	r4
}
 8013274:	bf00      	nop
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bdb0      	pop	{r4, r5, r7, pc}

0801327c <_ZNK8touchgfx6Slider15valueToPositionEi>:

int16_t Slider::valueToPosition(int value) const
{
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
    value = MAX(MIN(valueRangeMax, value), valueRangeMin);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	429a      	cmp	r2, r3
 801328e:	da02      	bge.n	8013296 <_ZNK8touchgfx6Slider15valueToPositionEi+0x1a>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013294:	e001      	b.n	801329a <_ZNK8touchgfx6Slider15valueToPositionEi+0x1e>
 8013296:	463b      	mov	r3, r7
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801329e:	4293      	cmp	r3, r2
 80132a0:	dd0a      	ble.n	80132b8 <_ZNK8touchgfx6Slider15valueToPositionEi+0x3c>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	429a      	cmp	r2, r3
 80132aa:	da02      	bge.n	80132b2 <_ZNK8touchgfx6Slider15valueToPositionEi+0x36>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132b0:	e004      	b.n	80132bc <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>
 80132b2:	463b      	mov	r3, r7
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	e001      	b.n	80132bc <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132bc:	603b      	str	r3, [r7, #0]

    int coordinateOffset = ((value - valueRangeMin) * (getIndicatorPositionRangeSize() + 1)) / getValueRangeSize();
 80132be:	683a      	ldr	r2, [r7, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132c4:	1ad4      	subs	r4, r2, r3
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	33bc      	adds	r3, #188	; 0xbc
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	4798      	blx	r3
 80132d2:	4603      	mov	r3, r0
 80132d4:	3301      	adds	r3, #1
 80132d6:	fb03 f404 	mul.w	r4, r3, r4
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	33c0      	adds	r3, #192	; 0xc0
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	4798      	blx	r3
 80132e6:	4603      	mov	r3, r0
 80132e8:	fb94 f3f3 	sdiv	r3, r4, r3
 80132ec:	60bb      	str	r3, [r7, #8]

    int result = indicatorMinPosition + coordinateOffset;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80132f4:	461a      	mov	r2, r3
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	4413      	add	r3, r2
 80132fa:	60fb      	str	r3, [r7, #12]

    if (sliderOrientation == VERTICAL)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013302:	2b01      	cmp	r3, #1
 8013304:	d10b      	bne.n	801331e <_ZNK8touchgfx6Slider15valueToPositionEi+0xa2>
    {
        // Vertical slider grows as the position decreases so invert the coordinate
        result = indicatorMinPosition + (indicatorMaxPosition - result);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801330c:	461a      	mov	r2, r3
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8013314:	4619      	mov	r1, r3
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	1acb      	subs	r3, r1, r3
 801331a:	4413      	add	r3, r2
 801331c:	60fb      	str	r3, [r7, #12]
    }

    return result;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	b21b      	sxth	r3, r3
}
 8013322:	4618      	mov	r0, r3
 8013324:	3714      	adds	r7, #20
 8013326:	46bd      	mov	sp, r7
 8013328:	bd90      	pop	{r4, r7, pc}

0801332a <_ZNK8touchgfx6Slider15positionToValueEs>:

int Slider::positionToValue(int16_t position) const
{
 801332a:	b590      	push	{r4, r7, lr}
 801332c:	b087      	sub	sp, #28
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
 8013332:	460b      	mov	r3, r1
 8013334:	807b      	strh	r3, [r7, #2]
    int result;

    if (position == indicatorMinPosition)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801333c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013340:	429a      	cmp	r2, r3
 8013342:	d103      	bne.n	801334c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
    {
        // Ensure that min coordinate always results in min value
        result = valueRangeMin;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013348:	617b      	str	r3, [r7, #20]
 801334a:	e036      	b.n	80133ba <_ZNK8touchgfx6Slider15positionToValueEs+0x90>
    }
    else if (position == indicatorMaxPosition)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8013352:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013356:	429a      	cmp	r2, r3
 8013358:	d103      	bne.n	8013362 <_ZNK8touchgfx6Slider15positionToValueEs+0x38>
    {
        // Ensure that max coordinate always results in max value
        result = valueRangeMax;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801335e:	617b      	str	r3, [r7, #20]
 8013360:	e02b      	b.n	80133ba <_ZNK8touchgfx6Slider15positionToValueEs+0x90>
    }
    else
    {
        int rounding = getIndicatorPositionRangeSize() / 2;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	33bc      	adds	r3, #188	; 0xbc
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	4798      	blx	r3
 801336e:	4603      	mov	r3, r0
 8013370:	2b00      	cmp	r3, #0
 8013372:	da00      	bge.n	8013376 <_ZNK8touchgfx6Slider15positionToValueEs+0x4c>
 8013374:	3301      	adds	r3, #1
 8013376:	105b      	asrs	r3, r3, #1
 8013378:	613b      	str	r3, [r7, #16]
        int valueOffset = (((position - indicatorMinPosition) * getValueRangeSize()) + rounding) / getIndicatorPositionRangeSize();
 801337a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 8013384:	1a9c      	subs	r4, r3, r2
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	33c0      	adds	r3, #192	; 0xc0
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	4798      	blx	r3
 8013392:	4603      	mov	r3, r0
 8013394:	fb03 f204 	mul.w	r2, r3, r4
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	18d4      	adds	r4, r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	33bc      	adds	r3, #188	; 0xbc
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	4798      	blx	r3
 80133a8:	4603      	mov	r3, r0
 80133aa:	fb94 f3f3 	sdiv	r3, r4, r3
 80133ae:	60fb      	str	r3, [r7, #12]

        result = valueRangeMin + valueOffset;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133b4:	68fa      	ldr	r2, [r7, #12]
 80133b6:	4413      	add	r3, r2
 80133b8:	617b      	str	r3, [r7, #20]
    }

    if (sliderOrientation == VERTICAL)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	d107      	bne.n	80133d4 <_ZNK8touchgfx6Slider15positionToValueEs+0xaa>
    {
        // Vertical slider grows as the position decreases so invert the value
        result = valueRangeMin + (valueRangeMax - result);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	1acb      	subs	r3, r1, r3
 80133d0:	4413      	add	r3, r2
 80133d2:	617b      	str	r3, [r7, #20]
    }

    return result;
 80133d4:	697b      	ldr	r3, [r7, #20]
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	371c      	adds	r7, #28
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd90      	pop	{r4, r7, pc}

080133de <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:

void Slider::updateIndicatorPosition(int16_t position)
{
 80133de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133e0:	b087      	sub	sp, #28
 80133e2:	af02      	add	r7, sp, #8
 80133e4:	6078      	str	r0, [r7, #4]
 80133e6:	460b      	mov	r3, r1
 80133e8:	807b      	strh	r3, [r7, #2]
    // Cut off positions outside the slider area
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f9b3 20ec 	ldrsh.w	r2, [r3, #236]	; 0xec
 80133f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80133f4:	4293      	cmp	r3, r2
 80133f6:	bfb8      	it	lt
 80133f8:	4613      	movlt	r3, r2
 80133fa:	b21a      	sxth	r2, r3
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8013402:	429a      	cmp	r2, r3
 8013404:	da0d      	bge.n	8013422 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x44>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f9b3 20ec 	ldrsh.w	r2, [r3, #236]	; 0xec
 801340c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013410:	429a      	cmp	r2, r3
 8013412:	db03      	blt.n	801341c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x3e>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 801341a:	e005      	b.n	8013428 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x4a>
 801341c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013420:	e002      	b.n	8013428 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x4a>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8013428:	807b      	strh	r3, [r7, #2]

    if (sliderOrientation == HORIZONTAL)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013430:	2b00      	cmp	r3, #0
 8013432:	d137      	bne.n	80134a4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xc6>
    {
        indicator.moveTo(position, indicator.getY());
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f103 0494 	add.w	r4, r3, #148	; 0x94
 801343a:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	3394      	adds	r3, #148	; 0x94
 8013442:	4618      	mov	r0, r3
 8013444:	f7fe fcb6 	bl	8011db4 <_ZNK8touchgfx8Drawable4getYEv>
 8013448:	4603      	mov	r3, r0
 801344a:	461a      	mov	r2, r3
 801344c:	4629      	mov	r1, r5
 801344e:	4620      	mov	r0, r4
 8013450:	f7fe fd66 	bl	8011f20 <_ZN8touchgfx8Drawable6moveToEss>

        backgroundSelectedViewPort.invalidate();
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	33c0      	adds	r3, #192	; 0xc0
 8013458:	4618      	mov	r0, r3
 801345a:	f00c f842 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
        backgroundSelectedViewPort.setWidth((position - backgroundSelectedViewPort.getX()) + getIndicatorRadius());
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 8013464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013468:	b29c      	uxth	r4, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	33c0      	adds	r3, #192	; 0xc0
 801346e:	4618      	mov	r0, r3
 8013470:	f7fe fc93 	bl	8011d9a <_ZNK8touchgfx8Drawable4getXEv>
 8013474:	4603      	mov	r3, r0
 8013476:	b29b      	uxth	r3, r3
 8013478:	1ae3      	subs	r3, r4, r3
 801347a:	b29c      	uxth	r4, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	33b8      	adds	r3, #184	; 0xb8
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	4798      	blx	r3
 8013488:	4603      	mov	r3, r0
 801348a:	4423      	add	r3, r4
 801348c:	b29b      	uxth	r3, r3
 801348e:	b21b      	sxth	r3, r3
 8013490:	4619      	mov	r1, r3
 8013492:	4628      	mov	r0, r5
 8013494:	f7fe fcd7 	bl	8011e46 <_ZN8touchgfx8Drawable8setWidthEs>
        backgroundSelectedViewPort.invalidate();
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	33c0      	adds	r3, #192	; 0xc0
 801349c:	4618      	mov	r0, r3
 801349e:	f00c f820 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
 80134a2:	e06e      	b.n	8013582 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1a4>
    }
    else
    {
        indicator.moveTo(indicator.getX(), position);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f103 0494 	add.w	r4, r3, #148	; 0x94
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	3394      	adds	r3, #148	; 0x94
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fe fc73 	bl	8011d9a <_ZNK8touchgfx8Drawable4getXEv>
 80134b4:	4603      	mov	r3, r0
 80134b6:	4619      	mov	r1, r3
 80134b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80134bc:	461a      	mov	r2, r3
 80134be:	4620      	mov	r0, r4
 80134c0:	f7fe fd2e 	bl	8011f20 <_ZN8touchgfx8Drawable6moveToEss>

        backgroundSelectedViewPort.invalidate();
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	33c0      	adds	r3, #192	; 0xc0
 80134c8:	4618      	mov	r0, r3
 80134ca:	f00c f80a 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
        int16_t newViewPortHeight = background.getRect().bottom() - (position + getIndicatorRadius());
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	333c      	adds	r3, #60	; 0x3c
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fe fc28 	bl	8011d28 <_ZNK8touchgfx8Drawable7getRectEv>
 80134d8:	4603      	mov	r3, r0
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fe fa59 	bl	8011992 <_ZNK8touchgfx4Rect6bottomEv>
 80134e0:	4603      	mov	r3, r0
 80134e2:	b29c      	uxth	r4, r3
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	33b8      	adds	r3, #184	; 0xb8
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	4798      	blx	r3
 80134f0:	4603      	mov	r3, r0
 80134f2:	461a      	mov	r2, r3
 80134f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	4413      	add	r3, r2
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	1ae3      	subs	r3, r4, r3
 8013500:	b29b      	uxth	r3, r3
 8013502:	81fb      	strh	r3, [r7, #14]
        backgroundSelectedViewPort.setPosition(backgroundSelectedViewPort.getX(), position + getIndicatorRadius(), backgroundSelectedViewPort.getWidth(), newViewPortHeight);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	33c0      	adds	r3, #192	; 0xc0
 801350e:	4618      	mov	r0, r3
 8013510:	f7fe fc43 	bl	8011d9a <_ZNK8touchgfx8Drawable4getXEv>
 8013514:	4603      	mov	r3, r0
 8013516:	461e      	mov	r6, r3
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	33b8      	adds	r3, #184	; 0xb8
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	4798      	blx	r3
 8013524:	4603      	mov	r3, r0
 8013526:	461a      	mov	r2, r3
 8013528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801352c:	b29b      	uxth	r3, r3
 801352e:	4413      	add	r3, r2
 8013530:	b29b      	uxth	r3, r3
 8013532:	b21d      	sxth	r5, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	33c0      	adds	r3, #192	; 0xc0
 8013538:	4618      	mov	r0, r3
 801353a:	f7fe fff6 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 801353e:	4603      	mov	r3, r0
 8013540:	461a      	mov	r2, r3
 8013542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	4613      	mov	r3, r2
 801354a:	462a      	mov	r2, r5
 801354c:	4631      	mov	r1, r6
 801354e:	4620      	mov	r0, r4
 8013550:	f7fe fbf6 	bl	8011d40 <_ZN8touchgfx8Drawable11setPositionEssss>
        backgroundSelected.setY(-(backgroundSelected.getHeight() - newViewPortHeight));
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f103 0568 	add.w	r5, r3, #104	; 0x68
 801355a:	89fc      	ldrh	r4, [r7, #14]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	3368      	adds	r3, #104	; 0x68
 8013560:	4618      	mov	r0, r3
 8013562:	f7fe ffef 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013566:	4603      	mov	r3, r0
 8013568:	b29b      	uxth	r3, r3
 801356a:	1ae3      	subs	r3, r4, r3
 801356c:	b29b      	uxth	r3, r3
 801356e:	b21b      	sxth	r3, r3
 8013570:	4619      	mov	r1, r3
 8013572:	4628      	mov	r0, r5
 8013574:	f7fe fc3a 	bl	8011dec <_ZN8touchgfx8Drawable4setYEs>
        backgroundSelectedViewPort.invalidate();
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	33c0      	adds	r3, #192	; 0xc0
 801357c:	4618      	mov	r0, r3
 801357e:	f00b ffb0 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
    }

    currentValue = positionToValue(position);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	33b4      	adds	r3, #180	; 0xb4
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801358e:	4611      	mov	r1, r2
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	4798      	blx	r3
 8013594:	4602      	mov	r2, r0
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	631a      	str	r2, [r3, #48]	; 0x30

    // Communicate the new value if a listener is registered
    if ((newValueCallback != 0) && newValueCallback->isValid())
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00f      	beq.n	80135c4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e6>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	330c      	adds	r3, #12
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	4610      	mov	r0, r2
 80135b8:	4798      	blx	r3
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e6>
 80135c0:	2301      	movs	r3, #1
 80135c2:	e000      	b.n	80135c6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e8>
 80135c4:	2300      	movs	r3, #0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00c      	beq.n	80135e4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x206>
    {
        newValueCallback->execute(*this, currentValue);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3308      	adds	r3, #8
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80135e0:	6879      	ldr	r1, [r7, #4]
 80135e2:	4798      	blx	r3
    }
}
 80135e4:	bf00      	nop
 80135e6:	3714      	adds	r7, #20
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080135ec <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:

uint16_t Slider::getIndicatorRadius() const
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
    uint16_t result;

    if (sliderOrientation == HORIZONTAL)
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d10c      	bne.n	8013618 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x2c>
    {
        result = indicator.getWidth() / 2;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	3394      	adds	r3, #148	; 0x94
 8013602:	4618      	mov	r0, r3
 8013604:	f7fe ff91 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8013608:	4603      	mov	r3, r0
 801360a:	2b00      	cmp	r3, #0
 801360c:	da00      	bge.n	8013610 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x24>
 801360e:	3301      	adds	r3, #1
 8013610:	105b      	asrs	r3, r3, #1
 8013612:	b21b      	sxth	r3, r3
 8013614:	81fb      	strh	r3, [r7, #14]
 8013616:	e00b      	b.n	8013630 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x44>
    }
    else
    {
        result = indicator.getHeight() / 2;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	3394      	adds	r3, #148	; 0x94
 801361c:	4618      	mov	r0, r3
 801361e:	f7fe ff91 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8013622:	4603      	mov	r3, r0
 8013624:	2b00      	cmp	r3, #0
 8013626:	da00      	bge.n	801362a <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x3e>
 8013628:	3301      	adds	r3, #1
 801362a:	105b      	asrs	r3, r3, #1
 801362c:	b21b      	sxth	r3, r3
 801362e:	81fb      	strh	r3, [r7, #14]
    }

    return result;
 8013630:	89fb      	ldrh	r3, [r7, #14]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3710      	adds	r7, #16
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
	...

0801363c <_ZN8touchgfx6Slider13setValueRangeEiii>:

void Slider::setValueRange(int minValue, int maxValue, int newValue)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	607a      	str	r2, [r7, #4]
 8013648:	603b      	str	r3, [r7, #0]
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	429a      	cmp	r2, r3
 8013650:	db06      	blt.n	8013660 <_ZN8touchgfx6Slider13setValueRangeEiii+0x24>
 8013652:	4b0c      	ldr	r3, [pc, #48]	; (8013684 <_ZN8touchgfx6Slider13setValueRangeEiii+0x48>)
 8013654:	4a0c      	ldr	r2, [pc, #48]	; (8013688 <_ZN8touchgfx6Slider13setValueRangeEiii+0x4c>)
 8013656:	f240 110b 	movw	r1, #267	; 0x10b
 801365a:	480c      	ldr	r0, [pc, #48]	; (801368c <_ZN8touchgfx6Slider13setValueRangeEiii+0x50>)
 801365c:	f00f f998 	bl	8022990 <__assert_func>

    valueRangeMin = minValue;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	68ba      	ldr	r2, [r7, #8]
 8013664:	635a      	str	r2, [r3, #52]	; 0x34
    valueRangeMax = maxValue;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	639a      	str	r2, [r3, #56]	; 0x38

    setValue(newValue);
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	33a8      	adds	r3, #168	; 0xa8
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	6839      	ldr	r1, [r7, #0]
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	4798      	blx	r3
}
 801367a:	bf00      	nop
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	08023df8 	.word	0x08023df8
 8013688:	08024a38 	.word	0x08024a38
 801368c:	08023cbc 	.word	0x08023cbc

08013690 <_ZN8touchgfx6Slider13setValueRangeEii>:

void Slider::setValueRange(int minValue, int maxValue)
{
 8013690:	b590      	push	{r4, r7, lr}
 8013692:	b087      	sub	sp, #28
 8013694:	af00      	add	r7, sp, #0
 8013696:	60f8      	str	r0, [r7, #12]
 8013698:	60b9      	str	r1, [r7, #8]
 801369a:	607a      	str	r2, [r7, #4]
    int newValue = currentValue;
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136a0:	617b      	str	r3, [r7, #20]

    if (currentValue < minValue)
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136a6:	68ba      	ldr	r2, [r7, #8]
 80136a8:	429a      	cmp	r2, r3
 80136aa:	dd02      	ble.n	80136b2 <_ZN8touchgfx6Slider13setValueRangeEii+0x22>
    {
        newValue = minValue;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	617b      	str	r3, [r7, #20]
 80136b0:	e006      	b.n	80136c0 <_ZN8touchgfx6Slider13setValueRangeEii+0x30>
    }
    else if (currentValue > maxValue)
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	da01      	bge.n	80136c0 <_ZN8touchgfx6Slider13setValueRangeEii+0x30>
    {
        newValue = maxValue;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	617b      	str	r3, [r7, #20]
    }

    setValueRange(minValue, maxValue, newValue);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	3398      	adds	r3, #152	; 0x98
 80136c6:	681c      	ldr	r4, [r3, #0]
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	68b9      	ldr	r1, [r7, #8]
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	47a0      	blx	r4
}
 80136d2:	bf00      	nop
 80136d4:	371c      	adds	r7, #28
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd90      	pop	{r4, r7, pc}

080136da <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:

int Slider::getIndicatorPositionRangeSize() const
{
 80136da:	b480      	push	{r7}
 80136dc:	b083      	sub	sp, #12
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]
    return indicatorMaxPosition - indicatorMinPosition;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 80136e8:	461a      	mov	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 80136f0:	1ad3      	subs	r3, r2, r3
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	370c      	adds	r7, #12
 80136f6:	46bd      	mov	sp, r7
 80136f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fc:	4770      	bx	lr

080136fe <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:

int Slider::getValueRangeSize() const
{
 80136fe:	b480      	push	{r7}
 8013700:	b083      	sub	sp, #12
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
    return valueRangeMax - valueRangeMin;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801370e:	1ad3      	subs	r3, r2, r3
}
 8013710:	4618      	mov	r0, r3
 8013712:	370c      	adds	r7, #12
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8013724:	4b07      	ldr	r3, [pc, #28]	; (8013744 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d105      	bne.n	8013738 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 801372c:	4b06      	ldr	r3, [pc, #24]	; (8013748 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 801372e:	4a07      	ldr	r2, [pc, #28]	; (801374c <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8013730:	2195      	movs	r1, #149	; 0x95
 8013732:	4807      	ldr	r0, [pc, #28]	; (8013750 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8013734:	f00f f92c 	bl	8022990 <__assert_func>
        return bitmapId;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	881b      	ldrh	r3, [r3, #0]
    }
 801373c:	4618      	mov	r0, r3
 801373e:	3708      	adds	r7, #8
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}
 8013744:	2000a328 	.word	0x2000a328
 8013748:	08023e50 	.word	0x08023e50
 801374c:	08024a74 	.word	0x08024a74
 8013750:	08023e8c 	.word	0x08023e8c

08013754 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8013754:	b480      	push	{r7}
 8013756:	b083      	sub	sp, #12
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8013770:	b480      	push	{r7}
 8013772:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 8013774:	4b03      	ldr	r3, [pc, #12]	; (8013784 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	689b      	ldr	r3, [r3, #8]
    }
 801377a:	4618      	mov	r0, r3
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr
 8013784:	2000a290 	.word	0x2000a290

08013788 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	70fb      	strb	r3, [r7, #3]
        {
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	3308      	adds	r3, #8
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff ffda 	bl	8013754 <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	601a      	str	r2, [r3, #0]
            this->color = color;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	78fa      	ldrb	r2, [r7, #3]
 80137b0:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	7e3a      	ldrb	r2, [r7, #24]
 80137b6:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80137be:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80137c6:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	8bba      	ldrh	r2, [r7, #28]
 80137cc:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80137d4:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80137dc:	741a      	strb	r2, [r3, #16]
        }
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	4618      	mov	r0, r3
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <_ZNK8touchgfx5Texts7getTextEt>:
     *
     * @param id The id of the text to lookup.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	460b      	mov	r3, r1
 80137f2:	807b      	strh	r3, [r7, #2]
    {
        return currentLanguagePtr[id];
 80137f4:	4b05      	ldr	r3, [pc, #20]	; (801380c <_ZNK8touchgfx5Texts7getTextEt+0x24>)
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	887b      	ldrh	r3, [r7, #2]
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4413      	add	r3, r2
 80137fe:	681b      	ldr	r3, [r3, #0]
    }
 8013800:	4618      	mov	r0, r3
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr
 801380c:	20008f44 	.word	0x20008f44

08013810 <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	460b      	mov	r3, r1
 801381a:	807b      	strh	r3, [r7, #2]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	887a      	ldrh	r2, [r7, #2]
 8013820:	801a      	strh	r2, [r3, #0]
    {
    }
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	4618      	mov	r0, r3
 8013826:	370c      	adds	r7, #12
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 8013830:	b480      	push	{r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	881b      	ldrh	r3, [r3, #0]
 801383c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013840:	4293      	cmp	r3, r2
 8013842:	bf14      	ite	ne
 8013844:	2301      	movne	r3, #1
 8013846:	2300      	moveq	r3, #0
 8013848:	b2db      	uxtb	r3, r3
    }
 801384a:	4618      	mov	r0, r3
 801384c:	370c      	adds	r7, #12
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr
	...

08013858 <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f85b 	bl	801391c <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8013866:	4b06      	ldr	r3, [pc, #24]	; (8013880 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	881b      	ldrh	r3, [r3, #0]
 801386e:	4619      	mov	r1, r3
 8013870:	4610      	mov	r0, r2
 8013872:	f7ff ffb9 	bl	80137e8 <_ZNK8touchgfx5Texts7getTextEt>
 8013876:	4603      	mov	r3, r0
    }
 8013878:	4618      	mov	r0, r3
 801387a:	3708      	adds	r7, #8
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}
 8013880:	2000a2fc 	.word	0x2000a2fc

08013884 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f000 f845 	bl	801391c <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8013892:	4b08      	ldr	r3, [pc, #32]	; (80138b4 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8013894:	681a      	ldr	r2, [r3, #0]
 8013896:	4b08      	ldr	r3, [pc, #32]	; (80138b8 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8013898:	6819      	ldr	r1, [r3, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	881b      	ldrh	r3, [r3, #0]
 801389e:	005b      	lsls	r3, r3, #1
 80138a0:	440b      	add	r3, r1
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4413      	add	r3, r2
 80138a8:	681b      	ldr	r3, [r3, #0]
    }
 80138aa:	4618      	mov	r0, r3
 80138ac:	3708      	adds	r7, #8
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	2000a2f8 	.word	0x2000a2f8
 80138b8:	2000a2f0 	.word	0x2000a2f0

080138bc <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f000 f829 	bl	801391c <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 80138ca:	4b07      	ldr	r3, [pc, #28]	; (80138e8 <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	881b      	ldrh	r3, [r3, #0]
 80138d2:	005b      	lsls	r3, r3, #1
 80138d4:	4413      	add	r3, r2
 80138d6:	785b      	ldrb	r3, [r3, #1]
 80138d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80138dc:	b2db      	uxtb	r3, r3
    }
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	2000a2f0 	.word	0x2000a2f0

080138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f000 f811 	bl	801391c <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 80138fa:	4b07      	ldr	r3, [pc, #28]	; (8013918 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	881b      	ldrh	r3, [r3, #0]
 8013902:	005b      	lsls	r3, r3, #1
 8013904:	4413      	add	r3, r2
 8013906:	785b      	ldrb	r3, [r3, #1]
 8013908:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801390c:	b2db      	uxtb	r3, r3
    }
 801390e:	4618      	mov	r0, r3
 8013910:	3708      	adds	r7, #8
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	2000a2f0 	.word	0x2000a2f0

0801391c <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013924:	4b0c      	ldr	r3, [pc, #48]	; (8013958 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d105      	bne.n	8013938 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 801392c:	4b0b      	ldr	r3, [pc, #44]	; (801395c <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 801392e:	4a0c      	ldr	r2, [pc, #48]	; (8013960 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8013930:	21cf      	movs	r1, #207	; 0xcf
 8013932:	480c      	ldr	r0, [pc, #48]	; (8013964 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8013934:	f00f f82c 	bl	8022990 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	881a      	ldrh	r2, [r3, #0]
 801393c:	4b0a      	ldr	r3, [pc, #40]	; (8013968 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801393e:	881b      	ldrh	r3, [r3, #0]
 8013940:	429a      	cmp	r2, r3
 8013942:	d305      	bcc.n	8013950 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8013944:	4b09      	ldr	r3, [pc, #36]	; (801396c <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8013946:	4a06      	ldr	r2, [pc, #24]	; (8013960 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8013948:	21d0      	movs	r1, #208	; 0xd0
 801394a:	4806      	ldr	r0, [pc, #24]	; (8013964 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 801394c:	f00f f820 	bl	8022990 <__assert_func>
    }
 8013950:	bf00      	nop
 8013952:	3708      	adds	r7, #8
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	2000a2f0 	.word	0x2000a2f0
 801395c:	08024004 	.word	0x08024004
 8013960:	08024ba0 	.word	0x08024ba0
 8013964:	08024048 	.word	0x08024048
 8013968:	2000a2f4 	.word	0x2000a2f4
 801396c:	08024098 	.word	0x08024098

08013970 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	4618      	mov	r0, r3
 801397c:	f7fe fea4 	bl	80126c8 <_ZN8touchgfx6WidgetC1Ev>
 8013980:	4a13      	ldr	r2, [pc, #76]	; (80139d0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	601a      	str	r2, [r3, #0]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	3326      	adds	r3, #38	; 0x26
 801398a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801398e:	4618      	mov	r0, r3
 8013990:	f7ff ff3e 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	3328      	adds	r3, #40	; 0x28
 8013998:	2100      	movs	r1, #0
 801399a:	4618      	mov	r0, r3
 801399c:	f7fe fddf 	bl	801255e <_ZN8touchgfx9colortypeC1Em>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2200      	movs	r2, #0
 80139a4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	22ff      	movs	r2, #255	; 0xff
 80139aa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2200      	movs	r2, #0
 80139b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2200      	movs	r2, #0
 80139c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    { }
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}
 80139d0:	08024d2c 	.word	0x08024d2c

080139d4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af02      	add	r7, sp, #8
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80139de:	2300      	movs	r3, #0
 80139e0:	9300      	str	r3, [sp, #0]
 80139e2:	2300      	movs	r3, #0
 80139e4:	2200      	movs	r2, #0
 80139e6:	2100      	movs	r1, #0
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7fd ff9d 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
    }
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}

080139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80139f6:	b480      	push	{r7}
 80139f8:	b083      	sub	sp, #12
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	683a      	ldr	r2, [r7, #0]
 8013a04:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013a06:	bf00      	nop
 8013a08:	370c      	adds	r7, #12
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr

08013a12 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8013a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a14:	b085      	sub	sp, #20
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
 8013a1a:	460b      	mov	r3, r1
 8013a1c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8013a1e:	687e      	ldr	r6, [r7, #4]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	3330      	adds	r3, #48	; 0x30
 8013a26:	681c      	ldr	r4, [r3, #0]
 8013a28:	887d      	ldrh	r5, [r7, #2]
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f000 f836 	bl	8013a9c <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8013a30:	4603      	mov	r3, r0
 8013a32:	81bb      	strh	r3, [r7, #12]
 8013a34:	f107 030c 	add.w	r3, r7, #12
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7ff ff23 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	6813      	ldr	r3, [r2, #0]
 8013a42:	332c      	adds	r3, #44	; 0x2c
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	4610      	mov	r0, r2
 8013a48:	4798      	blx	r3
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	1aeb      	subs	r3, r5, r3
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	b21b      	sxth	r3, r3
 8013a52:	4619      	mov	r1, r3
 8013a54:	4630      	mov	r0, r6
 8013a56:	47a0      	blx	r4
    }
 8013a58:	bf00      	nop
 8013a5a:	3714      	adds	r7, #20
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a60 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	460b      	mov	r3, r1
 8013a6a:	807b      	strh	r3, [r7, #2]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	332c      	adds	r3, #44	; 0x2c
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8013a7e:	4610      	mov	r0, r2
 8013a80:	4798      	blx	r3
        setBaselineY(baselineY);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	3364      	adds	r3, #100	; 0x64
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013a8e:	4611      	mov	r1, r2
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	4798      	blx	r3
    }
 8013a94:	bf00      	nop
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8013a9c:	b480      	push	{r7}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	370c      	adds	r7, #12
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <_ZNK8touchgfx8TextArea7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREA;
 8013abc:	230d      	movs	r3, #13
    }
 8013abe:	4618      	mov	r0, r3
 8013ac0:	370c      	adds	r7, #12
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac8:	4770      	bx	lr
	...

08013acc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	4a05      	ldr	r2, [pc, #20]	; (8013aec <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	601a      	str	r2, [r3, #0]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fe fe05 	bl	80126ec <_ZN8touchgfx6WidgetD1Ev>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3708      	adds	r7, #8
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	08024d2c 	.word	0x08024d2c

08013af0 <_ZN8touchgfx8TextAreaD0Ev>:
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f7ff ffe7 	bl	8013acc <_ZN8touchgfx8TextAreaD1Ev>
 8013afe:	2134      	movs	r1, #52	; 0x34
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f00e ff28 	bl	8022956 <_ZdlPvj>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3708      	adds	r7, #8
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase() : TextArea() {  }
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7ff ff28 	bl	8013970 <_ZN8touchgfx8TextAreaC1Ev>
 8013b20:	4a03      	ldr	r2, [pc, #12]	; (8013b30 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	601a      	str	r2, [r3, #0]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3708      	adds	r7, #8
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	08024b2c 	.word	0x08024b2c

08013b34 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	4a05      	ldr	r2, [pc, #20]	; (8013b54 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	601a      	str	r2, [r3, #0]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7ff ffc1 	bl	8013acc <_ZN8touchgfx8TextAreaD1Ev>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	08024b2c 	.word	0x08024b2c

08013b58 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f7ff ffe7 	bl	8013b34 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8013b66:	2134      	movs	r1, #52	; 0x34
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f00e fef4 	bl	8022956 <_ZdlPvj>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	4618      	mov	r0, r3
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ff ffc4 	bl	8013b10 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8013b88:	4a05      	ldr	r2, [pc, #20]	; (8013ba0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	601a      	str	r2, [r3, #0]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2200      	movs	r2, #0
 8013b92:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	4618      	mov	r0, r3
 8013b98:	3708      	adds	r7, #8
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	08024ab0 	.word	0x08024ab0

08013ba4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 8013ba4:	b590      	push	{r4, r7, lr}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	3326      	adds	r3, #38	; 0x26
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7ff fe3d 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d00e      	beq.n	8013bda <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x36>
 8013bbc:	687c      	ldr	r4, [r7, #4]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	3326      	adds	r3, #38	; 0x26
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7ff fe48 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 8013bc8:	4601      	mov	r1, r0
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bce:	461a      	mov	r2, r3
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f000 fc59 	bl	8014488 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	e000      	b.n	8013bdc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
 8013bda:	2300      	movs	r3, #0
    }
 8013bdc:	4618      	mov	r0, r3
 8013bde:	370c      	adds	r7, #12
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd90      	pop	{r4, r7, pc}

08013be4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
     *        Draws TextArea and its text if a Font is set and the TypedText associated with
     *        the TextArea is valid.
     *
     * @param area The invalidated area.
     */
    virtual void draw(const Rect& area) const
 8013be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013be6:	b093      	sub	sp, #76	; 0x4c
 8013be8:	af06      	add	r7, sp, #24
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
    {
        if (typedText.hasValidId())
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	3326      	adds	r3, #38	; 0x26
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7ff fe1c 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d052      	beq.n	8013ca4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
        {
            const Font* fontToDraw = typedText.getFont();
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	3326      	adds	r3, #38	; 0x26
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7ff fe3e 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 8013c08:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (fontToDraw != 0)
 8013c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d049      	beq.n	8013ca4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
            {
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	3326      	adds	r3, #38	; 0x26
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7ff fe4e 	bl	80138bc <_ZNK8touchgfx9TypedText12getAlignmentEv>
 8013c20:	4603      	mov	r3, r0
 8013c22:	607b      	str	r3, [r7, #4]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	3326      	adds	r3, #38	; 0x26
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7ff fe5a 	bl	80138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	603b      	str	r3, [r7, #0]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	f107 0010 	add.w	r0, r7, #16
 8013c4e:	9105      	str	r1, [sp, #20]
 8013c50:	9304      	str	r3, [sp, #16]
 8013c52:	6839      	ldr	r1, [r7, #0]
 8013c54:	9103      	str	r1, [sp, #12]
 8013c56:	9502      	str	r5, [sp, #8]
 8013c58:	9401      	str	r4, [sp, #4]
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	4633      	mov	r3, r6
 8013c60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8013c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c64:	f7ff fd90 	bl	8013788 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 8013c68:	f7ff fd82 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c74:	4611      	mov	r1, r2
 8013c76:	4618      	mov	r0, r3
 8013c78:	f00b fcdd 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	3326      	adds	r3, #38	; 0x26
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7ff fde9 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c86:	4602      	mov	r2, r0
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c8c:	9302      	str	r3, [sp, #8]
 8013c8e:	9201      	str	r2, [sp, #4]
 8013c90:	f107 0310 	add.w	r3, r7, #16
 8013c94:	9300      	str	r3, [sp, #0]
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013c9c:	ca06      	ldmia	r2, {r1, r2}
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	f00a fab6 	bl	801e210 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
            }
        }
    }
 8013ca4:	bf00      	nop
 8013ca6:	3734      	adds	r7, #52	; 0x34
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	683a      	ldr	r2, [r7, #0]
 8013cba:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8013cbc:	bf00      	nop
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 8013cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	3326      	adds	r3, #38	; 0x26
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff fdab 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d01c      	beq.n	8013d1a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x52>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	3326      	adds	r3, #38	; 0x26
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7ff fdcd 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 8013cea:	4605      	mov	r5, r0
 8013cec:	682b      	ldr	r3, [r5, #0]
 8013cee:	331c      	adds	r3, #28
 8013cf0:	681c      	ldr	r4, [r3, #0]
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	3326      	adds	r3, #38	; 0x26
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff fdf8 	bl	80138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	461e      	mov	r6, r3
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	3326      	adds	r3, #38	; 0x26
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7ff fda7 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d10:	4631      	mov	r1, r6
 8013d12:	4628      	mov	r0, r5
 8013d14:	47a0      	blx	r4
 8013d16:	4603      	mov	r3, r0
 8013d18:	e000      	b.n	8013d1c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x54>
 8013d1a:	2300      	movs	r3, #0
    }
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	370c      	adds	r7, #12
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d24 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
 8013d2c:	230e      	movs	r3, #14
    }
 8013d2e:	4618      	mov	r0, r3
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr
	...

08013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	4a05      	ldr	r2, [pc, #20]	; (8013d5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	601a      	str	r2, [r3, #0]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7ff fef1 	bl	8013b34 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4618      	mov	r0, r3
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	08024ab0 	.word	0x08024ab0

08013d60 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b082      	sub	sp, #8
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f7ff ffe7 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013d6e:	2138      	movs	r1, #56	; 0x38
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f00e fdf0 	bl	8022956 <_ZdlPvj>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3708      	adds	r7, #8
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8013d8e:	4618      	mov	r0, r3
 8013d90:	370c      	adds	r7, #12
 8013d92:	46bd      	mov	sp, r7
 8013d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d98:	4770      	bx	lr

08013d9a <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 8013d9a:	b480      	push	{r7}
 8013d9c:	b083      	sub	sp, #12
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 8013da2:	2302      	movs	r3, #2
    }
 8013da4:	4618      	mov	r0, r3
 8013da6:	370c      	adds	r7, #12
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013dc0:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 8013dc2:	6838      	ldr	r0, [r7, #0]
 8013dc4:	f7fe fd82 	bl	80128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	bf0c      	ite	eq
 8013dce:	2301      	moveq	r3, #1
 8013dd0:	2300      	movne	r3, #0
 8013dd2:	b2da      	uxtb	r2, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d005      	beq.n	8013df0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 8013de4:	7bfb      	ldrb	r3, [r7, #15]
 8013de6:	f083 0301 	eor.w	r3, r3, #1
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d10a      	bne.n	8013e06 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013df6:	f083 0301 	eor.w	r3, r3, #1
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d009      	beq.n	8013e14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 8013e00:	7bfb      	ldrb	r3, [r7, #15]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d006      	beq.n	8013e14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	3314      	adds	r3, #20
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4610      	mov	r0, r2
 8013e12:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8013e14:	7bfb      	ldrb	r3, [r7, #15]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00b      	beq.n	8013e32 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 8013e1a:	6838      	ldr	r0, [r7, #0]
 8013e1c:	f7fe fd56 	bl	80128cc <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8013e20:	4603      	mov	r3, r0
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d105      	bne.n	8013e32 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d001      	beq.n	8013e32 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e000      	b.n	8013e34 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 8013e32:	2300      	movs	r3, #0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d015      	beq.n	8013e64 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	330c      	adds	r3, #12
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	4610      	mov	r0, r2
 8013e48:	4798      	blx	r3
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d009      	beq.n	8013e64 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	3308      	adds	r3, #8
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	6879      	ldr	r1, [r7, #4]
 8013e60:	4610      	mov	r0, r2
 8013e62:	4798      	blx	r3
        }
    }
}
 8013e64:	bf00      	nop
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 8013e74:	2305      	movs	r3, #5
    }
 8013e76:	4618      	mov	r0, r3
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr

08013e82 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/widgets/Button.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 8013e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e84:	b08d      	sub	sp, #52	; 0x34
 8013e86:	af04      	add	r7, sp, #16
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d002      	beq.n	8013e9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	3330      	adds	r3, #48	; 0x30
 8013e9a:	e001      	b.n	8013ea0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	332e      	adds	r3, #46	; 0x2e
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 8013ea4:	f107 031c 	add.w	r3, r7, #28
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f00c fc85 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	b21c      	sxth	r4, r3
 8013eb2:	f107 031c 	add.w	r3, r7, #28
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f00c fcb6 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	b21b      	sxth	r3, r3
 8013ec0:	f107 0014 	add.w	r0, r7, #20
 8013ec4:	9300      	str	r3, [sp, #0]
 8013ec6:	4623      	mov	r3, r4
 8013ec8:	2200      	movs	r2, #0
 8013eca:	2100      	movs	r1, #0
 8013ecc:	f7fd fd2c 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 8013ed0:	f107 0314 	add.w	r3, r7, #20
 8013ed4:	6839      	ldr	r1, [r7, #0]
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fd fde6 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 8013edc:	f107 031c 	add.w	r3, r7, #28
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7ff fc1b 	bl	801371c <_ZNK8touchgfx6Bitmap5getIdEv>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	461a      	mov	r2, r3
 8013eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d00c      	beq.n	8013f0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8013ef2:	f107 0314 	add.w	r3, r7, #20
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fd fede 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013efc:	4603      	mov	r3, r0
 8013efe:	f083 0301 	eor.w	r3, r3, #1
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d001      	beq.n	8013f0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8013f08:	2301      	movs	r3, #1
 8013f0a:	e000      	b.n	8013f0e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d024      	beq.n	8013f5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 8013f12:	f107 030c 	add.w	r3, r7, #12
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe fb30 	bl	801257c <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	3324      	adds	r3, #36	; 0x24
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f107 010c 	add.w	r1, r7, #12
 8013f2a:	4610      	mov	r0, r2
 8013f2c:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 8013f2e:	f7ff fc1f 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 8013f32:	6803      	ldr	r3, [r0, #0]
 8013f34:	330c      	adds	r3, #12
 8013f36:	681c      	ldr	r4, [r3, #0]
 8013f38:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 8013f3c:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013f46:	f107 011c 	add.w	r1, r7, #28
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	9202      	str	r2, [sp, #8]
 8013f4e:	9301      	str	r3, [sp, #4]
 8013f50:	f107 0314 	add.w	r3, r7, #20
 8013f54:	9300      	str	r3, [sp, #0]
 8013f56:	4633      	mov	r3, r6
 8013f58:	462a      	mov	r2, r5
 8013f5a:	47a0      	blx	r4
    }
}
 8013f5c:	bf00      	nop
 8013f5e:	3724      	adds	r7, #36	; 0x24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 8013f64:	b590      	push	{r4, r7, lr}
 8013f66:	b085      	sub	sp, #20
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	60b9      	str	r1, [r7, #8]
 8013f6e:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	68ba      	ldr	r2, [r7, #8]
 8013f74:	8812      	ldrh	r2, [r2, #0]
 8013f76:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	687a      	ldr	r2, [r7, #4]
 8013f7c:	8812      	ldrh	r2, [r2, #0]
 8013f7e:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 8013f80:	68fc      	ldr	r4, [r7, #12]
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	3330      	adds	r3, #48	; 0x30
 8013f86:	4618      	mov	r0, r3
 8013f88:	f00c fc16 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	b21b      	sxth	r3, r3
 8013f90:	4619      	mov	r1, r3
 8013f92:	4620      	mov	r0, r4
 8013f94:	f7fd ff57 	bl	8011e46 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 8013f98:	68fc      	ldr	r4, [r7, #12]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	3330      	adds	r3, #48	; 0x30
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f00c fc42 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	b21b      	sxth	r3, r3
 8013fa8:	4619      	mov	r1, r3
 8013faa:	4620      	mov	r0, r4
 8013fac:	f7fd ff5a 	bl	8011e64 <_ZN8touchgfx8Drawable9setHeightEs>
}
 8013fb0:	bf00      	nop
 8013fb2:	3714      	adds	r7, #20
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd90      	pop	{r4, r7, pc}

08013fb8 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af02      	add	r7, sp, #8
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013fc8:	2bff      	cmp	r3, #255	; 0xff
 8013fca:	d008      	beq.n	8013fde <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8013fcc:	2300      	movs	r3, #0
 8013fce:	9300      	str	r3, [sp, #0]
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f7fd fca6 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
 8013fdc:	e015      	b.n	801400a <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d008      	beq.n	8013ffa <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f00c fc50 	bl	8020898 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013ff8:	e007      	b.n	801400a <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	4611      	mov	r1, r2
 8014004:	4618      	mov	r0, r3
 8014006:	f00c fc47 	bl	8020898 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 8014012:	b590      	push	{r4, r7, lr}
 8014014:	b085      	sub	sp, #20
 8014016:	af02      	add	r7, sp, #8
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 801401c:	6838      	ldr	r0, [r7, #0]
 801401e:	f00c fbcb 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014022:	4603      	mov	r3, r0
 8014024:	b21c      	sxth	r4, r3
 8014026:	6838      	ldr	r0, [r7, #0]
 8014028:	f00c fbfe 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801402c:	4603      	mov	r3, r0
 801402e:	b21b      	sxth	r3, r3
 8014030:	9300      	str	r3, [sp, #0]
 8014032:	4623      	mov	r3, r4
 8014034:	2200      	movs	r2, #0
 8014036:	2100      	movs	r1, #0
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7fd fc75 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
    }
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	370c      	adds	r7, #12
 8014042:	46bd      	mov	sp, r7
 8014044:	bd90      	pop	{r4, r7, pc}

08014046 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 8014046:	b480      	push	{r7}
 8014048:	b083      	sub	sp, #12
 801404a:	af00      	add	r7, sp, #0
 801404c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 801404e:	2308      	movs	r3, #8
    }
 8014050:	4618      	mov	r0, r3
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/Image.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 801405c:	b5b0      	push	{r4, r5, r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	683a      	ldr	r2, [r7, #0]
 801406a:	8812      	ldrh	r2, [r2, #0]
 801406c:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 801406e:	687d      	ldr	r5, [r7, #4]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	3338      	adds	r3, #56	; 0x38
 8014076:	681c      	ldr	r4, [r3, #0]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	3326      	adds	r3, #38	; 0x26
 801407c:	4618      	mov	r0, r3
 801407e:	f00c fb9b 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014082:	4603      	mov	r3, r0
 8014084:	b21b      	sxth	r3, r3
 8014086:	4619      	mov	r1, r3
 8014088:	4628      	mov	r0, r5
 801408a:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 801408c:	687d      	ldr	r5, [r7, #4]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	333c      	adds	r3, #60	; 0x3c
 8014094:	681c      	ldr	r4, [r3, #0]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	3326      	adds	r3, #38	; 0x26
 801409a:	4618      	mov	r0, r3
 801409c:	f00c fbc4 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80140a0:	4603      	mov	r3, r0
 80140a2:	b21b      	sxth	r3, r3
 80140a4:	4619      	mov	r1, r3
 80140a6:	4628      	mov	r0, r5
 80140a8:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	3326      	adds	r3, #38	; 0x26
 80140ae:	4618      	mov	r0, r3
 80140b0:	f00c fc4a 	bl	8020948 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80140b4:	4603      	mov	r3, r0
 80140b6:	461a      	mov	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80140be:	bf00      	nop
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bdb0      	pop	{r4, r5, r7, pc}

080140c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 80140c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140c8:	b08d      	sub	sp, #52	; 0x34
 80140ca:	af04      	add	r7, sp, #16
 80140cc:	6078      	str	r0, [r7, #4]
 80140ce:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 80140d0:	f107 0310 	add.w	r3, r7, #16
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7fe fa51 	bl	801257c <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	3324      	adds	r3, #36	; 0x24
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f107 0110 	add.w	r1, r7, #16
 80140e8:	4610      	mov	r0, r2
 80140ea:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80140f2:	f107 0318 	add.w	r3, r7, #24
 80140f6:	4611      	mov	r1, r2
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff ff8a 	bl	8014012 <_ZNK8touchgfx6Bitmap7getRectEv>
 80140fe:	f107 0308 	add.w	r3, r7, #8
 8014102:	f107 0118 	add.w	r1, r7, #24
 8014106:	683a      	ldr	r2, [r7, #0]
 8014108:	4618      	mov	r0, r3
 801410a:	f7fd fcb8 	bl	8011a7e <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 801410e:	f107 0308 	add.w	r3, r7, #8
 8014112:	4618      	mov	r0, r3
 8014114:	f7fd fdd0 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014118:	4603      	mov	r3, r0
 801411a:	f083 0301 	eor.w	r3, r3, #1
 801411e:	b2db      	uxtb	r3, r3
 8014120:	2b00      	cmp	r3, #0
 8014122:	d017      	beq.n	8014154 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 8014124:	f7ff fb24 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 8014128:	6803      	ldr	r3, [r0, #0]
 801412a:	330c      	adds	r3, #12
 801412c:	681c      	ldr	r4, [r3, #0]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014134:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 8014138:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014142:	2201      	movs	r2, #1
 8014144:	9202      	str	r2, [sp, #8]
 8014146:	9301      	str	r3, [sp, #4]
 8014148:	f107 0308 	add.w	r3, r7, #8
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	4633      	mov	r3, r6
 8014150:	462a      	mov	r2, r5
 8014152:	47a0      	blx	r4
    }
}
 8014154:	bf00      	nop
 8014156:	3724      	adds	r7, #36	; 0x24
 8014158:	46bd      	mov	sp, r7
 801415a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801415c <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af02      	add	r7, sp, #8
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801416c:	2bff      	cmp	r3, #255	; 0xff
 801416e:	d008      	beq.n	8014182 <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8014170:	2300      	movs	r3, #0
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	2300      	movs	r3, #0
 8014176:	2200      	movs	r2, #0
 8014178:	2100      	movs	r1, #0
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7fd fbd4 	bl	8011928 <_ZN8touchgfx4RectC1Essss>
 8014180:	e007      	b.n	8014192 <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	4611      	mov	r1, r2
 801418c:	4618      	mov	r0, r3
 801418e:	f00c fb83 	bl	8020898 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	3708      	adds	r7, #8
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <_ZN8touchgfx8TextArea13getTextHeightEv>:
#include <touchgfx/widgets/TextArea.hpp>

namespace touchgfx
{
int16_t TextArea::getTextHeight()
{
 801419a:	b580      	push	{r7, lr}
 801419c:	b082      	sub	sp, #8
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	3326      	adds	r3, #38	; 0x26
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ff fb42 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80141ac:	4603      	mov	r3, r0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d00b      	beq.n	80141ca <_ZN8touchgfx8TextArea13getTextHeightEv+0x30>
    {
        return getTextHeightInternal(typedText.getText());
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	3326      	adds	r3, #38	; 0x26
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7ff fb4e 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 80141bc:	4603      	mov	r3, r0
 80141be:	4619      	mov	r1, r3
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f000 f906 	bl	80143d2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 80141c6:	4603      	mov	r3, r0
 80141c8:	e000      	b.n	80141cc <_ZN8touchgfx8TextArea13getTextHeightEv+0x32>
    }
    else
    {
        return 0;
 80141ca:	2300      	movs	r3, #0
    }
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3708      	adds	r7, #8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}

080141d4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:

uint16_t TextArea::getTextWidth() const
{
 80141d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141d6:	b083      	sub	sp, #12
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText()) : 0;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	3326      	adds	r3, #38	; 0x26
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7ff fb25 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80141e6:	4603      	mov	r3, r0
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d01b      	beq.n	8014224 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x50>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	3326      	adds	r3, #38	; 0x26
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ff fb47 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 80141f6:	4605      	mov	r5, r0
 80141f8:	682b      	ldr	r3, [r5, #0]
 80141fa:	331c      	adds	r3, #28
 80141fc:	681c      	ldr	r4, [r3, #0]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	3326      	adds	r3, #38	; 0x26
 8014202:	4618      	mov	r0, r3
 8014204:	f7ff fb72 	bl	80138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8014208:	4603      	mov	r3, r0
 801420a:	461e      	mov	r6, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	3326      	adds	r3, #38	; 0x26
 8014210:	4618      	mov	r0, r3
 8014212:	f7ff fb21 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 8014216:	4603      	mov	r3, r0
 8014218:	461a      	mov	r2, r3
 801421a:	4631      	mov	r1, r6
 801421c:	4628      	mov	r0, r5
 801421e:	47a0      	blx	r4
 8014220:	4603      	mov	r3, r0
 8014222:	e000      	b.n	8014226 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x52>
 8014224:	2300      	movs	r3, #0
}
 8014226:	4618      	mov	r0, r3
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801422e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:

void TextArea::draw(const Rect& area) const
{
 801422e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014230:	b093      	sub	sp, #76	; 0x4c
 8014232:	af06      	add	r7, sp, #24
 8014234:	60f8      	str	r0, [r7, #12]
 8014236:	60b9      	str	r1, [r7, #8]
    if (typedText.hasValidId())
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	3326      	adds	r3, #38	; 0x26
 801423c:	4618      	mov	r0, r3
 801423e:	f7ff faf7 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8014242:	4603      	mov	r3, r0
 8014244:	2b00      	cmp	r3, #0
 8014246:	d04f      	beq.n	80142e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
    {
        const Font* fontToDraw = typedText.getFont();
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	3326      	adds	r3, #38	; 0x26
 801424c:	4618      	mov	r0, r3
 801424e:	f7ff fb19 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 8014252:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (fontToDraw != 0)
 8014254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014256:	2b00      	cmp	r3, #0
 8014258:	d046      	beq.n	80142e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
        {
            LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	3326      	adds	r3, #38	; 0x26
 8014264:	4618      	mov	r0, r3
 8014266:	f7ff fb29 	bl	80138bc <_ZNK8touchgfx9TypedText12getAlignmentEv>
 801426a:	4603      	mov	r3, r0
 801426c:	607b      	str	r3, [r7, #4]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	3326      	adds	r3, #38	; 0x26
 801427c:	4618      	mov	r0, r3
 801427e:	f7ff fb35 	bl	80138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8014282:	4603      	mov	r3, r0
 8014284:	603b      	str	r3, [r7, #0]
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801428c:	68fa      	ldr	r2, [r7, #12]
 801428e:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	f107 0010 	add.w	r0, r7, #16
 8014298:	9105      	str	r1, [sp, #20]
 801429a:	9304      	str	r3, [sp, #16]
 801429c:	6839      	ldr	r1, [r7, #0]
 801429e:	9103      	str	r1, [sp, #12]
 80142a0:	9502      	str	r5, [sp, #8]
 80142a2:	9401      	str	r4, [sp, #4]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	9300      	str	r3, [sp, #0]
 80142a8:	4633      	mov	r3, r6
 80142aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80142ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142ae:	f7ff fa6b 	bl	8013788 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText());
 80142b2:	f7ff fa5d 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 80142b6:	4604      	mov	r4, r0
 80142b8:	68fa      	ldr	r2, [r7, #12]
 80142ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142be:	4611      	mov	r1, r2
 80142c0:	4618      	mov	r0, r3
 80142c2:	f00b f9b8 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	3326      	adds	r3, #38	; 0x26
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7ff fac4 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 80142d0:	4603      	mov	r3, r0
 80142d2:	9301      	str	r3, [sp, #4]
 80142d4:	f107 0310 	add.w	r3, r7, #16
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80142e0:	ca06      	ldmia	r2, {r1, r2}
 80142e2:	4620      	mov	r0, r4
 80142e4:	f009 ff94 	bl	801e210 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 80142e8:	bf00      	nop
 80142ea:	3734      	adds	r7, #52	; 0x34
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:

void TextArea::setTypedText(TypedText t)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	8039      	strh	r1, [r7, #0]
    typedText = t;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	883a      	ldrh	r2, [r7, #0]
 80142fe:	84da      	strh	r2, [r3, #38]	; 0x26
    // If this TextArea does not yet have a width and height,
    // just assign the smallest possible size to fit current text.
    if ((getWidth() == 0) && (getHeight() == 0))
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	4618      	mov	r0, r3
 8014304:	f7fe f911 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d108      	bne.n	8014320 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	f7fe f917 	bl	8012544 <_ZNK8touchgfx8Drawable9getHeightEv>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 801431c:	2301      	movs	r3, #1
 801431e:	e000      	b.n	8014322 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x32>
 8014320:	2300      	movs	r3, #0
 8014322:	2b00      	cmp	r3, #0
 8014324:	d002      	beq.n	801432c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x3c>
    {
        resizeToCurrentText();
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 f804 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    }
}
 801432c:	bf00      	nop
 801432e:	3708      	adds	r7, #8
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}

08014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:

void TextArea::resizeToCurrentText()
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	3326      	adds	r3, #38	; 0x26
 8014340:	4618      	mov	r0, r3
 8014342:	f7ff fa75 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8014346:	4603      	mov	r3, r0
 8014348:	2b00      	cmp	r3, #0
 801434a:	d03e      	beq.n	80143ca <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
    {
        uint16_t w = getTextWidth();
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	3370      	adds	r3, #112	; 0x70
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	4798      	blx	r3
 8014358:	4603      	mov	r3, r0
 801435a:	81fb      	strh	r3, [r7, #14]
        uint16_t h = getTextHeight();
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	336c      	adds	r3, #108	; 0x6c
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	4798      	blx	r3
 8014368:	4603      	mov	r3, r0
 801436a:	81bb      	strh	r3, [r7, #12]
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014372:	2b00      	cmp	r3, #0
 8014374:	d004      	beq.n	8014380 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4c>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801437c:	2b02      	cmp	r3, #2
 801437e:	d112      	bne.n	80143a6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x72>
        {
            setWidth(w);
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	3338      	adds	r3, #56	; 0x38
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 801438e:	4610      	mov	r0, r2
 8014390:	4798      	blx	r3
            setHeight(h);
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	333c      	adds	r3, #60	; 0x3c
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80143a0:	4610      	mov	r0, r2
 80143a2:	4798      	blx	r3
        {
            setWidth(h);
            setHeight(w);
        }
    }
}
 80143a4:	e011      	b.n	80143ca <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
            setWidth(h);
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	3338      	adds	r3, #56	; 0x38
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80143b4:	4610      	mov	r0, r2
 80143b6:	4798      	blx	r3
            setHeight(w);
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	333c      	adds	r3, #60	; 0x3c
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80143c6:	4610      	mov	r0, r2
 80143c8:	4798      	blx	r3
}
 80143ca:	bf00      	nop
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
        }
    }
}

int16_t TextArea::getTextHeightInternal(const Unicode::UnicodeChar* format, ...) const
{
 80143d2:	b40e      	push	{r1, r2, r3}
 80143d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143d6:	b08e      	sub	sp, #56	; 0x38
 80143d8:	af02      	add	r7, sp, #8
 80143da:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, format);
 80143dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80143e0:	623b      	str	r3, [r7, #32]
    TextProvider textProvider;
 80143e2:	f107 0308 	add.w	r3, r7, #8
 80143e6:	4618      	mov	r0, r3
 80143e8:	f00b fdb4 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 80143ec:	f107 0308 	add.w	r3, r7, #8
 80143f0:	6a3a      	ldr	r2, [r7, #32]
 80143f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80143f4:	4618      	mov	r0, r3
 80143f6:	f00b fdb6 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 80143fa:	f7ff f9b9 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	3326      	adds	r3, #38	; 0x26
 8014408:	4618      	mov	r0, r3
 801440a:	f7ff fa6f 	bl	80138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801440e:	4603      	mov	r3, r0
 8014410:	461d      	mov	r5, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	3326      	adds	r3, #38	; 0x26
 8014416:	4618      	mov	r0, r3
 8014418:	f7ff fa34 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 801441c:	4606      	mov	r6, r0
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	f7fe f882 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 8014426:	4603      	mov	r3, r0
 8014428:	f107 0008 	add.w	r0, r7, #8
 801442c:	9300      	str	r3, [sp, #0]
 801442e:	4633      	mov	r3, r6
 8014430:	462a      	mov	r2, r5
 8014432:	4621      	mov	r1, r4
 8014434:	f00a f911 	bl	801e65a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014438:	4603      	mov	r3, r0
 801443a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	3326      	adds	r3, #38	; 0x26
 8014440:	4618      	mov	r0, r3
 8014442:	f7ff fa1f 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 8014446:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8014448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	3330      	adds	r3, #48	; 0x30
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014452:	4798      	blx	r3
 8014454:	4603      	mov	r3, r0
 8014456:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8014458:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801445a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801445c:	fb12 f303 	smulbb	r3, r2, r3
 8014460:	b29a      	uxth	r2, r3
 8014462:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8014466:	3b01      	subs	r3, #1
 8014468:	b299      	uxth	r1, r3
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801446e:	fb11 f303 	smulbb	r3, r1, r3
 8014472:	b29b      	uxth	r3, r3
 8014474:	4413      	add	r3, r2
 8014476:	b29b      	uxth	r3, r3
 8014478:	b21b      	sxth	r3, r3
}
 801447a:	4618      	mov	r0, r3
 801447c:	3730      	adds	r7, #48	; 0x30
 801447e:	46bd      	mov	sp, r7
 8014480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014484:	b003      	add	sp, #12
 8014486:	4770      	bx	lr

08014488 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8014488:	b40e      	push	{r1, r2, r3}
 801448a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801448c:	b08e      	sub	sp, #56	; 0x38
 801448e:	af02      	add	r7, sp, #8
 8014490:	6078      	str	r0, [r7, #4]
    if (!typedText.hasValidId())
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	3326      	adds	r3, #38	; 0x26
 8014496:	4618      	mov	r0, r3
 8014498:	f7ff f9ca 	bl	8013830 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 801449c:	4603      	mov	r3, r0
 801449e:	f083 0301 	eor.w	r3, r3, #1
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d001      	beq.n	80144ac <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x24>
    {
        return 0;
 80144a8:	2300      	movs	r3, #0
 80144aa:	e04e      	b.n	801454a <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xc2>
    }

    va_list pArg;
    va_start(pArg, format);
 80144ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80144b0:	623b      	str	r3, [r7, #32]

    TextProvider textProvider;
 80144b2:	f107 0308 	add.w	r3, r7, #8
 80144b6:	4618      	mov	r0, r3
 80144b8:	f00b fd4c 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 80144bc:	f107 0308 	add.w	r3, r7, #8
 80144c0:	6a3a      	ldr	r2, [r7, #32]
 80144c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80144c4:	4618      	mov	r0, r3
 80144c6:	f00b fd4e 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 80144ca:	f7ff f951 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	3326      	adds	r3, #38	; 0x26
 80144d8:	4618      	mov	r0, r3
 80144da:	f7ff fa07 	bl	80138ec <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80144de:	4603      	mov	r3, r0
 80144e0:	461d      	mov	r5, r3
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	3326      	adds	r3, #38	; 0x26
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7ff f9cc 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 80144ec:	4606      	mov	r6, r0
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7fe f81a 	bl	801252a <_ZNK8touchgfx8Drawable8getWidthEv>
 80144f6:	4603      	mov	r3, r0
 80144f8:	f107 0008 	add.w	r0, r7, #8
 80144fc:	9300      	str	r3, [sp, #0]
 80144fe:	4633      	mov	r3, r6
 8014500:	462a      	mov	r2, r5
 8014502:	4621      	mov	r1, r4
 8014504:	f00a f8a9 	bl	801e65a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8014508:	4603      	mov	r3, r0
 801450a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	3326      	adds	r3, #38	; 0x26
 8014510:	4618      	mov	r0, r3
 8014512:	f7ff f9b7 	bl	8013884 <_ZNK8touchgfx9TypedText7getFontEv>
 8014516:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8014518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3330      	adds	r3, #48	; 0x30
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014522:	4798      	blx	r3
 8014524:	4603      	mov	r3, r0
 8014526:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8014528:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801452a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801452c:	fb12 f303 	smulbb	r3, r2, r3
 8014530:	b29a      	uxth	r2, r3
 8014532:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8014536:	3b01      	subs	r3, #1
 8014538:	b299      	uxth	r1, r3
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801453e:	fb11 f303 	smulbb	r3, r1, r3
 8014542:	b29b      	uxth	r3, r3
 8014544:	4413      	add	r3, r2
 8014546:	b29b      	uxth	r3, r3
 8014548:	b21b      	sxth	r3, r3
}
 801454a:	4618      	mov	r0, r3
 801454c:	3730      	adds	r7, #48	; 0x30
 801454e:	46bd      	mov	sp, r7
 8014550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014554:	b003      	add	sp, #12
 8014556:	4770      	bx	lr

08014558 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8014558:	b480      	push	{r7}
 801455a:	b083      	sub	sp, #12
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	b29b      	uxth	r3, r3
    }
 8014566:	4618      	mov	r0, r3
 8014568:	370c      	adds	r7, #12
 801456a:	46bd      	mov	sp, r7
 801456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014570:	4770      	bx	lr

08014572 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8014572:	b480      	push	{r7}
 8014574:	b083      	sub	sp, #12
 8014576:	af00      	add	r7, sp, #0
 8014578:	6078      	str	r0, [r7, #4]
        return color;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
    }
 801457e:	4618      	mov	r0, r3
 8014580:	370c      	adds	r7, #12
 8014582:	46bd      	mov	sp, r7
 8014584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014588:	4770      	bx	lr
	...

0801458c <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 801458c:	b580      	push	{r7, lr}
 801458e:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8014590:	2203      	movs	r2, #3
 8014592:	2100      	movs	r1, #0
 8014594:	2001      	movs	r0, #1
 8014596:	f000 fc55 	bl	8014e44 <xQueueGenericCreate>
 801459a:	4602      	mov	r2, r0
 801459c:	4b0b      	ldr	r3, [pc, #44]	; (80145cc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801459e:	601a      	str	r2, [r3, #0]
 80145a0:	4b0a      	ldr	r3, [pc, #40]	; (80145cc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d006      	beq.n	80145b6 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80145a8:	4b08      	ldr	r3, [pc, #32]	; (80145cc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80145aa:	6818      	ldr	r0, [r3, #0]
 80145ac:	2300      	movs	r3, #0
 80145ae:	2200      	movs	r2, #0
 80145b0:	2100      	movs	r1, #0
 80145b2:	f000 fca5 	bl	8014f00 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 80145b6:	2200      	movs	r2, #0
 80145b8:	2101      	movs	r1, #1
 80145ba:	2001      	movs	r0, #1
 80145bc:	f000 fc42 	bl	8014e44 <xQueueGenericCreate>
 80145c0:	4602      	mov	r2, r0
 80145c2:	4b03      	ldr	r3, [pc, #12]	; (80145d0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80145c4:	601a      	str	r2, [r3, #0]
}
 80145c6:	bf00      	nop
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	20000ce4 	.word	0x20000ce4
 80145d0:	20000ce8 	.word	0x20000ce8

080145d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80145d8:	4b04      	ldr	r3, [pc, #16]	; (80145ec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f04f 31ff 	mov.w	r1, #4294967295
 80145e0:	4618      	mov	r0, r3
 80145e2:	f000 ff9f 	bl	8015524 <xQueueSemaphoreTake>
}
 80145e6:	bf00      	nop
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	20000ce4 	.word	0x20000ce4

080145f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80145f4:	4b04      	ldr	r3, [pc, #16]	; (8014608 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80145f6:	6818      	ldr	r0, [r3, #0]
 80145f8:	2300      	movs	r3, #0
 80145fa:	2200      	movs	r2, #0
 80145fc:	2100      	movs	r1, #0
 80145fe:	f000 fc7f 	bl	8014f00 <xQueueGenericSend>
}
 8014602:	bf00      	nop
 8014604:	bd80      	pop	{r7, pc}
 8014606:	bf00      	nop
 8014608:	20000ce4 	.word	0x20000ce4

0801460c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801460c:	b580      	push	{r7, lr}
 801460e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8014610:	4b03      	ldr	r3, [pc, #12]	; (8014620 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	2100      	movs	r1, #0
 8014616:	4618      	mov	r0, r3
 8014618:	f000 ff84 	bl	8015524 <xQueueSemaphoreTake>
}
 801461c:	bf00      	nop
 801461e:	bd80      	pop	{r7, pc}
 8014620:	20000ce4 	.word	0x20000ce4

08014624 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 801462a:	2300      	movs	r3, #0
 801462c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 801462e:	4b0b      	ldr	r3, [pc, #44]	; (801465c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	1d3a      	adds	r2, r7, #4
 8014634:	4611      	mov	r1, r2
 8014636:	4618      	mov	r0, r3
 8014638:	f000 fe00 	bl	801523c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d007      	beq.n	8014652 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8014642:	4b07      	ldr	r3, [pc, #28]	; (8014660 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8014644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014648:	601a      	str	r2, [r3, #0]
 801464a:	f3bf 8f4f 	dsb	sy
 801464e:	f3bf 8f6f 	isb	sy
}
 8014652:	bf00      	nop
 8014654:	3708      	adds	r7, #8
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	20000ce4 	.word	0x20000ce4
 8014660:	e000ed04 	.word	0xe000ed04

08014664 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
    if (vsync_q)
 801466a:	4b0e      	ldr	r3, [pc, #56]	; (80146a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d013      	beq.n	801469a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8014672:	2300      	movs	r3, #0
 8014674:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8014676:	4b0b      	ldr	r3, [pc, #44]	; (80146a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8014678:	6818      	ldr	r0, [r3, #0]
 801467a:	1d3a      	adds	r2, r7, #4
 801467c:	2300      	movs	r3, #0
 801467e:	490a      	ldr	r1, [pc, #40]	; (80146a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8014680:	f000 fd40 	bl	8015104 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d007      	beq.n	801469a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801468a:	4b08      	ldr	r3, [pc, #32]	; (80146ac <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 801468c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014690:	601a      	str	r2, [r3, #0]
 8014692:	f3bf 8f4f 	dsb	sy
 8014696:	f3bf 8f6f 	isb	sy
    }
}
 801469a:	bf00      	nop
 801469c:	3708      	adds	r7, #8
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	20000ce8 	.word	0x20000ce8
 80146a8:	2000015c 	.word	0x2000015c
 80146ac:	e000ed04 	.word	0xe000ed04

080146b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 80146b4:	4b08      	ldr	r3, [pc, #32]	; (80146d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2200      	movs	r2, #0
 80146ba:	4908      	ldr	r1, [pc, #32]	; (80146dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80146bc:	4618      	mov	r0, r3
 80146be:	f000 fe4f 	bl	8015360 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80146c2:	4b05      	ldr	r3, [pc, #20]	; (80146d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f04f 32ff 	mov.w	r2, #4294967295
 80146ca:	4904      	ldr	r1, [pc, #16]	; (80146dc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80146cc:	4618      	mov	r0, r3
 80146ce:	f000 fe47 	bl	8015360 <xQueueReceive>
}
 80146d2:	bf00      	nop
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	20000ce8 	.word	0x20000ce8
 80146dc:	2000015c 	.word	0x2000015c

080146e0 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d007      	beq.n	80146fe <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 80146ee:	f7fe f94d 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 80146f2:	4603      	mov	r3, r0
 80146f4:	2101      	movs	r1, #1
 80146f6:	4618      	mov	r0, r3
 80146f8:	f009 fbae 	bl	801de58 <_ZN8touchgfx3HAL12setMCUActiveEb>
 80146fc:	e006      	b.n	801470c <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 80146fe:	f7fe f945 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 8014702:	4603      	mov	r3, r0
 8014704:	2100      	movs	r1, #0
 8014706:	4618      	mov	r0, r3
 8014708:	f009 fba6 	bl	801de58 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 801470c:	2301      	movs	r3, #1
}
 801470e:	4618      	mov	r0, r3
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 8014716:	b480      	push	{r7}
 8014718:	b083      	sub	sp, #12
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
 801471e:	6039      	str	r1, [r7, #0]
        while (1);
 8014720:	e7fe      	b.n	8014720 <vApplicationStackOverflowHook+0xa>

08014722 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 8014722:	b480      	push	{r7}
 8014724:	b083      	sub	sp, #12
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
 801472a:	6039      	str	r1, [r7, #0]
        while (1);
 801472c:	e7fe      	b.n	801472c <vApplicationMallocFailedHook+0xa>
	...

08014730 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 8014730:	b580      	push	{r7, lr}
 8014732:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8014734:	4902      	ldr	r1, [pc, #8]	; (8014740 <vApplicationIdleHook+0x10>)
 8014736:	2000      	movs	r0, #0
 8014738:	f001 fd6c 	bl	8016214 <vTaskSetApplicationTaskTag>
    }
 801473c:	bf00      	nop
 801473e:	bd80      	pop	{r7, pc}
 8014740:	080146e1 	.word	0x080146e1

08014744 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014744:	b480      	push	{r7}
 8014746:	b087      	sub	sp, #28
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	4613      	mov	r3, r2
 8014750:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014752:	2301      	movs	r3, #1
 8014754:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014756:	2300      	movs	r3, #0
 8014758:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801475a:	4b1f      	ldr	r3, [pc, #124]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 801475c:	7a5b      	ldrb	r3, [r3, #9]
 801475e:	b2db      	uxtb	r3, r3
 8014760:	2b00      	cmp	r3, #0
 8014762:	d131      	bne.n	80147c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014764:	4b1c      	ldr	r3, [pc, #112]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 8014766:	7a5b      	ldrb	r3, [r3, #9]
 8014768:	b2db      	uxtb	r3, r3
 801476a:	461a      	mov	r2, r3
 801476c:	4b1a      	ldr	r3, [pc, #104]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 801476e:	2100      	movs	r1, #0
 8014770:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014772:	4b19      	ldr	r3, [pc, #100]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 8014774:	7a5b      	ldrb	r3, [r3, #9]
 8014776:	b2db      	uxtb	r3, r3
 8014778:	4a17      	ldr	r2, [pc, #92]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 801477a:	009b      	lsls	r3, r3, #2
 801477c:	4413      	add	r3, r2
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014782:	4b15      	ldr	r3, [pc, #84]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 8014784:	7a5b      	ldrb	r3, [r3, #9]
 8014786:	b2db      	uxtb	r3, r3
 8014788:	461a      	mov	r2, r3
 801478a:	4b13      	ldr	r3, [pc, #76]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 801478c:	4413      	add	r3, r2
 801478e:	79fa      	ldrb	r2, [r7, #7]
 8014790:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014792:	4b11      	ldr	r3, [pc, #68]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 8014794:	7a5b      	ldrb	r3, [r3, #9]
 8014796:	b2db      	uxtb	r3, r3
 8014798:	1c5a      	adds	r2, r3, #1
 801479a:	b2d1      	uxtb	r1, r2
 801479c:	4a0e      	ldr	r2, [pc, #56]	; (80147d8 <FATFS_LinkDriverEx+0x94>)
 801479e:	7251      	strb	r1, [r2, #9]
 80147a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80147a2:	7dbb      	ldrb	r3, [r7, #22]
 80147a4:	3330      	adds	r3, #48	; 0x30
 80147a6:	b2da      	uxtb	r2, r3
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	3301      	adds	r3, #1
 80147b0:	223a      	movs	r2, #58	; 0x3a
 80147b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	3302      	adds	r3, #2
 80147b8:	222f      	movs	r2, #47	; 0x2f
 80147ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	3303      	adds	r3, #3
 80147c0:	2200      	movs	r2, #0
 80147c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80147c4:	2300      	movs	r3, #0
 80147c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80147c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	371c      	adds	r7, #28
 80147ce:	46bd      	mov	sp, r7
 80147d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	20000cec 	.word	0x20000cec

080147dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80147e6:	2200      	movs	r2, #0
 80147e8:	6839      	ldr	r1, [r7, #0]
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7ff ffaa 	bl	8014744 <FATFS_LinkDriverEx>
 80147f0:	4603      	mov	r3, r0
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3708      	adds	r7, #8
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80147fa:	b480      	push	{r7}
 80147fc:	b085      	sub	sp, #20
 80147fe:	af00      	add	r7, sp, #0
 8014800:	4603      	mov	r3, r0
 8014802:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014804:	2300      	movs	r3, #0
 8014806:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801480c:	2b84      	cmp	r3, #132	; 0x84
 801480e:	d005      	beq.n	801481c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014810:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	4413      	add	r3, r2
 8014818:	3303      	adds	r3, #3
 801481a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801481c:	68fb      	ldr	r3, [r7, #12]
}
 801481e:	4618      	mov	r0, r3
 8014820:	3714      	adds	r7, #20
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr

0801482a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801482a:	b480      	push	{r7}
 801482c:	b083      	sub	sp, #12
 801482e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014830:	f3ef 8305 	mrs	r3, IPSR
 8014834:	607b      	str	r3, [r7, #4]
  return(result);
 8014836:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014838:	2b00      	cmp	r3, #0
 801483a:	bf14      	ite	ne
 801483c:	2301      	movne	r3, #1
 801483e:	2300      	moveq	r3, #0
 8014840:	b2db      	uxtb	r3, r3
}
 8014842:	4618      	mov	r0, r3
 8014844:	370c      	adds	r7, #12
 8014846:	46bd      	mov	sp, r7
 8014848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484c:	4770      	bx	lr

0801484e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801484e:	b580      	push	{r7, lr}
 8014850:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014852:	f001 faf1 	bl	8015e38 <vTaskStartScheduler>
  
  return osOK;
 8014856:	2300      	movs	r3, #0
}
 8014858:	4618      	mov	r0, r3
 801485a:	bd80      	pop	{r7, pc}

0801485c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014860:	f001 ff90 	bl	8016784 <xTaskGetSchedulerState>
 8014864:	4603      	mov	r3, r0
 8014866:	2b01      	cmp	r3, #1
 8014868:	d101      	bne.n	801486e <osKernelRunning+0x12>
    return 0;
 801486a:	2300      	movs	r3, #0
 801486c:	e000      	b.n	8014870 <osKernelRunning+0x14>
  else
    return 1;
 801486e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014870:	4618      	mov	r0, r3
 8014872:	bd80      	pop	{r7, pc}

08014874 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014878:	f7ff ffd7 	bl	801482a <inHandlerMode>
 801487c:	4603      	mov	r3, r0
 801487e:	2b00      	cmp	r3, #0
 8014880:	d003      	beq.n	801488a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014882:	f001 fbf7 	bl	8016074 <xTaskGetTickCountFromISR>
 8014886:	4603      	mov	r3, r0
 8014888:	e002      	b.n	8014890 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801488a:	f001 fbe3 	bl	8016054 <xTaskGetTickCount>
 801488e:	4603      	mov	r3, r0
  }
}
 8014890:	4618      	mov	r0, r3
 8014892:	bd80      	pop	{r7, pc}

08014894 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014896:	b089      	sub	sp, #36	; 0x24
 8014898:	af04      	add	r7, sp, #16
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	695b      	ldr	r3, [r3, #20]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d020      	beq.n	80148e8 <osThreadCreate+0x54>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	699b      	ldr	r3, [r3, #24]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d01c      	beq.n	80148e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	685c      	ldr	r4, [r3, #4]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681d      	ldr	r5, [r3, #0]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	691e      	ldr	r6, [r3, #16]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7ff ff9a 	bl	80147fa <makeFreeRtosPriority>
 80148c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	695b      	ldr	r3, [r3, #20]
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148d0:	9202      	str	r2, [sp, #8]
 80148d2:	9301      	str	r3, [sp, #4]
 80148d4:	9100      	str	r1, [sp, #0]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	4632      	mov	r2, r6
 80148da:	4629      	mov	r1, r5
 80148dc:	4620      	mov	r0, r4
 80148de:	f001 f8dc 	bl	8015a9a <xTaskCreateStatic>
 80148e2:	4603      	mov	r3, r0
 80148e4:	60fb      	str	r3, [r7, #12]
 80148e6:	e01c      	b.n	8014922 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	685c      	ldr	r4, [r3, #4]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148f4:	b29e      	uxth	r6, r3
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7ff ff7c 	bl	80147fa <makeFreeRtosPriority>
 8014902:	4602      	mov	r2, r0
 8014904:	f107 030c 	add.w	r3, r7, #12
 8014908:	9301      	str	r3, [sp, #4]
 801490a:	9200      	str	r2, [sp, #0]
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	4632      	mov	r2, r6
 8014910:	4629      	mov	r1, r5
 8014912:	4620      	mov	r0, r4
 8014914:	f001 f920 	bl	8015b58 <xTaskCreate>
 8014918:	4603      	mov	r3, r0
 801491a:	2b01      	cmp	r3, #1
 801491c:	d001      	beq.n	8014922 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801491e:	2300      	movs	r3, #0
 8014920:	e000      	b.n	8014924 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014922:	68fb      	ldr	r3, [r7, #12]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3714      	adds	r7, #20
 8014928:	46bd      	mov	sp, r7
 801492a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801492c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d001      	beq.n	8014942 <osDelay+0x16>
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	e000      	b.n	8014944 <osDelay+0x18>
 8014942:	2301      	movs	r3, #1
 8014944:	4618      	mov	r0, r3
 8014946:	f001 fa41 	bl	8015dcc <vTaskDelay>
  
  return osOK;
 801494a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801494c:	4618      	mov	r0, r3
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014954:	b590      	push	{r4, r7, lr}
 8014956:	b085      	sub	sp, #20
 8014958:	af02      	add	r7, sp, #8
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	689b      	ldr	r3, [r3, #8]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d012      	beq.n	801498c <osMessageCreate+0x38>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00e      	beq.n	801498c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6818      	ldr	r0, [r3, #0]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6859      	ldr	r1, [r3, #4]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	689a      	ldr	r2, [r3, #8]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	68dc      	ldr	r4, [r3, #12]
 801497e:	2300      	movs	r3, #0
 8014980:	9300      	str	r3, [sp, #0]
 8014982:	4623      	mov	r3, r4
 8014984:	f000 f9e2 	bl	8014d4c <xQueueGenericCreateStatic>
 8014988:	4603      	mov	r3, r0
 801498a:	e008      	b.n	801499e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6818      	ldr	r0, [r3, #0]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	2200      	movs	r2, #0
 8014996:	4619      	mov	r1, r3
 8014998:	f000 fa54 	bl	8014e44 <xQueueGenericCreate>
 801499c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801499e:	4618      	mov	r0, r3
 80149a0:	370c      	adds	r7, #12
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd90      	pop	{r4, r7, pc}
	...

080149a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b086      	sub	sp, #24
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80149b4:	2300      	movs	r3, #0
 80149b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d101      	bne.n	80149c6 <osMessagePut+0x1e>
    ticks = 1;
 80149c2:	2301      	movs	r3, #1
 80149c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80149c6:	f7ff ff30 	bl	801482a <inHandlerMode>
 80149ca:	4603      	mov	r3, r0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d018      	beq.n	8014a02 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80149d0:	f107 0210 	add.w	r2, r7, #16
 80149d4:	f107 0108 	add.w	r1, r7, #8
 80149d8:	2300      	movs	r3, #0
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f000 fb92 	bl	8015104 <xQueueGenericSendFromISR>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b01      	cmp	r3, #1
 80149e4:	d001      	beq.n	80149ea <osMessagePut+0x42>
      return osErrorOS;
 80149e6:	23ff      	movs	r3, #255	; 0xff
 80149e8:	e018      	b.n	8014a1c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d014      	beq.n	8014a1a <osMessagePut+0x72>
 80149f0:	4b0c      	ldr	r3, [pc, #48]	; (8014a24 <osMessagePut+0x7c>)
 80149f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149f6:	601a      	str	r2, [r3, #0]
 80149f8:	f3bf 8f4f 	dsb	sy
 80149fc:	f3bf 8f6f 	isb	sy
 8014a00:	e00b      	b.n	8014a1a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014a02:	f107 0108 	add.w	r1, r7, #8
 8014a06:	2300      	movs	r3, #0
 8014a08:	697a      	ldr	r2, [r7, #20]
 8014a0a:	68f8      	ldr	r0, [r7, #12]
 8014a0c:	f000 fa78 	bl	8014f00 <xQueueGenericSend>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b01      	cmp	r3, #1
 8014a14:	d001      	beq.n	8014a1a <osMessagePut+0x72>
      return osErrorOS;
 8014a16:	23ff      	movs	r3, #255	; 0xff
 8014a18:	e000      	b.n	8014a1c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014a1a:	2300      	movs	r3, #0
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3718      	adds	r7, #24
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}
 8014a24:	e000ed04 	.word	0xe000ed04

08014a28 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014a28:	b590      	push	{r4, r7, lr}
 8014a2a:	b08b      	sub	sp, #44	; 0x2c
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d10a      	bne.n	8014a58 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014a42:	2380      	movs	r3, #128	; 0x80
 8014a44:	617b      	str	r3, [r7, #20]
    return event;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	461c      	mov	r4, r3
 8014a4a:	f107 0314 	add.w	r3, r7, #20
 8014a4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a56:	e054      	b.n	8014b02 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a66:	d103      	bne.n	8014a70 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014a68:	f04f 33ff 	mov.w	r3, #4294967295
 8014a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8014a6e:	e009      	b.n	8014a84 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d006      	beq.n	8014a84 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d101      	bne.n	8014a84 <osMessageGet+0x5c>
      ticks = 1;
 8014a80:	2301      	movs	r3, #1
 8014a82:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014a84:	f7ff fed1 	bl	801482a <inHandlerMode>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d01c      	beq.n	8014ac8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014a8e:	f107 0220 	add.w	r2, r7, #32
 8014a92:	f107 0314 	add.w	r3, r7, #20
 8014a96:	3304      	adds	r3, #4
 8014a98:	4619      	mov	r1, r3
 8014a9a:	68b8      	ldr	r0, [r7, #8]
 8014a9c:	f000 fe52 	bl	8015744 <xQueueReceiveFromISR>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d102      	bne.n	8014aac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014aa6:	2310      	movs	r3, #16
 8014aa8:	617b      	str	r3, [r7, #20]
 8014aaa:	e001      	b.n	8014ab0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014aac:	2300      	movs	r3, #0
 8014aae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014ab0:	6a3b      	ldr	r3, [r7, #32]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d01d      	beq.n	8014af2 <osMessageGet+0xca>
 8014ab6:	4b15      	ldr	r3, [pc, #84]	; (8014b0c <osMessageGet+0xe4>)
 8014ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014abc:	601a      	str	r2, [r3, #0]
 8014abe:	f3bf 8f4f 	dsb	sy
 8014ac2:	f3bf 8f6f 	isb	sy
 8014ac6:	e014      	b.n	8014af2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014ac8:	f107 0314 	add.w	r3, r7, #20
 8014acc:	3304      	adds	r3, #4
 8014ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	68b8      	ldr	r0, [r7, #8]
 8014ad4:	f000 fc44 	bl	8015360 <xQueueReceive>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	d102      	bne.n	8014ae4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014ade:	2310      	movs	r3, #16
 8014ae0:	617b      	str	r3, [r7, #20]
 8014ae2:	e006      	b.n	8014af2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d101      	bne.n	8014aee <osMessageGet+0xc6>
 8014aea:	2300      	movs	r3, #0
 8014aec:	e000      	b.n	8014af0 <osMessageGet+0xc8>
 8014aee:	2340      	movs	r3, #64	; 0x40
 8014af0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	461c      	mov	r4, r3
 8014af6:	f107 0314 	add.w	r3, r7, #20
 8014afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	372c      	adds	r7, #44	; 0x2c
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd90      	pop	{r4, r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	e000ed04 	.word	0xe000ed04

08014b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f103 0208 	add.w	r2, r3, #8
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f04f 32ff 	mov.w	r2, #4294967295
 8014b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f103 0208 	add.w	r2, r3, #8
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f103 0208 	add.w	r2, r3, #8
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2200      	movs	r2, #0
 8014b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014b44:	bf00      	nop
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr

08014b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014b50:	b480      	push	{r7}
 8014b52:	b083      	sub	sp, #12
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014b5e:	bf00      	nop
 8014b60:	370c      	adds	r7, #12
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr

08014b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014b6a:	b480      	push	{r7}
 8014b6c:	b085      	sub	sp, #20
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	68fa      	ldr	r2, [r7, #12]
 8014b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	689a      	ldr	r2, [r3, #8]
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	689b      	ldr	r3, [r3, #8]
 8014b8c:	683a      	ldr	r2, [r7, #0]
 8014b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	683a      	ldr	r2, [r7, #0]
 8014b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	1c5a      	adds	r2, r3, #1
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	601a      	str	r2, [r3, #0]
}
 8014ba6:	bf00      	nop
 8014ba8:	3714      	adds	r7, #20
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr

08014bb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014bb2:	b480      	push	{r7}
 8014bb4:	b085      	sub	sp, #20
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
 8014bba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc8:	d103      	bne.n	8014bd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	691b      	ldr	r3, [r3, #16]
 8014bce:	60fb      	str	r3, [r7, #12]
 8014bd0:	e00c      	b.n	8014bec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	3308      	adds	r3, #8
 8014bd6:	60fb      	str	r3, [r7, #12]
 8014bd8:	e002      	b.n	8014be0 <vListInsert+0x2e>
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	60fb      	str	r3, [r7, #12]
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	68ba      	ldr	r2, [r7, #8]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d2f6      	bcs.n	8014bda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	685a      	ldr	r2, [r3, #4]
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	685b      	ldr	r3, [r3, #4]
 8014bf8:	683a      	ldr	r2, [r7, #0]
 8014bfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	68fa      	ldr	r2, [r7, #12]
 8014c00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	683a      	ldr	r2, [r7, #0]
 8014c06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	1c5a      	adds	r2, r3, #1
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	601a      	str	r2, [r3, #0]
}
 8014c18:	bf00      	nop
 8014c1a:	3714      	adds	r7, #20
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c22:	4770      	bx	lr

08014c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014c24:	b480      	push	{r7}
 8014c26:	b085      	sub	sp, #20
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	691b      	ldr	r3, [r3, #16]
 8014c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	6892      	ldr	r2, [r2, #8]
 8014c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	689b      	ldr	r3, [r3, #8]
 8014c40:	687a      	ldr	r2, [r7, #4]
 8014c42:	6852      	ldr	r2, [r2, #4]
 8014c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d103      	bne.n	8014c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	689a      	ldr	r2, [r3, #8]
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	1e5a      	subs	r2, r3, #1
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	681b      	ldr	r3, [r3, #0]
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3714      	adds	r7, #20
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr

08014c78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d10b      	bne.n	8014ca4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c90:	b672      	cpsid	i
 8014c92:	f383 8811 	msr	BASEPRI, r3
 8014c96:	f3bf 8f6f 	isb	sy
 8014c9a:	f3bf 8f4f 	dsb	sy
 8014c9e:	b662      	cpsie	i
 8014ca0:	60bb      	str	r3, [r7, #8]
 8014ca2:	e7fe      	b.n	8014ca2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8014ca4:	f002 f8c0 	bl	8016e28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681a      	ldr	r2, [r3, #0]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cb0:	68f9      	ldr	r1, [r7, #12]
 8014cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014cb4:	fb01 f303 	mul.w	r3, r1, r3
 8014cb8:	441a      	add	r2, r3
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cd4:	3b01      	subs	r3, #1
 8014cd6:	68f9      	ldr	r1, [r7, #12]
 8014cd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014cda:	fb01 f303 	mul.w	r3, r1, r3
 8014cde:	441a      	add	r2, r3
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	22ff      	movs	r2, #255	; 0xff
 8014ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	22ff      	movs	r2, #255	; 0xff
 8014cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d114      	bne.n	8014d24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	691b      	ldr	r3, [r3, #16]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d01a      	beq.n	8014d38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	3310      	adds	r3, #16
 8014d06:	4618      	mov	r0, r3
 8014d08:	f001 fb76 	bl	80163f8 <xTaskRemoveFromEventList>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d012      	beq.n	8014d38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014d12:	4b0d      	ldr	r3, [pc, #52]	; (8014d48 <xQueueGenericReset+0xd0>)
 8014d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d18:	601a      	str	r2, [r3, #0]
 8014d1a:	f3bf 8f4f 	dsb	sy
 8014d1e:	f3bf 8f6f 	isb	sy
 8014d22:	e009      	b.n	8014d38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	3310      	adds	r3, #16
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7ff fef1 	bl	8014b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	3324      	adds	r3, #36	; 0x24
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7ff feec 	bl	8014b10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014d38:	f002 f8a8 	bl	8016e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014d3c:	2301      	movs	r3, #1
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	e000ed04 	.word	0xe000ed04

08014d4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b08e      	sub	sp, #56	; 0x38
 8014d50:	af02      	add	r7, sp, #8
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
 8014d58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d10b      	bne.n	8014d78 <xQueueGenericCreateStatic+0x2c>
 8014d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d64:	b672      	cpsid	i
 8014d66:	f383 8811 	msr	BASEPRI, r3
 8014d6a:	f3bf 8f6f 	isb	sy
 8014d6e:	f3bf 8f4f 	dsb	sy
 8014d72:	b662      	cpsie	i
 8014d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d76:	e7fe      	b.n	8014d76 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d10b      	bne.n	8014d96 <xQueueGenericCreateStatic+0x4a>
 8014d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d82:	b672      	cpsid	i
 8014d84:	f383 8811 	msr	BASEPRI, r3
 8014d88:	f3bf 8f6f 	isb	sy
 8014d8c:	f3bf 8f4f 	dsb	sy
 8014d90:	b662      	cpsie	i
 8014d92:	627b      	str	r3, [r7, #36]	; 0x24
 8014d94:	e7fe      	b.n	8014d94 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d002      	beq.n	8014da2 <xQueueGenericCreateStatic+0x56>
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d001      	beq.n	8014da6 <xQueueGenericCreateStatic+0x5a>
 8014da2:	2301      	movs	r3, #1
 8014da4:	e000      	b.n	8014da8 <xQueueGenericCreateStatic+0x5c>
 8014da6:	2300      	movs	r3, #0
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d10b      	bne.n	8014dc4 <xQueueGenericCreateStatic+0x78>
 8014dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db0:	b672      	cpsid	i
 8014db2:	f383 8811 	msr	BASEPRI, r3
 8014db6:	f3bf 8f6f 	isb	sy
 8014dba:	f3bf 8f4f 	dsb	sy
 8014dbe:	b662      	cpsie	i
 8014dc0:	623b      	str	r3, [r7, #32]
 8014dc2:	e7fe      	b.n	8014dc2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d102      	bne.n	8014dd0 <xQueueGenericCreateStatic+0x84>
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d101      	bne.n	8014dd4 <xQueueGenericCreateStatic+0x88>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e000      	b.n	8014dd6 <xQueueGenericCreateStatic+0x8a>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d10b      	bne.n	8014df2 <xQueueGenericCreateStatic+0xa6>
 8014dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dde:	b672      	cpsid	i
 8014de0:	f383 8811 	msr	BASEPRI, r3
 8014de4:	f3bf 8f6f 	isb	sy
 8014de8:	f3bf 8f4f 	dsb	sy
 8014dec:	b662      	cpsie	i
 8014dee:	61fb      	str	r3, [r7, #28]
 8014df0:	e7fe      	b.n	8014df0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014df2:	2348      	movs	r3, #72	; 0x48
 8014df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	2b48      	cmp	r3, #72	; 0x48
 8014dfa:	d00b      	beq.n	8014e14 <xQueueGenericCreateStatic+0xc8>
 8014dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e00:	b672      	cpsid	i
 8014e02:	f383 8811 	msr	BASEPRI, r3
 8014e06:	f3bf 8f6f 	isb	sy
 8014e0a:	f3bf 8f4f 	dsb	sy
 8014e0e:	b662      	cpsie	i
 8014e10:	61bb      	str	r3, [r7, #24]
 8014e12:	e7fe      	b.n	8014e12 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d00d      	beq.n	8014e3a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e20:	2201      	movs	r2, #1
 8014e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2c:	9300      	str	r3, [sp, #0]
 8014e2e:	4613      	mov	r3, r2
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	68b9      	ldr	r1, [r7, #8]
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	f000 f844 	bl	8014ec2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3730      	adds	r7, #48	; 0x30
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}

08014e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b08a      	sub	sp, #40	; 0x28
 8014e48:	af02      	add	r7, sp, #8
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	60b9      	str	r1, [r7, #8]
 8014e4e:	4613      	mov	r3, r2
 8014e50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d10b      	bne.n	8014e70 <xQueueGenericCreate+0x2c>
 8014e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e5c:	b672      	cpsid	i
 8014e5e:	f383 8811 	msr	BASEPRI, r3
 8014e62:	f3bf 8f6f 	isb	sy
 8014e66:	f3bf 8f4f 	dsb	sy
 8014e6a:	b662      	cpsie	i
 8014e6c:	613b      	str	r3, [r7, #16]
 8014e6e:	e7fe      	b.n	8014e6e <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d102      	bne.n	8014e7c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014e76:	2300      	movs	r3, #0
 8014e78:	61fb      	str	r3, [r7, #28]
 8014e7a:	e004      	b.n	8014e86 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	68ba      	ldr	r2, [r7, #8]
 8014e80:	fb02 f303 	mul.w	r3, r2, r3
 8014e84:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8014e86:	69fb      	ldr	r3, [r7, #28]
 8014e88:	3348      	adds	r3, #72	; 0x48
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f002 f8ee 	bl	801706c <pvPortMalloc>
 8014e90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014e92:	69bb      	ldr	r3, [r7, #24]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d00f      	beq.n	8014eb8 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	3348      	adds	r3, #72	; 0x48
 8014e9c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ea6:	79fa      	ldrb	r2, [r7, #7]
 8014ea8:	69bb      	ldr	r3, [r7, #24]
 8014eaa:	9300      	str	r3, [sp, #0]
 8014eac:	4613      	mov	r3, r2
 8014eae:	697a      	ldr	r2, [r7, #20]
 8014eb0:	68b9      	ldr	r1, [r7, #8]
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f000 f805 	bl	8014ec2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014eb8:	69bb      	ldr	r3, [r7, #24]
	}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3720      	adds	r7, #32
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014ec2:	b580      	push	{r7, lr}
 8014ec4:	b084      	sub	sp, #16
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	60f8      	str	r0, [r7, #12]
 8014eca:	60b9      	str	r1, [r7, #8]
 8014ecc:	607a      	str	r2, [r7, #4]
 8014ece:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d103      	bne.n	8014ede <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014ed6:	69bb      	ldr	r3, [r7, #24]
 8014ed8:	69ba      	ldr	r2, [r7, #24]
 8014eda:	601a      	str	r2, [r3, #0]
 8014edc:	e002      	b.n	8014ee4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	68fa      	ldr	r2, [r7, #12]
 8014ee8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	68ba      	ldr	r2, [r7, #8]
 8014eee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014ef0:	2101      	movs	r1, #1
 8014ef2:	69b8      	ldr	r0, [r7, #24]
 8014ef4:	f7ff fec0 	bl	8014c78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014ef8:	bf00      	nop
 8014efa:	3710      	adds	r7, #16
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b08e      	sub	sp, #56	; 0x38
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	60b9      	str	r1, [r7, #8]
 8014f0a:	607a      	str	r2, [r7, #4]
 8014f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d10b      	bne.n	8014f34 <xQueueGenericSend+0x34>
 8014f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f20:	b672      	cpsid	i
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	b662      	cpsie	i
 8014f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f32:	e7fe      	b.n	8014f32 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d103      	bne.n	8014f42 <xQueueGenericSend+0x42>
 8014f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d101      	bne.n	8014f46 <xQueueGenericSend+0x46>
 8014f42:	2301      	movs	r3, #1
 8014f44:	e000      	b.n	8014f48 <xQueueGenericSend+0x48>
 8014f46:	2300      	movs	r3, #0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d10b      	bne.n	8014f64 <xQueueGenericSend+0x64>
 8014f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f50:	b672      	cpsid	i
 8014f52:	f383 8811 	msr	BASEPRI, r3
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	f3bf 8f4f 	dsb	sy
 8014f5e:	b662      	cpsie	i
 8014f60:	627b      	str	r3, [r7, #36]	; 0x24
 8014f62:	e7fe      	b.n	8014f62 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2b02      	cmp	r3, #2
 8014f68:	d103      	bne.n	8014f72 <xQueueGenericSend+0x72>
 8014f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d101      	bne.n	8014f76 <xQueueGenericSend+0x76>
 8014f72:	2301      	movs	r3, #1
 8014f74:	e000      	b.n	8014f78 <xQueueGenericSend+0x78>
 8014f76:	2300      	movs	r3, #0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d10b      	bne.n	8014f94 <xQueueGenericSend+0x94>
 8014f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f80:	b672      	cpsid	i
 8014f82:	f383 8811 	msr	BASEPRI, r3
 8014f86:	f3bf 8f6f 	isb	sy
 8014f8a:	f3bf 8f4f 	dsb	sy
 8014f8e:	b662      	cpsie	i
 8014f90:	623b      	str	r3, [r7, #32]
 8014f92:	e7fe      	b.n	8014f92 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f94:	f001 fbf6 	bl	8016784 <xTaskGetSchedulerState>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d102      	bne.n	8014fa4 <xQueueGenericSend+0xa4>
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d101      	bne.n	8014fa8 <xQueueGenericSend+0xa8>
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e000      	b.n	8014faa <xQueueGenericSend+0xaa>
 8014fa8:	2300      	movs	r3, #0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d10b      	bne.n	8014fc6 <xQueueGenericSend+0xc6>
 8014fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb2:	b672      	cpsid	i
 8014fb4:	f383 8811 	msr	BASEPRI, r3
 8014fb8:	f3bf 8f6f 	isb	sy
 8014fbc:	f3bf 8f4f 	dsb	sy
 8014fc0:	b662      	cpsie	i
 8014fc2:	61fb      	str	r3, [r7, #28]
 8014fc4:	e7fe      	b.n	8014fc4 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014fc6:	f001 ff2f 	bl	8016e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d302      	bcc.n	8014fdc <xQueueGenericSend+0xdc>
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	2b02      	cmp	r3, #2
 8014fda:	d129      	bne.n	8015030 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014fdc:	683a      	ldr	r2, [r7, #0]
 8014fde:	68b9      	ldr	r1, [r7, #8]
 8014fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fe2:	f000 fc4a 	bl	801587a <prvCopyDataToQueue>
 8014fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d010      	beq.n	8015012 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff2:	3324      	adds	r3, #36	; 0x24
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f001 f9ff 	bl	80163f8 <xTaskRemoveFromEventList>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d013      	beq.n	8015028 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015000:	4b3f      	ldr	r3, [pc, #252]	; (8015100 <xQueueGenericSend+0x200>)
 8015002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015006:	601a      	str	r2, [r3, #0]
 8015008:	f3bf 8f4f 	dsb	sy
 801500c:	f3bf 8f6f 	isb	sy
 8015010:	e00a      	b.n	8015028 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015014:	2b00      	cmp	r3, #0
 8015016:	d007      	beq.n	8015028 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015018:	4b39      	ldr	r3, [pc, #228]	; (8015100 <xQueueGenericSend+0x200>)
 801501a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801501e:	601a      	str	r2, [r3, #0]
 8015020:	f3bf 8f4f 	dsb	sy
 8015024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015028:	f001 ff30 	bl	8016e8c <vPortExitCritical>
				return pdPASS;
 801502c:	2301      	movs	r3, #1
 801502e:	e063      	b.n	80150f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d103      	bne.n	801503e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015036:	f001 ff29 	bl	8016e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801503a:	2300      	movs	r3, #0
 801503c:	e05c      	b.n	80150f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015040:	2b00      	cmp	r3, #0
 8015042:	d106      	bne.n	8015052 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015044:	f107 0314 	add.w	r3, r7, #20
 8015048:	4618      	mov	r0, r3
 801504a:	f001 fa39 	bl	80164c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801504e:	2301      	movs	r3, #1
 8015050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015052:	f001 ff1b 	bl	8016e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015056:	f000 ff51 	bl	8015efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801505a:	f001 fee5 	bl	8016e28 <vPortEnterCritical>
 801505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015064:	b25b      	sxtb	r3, r3
 8015066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801506a:	d103      	bne.n	8015074 <xQueueGenericSend+0x174>
 801506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801506e:	2200      	movs	r2, #0
 8015070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801507a:	b25b      	sxtb	r3, r3
 801507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015080:	d103      	bne.n	801508a <xQueueGenericSend+0x18a>
 8015082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015084:	2200      	movs	r2, #0
 8015086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801508a:	f001 feff 	bl	8016e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801508e:	1d3a      	adds	r2, r7, #4
 8015090:	f107 0314 	add.w	r3, r7, #20
 8015094:	4611      	mov	r1, r2
 8015096:	4618      	mov	r0, r3
 8015098:	f001 fa28 	bl	80164ec <xTaskCheckForTimeOut>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d124      	bne.n	80150ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80150a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150a4:	f000 fce1 	bl	8015a6a <prvIsQueueFull>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d018      	beq.n	80150e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80150ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150b0:	3310      	adds	r3, #16
 80150b2:	687a      	ldr	r2, [r7, #4]
 80150b4:	4611      	mov	r1, r2
 80150b6:	4618      	mov	r0, r3
 80150b8:	f001 f978 	bl	80163ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80150bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150be:	f000 fc6c 	bl	801599a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80150c2:	f000 ff29 	bl	8015f18 <xTaskResumeAll>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	f47f af7c 	bne.w	8014fc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80150ce:	4b0c      	ldr	r3, [pc, #48]	; (8015100 <xQueueGenericSend+0x200>)
 80150d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150d4:	601a      	str	r2, [r3, #0]
 80150d6:	f3bf 8f4f 	dsb	sy
 80150da:	f3bf 8f6f 	isb	sy
 80150de:	e772      	b.n	8014fc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80150e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150e2:	f000 fc5a 	bl	801599a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150e6:	f000 ff17 	bl	8015f18 <xTaskResumeAll>
 80150ea:	e76c      	b.n	8014fc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80150ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ee:	f000 fc54 	bl	801599a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150f2:	f000 ff11 	bl	8015f18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80150f6:	2300      	movs	r3, #0
		}
	}
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3738      	adds	r7, #56	; 0x38
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	e000ed04 	.word	0xe000ed04

08015104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b08e      	sub	sp, #56	; 0x38
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
 8015110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015118:	2b00      	cmp	r3, #0
 801511a:	d10b      	bne.n	8015134 <xQueueGenericSendFromISR+0x30>
 801511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015120:	b672      	cpsid	i
 8015122:	f383 8811 	msr	BASEPRI, r3
 8015126:	f3bf 8f6f 	isb	sy
 801512a:	f3bf 8f4f 	dsb	sy
 801512e:	b662      	cpsie	i
 8015130:	627b      	str	r3, [r7, #36]	; 0x24
 8015132:	e7fe      	b.n	8015132 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d103      	bne.n	8015142 <xQueueGenericSendFromISR+0x3e>
 801513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801513e:	2b00      	cmp	r3, #0
 8015140:	d101      	bne.n	8015146 <xQueueGenericSendFromISR+0x42>
 8015142:	2301      	movs	r3, #1
 8015144:	e000      	b.n	8015148 <xQueueGenericSendFromISR+0x44>
 8015146:	2300      	movs	r3, #0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d10b      	bne.n	8015164 <xQueueGenericSendFromISR+0x60>
 801514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015150:	b672      	cpsid	i
 8015152:	f383 8811 	msr	BASEPRI, r3
 8015156:	f3bf 8f6f 	isb	sy
 801515a:	f3bf 8f4f 	dsb	sy
 801515e:	b662      	cpsie	i
 8015160:	623b      	str	r3, [r7, #32]
 8015162:	e7fe      	b.n	8015162 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	2b02      	cmp	r3, #2
 8015168:	d103      	bne.n	8015172 <xQueueGenericSendFromISR+0x6e>
 801516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801516e:	2b01      	cmp	r3, #1
 8015170:	d101      	bne.n	8015176 <xQueueGenericSendFromISR+0x72>
 8015172:	2301      	movs	r3, #1
 8015174:	e000      	b.n	8015178 <xQueueGenericSendFromISR+0x74>
 8015176:	2300      	movs	r3, #0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d10b      	bne.n	8015194 <xQueueGenericSendFromISR+0x90>
 801517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015180:	b672      	cpsid	i
 8015182:	f383 8811 	msr	BASEPRI, r3
 8015186:	f3bf 8f6f 	isb	sy
 801518a:	f3bf 8f4f 	dsb	sy
 801518e:	b662      	cpsie	i
 8015190:	61fb      	str	r3, [r7, #28]
 8015192:	e7fe      	b.n	8015192 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015194:	f001 ff28 	bl	8016fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015198:	f3ef 8211 	mrs	r2, BASEPRI
 801519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a0:	b672      	cpsid	i
 80151a2:	f383 8811 	msr	BASEPRI, r3
 80151a6:	f3bf 8f6f 	isb	sy
 80151aa:	f3bf 8f4f 	dsb	sy
 80151ae:	b662      	cpsie	i
 80151b0:	61ba      	str	r2, [r7, #24]
 80151b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80151b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80151b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80151b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d302      	bcc.n	80151ca <xQueueGenericSendFromISR+0xc6>
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	2b02      	cmp	r3, #2
 80151c8:	d12c      	bne.n	8015224 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80151ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80151d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80151d4:	683a      	ldr	r2, [r7, #0]
 80151d6:	68b9      	ldr	r1, [r7, #8]
 80151d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151da:	f000 fb4e 	bl	801587a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80151de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80151e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151e6:	d112      	bne.n	801520e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80151e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d016      	beq.n	801521e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80151f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f2:	3324      	adds	r3, #36	; 0x24
 80151f4:	4618      	mov	r0, r3
 80151f6:	f001 f8ff 	bl	80163f8 <xTaskRemoveFromEventList>
 80151fa:	4603      	mov	r3, r0
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d00e      	beq.n	801521e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00b      	beq.n	801521e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2201      	movs	r2, #1
 801520a:	601a      	str	r2, [r3, #0]
 801520c:	e007      	b.n	801521e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801520e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015212:	3301      	adds	r3, #1
 8015214:	b2db      	uxtb	r3, r3
 8015216:	b25a      	sxtb	r2, r3
 8015218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801521a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801521e:	2301      	movs	r3, #1
 8015220:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015222:	e001      	b.n	8015228 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015224:	2300      	movs	r3, #0
 8015226:	637b      	str	r3, [r7, #52]	; 0x34
 8015228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801522a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015234:	4618      	mov	r0, r3
 8015236:	3738      	adds	r7, #56	; 0x38
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}

0801523c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b08e      	sub	sp, #56	; 0x38
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524c:	2b00      	cmp	r3, #0
 801524e:	d10b      	bne.n	8015268 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8015250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015254:	b672      	cpsid	i
 8015256:	f383 8811 	msr	BASEPRI, r3
 801525a:	f3bf 8f6f 	isb	sy
 801525e:	f3bf 8f4f 	dsb	sy
 8015262:	b662      	cpsie	i
 8015264:	623b      	str	r3, [r7, #32]
 8015266:	e7fe      	b.n	8015266 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801526c:	2b00      	cmp	r3, #0
 801526e:	d00b      	beq.n	8015288 <xQueueGiveFromISR+0x4c>
 8015270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015274:	b672      	cpsid	i
 8015276:	f383 8811 	msr	BASEPRI, r3
 801527a:	f3bf 8f6f 	isb	sy
 801527e:	f3bf 8f4f 	dsb	sy
 8015282:	b662      	cpsie	i
 8015284:	61fb      	str	r3, [r7, #28]
 8015286:	e7fe      	b.n	8015286 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8015288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d103      	bne.n	8015298 <xQueueGiveFromISR+0x5c>
 8015290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <xQueueGiveFromISR+0x60>
 8015298:	2301      	movs	r3, #1
 801529a:	e000      	b.n	801529e <xQueueGiveFromISR+0x62>
 801529c:	2300      	movs	r3, #0
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d10b      	bne.n	80152ba <xQueueGiveFromISR+0x7e>
 80152a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a6:	b672      	cpsid	i
 80152a8:	f383 8811 	msr	BASEPRI, r3
 80152ac:	f3bf 8f6f 	isb	sy
 80152b0:	f3bf 8f4f 	dsb	sy
 80152b4:	b662      	cpsie	i
 80152b6:	61bb      	str	r3, [r7, #24]
 80152b8:	e7fe      	b.n	80152b8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80152ba:	f001 fe95 	bl	8016fe8 <vPortValidateInterruptPriority>
	__asm volatile
 80152be:	f3ef 8211 	mrs	r2, BASEPRI
 80152c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c6:	b672      	cpsid	i
 80152c8:	f383 8811 	msr	BASEPRI, r3
 80152cc:	f3bf 8f6f 	isb	sy
 80152d0:	f3bf 8f4f 	dsb	sy
 80152d4:	b662      	cpsie	i
 80152d6:	617a      	str	r2, [r7, #20]
 80152d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80152da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80152dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80152e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d22b      	bcs.n	8015346 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80152ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80152f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80152f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fa:	1c5a      	adds	r2, r3, #1
 80152fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015300:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015308:	d112      	bne.n	8015330 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801530e:	2b00      	cmp	r3, #0
 8015310:	d016      	beq.n	8015340 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015314:	3324      	adds	r3, #36	; 0x24
 8015316:	4618      	mov	r0, r3
 8015318:	f001 f86e 	bl	80163f8 <xTaskRemoveFromEventList>
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d00e      	beq.n	8015340 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00b      	beq.n	8015340 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	2201      	movs	r2, #1
 801532c:	601a      	str	r2, [r3, #0]
 801532e:	e007      	b.n	8015340 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015334:	3301      	adds	r3, #1
 8015336:	b2db      	uxtb	r3, r3
 8015338:	b25a      	sxtb	r2, r3
 801533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015340:	2301      	movs	r3, #1
 8015342:	637b      	str	r3, [r7, #52]	; 0x34
 8015344:	e001      	b.n	801534a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015346:	2300      	movs	r3, #0
 8015348:	637b      	str	r3, [r7, #52]	; 0x34
 801534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801534c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015356:	4618      	mov	r0, r3
 8015358:	3738      	adds	r7, #56	; 0x38
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
	...

08015360 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b08c      	sub	sp, #48	; 0x30
 8015364:	af00      	add	r7, sp, #0
 8015366:	60f8      	str	r0, [r7, #12]
 8015368:	60b9      	str	r1, [r7, #8]
 801536a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801536c:	2300      	movs	r3, #0
 801536e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015376:	2b00      	cmp	r3, #0
 8015378:	d10b      	bne.n	8015392 <xQueueReceive+0x32>
	__asm volatile
 801537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801537e:	b672      	cpsid	i
 8015380:	f383 8811 	msr	BASEPRI, r3
 8015384:	f3bf 8f6f 	isb	sy
 8015388:	f3bf 8f4f 	dsb	sy
 801538c:	b662      	cpsie	i
 801538e:	623b      	str	r3, [r7, #32]
 8015390:	e7fe      	b.n	8015390 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d103      	bne.n	80153a0 <xQueueReceive+0x40>
 8015398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801539c:	2b00      	cmp	r3, #0
 801539e:	d101      	bne.n	80153a4 <xQueueReceive+0x44>
 80153a0:	2301      	movs	r3, #1
 80153a2:	e000      	b.n	80153a6 <xQueueReceive+0x46>
 80153a4:	2300      	movs	r3, #0
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d10b      	bne.n	80153c2 <xQueueReceive+0x62>
 80153aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ae:	b672      	cpsid	i
 80153b0:	f383 8811 	msr	BASEPRI, r3
 80153b4:	f3bf 8f6f 	isb	sy
 80153b8:	f3bf 8f4f 	dsb	sy
 80153bc:	b662      	cpsie	i
 80153be:	61fb      	str	r3, [r7, #28]
 80153c0:	e7fe      	b.n	80153c0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80153c2:	f001 f9df 	bl	8016784 <xTaskGetSchedulerState>
 80153c6:	4603      	mov	r3, r0
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d102      	bne.n	80153d2 <xQueueReceive+0x72>
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d101      	bne.n	80153d6 <xQueueReceive+0x76>
 80153d2:	2301      	movs	r3, #1
 80153d4:	e000      	b.n	80153d8 <xQueueReceive+0x78>
 80153d6:	2300      	movs	r3, #0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d10b      	bne.n	80153f4 <xQueueReceive+0x94>
 80153dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e0:	b672      	cpsid	i
 80153e2:	f383 8811 	msr	BASEPRI, r3
 80153e6:	f3bf 8f6f 	isb	sy
 80153ea:	f3bf 8f4f 	dsb	sy
 80153ee:	b662      	cpsie	i
 80153f0:	61bb      	str	r3, [r7, #24]
 80153f2:	e7fe      	b.n	80153f2 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80153f4:	f001 fd18 	bl	8016e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80153f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80153fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015400:	2b00      	cmp	r3, #0
 8015402:	d01f      	beq.n	8015444 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015404:	68b9      	ldr	r1, [r7, #8]
 8015406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015408:	f000 faa1 	bl	801594e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540e:	1e5a      	subs	r2, r3, #1
 8015410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015412:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015416:	691b      	ldr	r3, [r3, #16]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d00f      	beq.n	801543c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801541e:	3310      	adds	r3, #16
 8015420:	4618      	mov	r0, r3
 8015422:	f000 ffe9 	bl	80163f8 <xTaskRemoveFromEventList>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d007      	beq.n	801543c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801542c:	4b3c      	ldr	r3, [pc, #240]	; (8015520 <xQueueReceive+0x1c0>)
 801542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015432:	601a      	str	r2, [r3, #0]
 8015434:	f3bf 8f4f 	dsb	sy
 8015438:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801543c:	f001 fd26 	bl	8016e8c <vPortExitCritical>
				return pdPASS;
 8015440:	2301      	movs	r3, #1
 8015442:	e069      	b.n	8015518 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d103      	bne.n	8015452 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801544a:	f001 fd1f 	bl	8016e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801544e:	2300      	movs	r3, #0
 8015450:	e062      	b.n	8015518 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015454:	2b00      	cmp	r3, #0
 8015456:	d106      	bne.n	8015466 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015458:	f107 0310 	add.w	r3, r7, #16
 801545c:	4618      	mov	r0, r3
 801545e:	f001 f82f 	bl	80164c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015462:	2301      	movs	r3, #1
 8015464:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015466:	f001 fd11 	bl	8016e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801546a:	f000 fd47 	bl	8015efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801546e:	f001 fcdb 	bl	8016e28 <vPortEnterCritical>
 8015472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015478:	b25b      	sxtb	r3, r3
 801547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801547e:	d103      	bne.n	8015488 <xQueueReceive+0x128>
 8015480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015482:	2200      	movs	r2, #0
 8015484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801548a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801548e:	b25b      	sxtb	r3, r3
 8015490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015494:	d103      	bne.n	801549e <xQueueReceive+0x13e>
 8015496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015498:	2200      	movs	r2, #0
 801549a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801549e:	f001 fcf5 	bl	8016e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80154a2:	1d3a      	adds	r2, r7, #4
 80154a4:	f107 0310 	add.w	r3, r7, #16
 80154a8:	4611      	mov	r1, r2
 80154aa:	4618      	mov	r0, r3
 80154ac:	f001 f81e 	bl	80164ec <xTaskCheckForTimeOut>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d123      	bne.n	80154fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80154b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154b8:	f000 fac1 	bl	8015a3e <prvIsQueueEmpty>
 80154bc:	4603      	mov	r3, r0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d017      	beq.n	80154f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80154c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c4:	3324      	adds	r3, #36	; 0x24
 80154c6:	687a      	ldr	r2, [r7, #4]
 80154c8:	4611      	mov	r1, r2
 80154ca:	4618      	mov	r0, r3
 80154cc:	f000 ff6e 	bl	80163ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80154d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154d2:	f000 fa62 	bl	801599a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80154d6:	f000 fd1f 	bl	8015f18 <xTaskResumeAll>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d189      	bne.n	80153f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80154e0:	4b0f      	ldr	r3, [pc, #60]	; (8015520 <xQueueReceive+0x1c0>)
 80154e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154e6:	601a      	str	r2, [r3, #0]
 80154e8:	f3bf 8f4f 	dsb	sy
 80154ec:	f3bf 8f6f 	isb	sy
 80154f0:	e780      	b.n	80153f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80154f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154f4:	f000 fa51 	bl	801599a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80154f8:	f000 fd0e 	bl	8015f18 <xTaskResumeAll>
 80154fc:	e77a      	b.n	80153f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80154fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015500:	f000 fa4b 	bl	801599a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015504:	f000 fd08 	bl	8015f18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801550a:	f000 fa98 	bl	8015a3e <prvIsQueueEmpty>
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	f43f af6f 	beq.w	80153f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015516:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015518:	4618      	mov	r0, r3
 801551a:	3730      	adds	r7, #48	; 0x30
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	e000ed04 	.word	0xe000ed04

08015524 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b08e      	sub	sp, #56	; 0x38
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801552e:	2300      	movs	r3, #0
 8015530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015536:	2300      	movs	r3, #0
 8015538:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10b      	bne.n	8015558 <xQueueSemaphoreTake+0x34>
 8015540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015544:	b672      	cpsid	i
 8015546:	f383 8811 	msr	BASEPRI, r3
 801554a:	f3bf 8f6f 	isb	sy
 801554e:	f3bf 8f4f 	dsb	sy
 8015552:	b662      	cpsie	i
 8015554:	623b      	str	r3, [r7, #32]
 8015556:	e7fe      	b.n	8015556 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00b      	beq.n	8015578 <xQueueSemaphoreTake+0x54>
 8015560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015564:	b672      	cpsid	i
 8015566:	f383 8811 	msr	BASEPRI, r3
 801556a:	f3bf 8f6f 	isb	sy
 801556e:	f3bf 8f4f 	dsb	sy
 8015572:	b662      	cpsie	i
 8015574:	61fb      	str	r3, [r7, #28]
 8015576:	e7fe      	b.n	8015576 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015578:	f001 f904 	bl	8016784 <xTaskGetSchedulerState>
 801557c:	4603      	mov	r3, r0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d102      	bne.n	8015588 <xQueueSemaphoreTake+0x64>
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d101      	bne.n	801558c <xQueueSemaphoreTake+0x68>
 8015588:	2301      	movs	r3, #1
 801558a:	e000      	b.n	801558e <xQueueSemaphoreTake+0x6a>
 801558c:	2300      	movs	r3, #0
 801558e:	2b00      	cmp	r3, #0
 8015590:	d10b      	bne.n	80155aa <xQueueSemaphoreTake+0x86>
 8015592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015596:	b672      	cpsid	i
 8015598:	f383 8811 	msr	BASEPRI, r3
 801559c:	f3bf 8f6f 	isb	sy
 80155a0:	f3bf 8f4f 	dsb	sy
 80155a4:	b662      	cpsie	i
 80155a6:	61bb      	str	r3, [r7, #24]
 80155a8:	e7fe      	b.n	80155a8 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80155aa:	f001 fc3d 	bl	8016e28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80155ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155b2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80155b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d024      	beq.n	8015604 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80155ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155bc:	1e5a      	subs	r2, r3, #1
 80155be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80155c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d104      	bne.n	80155d4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80155ca:	f001 faa9 	bl	8016b20 <pvTaskIncrementMutexHeldCount>
 80155ce:	4602      	mov	r2, r0
 80155d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d6:	691b      	ldr	r3, [r3, #16]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d00f      	beq.n	80155fc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80155dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155de:	3310      	adds	r3, #16
 80155e0:	4618      	mov	r0, r3
 80155e2:	f000 ff09 	bl	80163f8 <xTaskRemoveFromEventList>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d007      	beq.n	80155fc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80155ec:	4b54      	ldr	r3, [pc, #336]	; (8015740 <xQueueSemaphoreTake+0x21c>)
 80155ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155f2:	601a      	str	r2, [r3, #0]
 80155f4:	f3bf 8f4f 	dsb	sy
 80155f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80155fc:	f001 fc46 	bl	8016e8c <vPortExitCritical>
				return pdPASS;
 8015600:	2301      	movs	r3, #1
 8015602:	e098      	b.n	8015736 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d112      	bne.n	8015630 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00b      	beq.n	8015628 <xQueueSemaphoreTake+0x104>
 8015610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015614:	b672      	cpsid	i
 8015616:	f383 8811 	msr	BASEPRI, r3
 801561a:	f3bf 8f6f 	isb	sy
 801561e:	f3bf 8f4f 	dsb	sy
 8015622:	b662      	cpsie	i
 8015624:	617b      	str	r3, [r7, #20]
 8015626:	e7fe      	b.n	8015626 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015628:	f001 fc30 	bl	8016e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801562c:	2300      	movs	r3, #0
 801562e:	e082      	b.n	8015736 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015632:	2b00      	cmp	r3, #0
 8015634:	d106      	bne.n	8015644 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015636:	f107 030c 	add.w	r3, r7, #12
 801563a:	4618      	mov	r0, r3
 801563c:	f000 ff40 	bl	80164c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015640:	2301      	movs	r3, #1
 8015642:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015644:	f001 fc22 	bl	8016e8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015648:	f000 fc58 	bl	8015efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801564c:	f001 fbec 	bl	8016e28 <vPortEnterCritical>
 8015650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015656:	b25b      	sxtb	r3, r3
 8015658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801565c:	d103      	bne.n	8015666 <xQueueSemaphoreTake+0x142>
 801565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015660:	2200      	movs	r2, #0
 8015662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801566c:	b25b      	sxtb	r3, r3
 801566e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015672:	d103      	bne.n	801567c <xQueueSemaphoreTake+0x158>
 8015674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015676:	2200      	movs	r2, #0
 8015678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801567c:	f001 fc06 	bl	8016e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015680:	463a      	mov	r2, r7
 8015682:	f107 030c 	add.w	r3, r7, #12
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f000 ff2f 	bl	80164ec <xTaskCheckForTimeOut>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d132      	bne.n	80156fa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015696:	f000 f9d2 	bl	8015a3e <prvIsQueueEmpty>
 801569a:	4603      	mov	r3, r0
 801569c:	2b00      	cmp	r3, #0
 801569e:	d026      	beq.n	80156ee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80156a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d109      	bne.n	80156bc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80156a8:	f001 fbbe 	bl	8016e28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80156ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	4618      	mov	r0, r3
 80156b2:	f001 f885 	bl	80167c0 <xTaskPriorityInherit>
 80156b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80156b8:	f001 fbe8 	bl	8016e8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80156bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156be:	3324      	adds	r3, #36	; 0x24
 80156c0:	683a      	ldr	r2, [r7, #0]
 80156c2:	4611      	mov	r1, r2
 80156c4:	4618      	mov	r0, r3
 80156c6:	f000 fe71 	bl	80163ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80156ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156cc:	f000 f965 	bl	801599a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80156d0:	f000 fc22 	bl	8015f18 <xTaskResumeAll>
 80156d4:	4603      	mov	r3, r0
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	f47f af67 	bne.w	80155aa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80156dc:	4b18      	ldr	r3, [pc, #96]	; (8015740 <xQueueSemaphoreTake+0x21c>)
 80156de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156e2:	601a      	str	r2, [r3, #0]
 80156e4:	f3bf 8f4f 	dsb	sy
 80156e8:	f3bf 8f6f 	isb	sy
 80156ec:	e75d      	b.n	80155aa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80156ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156f0:	f000 f953 	bl	801599a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80156f4:	f000 fc10 	bl	8015f18 <xTaskResumeAll>
 80156f8:	e757      	b.n	80155aa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80156fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156fc:	f000 f94d 	bl	801599a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015700:	f000 fc0a 	bl	8015f18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015706:	f000 f99a 	bl	8015a3e <prvIsQueueEmpty>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	f43f af4c 	beq.w	80155aa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015714:	2b00      	cmp	r3, #0
 8015716:	d00d      	beq.n	8015734 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8015718:	f001 fb86 	bl	8016e28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801571c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801571e:	f000 f894 	bl	801584a <prvGetDisinheritPriorityAfterTimeout>
 8015722:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8015724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801572a:	4618      	mov	r0, r3
 801572c:	f001 f956 	bl	80169dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015730:	f001 fbac 	bl	8016e8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015734:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8015736:	4618      	mov	r0, r3
 8015738:	3738      	adds	r7, #56	; 0x38
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	e000ed04 	.word	0xe000ed04

08015744 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b08e      	sub	sp, #56	; 0x38
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10b      	bne.n	8015772 <xQueueReceiveFromISR+0x2e>
 801575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575e:	b672      	cpsid	i
 8015760:	f383 8811 	msr	BASEPRI, r3
 8015764:	f3bf 8f6f 	isb	sy
 8015768:	f3bf 8f4f 	dsb	sy
 801576c:	b662      	cpsie	i
 801576e:	623b      	str	r3, [r7, #32]
 8015770:	e7fe      	b.n	8015770 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d103      	bne.n	8015780 <xQueueReceiveFromISR+0x3c>
 8015778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801577c:	2b00      	cmp	r3, #0
 801577e:	d101      	bne.n	8015784 <xQueueReceiveFromISR+0x40>
 8015780:	2301      	movs	r3, #1
 8015782:	e000      	b.n	8015786 <xQueueReceiveFromISR+0x42>
 8015784:	2300      	movs	r3, #0
 8015786:	2b00      	cmp	r3, #0
 8015788:	d10b      	bne.n	80157a2 <xQueueReceiveFromISR+0x5e>
 801578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578e:	b672      	cpsid	i
 8015790:	f383 8811 	msr	BASEPRI, r3
 8015794:	f3bf 8f6f 	isb	sy
 8015798:	f3bf 8f4f 	dsb	sy
 801579c:	b662      	cpsie	i
 801579e:	61fb      	str	r3, [r7, #28]
 80157a0:	e7fe      	b.n	80157a0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157a2:	f001 fc21 	bl	8016fe8 <vPortValidateInterruptPriority>
	__asm volatile
 80157a6:	f3ef 8211 	mrs	r2, BASEPRI
 80157aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ae:	b672      	cpsid	i
 80157b0:	f383 8811 	msr	BASEPRI, r3
 80157b4:	f3bf 8f6f 	isb	sy
 80157b8:	f3bf 8f4f 	dsb	sy
 80157bc:	b662      	cpsie	i
 80157be:	61ba      	str	r2, [r7, #24]
 80157c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80157c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80157cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d02f      	beq.n	8015832 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80157d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80157d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80157dc:	68b9      	ldr	r1, [r7, #8]
 80157de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157e0:	f000 f8b5 	bl	801594e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80157e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e6:	1e5a      	subs	r2, r3, #1
 80157e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80157ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80157f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f4:	d112      	bne.n	801581c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f8:	691b      	ldr	r3, [r3, #16]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d016      	beq.n	801582c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015800:	3310      	adds	r3, #16
 8015802:	4618      	mov	r0, r3
 8015804:	f000 fdf8 	bl	80163f8 <xTaskRemoveFromEventList>
 8015808:	4603      	mov	r3, r0
 801580a:	2b00      	cmp	r3, #0
 801580c:	d00e      	beq.n	801582c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d00b      	beq.n	801582c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2201      	movs	r2, #1
 8015818:	601a      	str	r2, [r3, #0]
 801581a:	e007      	b.n	801582c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801581c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015820:	3301      	adds	r3, #1
 8015822:	b2db      	uxtb	r3, r3
 8015824:	b25a      	sxtb	r2, r3
 8015826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801582c:	2301      	movs	r3, #1
 801582e:	637b      	str	r3, [r7, #52]	; 0x34
 8015830:	e001      	b.n	8015836 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8015832:	2300      	movs	r3, #0
 8015834:	637b      	str	r3, [r7, #52]	; 0x34
 8015836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015838:	613b      	str	r3, [r7, #16]
	__asm volatile
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015842:	4618      	mov	r0, r3
 8015844:	3738      	adds	r7, #56	; 0x38
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801584a:	b480      	push	{r7}
 801584c:	b085      	sub	sp, #20
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015856:	2b00      	cmp	r3, #0
 8015858:	d006      	beq.n	8015868 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	f1c3 0307 	rsb	r3, r3, #7
 8015864:	60fb      	str	r3, [r7, #12]
 8015866:	e001      	b.n	801586c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015868:	2300      	movs	r3, #0
 801586a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801586c:	68fb      	ldr	r3, [r7, #12]
	}
 801586e:	4618      	mov	r0, r3
 8015870:	3714      	adds	r7, #20
 8015872:	46bd      	mov	sp, r7
 8015874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015878:	4770      	bx	lr

0801587a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801587a:	b580      	push	{r7, lr}
 801587c:	b086      	sub	sp, #24
 801587e:	af00      	add	r7, sp, #0
 8015880:	60f8      	str	r0, [r7, #12]
 8015882:	60b9      	str	r1, [r7, #8]
 8015884:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015886:	2300      	movs	r3, #0
 8015888:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801588e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015894:	2b00      	cmp	r3, #0
 8015896:	d10d      	bne.n	80158b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d14d      	bne.n	801593c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	4618      	mov	r0, r3
 80158a6:	f001 f811 	bl	80168cc <xTaskPriorityDisinherit>
 80158aa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	2200      	movs	r2, #0
 80158b0:	605a      	str	r2, [r3, #4]
 80158b2:	e043      	b.n	801593c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d119      	bne.n	80158ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	6898      	ldr	r0, [r3, #8]
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158c2:	461a      	mov	r2, r3
 80158c4:	68b9      	ldr	r1, [r7, #8]
 80158c6:	f00d f8ed 	bl	8022aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	689a      	ldr	r2, [r3, #8]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158d2:	441a      	add	r2, r3
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	689a      	ldr	r2, [r3, #8]
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d32b      	bcc.n	801593c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	681a      	ldr	r2, [r3, #0]
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	609a      	str	r2, [r3, #8]
 80158ec:	e026      	b.n	801593c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	68d8      	ldr	r0, [r3, #12]
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158f6:	461a      	mov	r2, r3
 80158f8:	68b9      	ldr	r1, [r7, #8]
 80158fa:	f00d f8d3 	bl	8022aa4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	68da      	ldr	r2, [r3, #12]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015906:	425b      	negs	r3, r3
 8015908:	441a      	add	r2, r3
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	68da      	ldr	r2, [r3, #12]
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	429a      	cmp	r2, r3
 8015918:	d207      	bcs.n	801592a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	685a      	ldr	r2, [r3, #4]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015922:	425b      	negs	r3, r3
 8015924:	441a      	add	r2, r3
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2b02      	cmp	r3, #2
 801592e:	d105      	bne.n	801593c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d002      	beq.n	801593c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	3b01      	subs	r3, #1
 801593a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	1c5a      	adds	r2, r3, #1
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015944:	697b      	ldr	r3, [r7, #20]
}
 8015946:	4618      	mov	r0, r3
 8015948:	3718      	adds	r7, #24
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}

0801594e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801594e:	b580      	push	{r7, lr}
 8015950:	b082      	sub	sp, #8
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
 8015956:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801595c:	2b00      	cmp	r3, #0
 801595e:	d018      	beq.n	8015992 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	68da      	ldr	r2, [r3, #12]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015968:	441a      	add	r2, r3
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	68da      	ldr	r2, [r3, #12]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	429a      	cmp	r2, r3
 8015978:	d303      	bcc.n	8015982 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	68d9      	ldr	r1, [r3, #12]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801598a:	461a      	mov	r2, r3
 801598c:	6838      	ldr	r0, [r7, #0]
 801598e:	f00d f889 	bl	8022aa4 <memcpy>
	}
}
 8015992:	bf00      	nop
 8015994:	3708      	adds	r7, #8
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}

0801599a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801599a:	b580      	push	{r7, lr}
 801599c:	b084      	sub	sp, #16
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80159a2:	f001 fa41 	bl	8016e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80159ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80159ae:	e011      	b.n	80159d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d012      	beq.n	80159de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	3324      	adds	r3, #36	; 0x24
 80159bc:	4618      	mov	r0, r3
 80159be:	f000 fd1b 	bl	80163f8 <xTaskRemoveFromEventList>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d001      	beq.n	80159cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80159c8:	f000 fdf4 	bl	80165b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80159cc:	7bfb      	ldrb	r3, [r7, #15]
 80159ce:	3b01      	subs	r3, #1
 80159d0:	b2db      	uxtb	r3, r3
 80159d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80159d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	dce9      	bgt.n	80159b0 <prvUnlockQueue+0x16>
 80159dc:	e000      	b.n	80159e0 <prvUnlockQueue+0x46>
					break;
 80159de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	22ff      	movs	r2, #255	; 0xff
 80159e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80159e8:	f001 fa50 	bl	8016e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80159ec:	f001 fa1c 	bl	8016e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80159f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80159f8:	e011      	b.n	8015a1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	691b      	ldr	r3, [r3, #16]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d012      	beq.n	8015a28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	3310      	adds	r3, #16
 8015a06:	4618      	mov	r0, r3
 8015a08:	f000 fcf6 	bl	80163f8 <xTaskRemoveFromEventList>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d001      	beq.n	8015a16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015a12:	f000 fdcf 	bl	80165b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015a16:	7bbb      	ldrb	r3, [r7, #14]
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	dce9      	bgt.n	80159fa <prvUnlockQueue+0x60>
 8015a26:	e000      	b.n	8015a2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015a28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	22ff      	movs	r2, #255	; 0xff
 8015a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015a32:	f001 fa2b 	bl	8016e8c <vPortExitCritical>
}
 8015a36:	bf00      	nop
 8015a38:	3710      	adds	r7, #16
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}

08015a3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015a3e:	b580      	push	{r7, lr}
 8015a40:	b084      	sub	sp, #16
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a46:	f001 f9ef 	bl	8016e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d102      	bne.n	8015a58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015a52:	2301      	movs	r3, #1
 8015a54:	60fb      	str	r3, [r7, #12]
 8015a56:	e001      	b.n	8015a5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015a5c:	f001 fa16 	bl	8016e8c <vPortExitCritical>

	return xReturn;
 8015a60:	68fb      	ldr	r3, [r7, #12]
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3710      	adds	r7, #16
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}

08015a6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015a6a:	b580      	push	{r7, lr}
 8015a6c:	b084      	sub	sp, #16
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a72:	f001 f9d9 	bl	8016e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	d102      	bne.n	8015a88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015a82:	2301      	movs	r3, #1
 8015a84:	60fb      	str	r3, [r7, #12]
 8015a86:	e001      	b.n	8015a8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015a8c:	f001 f9fe 	bl	8016e8c <vPortExitCritical>

	return xReturn;
 8015a90:	68fb      	ldr	r3, [r7, #12]
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3710      	adds	r7, #16
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b08e      	sub	sp, #56	; 0x38
 8015a9e:	af04      	add	r7, sp, #16
 8015aa0:	60f8      	str	r0, [r7, #12]
 8015aa2:	60b9      	str	r1, [r7, #8]
 8015aa4:	607a      	str	r2, [r7, #4]
 8015aa6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d10b      	bne.n	8015ac6 <xTaskCreateStatic+0x2c>
	__asm volatile
 8015aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab2:	b672      	cpsid	i
 8015ab4:	f383 8811 	msr	BASEPRI, r3
 8015ab8:	f3bf 8f6f 	isb	sy
 8015abc:	f3bf 8f4f 	dsb	sy
 8015ac0:	b662      	cpsie	i
 8015ac2:	623b      	str	r3, [r7, #32]
 8015ac4:	e7fe      	b.n	8015ac4 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8015ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d10b      	bne.n	8015ae4 <xTaskCreateStatic+0x4a>
 8015acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ad0:	b672      	cpsid	i
 8015ad2:	f383 8811 	msr	BASEPRI, r3
 8015ad6:	f3bf 8f6f 	isb	sy
 8015ada:	f3bf 8f4f 	dsb	sy
 8015ade:	b662      	cpsie	i
 8015ae0:	61fb      	str	r3, [r7, #28]
 8015ae2:	e7fe      	b.n	8015ae2 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015ae4:	2358      	movs	r3, #88	; 0x58
 8015ae6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	2b58      	cmp	r3, #88	; 0x58
 8015aec:	d00b      	beq.n	8015b06 <xTaskCreateStatic+0x6c>
 8015aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af2:	b672      	cpsid	i
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	b662      	cpsie	i
 8015b02:	61bb      	str	r3, [r7, #24]
 8015b04:	e7fe      	b.n	8015b04 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d01e      	beq.n	8015b4a <xTaskCreateStatic+0xb0>
 8015b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d01b      	beq.n	8015b4a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015b1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1e:	2202      	movs	r2, #2
 8015b20:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015b24:	2300      	movs	r3, #0
 8015b26:	9303      	str	r3, [sp, #12]
 8015b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b2a:	9302      	str	r3, [sp, #8]
 8015b2c:	f107 0314 	add.w	r3, r7, #20
 8015b30:	9301      	str	r3, [sp, #4]
 8015b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	687a      	ldr	r2, [r7, #4]
 8015b3a:	68b9      	ldr	r1, [r7, #8]
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f000 f850 	bl	8015be2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b44:	f000 f8d8 	bl	8015cf8 <prvAddNewTaskToReadyList>
 8015b48:	e001      	b.n	8015b4e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015b4e:	697b      	ldr	r3, [r7, #20]
	}
 8015b50:	4618      	mov	r0, r3
 8015b52:	3728      	adds	r7, #40	; 0x28
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}

08015b58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b08c      	sub	sp, #48	; 0x30
 8015b5c:	af04      	add	r7, sp, #16
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	603b      	str	r3, [r7, #0]
 8015b64:	4613      	mov	r3, r2
 8015b66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b68:	88fb      	ldrh	r3, [r7, #6]
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f001 fa7d 	bl	801706c <pvPortMalloc>
 8015b72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d00e      	beq.n	8015b98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8015b7a:	2058      	movs	r0, #88	; 0x58
 8015b7c:	f001 fa76 	bl	801706c <pvPortMalloc>
 8015b80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d003      	beq.n	8015b90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	697a      	ldr	r2, [r7, #20]
 8015b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8015b8e:	e005      	b.n	8015b9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015b90:	6978      	ldr	r0, [r7, #20]
 8015b92:	f001 fb37 	bl	8017204 <vPortFree>
 8015b96:	e001      	b.n	8015b9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d017      	beq.n	8015bd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015baa:	88fa      	ldrh	r2, [r7, #6]
 8015bac:	2300      	movs	r3, #0
 8015bae:	9303      	str	r3, [sp, #12]
 8015bb0:	69fb      	ldr	r3, [r7, #28]
 8015bb2:	9302      	str	r3, [sp, #8]
 8015bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb6:	9301      	str	r3, [sp, #4]
 8015bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	68b9      	ldr	r1, [r7, #8]
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f000 f80e 	bl	8015be2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015bc6:	69f8      	ldr	r0, [r7, #28]
 8015bc8:	f000 f896 	bl	8015cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	61bb      	str	r3, [r7, #24]
 8015bd0:	e002      	b.n	8015bd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015bd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3720      	adds	r7, #32
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015be2:	b580      	push	{r7, lr}
 8015be4:	b088      	sub	sp, #32
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	60f8      	str	r0, [r7, #12]
 8015bea:	60b9      	str	r1, [r7, #8]
 8015bec:	607a      	str	r2, [r7, #4]
 8015bee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	21a5      	movs	r1, #165	; 0xa5
 8015bfc:	f00c ff5d 	bl	8022aba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8015c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c04:	6879      	ldr	r1, [r7, #4]
 8015c06:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015c0a:	440b      	add	r3, r1
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	4413      	add	r3, r2
 8015c10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8015c12:	69bb      	ldr	r3, [r7, #24]
 8015c14:	f023 0307 	bic.w	r3, r3, #7
 8015c18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	f003 0307 	and.w	r3, r3, #7
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d00b      	beq.n	8015c3c <prvInitialiseNewTask+0x5a>
 8015c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c28:	b672      	cpsid	i
 8015c2a:	f383 8811 	msr	BASEPRI, r3
 8015c2e:	f3bf 8f6f 	isb	sy
 8015c32:	f3bf 8f4f 	dsb	sy
 8015c36:	b662      	cpsie	i
 8015c38:	617b      	str	r3, [r7, #20]
 8015c3a:	e7fe      	b.n	8015c3a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	61fb      	str	r3, [r7, #28]
 8015c40:	e012      	b.n	8015c68 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015c42:	68ba      	ldr	r2, [r7, #8]
 8015c44:	69fb      	ldr	r3, [r7, #28]
 8015c46:	4413      	add	r3, r2
 8015c48:	7819      	ldrb	r1, [r3, #0]
 8015c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	4413      	add	r3, r2
 8015c50:	3334      	adds	r3, #52	; 0x34
 8015c52:	460a      	mov	r2, r1
 8015c54:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8015c56:	68ba      	ldr	r2, [r7, #8]
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	4413      	add	r3, r2
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d006      	beq.n	8015c70 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	3301      	adds	r3, #1
 8015c66:	61fb      	str	r3, [r7, #28]
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	2b0f      	cmp	r3, #15
 8015c6c:	d9e9      	bls.n	8015c42 <prvInitialiseNewTask+0x60>
 8015c6e:	e000      	b.n	8015c72 <prvInitialiseNewTask+0x90>
		{
			break;
 8015c70:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c74:	2200      	movs	r2, #0
 8015c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c7c:	2b06      	cmp	r3, #6
 8015c7e:	d901      	bls.n	8015c84 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015c80:	2306      	movs	r3, #6
 8015c82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c92:	2200      	movs	r2, #0
 8015c94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c98:	3304      	adds	r3, #4
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7fe ff58 	bl	8014b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	3318      	adds	r3, #24
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7fe ff53 	bl	8014b50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb2:	f1c3 0207 	rsb	r2, r3, #7
 8015cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc8:	2200      	movs	r2, #0
 8015cca:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015cd4:	683a      	ldr	r2, [r7, #0]
 8015cd6:	68f9      	ldr	r1, [r7, #12]
 8015cd8:	69b8      	ldr	r0, [r7, #24]
 8015cda:	f000 ff9b 	bl	8016c14 <pxPortInitialiseStack>
 8015cde:	4602      	mov	r2, r0
 8015ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8015ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d002      	beq.n	8015cf0 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015cf0:	bf00      	nop
 8015cf2:	3720      	adds	r7, #32
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015d00:	f001 f892 	bl	8016e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015d04:	4b2a      	ldr	r3, [pc, #168]	; (8015db0 <prvAddNewTaskToReadyList+0xb8>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	3301      	adds	r3, #1
 8015d0a:	4a29      	ldr	r2, [pc, #164]	; (8015db0 <prvAddNewTaskToReadyList+0xb8>)
 8015d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015d0e:	4b29      	ldr	r3, [pc, #164]	; (8015db4 <prvAddNewTaskToReadyList+0xbc>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d109      	bne.n	8015d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015d16:	4a27      	ldr	r2, [pc, #156]	; (8015db4 <prvAddNewTaskToReadyList+0xbc>)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015d1c:	4b24      	ldr	r3, [pc, #144]	; (8015db0 <prvAddNewTaskToReadyList+0xb8>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	2b01      	cmp	r3, #1
 8015d22:	d110      	bne.n	8015d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015d24:	f000 fc6c 	bl	8016600 <prvInitialiseTaskLists>
 8015d28:	e00d      	b.n	8015d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015d2a:	4b23      	ldr	r3, [pc, #140]	; (8015db8 <prvAddNewTaskToReadyList+0xc0>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d109      	bne.n	8015d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015d32:	4b20      	ldr	r3, [pc, #128]	; (8015db4 <prvAddNewTaskToReadyList+0xbc>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d802      	bhi.n	8015d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015d40:	4a1c      	ldr	r2, [pc, #112]	; (8015db4 <prvAddNewTaskToReadyList+0xbc>)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015d46:	4b1d      	ldr	r3, [pc, #116]	; (8015dbc <prvAddNewTaskToReadyList+0xc4>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	4a1b      	ldr	r2, [pc, #108]	; (8015dbc <prvAddNewTaskToReadyList+0xc4>)
 8015d4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d54:	2201      	movs	r2, #1
 8015d56:	409a      	lsls	r2, r3
 8015d58:	4b19      	ldr	r3, [pc, #100]	; (8015dc0 <prvAddNewTaskToReadyList+0xc8>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	4313      	orrs	r3, r2
 8015d5e:	4a18      	ldr	r2, [pc, #96]	; (8015dc0 <prvAddNewTaskToReadyList+0xc8>)
 8015d60:	6013      	str	r3, [r2, #0]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d66:	4613      	mov	r3, r2
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	4413      	add	r3, r2
 8015d6c:	009b      	lsls	r3, r3, #2
 8015d6e:	4a15      	ldr	r2, [pc, #84]	; (8015dc4 <prvAddNewTaskToReadyList+0xcc>)
 8015d70:	441a      	add	r2, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	3304      	adds	r3, #4
 8015d76:	4619      	mov	r1, r3
 8015d78:	4610      	mov	r0, r2
 8015d7a:	f7fe fef6 	bl	8014b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015d7e:	f001 f885 	bl	8016e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015d82:	4b0d      	ldr	r3, [pc, #52]	; (8015db8 <prvAddNewTaskToReadyList+0xc0>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d00e      	beq.n	8015da8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015d8a:	4b0a      	ldr	r3, [pc, #40]	; (8015db4 <prvAddNewTaskToReadyList+0xbc>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d207      	bcs.n	8015da8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015d98:	4b0b      	ldr	r3, [pc, #44]	; (8015dc8 <prvAddNewTaskToReadyList+0xd0>)
 8015d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d9e:	601a      	str	r2, [r3, #0]
 8015da0:	f3bf 8f4f 	dsb	sy
 8015da4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015da8:	bf00      	nop
 8015daa:	3708      	adds	r7, #8
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	20000df8 	.word	0x20000df8
 8015db4:	20000cf8 	.word	0x20000cf8
 8015db8:	20000e04 	.word	0x20000e04
 8015dbc:	20000e14 	.word	0x20000e14
 8015dc0:	20000e00 	.word	0x20000e00
 8015dc4:	20000cfc 	.word	0x20000cfc
 8015dc8:	e000ed04 	.word	0xe000ed04

08015dcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d018      	beq.n	8015e10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015dde:	4b14      	ldr	r3, [pc, #80]	; (8015e30 <vTaskDelay+0x64>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00b      	beq.n	8015dfe <vTaskDelay+0x32>
 8015de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dea:	b672      	cpsid	i
 8015dec:	f383 8811 	msr	BASEPRI, r3
 8015df0:	f3bf 8f6f 	isb	sy
 8015df4:	f3bf 8f4f 	dsb	sy
 8015df8:	b662      	cpsie	i
 8015dfa:	60bb      	str	r3, [r7, #8]
 8015dfc:	e7fe      	b.n	8015dfc <vTaskDelay+0x30>
			vTaskSuspendAll();
 8015dfe:	f000 f87d 	bl	8015efc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015e02:	2100      	movs	r1, #0
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f000 fe9f 	bl	8016b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015e0a:	f000 f885 	bl	8015f18 <xTaskResumeAll>
 8015e0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d107      	bne.n	8015e26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015e16:	4b07      	ldr	r3, [pc, #28]	; (8015e34 <vTaskDelay+0x68>)
 8015e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e1c:	601a      	str	r2, [r3, #0]
 8015e1e:	f3bf 8f4f 	dsb	sy
 8015e22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015e26:	bf00      	nop
 8015e28:	3710      	adds	r7, #16
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
 8015e2e:	bf00      	nop
 8015e30:	20000e20 	.word	0x20000e20
 8015e34:	e000ed04 	.word	0xe000ed04

08015e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b08a      	sub	sp, #40	; 0x28
 8015e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015e42:	2300      	movs	r3, #0
 8015e44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015e46:	463a      	mov	r2, r7
 8015e48:	1d39      	adds	r1, r7, #4
 8015e4a:	f107 0308 	add.w	r3, r7, #8
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7ea fe50 	bl	8000af4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015e54:	6839      	ldr	r1, [r7, #0]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	68ba      	ldr	r2, [r7, #8]
 8015e5a:	9202      	str	r2, [sp, #8]
 8015e5c:	9301      	str	r3, [sp, #4]
 8015e5e:	2300      	movs	r3, #0
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	2300      	movs	r3, #0
 8015e64:	460a      	mov	r2, r1
 8015e66:	491f      	ldr	r1, [pc, #124]	; (8015ee4 <vTaskStartScheduler+0xac>)
 8015e68:	481f      	ldr	r0, [pc, #124]	; (8015ee8 <vTaskStartScheduler+0xb0>)
 8015e6a:	f7ff fe16 	bl	8015a9a <xTaskCreateStatic>
 8015e6e:	4602      	mov	r2, r0
 8015e70:	4b1e      	ldr	r3, [pc, #120]	; (8015eec <vTaskStartScheduler+0xb4>)
 8015e72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015e74:	4b1d      	ldr	r3, [pc, #116]	; (8015eec <vTaskStartScheduler+0xb4>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d002      	beq.n	8015e82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	617b      	str	r3, [r7, #20]
 8015e80:	e001      	b.n	8015e86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015e82:	2300      	movs	r3, #0
 8015e84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	2b01      	cmp	r3, #1
 8015e8a:	d117      	bne.n	8015ebc <vTaskStartScheduler+0x84>
 8015e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e90:	b672      	cpsid	i
 8015e92:	f383 8811 	msr	BASEPRI, r3
 8015e96:	f3bf 8f6f 	isb	sy
 8015e9a:	f3bf 8f4f 	dsb	sy
 8015e9e:	b662      	cpsie	i
 8015ea0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015ea2:	4b13      	ldr	r3, [pc, #76]	; (8015ef0 <vTaskStartScheduler+0xb8>)
 8015ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015eaa:	4b12      	ldr	r3, [pc, #72]	; (8015ef4 <vTaskStartScheduler+0xbc>)
 8015eac:	2201      	movs	r2, #1
 8015eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8015eb0:	4b11      	ldr	r3, [pc, #68]	; (8015ef8 <vTaskStartScheduler+0xc0>)
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015eb6:	f000 ff3b 	bl	8016d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015eba:	e00f      	b.n	8015edc <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ec2:	d10b      	bne.n	8015edc <vTaskStartScheduler+0xa4>
 8015ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec8:	b672      	cpsid	i
 8015eca:	f383 8811 	msr	BASEPRI, r3
 8015ece:	f3bf 8f6f 	isb	sy
 8015ed2:	f3bf 8f4f 	dsb	sy
 8015ed6:	b662      	cpsie	i
 8015ed8:	60fb      	str	r3, [r7, #12]
 8015eda:	e7fe      	b.n	8015eda <vTaskStartScheduler+0xa2>
}
 8015edc:	bf00      	nop
 8015ede:	3718      	adds	r7, #24
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}
 8015ee4:	08024164 	.word	0x08024164
 8015ee8:	080165cd 	.word	0x080165cd
 8015eec:	20000e1c 	.word	0x20000e1c
 8015ef0:	20000e18 	.word	0x20000e18
 8015ef4:	20000e04 	.word	0x20000e04
 8015ef8:	20000dfc 	.word	0x20000dfc

08015efc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015efc:	b480      	push	{r7}
 8015efe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015f00:	4b04      	ldr	r3, [pc, #16]	; (8015f14 <vTaskSuspendAll+0x18>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	3301      	adds	r3, #1
 8015f06:	4a03      	ldr	r2, [pc, #12]	; (8015f14 <vTaskSuspendAll+0x18>)
 8015f08:	6013      	str	r3, [r2, #0]
}
 8015f0a:	bf00      	nop
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr
 8015f14:	20000e20 	.word	0x20000e20

08015f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015f22:	2300      	movs	r3, #0
 8015f24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015f26:	4b42      	ldr	r3, [pc, #264]	; (8016030 <xTaskResumeAll+0x118>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d10b      	bne.n	8015f46 <xTaskResumeAll+0x2e>
 8015f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f32:	b672      	cpsid	i
 8015f34:	f383 8811 	msr	BASEPRI, r3
 8015f38:	f3bf 8f6f 	isb	sy
 8015f3c:	f3bf 8f4f 	dsb	sy
 8015f40:	b662      	cpsie	i
 8015f42:	603b      	str	r3, [r7, #0]
 8015f44:	e7fe      	b.n	8015f44 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015f46:	f000 ff6f 	bl	8016e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015f4a:	4b39      	ldr	r3, [pc, #228]	; (8016030 <xTaskResumeAll+0x118>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	3b01      	subs	r3, #1
 8015f50:	4a37      	ldr	r2, [pc, #220]	; (8016030 <xTaskResumeAll+0x118>)
 8015f52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f54:	4b36      	ldr	r3, [pc, #216]	; (8016030 <xTaskResumeAll+0x118>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d161      	bne.n	8016020 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015f5c:	4b35      	ldr	r3, [pc, #212]	; (8016034 <xTaskResumeAll+0x11c>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d05d      	beq.n	8016020 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015f64:	e02e      	b.n	8015fc4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8015f66:	4b34      	ldr	r3, [pc, #208]	; (8016038 <xTaskResumeAll+0x120>)
 8015f68:	68db      	ldr	r3, [r3, #12]
 8015f6a:	68db      	ldr	r3, [r3, #12]
 8015f6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	3318      	adds	r3, #24
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fe fe56 	bl	8014c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	3304      	adds	r3, #4
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7fe fe51 	bl	8014c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f86:	2201      	movs	r2, #1
 8015f88:	409a      	lsls	r2, r3
 8015f8a:	4b2c      	ldr	r3, [pc, #176]	; (801603c <xTaskResumeAll+0x124>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	4313      	orrs	r3, r2
 8015f90:	4a2a      	ldr	r2, [pc, #168]	; (801603c <xTaskResumeAll+0x124>)
 8015f92:	6013      	str	r3, [r2, #0]
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f98:	4613      	mov	r3, r2
 8015f9a:	009b      	lsls	r3, r3, #2
 8015f9c:	4413      	add	r3, r2
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	4a27      	ldr	r2, [pc, #156]	; (8016040 <xTaskResumeAll+0x128>)
 8015fa2:	441a      	add	r2, r3
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	3304      	adds	r3, #4
 8015fa8:	4619      	mov	r1, r3
 8015faa:	4610      	mov	r0, r2
 8015fac:	f7fe fddd 	bl	8014b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fb4:	4b23      	ldr	r3, [pc, #140]	; (8016044 <xTaskResumeAll+0x12c>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d302      	bcc.n	8015fc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015fbe:	4b22      	ldr	r3, [pc, #136]	; (8016048 <xTaskResumeAll+0x130>)
 8015fc0:	2201      	movs	r2, #1
 8015fc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015fc4:	4b1c      	ldr	r3, [pc, #112]	; (8016038 <xTaskResumeAll+0x120>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d1cc      	bne.n	8015f66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d001      	beq.n	8015fd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015fd2:	f000 fbb1 	bl	8016738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015fd6:	4b1d      	ldr	r3, [pc, #116]	; (801604c <xTaskResumeAll+0x134>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d010      	beq.n	8016004 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015fe2:	f000 f859 	bl	8016098 <xTaskIncrementTick>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d002      	beq.n	8015ff2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015fec:	4b16      	ldr	r3, [pc, #88]	; (8016048 <xTaskResumeAll+0x130>)
 8015fee:	2201      	movs	r2, #1
 8015ff0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d1f1      	bne.n	8015fe2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8015ffe:	4b13      	ldr	r3, [pc, #76]	; (801604c <xTaskResumeAll+0x134>)
 8016000:	2200      	movs	r2, #0
 8016002:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016004:	4b10      	ldr	r3, [pc, #64]	; (8016048 <xTaskResumeAll+0x130>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d009      	beq.n	8016020 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801600c:	2301      	movs	r3, #1
 801600e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016010:	4b0f      	ldr	r3, [pc, #60]	; (8016050 <xTaskResumeAll+0x138>)
 8016012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016016:	601a      	str	r2, [r3, #0]
 8016018:	f3bf 8f4f 	dsb	sy
 801601c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016020:	f000 ff34 	bl	8016e8c <vPortExitCritical>

	return xAlreadyYielded;
 8016024:	68bb      	ldr	r3, [r7, #8]
}
 8016026:	4618      	mov	r0, r3
 8016028:	3710      	adds	r7, #16
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	20000e20 	.word	0x20000e20
 8016034:	20000df8 	.word	0x20000df8
 8016038:	20000db8 	.word	0x20000db8
 801603c:	20000e00 	.word	0x20000e00
 8016040:	20000cfc 	.word	0x20000cfc
 8016044:	20000cf8 	.word	0x20000cf8
 8016048:	20000e0c 	.word	0x20000e0c
 801604c:	20000e08 	.word	0x20000e08
 8016050:	e000ed04 	.word	0xe000ed04

08016054 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801605a:	4b05      	ldr	r3, [pc, #20]	; (8016070 <xTaskGetTickCount+0x1c>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016060:	687b      	ldr	r3, [r7, #4]
}
 8016062:	4618      	mov	r0, r3
 8016064:	370c      	adds	r7, #12
 8016066:	46bd      	mov	sp, r7
 8016068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606c:	4770      	bx	lr
 801606e:	bf00      	nop
 8016070:	20000dfc 	.word	0x20000dfc

08016074 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801607a:	f000 ffb5 	bl	8016fe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801607e:	2300      	movs	r3, #0
 8016080:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016082:	4b04      	ldr	r3, [pc, #16]	; (8016094 <xTaskGetTickCountFromISR+0x20>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016088:	683b      	ldr	r3, [r7, #0]
}
 801608a:	4618      	mov	r0, r3
 801608c:	3708      	adds	r7, #8
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	20000dfc 	.word	0x20000dfc

08016098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b086      	sub	sp, #24
 801609c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801609e:	2300      	movs	r3, #0
 80160a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160a2:	4b51      	ldr	r3, [pc, #324]	; (80161e8 <xTaskIncrementTick+0x150>)
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	f040 808e 	bne.w	80161c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80160ac:	4b4f      	ldr	r3, [pc, #316]	; (80161ec <xTaskIncrementTick+0x154>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	3301      	adds	r3, #1
 80160b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80160b4:	4a4d      	ldr	r2, [pc, #308]	; (80161ec <xTaskIncrementTick+0x154>)
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80160ba:	693b      	ldr	r3, [r7, #16]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d121      	bne.n	8016104 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80160c0:	4b4b      	ldr	r3, [pc, #300]	; (80161f0 <xTaskIncrementTick+0x158>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00b      	beq.n	80160e2 <xTaskIncrementTick+0x4a>
 80160ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ce:	b672      	cpsid	i
 80160d0:	f383 8811 	msr	BASEPRI, r3
 80160d4:	f3bf 8f6f 	isb	sy
 80160d8:	f3bf 8f4f 	dsb	sy
 80160dc:	b662      	cpsie	i
 80160de:	603b      	str	r3, [r7, #0]
 80160e0:	e7fe      	b.n	80160e0 <xTaskIncrementTick+0x48>
 80160e2:	4b43      	ldr	r3, [pc, #268]	; (80161f0 <xTaskIncrementTick+0x158>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	60fb      	str	r3, [r7, #12]
 80160e8:	4b42      	ldr	r3, [pc, #264]	; (80161f4 <xTaskIncrementTick+0x15c>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4a40      	ldr	r2, [pc, #256]	; (80161f0 <xTaskIncrementTick+0x158>)
 80160ee:	6013      	str	r3, [r2, #0]
 80160f0:	4a40      	ldr	r2, [pc, #256]	; (80161f4 <xTaskIncrementTick+0x15c>)
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	6013      	str	r3, [r2, #0]
 80160f6:	4b40      	ldr	r3, [pc, #256]	; (80161f8 <xTaskIncrementTick+0x160>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	3301      	adds	r3, #1
 80160fc:	4a3e      	ldr	r2, [pc, #248]	; (80161f8 <xTaskIncrementTick+0x160>)
 80160fe:	6013      	str	r3, [r2, #0]
 8016100:	f000 fb1a 	bl	8016738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016104:	4b3d      	ldr	r3, [pc, #244]	; (80161fc <xTaskIncrementTick+0x164>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	693a      	ldr	r2, [r7, #16]
 801610a:	429a      	cmp	r2, r3
 801610c:	d34d      	bcc.n	80161aa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801610e:	4b38      	ldr	r3, [pc, #224]	; (80161f0 <xTaskIncrementTick+0x158>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d101      	bne.n	801611c <xTaskIncrementTick+0x84>
 8016118:	2301      	movs	r3, #1
 801611a:	e000      	b.n	801611e <xTaskIncrementTick+0x86>
 801611c:	2300      	movs	r3, #0
 801611e:	2b00      	cmp	r3, #0
 8016120:	d004      	beq.n	801612c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016122:	4b36      	ldr	r3, [pc, #216]	; (80161fc <xTaskIncrementTick+0x164>)
 8016124:	f04f 32ff 	mov.w	r2, #4294967295
 8016128:	601a      	str	r2, [r3, #0]
					break;
 801612a:	e03e      	b.n	80161aa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801612c:	4b30      	ldr	r3, [pc, #192]	; (80161f0 <xTaskIncrementTick+0x158>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	68db      	ldr	r3, [r3, #12]
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	685b      	ldr	r3, [r3, #4]
 801613a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801613c:	693a      	ldr	r2, [r7, #16]
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	429a      	cmp	r2, r3
 8016142:	d203      	bcs.n	801614c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016144:	4a2d      	ldr	r2, [pc, #180]	; (80161fc <xTaskIncrementTick+0x164>)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	6013      	str	r3, [r2, #0]
						break;
 801614a:	e02e      	b.n	80161aa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	3304      	adds	r3, #4
 8016150:	4618      	mov	r0, r3
 8016152:	f7fe fd67 	bl	8014c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801615a:	2b00      	cmp	r3, #0
 801615c:	d004      	beq.n	8016168 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	3318      	adds	r3, #24
 8016162:	4618      	mov	r0, r3
 8016164:	f7fe fd5e 	bl	8014c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801616c:	2201      	movs	r2, #1
 801616e:	409a      	lsls	r2, r3
 8016170:	4b23      	ldr	r3, [pc, #140]	; (8016200 <xTaskIncrementTick+0x168>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	4313      	orrs	r3, r2
 8016176:	4a22      	ldr	r2, [pc, #136]	; (8016200 <xTaskIncrementTick+0x168>)
 8016178:	6013      	str	r3, [r2, #0]
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801617e:	4613      	mov	r3, r2
 8016180:	009b      	lsls	r3, r3, #2
 8016182:	4413      	add	r3, r2
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	4a1f      	ldr	r2, [pc, #124]	; (8016204 <xTaskIncrementTick+0x16c>)
 8016188:	441a      	add	r2, r3
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	3304      	adds	r3, #4
 801618e:	4619      	mov	r1, r3
 8016190:	4610      	mov	r0, r2
 8016192:	f7fe fcea 	bl	8014b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801619a:	4b1b      	ldr	r3, [pc, #108]	; (8016208 <xTaskIncrementTick+0x170>)
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d3b4      	bcc.n	801610e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80161a4:	2301      	movs	r3, #1
 80161a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80161a8:	e7b1      	b.n	801610e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80161aa:	4b17      	ldr	r3, [pc, #92]	; (8016208 <xTaskIncrementTick+0x170>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161b0:	4914      	ldr	r1, [pc, #80]	; (8016204 <xTaskIncrementTick+0x16c>)
 80161b2:	4613      	mov	r3, r2
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	4413      	add	r3, r2
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	440b      	add	r3, r1
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d907      	bls.n	80161d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80161c2:	2301      	movs	r3, #1
 80161c4:	617b      	str	r3, [r7, #20]
 80161c6:	e004      	b.n	80161d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80161c8:	4b10      	ldr	r3, [pc, #64]	; (801620c <xTaskIncrementTick+0x174>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	3301      	adds	r3, #1
 80161ce:	4a0f      	ldr	r2, [pc, #60]	; (801620c <xTaskIncrementTick+0x174>)
 80161d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80161d2:	4b0f      	ldr	r3, [pc, #60]	; (8016210 <xTaskIncrementTick+0x178>)
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d001      	beq.n	80161de <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80161da:	2301      	movs	r3, #1
 80161dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80161de:	697b      	ldr	r3, [r7, #20]
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3718      	adds	r7, #24
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}
 80161e8:	20000e20 	.word	0x20000e20
 80161ec:	20000dfc 	.word	0x20000dfc
 80161f0:	20000db0 	.word	0x20000db0
 80161f4:	20000db4 	.word	0x20000db4
 80161f8:	20000e10 	.word	0x20000e10
 80161fc:	20000e18 	.word	0x20000e18
 8016200:	20000e00 	.word	0x20000e00
 8016204:	20000cfc 	.word	0x20000cfc
 8016208:	20000cf8 	.word	0x20000cf8
 801620c:	20000e08 	.word	0x20000e08
 8016210:	20000e0c 	.word	0x20000e0c

08016214 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d103      	bne.n	801622c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8016224:	4b08      	ldr	r3, [pc, #32]	; (8016248 <vTaskSetApplicationTaskTag+0x34>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	60fb      	str	r3, [r7, #12]
 801622a:	e001      	b.n	8016230 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8016230:	f000 fdfa 	bl	8016e28 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	683a      	ldr	r2, [r7, #0]
 8016238:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 801623a:	f000 fe27 	bl	8016e8c <vPortExitCritical>
	}
 801623e:	bf00      	nop
 8016240:	3710      	adds	r7, #16
 8016242:	46bd      	mov	sp, r7
 8016244:	bd80      	pop	{r7, pc}
 8016246:	bf00      	nop
 8016248:	20000cf8 	.word	0x20000cf8

0801624c <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 801624c:	b580      	push	{r7, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d103      	bne.n	8016264 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801625c:	4b0b      	ldr	r3, [pc, #44]	; (801628c <xTaskCallApplicationTaskHook+0x40>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	60fb      	str	r3, [r7, #12]
 8016262:	e001      	b.n	8016268 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801626c:	2b00      	cmp	r3, #0
 801626e:	d005      	beq.n	801627c <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016274:	6838      	ldr	r0, [r7, #0]
 8016276:	4798      	blx	r3
 8016278:	60b8      	str	r0, [r7, #8]
 801627a:	e001      	b.n	8016280 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 801627c:	2300      	movs	r3, #0
 801627e:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8016280:	68bb      	ldr	r3, [r7, #8]
	}
 8016282:	4618      	mov	r0, r3
 8016284:	3710      	adds	r7, #16
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	20000cf8 	.word	0x20000cf8

08016290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b088      	sub	sp, #32
 8016294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016296:	4b40      	ldr	r3, [pc, #256]	; (8016398 <vTaskSwitchContext+0x108>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d003      	beq.n	80162a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801629e:	4b3f      	ldr	r3, [pc, #252]	; (801639c <vTaskSwitchContext+0x10c>)
 80162a0:	2201      	movs	r2, #1
 80162a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80162a4:	e073      	b.n	801638e <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 80162a6:	4b3d      	ldr	r3, [pc, #244]	; (801639c <vTaskSwitchContext+0x10c>)
 80162a8:	2200      	movs	r2, #0
 80162aa:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80162ac:	4b3c      	ldr	r3, [pc, #240]	; (80163a0 <vTaskSwitchContext+0x110>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	2101      	movs	r1, #1
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7ff ffca 	bl	801624c <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 80162b8:	4b39      	ldr	r3, [pc, #228]	; (80163a0 <vTaskSwitchContext+0x110>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162be:	61fb      	str	r3, [r7, #28]
 80162c0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80162c4:	61bb      	str	r3, [r7, #24]
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	69ba      	ldr	r2, [r7, #24]
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d111      	bne.n	80162f4 <vTaskSwitchContext+0x64>
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	3304      	adds	r3, #4
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	69ba      	ldr	r2, [r7, #24]
 80162d8:	429a      	cmp	r2, r3
 80162da:	d10b      	bne.n	80162f4 <vTaskSwitchContext+0x64>
 80162dc:	69fb      	ldr	r3, [r7, #28]
 80162de:	3308      	adds	r3, #8
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	69ba      	ldr	r2, [r7, #24]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d105      	bne.n	80162f4 <vTaskSwitchContext+0x64>
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	330c      	adds	r3, #12
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	69ba      	ldr	r2, [r7, #24]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d008      	beq.n	8016306 <vTaskSwitchContext+0x76>
 80162f4:	4b2a      	ldr	r3, [pc, #168]	; (80163a0 <vTaskSwitchContext+0x110>)
 80162f6:	681a      	ldr	r2, [r3, #0]
 80162f8:	4b29      	ldr	r3, [pc, #164]	; (80163a0 <vTaskSwitchContext+0x110>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	3334      	adds	r3, #52	; 0x34
 80162fe:	4619      	mov	r1, r3
 8016300:	4610      	mov	r0, r2
 8016302:	f7fe fa08 	bl	8014716 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8016306:	4b27      	ldr	r3, [pc, #156]	; (80163a4 <vTaskSwitchContext+0x114>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	fab3 f383 	clz	r3, r3
 8016312:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016314:	7afb      	ldrb	r3, [r7, #11]
 8016316:	f1c3 031f 	rsb	r3, r3, #31
 801631a:	617b      	str	r3, [r7, #20]
 801631c:	4922      	ldr	r1, [pc, #136]	; (80163a8 <vTaskSwitchContext+0x118>)
 801631e:	697a      	ldr	r2, [r7, #20]
 8016320:	4613      	mov	r3, r2
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	4413      	add	r3, r2
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	440b      	add	r3, r1
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d10b      	bne.n	8016348 <vTaskSwitchContext+0xb8>
	__asm volatile
 8016330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016334:	b672      	cpsid	i
 8016336:	f383 8811 	msr	BASEPRI, r3
 801633a:	f3bf 8f6f 	isb	sy
 801633e:	f3bf 8f4f 	dsb	sy
 8016342:	b662      	cpsie	i
 8016344:	607b      	str	r3, [r7, #4]
 8016346:	e7fe      	b.n	8016346 <vTaskSwitchContext+0xb6>
 8016348:	697a      	ldr	r2, [r7, #20]
 801634a:	4613      	mov	r3, r2
 801634c:	009b      	lsls	r3, r3, #2
 801634e:	4413      	add	r3, r2
 8016350:	009b      	lsls	r3, r3, #2
 8016352:	4a15      	ldr	r2, [pc, #84]	; (80163a8 <vTaskSwitchContext+0x118>)
 8016354:	4413      	add	r3, r2
 8016356:	613b      	str	r3, [r7, #16]
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	685a      	ldr	r2, [r3, #4]
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	605a      	str	r2, [r3, #4]
 8016362:	693b      	ldr	r3, [r7, #16]
 8016364:	685a      	ldr	r2, [r3, #4]
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	3308      	adds	r3, #8
 801636a:	429a      	cmp	r2, r3
 801636c:	d104      	bne.n	8016378 <vTaskSwitchContext+0xe8>
 801636e:	693b      	ldr	r3, [r7, #16]
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	685a      	ldr	r2, [r3, #4]
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	605a      	str	r2, [r3, #4]
 8016378:	693b      	ldr	r3, [r7, #16]
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	68db      	ldr	r3, [r3, #12]
 801637e:	4a08      	ldr	r2, [pc, #32]	; (80163a0 <vTaskSwitchContext+0x110>)
 8016380:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8016382:	4b07      	ldr	r3, [pc, #28]	; (80163a0 <vTaskSwitchContext+0x110>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2100      	movs	r1, #0
 8016388:	4618      	mov	r0, r3
 801638a:	f7ff ff5f 	bl	801624c <xTaskCallApplicationTaskHook>
}
 801638e:	bf00      	nop
 8016390:	3720      	adds	r7, #32
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	20000e20 	.word	0x20000e20
 801639c:	20000e0c 	.word	0x20000e0c
 80163a0:	20000cf8 	.word	0x20000cf8
 80163a4:	20000e00 	.word	0x20000e00
 80163a8:	20000cfc 	.word	0x20000cfc

080163ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
 80163b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d10b      	bne.n	80163d4 <vTaskPlaceOnEventList+0x28>
 80163bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163c0:	b672      	cpsid	i
 80163c2:	f383 8811 	msr	BASEPRI, r3
 80163c6:	f3bf 8f6f 	isb	sy
 80163ca:	f3bf 8f4f 	dsb	sy
 80163ce:	b662      	cpsie	i
 80163d0:	60fb      	str	r3, [r7, #12]
 80163d2:	e7fe      	b.n	80163d2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80163d4:	4b07      	ldr	r3, [pc, #28]	; (80163f4 <vTaskPlaceOnEventList+0x48>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	3318      	adds	r3, #24
 80163da:	4619      	mov	r1, r3
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	f7fe fbe8 	bl	8014bb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80163e2:	2101      	movs	r1, #1
 80163e4:	6838      	ldr	r0, [r7, #0]
 80163e6:	f000 fbaf 	bl	8016b48 <prvAddCurrentTaskToDelayedList>
}
 80163ea:	bf00      	nop
 80163ec:	3710      	adds	r7, #16
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	20000cf8 	.word	0x20000cf8

080163f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b086      	sub	sp, #24
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	68db      	ldr	r3, [r3, #12]
 8016406:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016408:	693b      	ldr	r3, [r7, #16]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d10b      	bne.n	8016426 <xTaskRemoveFromEventList+0x2e>
 801640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016412:	b672      	cpsid	i
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	b662      	cpsie	i
 8016422:	60fb      	str	r3, [r7, #12]
 8016424:	e7fe      	b.n	8016424 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016426:	693b      	ldr	r3, [r7, #16]
 8016428:	3318      	adds	r3, #24
 801642a:	4618      	mov	r0, r3
 801642c:	f7fe fbfa 	bl	8014c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016430:	4b1d      	ldr	r3, [pc, #116]	; (80164a8 <xTaskRemoveFromEventList+0xb0>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d11c      	bne.n	8016472 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016438:	693b      	ldr	r3, [r7, #16]
 801643a:	3304      	adds	r3, #4
 801643c:	4618      	mov	r0, r3
 801643e:	f7fe fbf1 	bl	8014c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016446:	2201      	movs	r2, #1
 8016448:	409a      	lsls	r2, r3
 801644a:	4b18      	ldr	r3, [pc, #96]	; (80164ac <xTaskRemoveFromEventList+0xb4>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	4313      	orrs	r3, r2
 8016450:	4a16      	ldr	r2, [pc, #88]	; (80164ac <xTaskRemoveFromEventList+0xb4>)
 8016452:	6013      	str	r3, [r2, #0]
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016458:	4613      	mov	r3, r2
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	4413      	add	r3, r2
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	4a13      	ldr	r2, [pc, #76]	; (80164b0 <xTaskRemoveFromEventList+0xb8>)
 8016462:	441a      	add	r2, r3
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	3304      	adds	r3, #4
 8016468:	4619      	mov	r1, r3
 801646a:	4610      	mov	r0, r2
 801646c:	f7fe fb7d 	bl	8014b6a <vListInsertEnd>
 8016470:	e005      	b.n	801647e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016472:	693b      	ldr	r3, [r7, #16]
 8016474:	3318      	adds	r3, #24
 8016476:	4619      	mov	r1, r3
 8016478:	480e      	ldr	r0, [pc, #56]	; (80164b4 <xTaskRemoveFromEventList+0xbc>)
 801647a:	f7fe fb76 	bl	8014b6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016482:	4b0d      	ldr	r3, [pc, #52]	; (80164b8 <xTaskRemoveFromEventList+0xc0>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016488:	429a      	cmp	r2, r3
 801648a:	d905      	bls.n	8016498 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801648c:	2301      	movs	r3, #1
 801648e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016490:	4b0a      	ldr	r3, [pc, #40]	; (80164bc <xTaskRemoveFromEventList+0xc4>)
 8016492:	2201      	movs	r2, #1
 8016494:	601a      	str	r2, [r3, #0]
 8016496:	e001      	b.n	801649c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016498:	2300      	movs	r3, #0
 801649a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 801649c:	697b      	ldr	r3, [r7, #20]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3718      	adds	r7, #24
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	20000e20 	.word	0x20000e20
 80164ac:	20000e00 	.word	0x20000e00
 80164b0:	20000cfc 	.word	0x20000cfc
 80164b4:	20000db8 	.word	0x20000db8
 80164b8:	20000cf8 	.word	0x20000cf8
 80164bc:	20000e0c 	.word	0x20000e0c

080164c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80164c0:	b480      	push	{r7}
 80164c2:	b083      	sub	sp, #12
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80164c8:	4b06      	ldr	r3, [pc, #24]	; (80164e4 <vTaskInternalSetTimeOutState+0x24>)
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80164d0:	4b05      	ldr	r3, [pc, #20]	; (80164e8 <vTaskInternalSetTimeOutState+0x28>)
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	605a      	str	r2, [r3, #4]
}
 80164d8:	bf00      	nop
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr
 80164e4:	20000e10 	.word	0x20000e10
 80164e8:	20000dfc 	.word	0x20000dfc

080164ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b088      	sub	sp, #32
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
 80164f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d10b      	bne.n	8016514 <xTaskCheckForTimeOut+0x28>
 80164fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016500:	b672      	cpsid	i
 8016502:	f383 8811 	msr	BASEPRI, r3
 8016506:	f3bf 8f6f 	isb	sy
 801650a:	f3bf 8f4f 	dsb	sy
 801650e:	b662      	cpsie	i
 8016510:	613b      	str	r3, [r7, #16]
 8016512:	e7fe      	b.n	8016512 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d10b      	bne.n	8016532 <xTaskCheckForTimeOut+0x46>
 801651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801651e:	b672      	cpsid	i
 8016520:	f383 8811 	msr	BASEPRI, r3
 8016524:	f3bf 8f6f 	isb	sy
 8016528:	f3bf 8f4f 	dsb	sy
 801652c:	b662      	cpsie	i
 801652e:	60fb      	str	r3, [r7, #12]
 8016530:	e7fe      	b.n	8016530 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8016532:	f000 fc79 	bl	8016e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016536:	4b1d      	ldr	r3, [pc, #116]	; (80165ac <xTaskCheckForTimeOut+0xc0>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	69ba      	ldr	r2, [r7, #24]
 8016542:	1ad3      	subs	r3, r2, r3
 8016544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801654e:	d102      	bne.n	8016556 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016550:	2300      	movs	r3, #0
 8016552:	61fb      	str	r3, [r7, #28]
 8016554:	e023      	b.n	801659e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	4b15      	ldr	r3, [pc, #84]	; (80165b0 <xTaskCheckForTimeOut+0xc4>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	429a      	cmp	r2, r3
 8016560:	d007      	beq.n	8016572 <xTaskCheckForTimeOut+0x86>
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	69ba      	ldr	r2, [r7, #24]
 8016568:	429a      	cmp	r2, r3
 801656a:	d302      	bcc.n	8016572 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801656c:	2301      	movs	r3, #1
 801656e:	61fb      	str	r3, [r7, #28]
 8016570:	e015      	b.n	801659e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	697a      	ldr	r2, [r7, #20]
 8016578:	429a      	cmp	r2, r3
 801657a:	d20b      	bcs.n	8016594 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	1ad2      	subs	r2, r2, r3
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f7ff ff99 	bl	80164c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801658e:	2300      	movs	r3, #0
 8016590:	61fb      	str	r3, [r7, #28]
 8016592:	e004      	b.n	801659e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	2200      	movs	r2, #0
 8016598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801659a:	2301      	movs	r3, #1
 801659c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801659e:	f000 fc75 	bl	8016e8c <vPortExitCritical>

	return xReturn;
 80165a2:	69fb      	ldr	r3, [r7, #28]
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3720      	adds	r7, #32
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}
 80165ac:	20000dfc 	.word	0x20000dfc
 80165b0:	20000e10 	.word	0x20000e10

080165b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80165b4:	b480      	push	{r7}
 80165b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80165b8:	4b03      	ldr	r3, [pc, #12]	; (80165c8 <vTaskMissedYield+0x14>)
 80165ba:	2201      	movs	r2, #1
 80165bc:	601a      	str	r2, [r3, #0]
}
 80165be:	bf00      	nop
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr
 80165c8:	20000e0c 	.word	0x20000e0c

080165cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b082      	sub	sp, #8
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80165d4:	f000 f854 	bl	8016680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80165d8:	4b07      	ldr	r3, [pc, #28]	; (80165f8 <prvIdleTask+0x2c>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2b01      	cmp	r3, #1
 80165de:	d907      	bls.n	80165f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80165e0:	4b06      	ldr	r3, [pc, #24]	; (80165fc <prvIdleTask+0x30>)
 80165e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165e6:	601a      	str	r2, [r3, #0]
 80165e8:	f3bf 8f4f 	dsb	sy
 80165ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80165f0:	f7fe f89e 	bl	8014730 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80165f4:	e7ee      	b.n	80165d4 <prvIdleTask+0x8>
 80165f6:	bf00      	nop
 80165f8:	20000cfc 	.word	0x20000cfc
 80165fc:	e000ed04 	.word	0xe000ed04

08016600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016606:	2300      	movs	r3, #0
 8016608:	607b      	str	r3, [r7, #4]
 801660a:	e00c      	b.n	8016626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	4613      	mov	r3, r2
 8016610:	009b      	lsls	r3, r3, #2
 8016612:	4413      	add	r3, r2
 8016614:	009b      	lsls	r3, r3, #2
 8016616:	4a12      	ldr	r2, [pc, #72]	; (8016660 <prvInitialiseTaskLists+0x60>)
 8016618:	4413      	add	r3, r2
 801661a:	4618      	mov	r0, r3
 801661c:	f7fe fa78 	bl	8014b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	3301      	adds	r3, #1
 8016624:	607b      	str	r3, [r7, #4]
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	2b06      	cmp	r3, #6
 801662a:	d9ef      	bls.n	801660c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801662c:	480d      	ldr	r0, [pc, #52]	; (8016664 <prvInitialiseTaskLists+0x64>)
 801662e:	f7fe fa6f 	bl	8014b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016632:	480d      	ldr	r0, [pc, #52]	; (8016668 <prvInitialiseTaskLists+0x68>)
 8016634:	f7fe fa6c 	bl	8014b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016638:	480c      	ldr	r0, [pc, #48]	; (801666c <prvInitialiseTaskLists+0x6c>)
 801663a:	f7fe fa69 	bl	8014b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801663e:	480c      	ldr	r0, [pc, #48]	; (8016670 <prvInitialiseTaskLists+0x70>)
 8016640:	f7fe fa66 	bl	8014b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016644:	480b      	ldr	r0, [pc, #44]	; (8016674 <prvInitialiseTaskLists+0x74>)
 8016646:	f7fe fa63 	bl	8014b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801664a:	4b0b      	ldr	r3, [pc, #44]	; (8016678 <prvInitialiseTaskLists+0x78>)
 801664c:	4a05      	ldr	r2, [pc, #20]	; (8016664 <prvInitialiseTaskLists+0x64>)
 801664e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016650:	4b0a      	ldr	r3, [pc, #40]	; (801667c <prvInitialiseTaskLists+0x7c>)
 8016652:	4a05      	ldr	r2, [pc, #20]	; (8016668 <prvInitialiseTaskLists+0x68>)
 8016654:	601a      	str	r2, [r3, #0]
}
 8016656:	bf00      	nop
 8016658:	3708      	adds	r7, #8
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}
 801665e:	bf00      	nop
 8016660:	20000cfc 	.word	0x20000cfc
 8016664:	20000d88 	.word	0x20000d88
 8016668:	20000d9c 	.word	0x20000d9c
 801666c:	20000db8 	.word	0x20000db8
 8016670:	20000dcc 	.word	0x20000dcc
 8016674:	20000de4 	.word	0x20000de4
 8016678:	20000db0 	.word	0x20000db0
 801667c:	20000db4 	.word	0x20000db4

08016680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016686:	e019      	b.n	80166bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016688:	f000 fbce 	bl	8016e28 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801668c:	4b0f      	ldr	r3, [pc, #60]	; (80166cc <prvCheckTasksWaitingTermination+0x4c>)
 801668e:	68db      	ldr	r3, [r3, #12]
 8016690:	68db      	ldr	r3, [r3, #12]
 8016692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	3304      	adds	r3, #4
 8016698:	4618      	mov	r0, r3
 801669a:	f7fe fac3 	bl	8014c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801669e:	4b0c      	ldr	r3, [pc, #48]	; (80166d0 <prvCheckTasksWaitingTermination+0x50>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	3b01      	subs	r3, #1
 80166a4:	4a0a      	ldr	r2, [pc, #40]	; (80166d0 <prvCheckTasksWaitingTermination+0x50>)
 80166a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80166a8:	4b0a      	ldr	r3, [pc, #40]	; (80166d4 <prvCheckTasksWaitingTermination+0x54>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	3b01      	subs	r3, #1
 80166ae:	4a09      	ldr	r2, [pc, #36]	; (80166d4 <prvCheckTasksWaitingTermination+0x54>)
 80166b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80166b2:	f000 fbeb 	bl	8016e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f000 f80e 	bl	80166d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80166bc:	4b05      	ldr	r3, [pc, #20]	; (80166d4 <prvCheckTasksWaitingTermination+0x54>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d1e1      	bne.n	8016688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80166c4:	bf00      	nop
 80166c6:	3708      	adds	r7, #8
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	20000dcc 	.word	0x20000dcc
 80166d0:	20000df8 	.word	0x20000df8
 80166d4:	20000de0 	.word	0x20000de0

080166d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b084      	sub	sp, #16
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d108      	bne.n	80166fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ee:	4618      	mov	r0, r3
 80166f0:	f000 fd88 	bl	8017204 <vPortFree>
				vPortFree( pxTCB );
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f000 fd85 	bl	8017204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80166fa:	e019      	b.n	8016730 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8016702:	2b01      	cmp	r3, #1
 8016704:	d103      	bne.n	801670e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f000 fd7c 	bl	8017204 <vPortFree>
	}
 801670c:	e010      	b.n	8016730 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8016714:	2b02      	cmp	r3, #2
 8016716:	d00b      	beq.n	8016730 <prvDeleteTCB+0x58>
 8016718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671c:	b672      	cpsid	i
 801671e:	f383 8811 	msr	BASEPRI, r3
 8016722:	f3bf 8f6f 	isb	sy
 8016726:	f3bf 8f4f 	dsb	sy
 801672a:	b662      	cpsie	i
 801672c:	60fb      	str	r3, [r7, #12]
 801672e:	e7fe      	b.n	801672e <prvDeleteTCB+0x56>
	}
 8016730:	bf00      	nop
 8016732:	3710      	adds	r7, #16
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801673e:	4b0f      	ldr	r3, [pc, #60]	; (801677c <prvResetNextTaskUnblockTime+0x44>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d101      	bne.n	801674c <prvResetNextTaskUnblockTime+0x14>
 8016748:	2301      	movs	r3, #1
 801674a:	e000      	b.n	801674e <prvResetNextTaskUnblockTime+0x16>
 801674c:	2300      	movs	r3, #0
 801674e:	2b00      	cmp	r3, #0
 8016750:	d004      	beq.n	801675c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016752:	4b0b      	ldr	r3, [pc, #44]	; (8016780 <prvResetNextTaskUnblockTime+0x48>)
 8016754:	f04f 32ff 	mov.w	r2, #4294967295
 8016758:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801675a:	e008      	b.n	801676e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801675c:	4b07      	ldr	r3, [pc, #28]	; (801677c <prvResetNextTaskUnblockTime+0x44>)
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	68db      	ldr	r3, [r3, #12]
 8016762:	68db      	ldr	r3, [r3, #12]
 8016764:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	685b      	ldr	r3, [r3, #4]
 801676a:	4a05      	ldr	r2, [pc, #20]	; (8016780 <prvResetNextTaskUnblockTime+0x48>)
 801676c:	6013      	str	r3, [r2, #0]
}
 801676e:	bf00      	nop
 8016770:	370c      	adds	r7, #12
 8016772:	46bd      	mov	sp, r7
 8016774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016778:	4770      	bx	lr
 801677a:	bf00      	nop
 801677c:	20000db0 	.word	0x20000db0
 8016780:	20000e18 	.word	0x20000e18

08016784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016784:	b480      	push	{r7}
 8016786:	b083      	sub	sp, #12
 8016788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801678a:	4b0b      	ldr	r3, [pc, #44]	; (80167b8 <xTaskGetSchedulerState+0x34>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d102      	bne.n	8016798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016792:	2301      	movs	r3, #1
 8016794:	607b      	str	r3, [r7, #4]
 8016796:	e008      	b.n	80167aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016798:	4b08      	ldr	r3, [pc, #32]	; (80167bc <xTaskGetSchedulerState+0x38>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d102      	bne.n	80167a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80167a0:	2302      	movs	r3, #2
 80167a2:	607b      	str	r3, [r7, #4]
 80167a4:	e001      	b.n	80167aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80167a6:	2300      	movs	r3, #0
 80167a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80167aa:	687b      	ldr	r3, [r7, #4]
	}
 80167ac:	4618      	mov	r0, r3
 80167ae:	370c      	adds	r7, #12
 80167b0:	46bd      	mov	sp, r7
 80167b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b6:	4770      	bx	lr
 80167b8:	20000e04 	.word	0x20000e04
 80167bc:	20000e20 	.word	0x20000e20

080167c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b084      	sub	sp, #16
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80167cc:	2300      	movs	r3, #0
 80167ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d06e      	beq.n	80168b4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167da:	4b39      	ldr	r3, [pc, #228]	; (80168c0 <xTaskPriorityInherit+0x100>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d25e      	bcs.n	80168a2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	699b      	ldr	r3, [r3, #24]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	db06      	blt.n	80167fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80167ec:	4b34      	ldr	r3, [pc, #208]	; (80168c0 <xTaskPriorityInherit+0x100>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167f2:	f1c3 0207 	rsb	r2, r3, #7
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	6959      	ldr	r1, [r3, #20]
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016802:	4613      	mov	r3, r2
 8016804:	009b      	lsls	r3, r3, #2
 8016806:	4413      	add	r3, r2
 8016808:	009b      	lsls	r3, r3, #2
 801680a:	4a2e      	ldr	r2, [pc, #184]	; (80168c4 <xTaskPriorityInherit+0x104>)
 801680c:	4413      	add	r3, r2
 801680e:	4299      	cmp	r1, r3
 8016810:	d101      	bne.n	8016816 <xTaskPriorityInherit+0x56>
 8016812:	2301      	movs	r3, #1
 8016814:	e000      	b.n	8016818 <xTaskPriorityInherit+0x58>
 8016816:	2300      	movs	r3, #0
 8016818:	2b00      	cmp	r3, #0
 801681a:	d03a      	beq.n	8016892 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	3304      	adds	r3, #4
 8016820:	4618      	mov	r0, r3
 8016822:	f7fe f9ff 	bl	8014c24 <uxListRemove>
 8016826:	4603      	mov	r3, r0
 8016828:	2b00      	cmp	r3, #0
 801682a:	d115      	bne.n	8016858 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801682c:	68bb      	ldr	r3, [r7, #8]
 801682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016830:	4924      	ldr	r1, [pc, #144]	; (80168c4 <xTaskPriorityInherit+0x104>)
 8016832:	4613      	mov	r3, r2
 8016834:	009b      	lsls	r3, r3, #2
 8016836:	4413      	add	r3, r2
 8016838:	009b      	lsls	r3, r3, #2
 801683a:	440b      	add	r3, r1
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10a      	bne.n	8016858 <xTaskPriorityInherit+0x98>
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016846:	2201      	movs	r2, #1
 8016848:	fa02 f303 	lsl.w	r3, r2, r3
 801684c:	43da      	mvns	r2, r3
 801684e:	4b1e      	ldr	r3, [pc, #120]	; (80168c8 <xTaskPriorityInherit+0x108>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	4013      	ands	r3, r2
 8016854:	4a1c      	ldr	r2, [pc, #112]	; (80168c8 <xTaskPriorityInherit+0x108>)
 8016856:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016858:	4b19      	ldr	r3, [pc, #100]	; (80168c0 <xTaskPriorityInherit+0x100>)
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016866:	2201      	movs	r2, #1
 8016868:	409a      	lsls	r2, r3
 801686a:	4b17      	ldr	r3, [pc, #92]	; (80168c8 <xTaskPriorityInherit+0x108>)
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	4313      	orrs	r3, r2
 8016870:	4a15      	ldr	r2, [pc, #84]	; (80168c8 <xTaskPriorityInherit+0x108>)
 8016872:	6013      	str	r3, [r2, #0]
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016878:	4613      	mov	r3, r2
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	4413      	add	r3, r2
 801687e:	009b      	lsls	r3, r3, #2
 8016880:	4a10      	ldr	r2, [pc, #64]	; (80168c4 <xTaskPriorityInherit+0x104>)
 8016882:	441a      	add	r2, r3
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	3304      	adds	r3, #4
 8016888:	4619      	mov	r1, r3
 801688a:	4610      	mov	r0, r2
 801688c:	f7fe f96d 	bl	8014b6a <vListInsertEnd>
 8016890:	e004      	b.n	801689c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016892:	4b0b      	ldr	r3, [pc, #44]	; (80168c0 <xTaskPriorityInherit+0x100>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801689c:	2301      	movs	r3, #1
 801689e:	60fb      	str	r3, [r7, #12]
 80168a0:	e008      	b.n	80168b4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80168a2:	68bb      	ldr	r3, [r7, #8]
 80168a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80168a6:	4b06      	ldr	r3, [pc, #24]	; (80168c0 <xTaskPriorityInherit+0x100>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d201      	bcs.n	80168b4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80168b0:	2301      	movs	r3, #1
 80168b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80168b4:	68fb      	ldr	r3, [r7, #12]
	}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3710      	adds	r7, #16
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	20000cf8 	.word	0x20000cf8
 80168c4:	20000cfc 	.word	0x20000cfc
 80168c8:	20000e00 	.word	0x20000e00

080168cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b086      	sub	sp, #24
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80168d8:	2300      	movs	r3, #0
 80168da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d070      	beq.n	80169c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80168e2:	4b3b      	ldr	r3, [pc, #236]	; (80169d0 <xTaskPriorityDisinherit+0x104>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	693a      	ldr	r2, [r7, #16]
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d00b      	beq.n	8016904 <xTaskPriorityDisinherit+0x38>
 80168ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168f0:	b672      	cpsid	i
 80168f2:	f383 8811 	msr	BASEPRI, r3
 80168f6:	f3bf 8f6f 	isb	sy
 80168fa:	f3bf 8f4f 	dsb	sy
 80168fe:	b662      	cpsie	i
 8016900:	60fb      	str	r3, [r7, #12]
 8016902:	e7fe      	b.n	8016902 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8016904:	693b      	ldr	r3, [r7, #16]
 8016906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016908:	2b00      	cmp	r3, #0
 801690a:	d10b      	bne.n	8016924 <xTaskPriorityDisinherit+0x58>
 801690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016910:	b672      	cpsid	i
 8016912:	f383 8811 	msr	BASEPRI, r3
 8016916:	f3bf 8f6f 	isb	sy
 801691a:	f3bf 8f4f 	dsb	sy
 801691e:	b662      	cpsie	i
 8016920:	60bb      	str	r3, [r7, #8]
 8016922:	e7fe      	b.n	8016922 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016928:	1e5a      	subs	r2, r3, #1
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801692e:	693b      	ldr	r3, [r7, #16]
 8016930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016936:	429a      	cmp	r2, r3
 8016938:	d044      	beq.n	80169c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801693e:	2b00      	cmp	r3, #0
 8016940:	d140      	bne.n	80169c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016942:	693b      	ldr	r3, [r7, #16]
 8016944:	3304      	adds	r3, #4
 8016946:	4618      	mov	r0, r3
 8016948:	f7fe f96c 	bl	8014c24 <uxListRemove>
 801694c:	4603      	mov	r3, r0
 801694e:	2b00      	cmp	r3, #0
 8016950:	d115      	bne.n	801697e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016956:	491f      	ldr	r1, [pc, #124]	; (80169d4 <xTaskPriorityDisinherit+0x108>)
 8016958:	4613      	mov	r3, r2
 801695a:	009b      	lsls	r3, r3, #2
 801695c:	4413      	add	r3, r2
 801695e:	009b      	lsls	r3, r3, #2
 8016960:	440b      	add	r3, r1
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d10a      	bne.n	801697e <xTaskPriorityDisinherit+0xb2>
 8016968:	693b      	ldr	r3, [r7, #16]
 801696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801696c:	2201      	movs	r2, #1
 801696e:	fa02 f303 	lsl.w	r3, r2, r3
 8016972:	43da      	mvns	r2, r3
 8016974:	4b18      	ldr	r3, [pc, #96]	; (80169d8 <xTaskPriorityDisinherit+0x10c>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4013      	ands	r3, r2
 801697a:	4a17      	ldr	r2, [pc, #92]	; (80169d8 <xTaskPriorityDisinherit+0x10c>)
 801697c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016982:	693b      	ldr	r3, [r7, #16]
 8016984:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801698a:	f1c3 0207 	rsb	r2, r3, #7
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016996:	2201      	movs	r2, #1
 8016998:	409a      	lsls	r2, r3
 801699a:	4b0f      	ldr	r3, [pc, #60]	; (80169d8 <xTaskPriorityDisinherit+0x10c>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	4313      	orrs	r3, r2
 80169a0:	4a0d      	ldr	r2, [pc, #52]	; (80169d8 <xTaskPriorityDisinherit+0x10c>)
 80169a2:	6013      	str	r3, [r2, #0]
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a8:	4613      	mov	r3, r2
 80169aa:	009b      	lsls	r3, r3, #2
 80169ac:	4413      	add	r3, r2
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	4a08      	ldr	r2, [pc, #32]	; (80169d4 <xTaskPriorityDisinherit+0x108>)
 80169b2:	441a      	add	r2, r3
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	3304      	adds	r3, #4
 80169b8:	4619      	mov	r1, r3
 80169ba:	4610      	mov	r0, r2
 80169bc:	f7fe f8d5 	bl	8014b6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80169c0:	2301      	movs	r3, #1
 80169c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80169c4:	697b      	ldr	r3, [r7, #20]
	}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3718      	adds	r7, #24
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	20000cf8 	.word	0x20000cf8
 80169d4:	20000cfc 	.word	0x20000cfc
 80169d8:	20000e00 	.word	0x20000e00

080169dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b088      	sub	sp, #32
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80169ea:	2301      	movs	r3, #1
 80169ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f000 808a 	beq.w	8016b0a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d10b      	bne.n	8016a16 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80169fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a02:	b672      	cpsid	i
 8016a04:	f383 8811 	msr	BASEPRI, r3
 8016a08:	f3bf 8f6f 	isb	sy
 8016a0c:	f3bf 8f4f 	dsb	sy
 8016a10:	b662      	cpsie	i
 8016a12:	60fb      	str	r3, [r7, #12]
 8016a14:	e7fe      	b.n	8016a14 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016a16:	69bb      	ldr	r3, [r7, #24]
 8016a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a1a:	683a      	ldr	r2, [r7, #0]
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d902      	bls.n	8016a26 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	61fb      	str	r3, [r7, #28]
 8016a24:	e002      	b.n	8016a2c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016a26:	69bb      	ldr	r3, [r7, #24]
 8016a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a2a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a30:	69fa      	ldr	r2, [r7, #28]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d069      	beq.n	8016b0a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016a36:	69bb      	ldr	r3, [r7, #24]
 8016a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a3a:	697a      	ldr	r2, [r7, #20]
 8016a3c:	429a      	cmp	r2, r3
 8016a3e:	d164      	bne.n	8016b0a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016a40:	4b34      	ldr	r3, [pc, #208]	; (8016b14 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	69ba      	ldr	r2, [r7, #24]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d10b      	bne.n	8016a62 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8016a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4e:	b672      	cpsid	i
 8016a50:	f383 8811 	msr	BASEPRI, r3
 8016a54:	f3bf 8f6f 	isb	sy
 8016a58:	f3bf 8f4f 	dsb	sy
 8016a5c:	b662      	cpsie	i
 8016a5e:	60bb      	str	r3, [r7, #8]
 8016a60:	e7fe      	b.n	8016a60 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016a62:	69bb      	ldr	r3, [r7, #24]
 8016a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a66:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016a68:	69bb      	ldr	r3, [r7, #24]
 8016a6a:	69fa      	ldr	r2, [r7, #28]
 8016a6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016a6e:	69bb      	ldr	r3, [r7, #24]
 8016a70:	699b      	ldr	r3, [r3, #24]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	db04      	blt.n	8016a80 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a76:	69fb      	ldr	r3, [r7, #28]
 8016a78:	f1c3 0207 	rsb	r2, r3, #7
 8016a7c:	69bb      	ldr	r3, [r7, #24]
 8016a7e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016a80:	69bb      	ldr	r3, [r7, #24]
 8016a82:	6959      	ldr	r1, [r3, #20]
 8016a84:	693a      	ldr	r2, [r7, #16]
 8016a86:	4613      	mov	r3, r2
 8016a88:	009b      	lsls	r3, r3, #2
 8016a8a:	4413      	add	r3, r2
 8016a8c:	009b      	lsls	r3, r3, #2
 8016a8e:	4a22      	ldr	r2, [pc, #136]	; (8016b18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8016a90:	4413      	add	r3, r2
 8016a92:	4299      	cmp	r1, r3
 8016a94:	d101      	bne.n	8016a9a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8016a96:	2301      	movs	r3, #1
 8016a98:	e000      	b.n	8016a9c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d034      	beq.n	8016b0a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	3304      	adds	r3, #4
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7fe f8bd 	bl	8014c24 <uxListRemove>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d115      	bne.n	8016adc <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016ab0:	69bb      	ldr	r3, [r7, #24]
 8016ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ab4:	4918      	ldr	r1, [pc, #96]	; (8016b18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8016ab6:	4613      	mov	r3, r2
 8016ab8:	009b      	lsls	r3, r3, #2
 8016aba:	4413      	add	r3, r2
 8016abc:	009b      	lsls	r3, r3, #2
 8016abe:	440b      	add	r3, r1
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d10a      	bne.n	8016adc <vTaskPriorityDisinheritAfterTimeout+0x100>
 8016ac6:	69bb      	ldr	r3, [r7, #24]
 8016ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aca:	2201      	movs	r2, #1
 8016acc:	fa02 f303 	lsl.w	r3, r2, r3
 8016ad0:	43da      	mvns	r2, r3
 8016ad2:	4b12      	ldr	r3, [pc, #72]	; (8016b1c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	4013      	ands	r3, r2
 8016ad8:	4a10      	ldr	r2, [pc, #64]	; (8016b1c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8016ada:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	409a      	lsls	r2, r3
 8016ae4:	4b0d      	ldr	r3, [pc, #52]	; (8016b1c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4313      	orrs	r3, r2
 8016aea:	4a0c      	ldr	r2, [pc, #48]	; (8016b1c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8016aec:	6013      	str	r3, [r2, #0]
 8016aee:	69bb      	ldr	r3, [r7, #24]
 8016af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016af2:	4613      	mov	r3, r2
 8016af4:	009b      	lsls	r3, r3, #2
 8016af6:	4413      	add	r3, r2
 8016af8:	009b      	lsls	r3, r3, #2
 8016afa:	4a07      	ldr	r2, [pc, #28]	; (8016b18 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8016afc:	441a      	add	r2, r3
 8016afe:	69bb      	ldr	r3, [r7, #24]
 8016b00:	3304      	adds	r3, #4
 8016b02:	4619      	mov	r1, r3
 8016b04:	4610      	mov	r0, r2
 8016b06:	f7fe f830 	bl	8014b6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016b0a:	bf00      	nop
 8016b0c:	3720      	adds	r7, #32
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	20000cf8 	.word	0x20000cf8
 8016b18:	20000cfc 	.word	0x20000cfc
 8016b1c:	20000e00 	.word	0x20000e00

08016b20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8016b20:	b480      	push	{r7}
 8016b22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016b24:	4b07      	ldr	r3, [pc, #28]	; (8016b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d004      	beq.n	8016b36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016b2c:	4b05      	ldr	r3, [pc, #20]	; (8016b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016b32:	3201      	adds	r2, #1
 8016b34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016b36:	4b03      	ldr	r3, [pc, #12]	; (8016b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8016b38:	681b      	ldr	r3, [r3, #0]
	}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b42:	4770      	bx	lr
 8016b44:	20000cf8 	.word	0x20000cf8

08016b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016b52:	4b29      	ldr	r3, [pc, #164]	; (8016bf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b58:	4b28      	ldr	r3, [pc, #160]	; (8016bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7fe f860 	bl	8014c24 <uxListRemove>
 8016b64:	4603      	mov	r3, r0
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d10b      	bne.n	8016b82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8016b6a:	4b24      	ldr	r3, [pc, #144]	; (8016bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b70:	2201      	movs	r2, #1
 8016b72:	fa02 f303 	lsl.w	r3, r2, r3
 8016b76:	43da      	mvns	r2, r3
 8016b78:	4b21      	ldr	r3, [pc, #132]	; (8016c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	4013      	ands	r3, r2
 8016b7e:	4a20      	ldr	r2, [pc, #128]	; (8016c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016b80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b88:	d10a      	bne.n	8016ba0 <prvAddCurrentTaskToDelayedList+0x58>
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d007      	beq.n	8016ba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016b90:	4b1a      	ldr	r3, [pc, #104]	; (8016bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	3304      	adds	r3, #4
 8016b96:	4619      	mov	r1, r3
 8016b98:	481a      	ldr	r0, [pc, #104]	; (8016c04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016b9a:	f7fd ffe6 	bl	8014b6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016b9e:	e026      	b.n	8016bee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	4413      	add	r3, r2
 8016ba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016ba8:	4b14      	ldr	r3, [pc, #80]	; (8016bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	68ba      	ldr	r2, [r7, #8]
 8016bae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016bb0:	68ba      	ldr	r2, [r7, #8]
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d209      	bcs.n	8016bcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bb8:	4b13      	ldr	r3, [pc, #76]	; (8016c08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	4b0f      	ldr	r3, [pc, #60]	; (8016bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	3304      	adds	r3, #4
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	4610      	mov	r0, r2
 8016bc6:	f7fd fff4 	bl	8014bb2 <vListInsert>
}
 8016bca:	e010      	b.n	8016bee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bcc:	4b0f      	ldr	r3, [pc, #60]	; (8016c0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8016bce:	681a      	ldr	r2, [r3, #0]
 8016bd0:	4b0a      	ldr	r3, [pc, #40]	; (8016bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	3304      	adds	r3, #4
 8016bd6:	4619      	mov	r1, r3
 8016bd8:	4610      	mov	r0, r2
 8016bda:	f7fd ffea 	bl	8014bb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016bde:	4b0c      	ldr	r3, [pc, #48]	; (8016c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	68ba      	ldr	r2, [r7, #8]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d202      	bcs.n	8016bee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016be8:	4a09      	ldr	r2, [pc, #36]	; (8016c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	6013      	str	r3, [r2, #0]
}
 8016bee:	bf00      	nop
 8016bf0:	3710      	adds	r7, #16
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	20000dfc 	.word	0x20000dfc
 8016bfc:	20000cf8 	.word	0x20000cf8
 8016c00:	20000e00 	.word	0x20000e00
 8016c04:	20000de4 	.word	0x20000de4
 8016c08:	20000db4 	.word	0x20000db4
 8016c0c:	20000db0 	.word	0x20000db0
 8016c10:	20000e18 	.word	0x20000e18

08016c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016c14:	b480      	push	{r7}
 8016c16:	b085      	sub	sp, #20
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	60f8      	str	r0, [r7, #12]
 8016c1c:	60b9      	str	r1, [r7, #8]
 8016c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	3b04      	subs	r3, #4
 8016c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	3b04      	subs	r3, #4
 8016c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	f023 0201 	bic.w	r2, r3, #1
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	3b04      	subs	r3, #4
 8016c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016c44:	4a0c      	ldr	r2, [pc, #48]	; (8016c78 <pxPortInitialiseStack+0x64>)
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	3b14      	subs	r3, #20
 8016c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	3b04      	subs	r3, #4
 8016c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f06f 0202 	mvn.w	r2, #2
 8016c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	3b20      	subs	r3, #32
 8016c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3714      	adds	r7, #20
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr
 8016c78:	08016c7d 	.word	0x08016c7d

08016c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b085      	sub	sp, #20
 8016c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016c82:	2300      	movs	r3, #0
 8016c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016c86:	4b13      	ldr	r3, [pc, #76]	; (8016cd4 <prvTaskExitError+0x58>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c8e:	d00b      	beq.n	8016ca8 <prvTaskExitError+0x2c>
 8016c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c94:	b672      	cpsid	i
 8016c96:	f383 8811 	msr	BASEPRI, r3
 8016c9a:	f3bf 8f6f 	isb	sy
 8016c9e:	f3bf 8f4f 	dsb	sy
 8016ca2:	b662      	cpsie	i
 8016ca4:	60fb      	str	r3, [r7, #12]
 8016ca6:	e7fe      	b.n	8016ca6 <prvTaskExitError+0x2a>
 8016ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cac:	b672      	cpsid	i
 8016cae:	f383 8811 	msr	BASEPRI, r3
 8016cb2:	f3bf 8f6f 	isb	sy
 8016cb6:	f3bf 8f4f 	dsb	sy
 8016cba:	b662      	cpsie	i
 8016cbc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016cbe:	bf00      	nop
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d0fc      	beq.n	8016cc0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016cc6:	bf00      	nop
 8016cc8:	3714      	adds	r7, #20
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop
 8016cd4:	20000160 	.word	0x20000160
	...

08016ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016ce0:	4b07      	ldr	r3, [pc, #28]	; (8016d00 <pxCurrentTCBConst2>)
 8016ce2:	6819      	ldr	r1, [r3, #0]
 8016ce4:	6808      	ldr	r0, [r1, #0]
 8016ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cea:	f380 8809 	msr	PSP, r0
 8016cee:	f3bf 8f6f 	isb	sy
 8016cf2:	f04f 0000 	mov.w	r0, #0
 8016cf6:	f380 8811 	msr	BASEPRI, r0
 8016cfa:	4770      	bx	lr
 8016cfc:	f3af 8000 	nop.w

08016d00 <pxCurrentTCBConst2>:
 8016d00:	20000cf8 	.word	0x20000cf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016d04:	bf00      	nop
 8016d06:	bf00      	nop

08016d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016d08:	4808      	ldr	r0, [pc, #32]	; (8016d2c <prvPortStartFirstTask+0x24>)
 8016d0a:	6800      	ldr	r0, [r0, #0]
 8016d0c:	6800      	ldr	r0, [r0, #0]
 8016d0e:	f380 8808 	msr	MSP, r0
 8016d12:	f04f 0000 	mov.w	r0, #0
 8016d16:	f380 8814 	msr	CONTROL, r0
 8016d1a:	b662      	cpsie	i
 8016d1c:	b661      	cpsie	f
 8016d1e:	f3bf 8f4f 	dsb	sy
 8016d22:	f3bf 8f6f 	isb	sy
 8016d26:	df00      	svc	0
 8016d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016d2a:	bf00      	nop
 8016d2c:	e000ed08 	.word	0xe000ed08

08016d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b084      	sub	sp, #16
 8016d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016d36:	4b36      	ldr	r3, [pc, #216]	; (8016e10 <xPortStartScheduler+0xe0>)
 8016d38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	781b      	ldrb	r3, [r3, #0]
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	22ff      	movs	r2, #255	; 0xff
 8016d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016d50:	78fb      	ldrb	r3, [r7, #3]
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016d58:	b2da      	uxtb	r2, r3
 8016d5a:	4b2e      	ldr	r3, [pc, #184]	; (8016e14 <xPortStartScheduler+0xe4>)
 8016d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016d5e:	4b2e      	ldr	r3, [pc, #184]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016d60:	2207      	movs	r2, #7
 8016d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016d64:	e009      	b.n	8016d7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016d66:	4b2c      	ldr	r3, [pc, #176]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	3b01      	subs	r3, #1
 8016d6c:	4a2a      	ldr	r2, [pc, #168]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016d70:	78fb      	ldrb	r3, [r7, #3]
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	b2db      	uxtb	r3, r3
 8016d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016d7a:	78fb      	ldrb	r3, [r7, #3]
 8016d7c:	b2db      	uxtb	r3, r3
 8016d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d82:	2b80      	cmp	r3, #128	; 0x80
 8016d84:	d0ef      	beq.n	8016d66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016d86:	4b24      	ldr	r3, [pc, #144]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	f1c3 0307 	rsb	r3, r3, #7
 8016d8e:	2b04      	cmp	r3, #4
 8016d90:	d00b      	beq.n	8016daa <xPortStartScheduler+0x7a>
 8016d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d96:	b672      	cpsid	i
 8016d98:	f383 8811 	msr	BASEPRI, r3
 8016d9c:	f3bf 8f6f 	isb	sy
 8016da0:	f3bf 8f4f 	dsb	sy
 8016da4:	b662      	cpsie	i
 8016da6:	60bb      	str	r3, [r7, #8]
 8016da8:	e7fe      	b.n	8016da8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016daa:	4b1b      	ldr	r3, [pc, #108]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	021b      	lsls	r3, r3, #8
 8016db0:	4a19      	ldr	r2, [pc, #100]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016db2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016db4:	4b18      	ldr	r3, [pc, #96]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016dbc:	4a16      	ldr	r2, [pc, #88]	; (8016e18 <xPortStartScheduler+0xe8>)
 8016dbe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	b2da      	uxtb	r2, r3
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016dc8:	4b14      	ldr	r3, [pc, #80]	; (8016e1c <xPortStartScheduler+0xec>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	4a13      	ldr	r2, [pc, #76]	; (8016e1c <xPortStartScheduler+0xec>)
 8016dce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016dd2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016dd4:	4b11      	ldr	r3, [pc, #68]	; (8016e1c <xPortStartScheduler+0xec>)
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	4a10      	ldr	r2, [pc, #64]	; (8016e1c <xPortStartScheduler+0xec>)
 8016dda:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016dde:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016de0:	f000 f8d4 	bl	8016f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016de4:	4b0e      	ldr	r3, [pc, #56]	; (8016e20 <xPortStartScheduler+0xf0>)
 8016de6:	2200      	movs	r2, #0
 8016de8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016dea:	f000 f8f3 	bl	8016fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016dee:	4b0d      	ldr	r3, [pc, #52]	; (8016e24 <xPortStartScheduler+0xf4>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	4a0c      	ldr	r2, [pc, #48]	; (8016e24 <xPortStartScheduler+0xf4>)
 8016df4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016df8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016dfa:	f7ff ff85 	bl	8016d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016dfe:	f7ff fa47 	bl	8016290 <vTaskSwitchContext>
	prvTaskExitError();
 8016e02:	f7ff ff3b 	bl	8016c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016e06:	2300      	movs	r3, #0
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3710      	adds	r7, #16
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}
 8016e10:	e000e400 	.word	0xe000e400
 8016e14:	20000e24 	.word	0x20000e24
 8016e18:	20000e28 	.word	0x20000e28
 8016e1c:	e000ed20 	.word	0xe000ed20
 8016e20:	20000160 	.word	0x20000160
 8016e24:	e000ef34 	.word	0xe000ef34

08016e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e32:	b672      	cpsid	i
 8016e34:	f383 8811 	msr	BASEPRI, r3
 8016e38:	f3bf 8f6f 	isb	sy
 8016e3c:	f3bf 8f4f 	dsb	sy
 8016e40:	b662      	cpsie	i
 8016e42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016e44:	4b0f      	ldr	r3, [pc, #60]	; (8016e84 <vPortEnterCritical+0x5c>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	3301      	adds	r3, #1
 8016e4a:	4a0e      	ldr	r2, [pc, #56]	; (8016e84 <vPortEnterCritical+0x5c>)
 8016e4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016e4e:	4b0d      	ldr	r3, [pc, #52]	; (8016e84 <vPortEnterCritical+0x5c>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2b01      	cmp	r3, #1
 8016e54:	d110      	bne.n	8016e78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016e56:	4b0c      	ldr	r3, [pc, #48]	; (8016e88 <vPortEnterCritical+0x60>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	b2db      	uxtb	r3, r3
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d00b      	beq.n	8016e78 <vPortEnterCritical+0x50>
 8016e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e64:	b672      	cpsid	i
 8016e66:	f383 8811 	msr	BASEPRI, r3
 8016e6a:	f3bf 8f6f 	isb	sy
 8016e6e:	f3bf 8f4f 	dsb	sy
 8016e72:	b662      	cpsie	i
 8016e74:	603b      	str	r3, [r7, #0]
 8016e76:	e7fe      	b.n	8016e76 <vPortEnterCritical+0x4e>
	}
}
 8016e78:	bf00      	nop
 8016e7a:	370c      	adds	r7, #12
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e82:	4770      	bx	lr
 8016e84:	20000160 	.word	0x20000160
 8016e88:	e000ed04 	.word	0xe000ed04

08016e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b083      	sub	sp, #12
 8016e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016e92:	4b12      	ldr	r3, [pc, #72]	; (8016edc <vPortExitCritical+0x50>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d10b      	bne.n	8016eb2 <vPortExitCritical+0x26>
 8016e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e9e:	b672      	cpsid	i
 8016ea0:	f383 8811 	msr	BASEPRI, r3
 8016ea4:	f3bf 8f6f 	isb	sy
 8016ea8:	f3bf 8f4f 	dsb	sy
 8016eac:	b662      	cpsie	i
 8016eae:	607b      	str	r3, [r7, #4]
 8016eb0:	e7fe      	b.n	8016eb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016eb2:	4b0a      	ldr	r3, [pc, #40]	; (8016edc <vPortExitCritical+0x50>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	3b01      	subs	r3, #1
 8016eb8:	4a08      	ldr	r2, [pc, #32]	; (8016edc <vPortExitCritical+0x50>)
 8016eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016ebc:	4b07      	ldr	r3, [pc, #28]	; (8016edc <vPortExitCritical+0x50>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d104      	bne.n	8016ece <vPortExitCritical+0x42>
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016ece:	bf00      	nop
 8016ed0:	370c      	adds	r7, #12
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed8:	4770      	bx	lr
 8016eda:	bf00      	nop
 8016edc:	20000160 	.word	0x20000160

08016ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016ee0:	f3ef 8009 	mrs	r0, PSP
 8016ee4:	f3bf 8f6f 	isb	sy
 8016ee8:	4b15      	ldr	r3, [pc, #84]	; (8016f40 <pxCurrentTCBConst>)
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	f01e 0f10 	tst.w	lr, #16
 8016ef0:	bf08      	it	eq
 8016ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efa:	6010      	str	r0, [r2, #0]
 8016efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016f04:	b672      	cpsid	i
 8016f06:	f380 8811 	msr	BASEPRI, r0
 8016f0a:	f3bf 8f4f 	dsb	sy
 8016f0e:	f3bf 8f6f 	isb	sy
 8016f12:	b662      	cpsie	i
 8016f14:	f7ff f9bc 	bl	8016290 <vTaskSwitchContext>
 8016f18:	f04f 0000 	mov.w	r0, #0
 8016f1c:	f380 8811 	msr	BASEPRI, r0
 8016f20:	bc09      	pop	{r0, r3}
 8016f22:	6819      	ldr	r1, [r3, #0]
 8016f24:	6808      	ldr	r0, [r1, #0]
 8016f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f2a:	f01e 0f10 	tst.w	lr, #16
 8016f2e:	bf08      	it	eq
 8016f30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016f34:	f380 8809 	msr	PSP, r0
 8016f38:	f3bf 8f6f 	isb	sy
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop

08016f40 <pxCurrentTCBConst>:
 8016f40:	20000cf8 	.word	0x20000cf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016f44:	bf00      	nop
 8016f46:	bf00      	nop

08016f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b082      	sub	sp, #8
 8016f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8016f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f52:	b672      	cpsid	i
 8016f54:	f383 8811 	msr	BASEPRI, r3
 8016f58:	f3bf 8f6f 	isb	sy
 8016f5c:	f3bf 8f4f 	dsb	sy
 8016f60:	b662      	cpsie	i
 8016f62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016f64:	f7ff f898 	bl	8016098 <xTaskIncrementTick>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d003      	beq.n	8016f76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016f6e:	4b06      	ldr	r3, [pc, #24]	; (8016f88 <SysTick_Handler+0x40>)
 8016f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f74:	601a      	str	r2, [r3, #0]
 8016f76:	2300      	movs	r3, #0
 8016f78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016f80:	bf00      	nop
 8016f82:	3708      	adds	r7, #8
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	e000ed04 	.word	0xe000ed04

08016f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016f8c:	b480      	push	{r7}
 8016f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016f90:	4b0b      	ldr	r3, [pc, #44]	; (8016fc0 <vPortSetupTimerInterrupt+0x34>)
 8016f92:	2200      	movs	r2, #0
 8016f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016f96:	4b0b      	ldr	r3, [pc, #44]	; (8016fc4 <vPortSetupTimerInterrupt+0x38>)
 8016f98:	2200      	movs	r2, #0
 8016f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016f9c:	4b0a      	ldr	r3, [pc, #40]	; (8016fc8 <vPortSetupTimerInterrupt+0x3c>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	4a0a      	ldr	r2, [pc, #40]	; (8016fcc <vPortSetupTimerInterrupt+0x40>)
 8016fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8016fa6:	099b      	lsrs	r3, r3, #6
 8016fa8:	4a09      	ldr	r2, [pc, #36]	; (8016fd0 <vPortSetupTimerInterrupt+0x44>)
 8016faa:	3b01      	subs	r3, #1
 8016fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016fae:	4b04      	ldr	r3, [pc, #16]	; (8016fc0 <vPortSetupTimerInterrupt+0x34>)
 8016fb0:	2207      	movs	r2, #7
 8016fb2:	601a      	str	r2, [r3, #0]
}
 8016fb4:	bf00      	nop
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbc:	4770      	bx	lr
 8016fbe:	bf00      	nop
 8016fc0:	e000e010 	.word	0xe000e010
 8016fc4:	e000e018 	.word	0xe000e018
 8016fc8:	20000134 	.word	0x20000134
 8016fcc:	10624dd3 	.word	0x10624dd3
 8016fd0:	e000e014 	.word	0xe000e014

08016fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016fe4 <vPortEnableVFP+0x10>
 8016fd8:	6801      	ldr	r1, [r0, #0]
 8016fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016fde:	6001      	str	r1, [r0, #0]
 8016fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016fe2:	bf00      	nop
 8016fe4:	e000ed88 	.word	0xe000ed88

08016fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016fe8:	b480      	push	{r7}
 8016fea:	b085      	sub	sp, #20
 8016fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016fee:	f3ef 8305 	mrs	r3, IPSR
 8016ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	2b0f      	cmp	r3, #15
 8016ff8:	d915      	bls.n	8017026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016ffa:	4a18      	ldr	r2, [pc, #96]	; (801705c <vPortValidateInterruptPriority+0x74>)
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	4413      	add	r3, r2
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017004:	4b16      	ldr	r3, [pc, #88]	; (8017060 <vPortValidateInterruptPriority+0x78>)
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	7afa      	ldrb	r2, [r7, #11]
 801700a:	429a      	cmp	r2, r3
 801700c:	d20b      	bcs.n	8017026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017012:	b672      	cpsid	i
 8017014:	f383 8811 	msr	BASEPRI, r3
 8017018:	f3bf 8f6f 	isb	sy
 801701c:	f3bf 8f4f 	dsb	sy
 8017020:	b662      	cpsie	i
 8017022:	607b      	str	r3, [r7, #4]
 8017024:	e7fe      	b.n	8017024 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017026:	4b0f      	ldr	r3, [pc, #60]	; (8017064 <vPortValidateInterruptPriority+0x7c>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801702e:	4b0e      	ldr	r3, [pc, #56]	; (8017068 <vPortValidateInterruptPriority+0x80>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	429a      	cmp	r2, r3
 8017034:	d90b      	bls.n	801704e <vPortValidateInterruptPriority+0x66>
 8017036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801703a:	b672      	cpsid	i
 801703c:	f383 8811 	msr	BASEPRI, r3
 8017040:	f3bf 8f6f 	isb	sy
 8017044:	f3bf 8f4f 	dsb	sy
 8017048:	b662      	cpsie	i
 801704a:	603b      	str	r3, [r7, #0]
 801704c:	e7fe      	b.n	801704c <vPortValidateInterruptPriority+0x64>
	}
 801704e:	bf00      	nop
 8017050:	3714      	adds	r7, #20
 8017052:	46bd      	mov	sp, r7
 8017054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017058:	4770      	bx	lr
 801705a:	bf00      	nop
 801705c:	e000e3f0 	.word	0xe000e3f0
 8017060:	20000e24 	.word	0x20000e24
 8017064:	e000ed0c 	.word	0xe000ed0c
 8017068:	20000e28 	.word	0x20000e28

0801706c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b08a      	sub	sp, #40	; 0x28
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017074:	2300      	movs	r3, #0
 8017076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017078:	f7fe ff40 	bl	8015efc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801707c:	4b5c      	ldr	r3, [pc, #368]	; (80171f0 <pvPortMalloc+0x184>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d101      	bne.n	8017088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017084:	f000 f91a 	bl	80172bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017088:	4b5a      	ldr	r3, [pc, #360]	; (80171f4 <pvPortMalloc+0x188>)
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	4013      	ands	r3, r2
 8017090:	2b00      	cmp	r3, #0
 8017092:	f040 8090 	bne.w	80171b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d01e      	beq.n	80170da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801709c:	2208      	movs	r2, #8
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	4413      	add	r3, r2
 80170a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f003 0307 	and.w	r3, r3, #7
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d015      	beq.n	80170da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f023 0307 	bic.w	r3, r3, #7
 80170b4:	3308      	adds	r3, #8
 80170b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	f003 0307 	and.w	r3, r3, #7
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d00b      	beq.n	80170da <pvPortMalloc+0x6e>
 80170c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c6:	b672      	cpsid	i
 80170c8:	f383 8811 	msr	BASEPRI, r3
 80170cc:	f3bf 8f6f 	isb	sy
 80170d0:	f3bf 8f4f 	dsb	sy
 80170d4:	b662      	cpsie	i
 80170d6:	617b      	str	r3, [r7, #20]
 80170d8:	e7fe      	b.n	80170d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d06a      	beq.n	80171b6 <pvPortMalloc+0x14a>
 80170e0:	4b45      	ldr	r3, [pc, #276]	; (80171f8 <pvPortMalloc+0x18c>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	687a      	ldr	r2, [r7, #4]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d865      	bhi.n	80171b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80170ea:	4b44      	ldr	r3, [pc, #272]	; (80171fc <pvPortMalloc+0x190>)
 80170ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80170ee:	4b43      	ldr	r3, [pc, #268]	; (80171fc <pvPortMalloc+0x190>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80170f4:	e004      	b.n	8017100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80170f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80170fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	687a      	ldr	r2, [r7, #4]
 8017106:	429a      	cmp	r2, r3
 8017108:	d903      	bls.n	8017112 <pvPortMalloc+0xa6>
 801710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d1f1      	bne.n	80170f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017112:	4b37      	ldr	r3, [pc, #220]	; (80171f0 <pvPortMalloc+0x184>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017118:	429a      	cmp	r2, r3
 801711a:	d04c      	beq.n	80171b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801711c:	6a3b      	ldr	r3, [r7, #32]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	2208      	movs	r2, #8
 8017122:	4413      	add	r3, r2
 8017124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	6a3b      	ldr	r3, [r7, #32]
 801712c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017130:	685a      	ldr	r2, [r3, #4]
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	1ad2      	subs	r2, r2, r3
 8017136:	2308      	movs	r3, #8
 8017138:	005b      	lsls	r3, r3, #1
 801713a:	429a      	cmp	r2, r3
 801713c:	d920      	bls.n	8017180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801713e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4413      	add	r3, r2
 8017144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	f003 0307 	and.w	r3, r3, #7
 801714c:	2b00      	cmp	r3, #0
 801714e:	d00b      	beq.n	8017168 <pvPortMalloc+0xfc>
 8017150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017154:	b672      	cpsid	i
 8017156:	f383 8811 	msr	BASEPRI, r3
 801715a:	f3bf 8f6f 	isb	sy
 801715e:	f3bf 8f4f 	dsb	sy
 8017162:	b662      	cpsie	i
 8017164:	613b      	str	r3, [r7, #16]
 8017166:	e7fe      	b.n	8017166 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716a:	685a      	ldr	r2, [r3, #4]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	1ad2      	subs	r2, r2, r3
 8017170:	69bb      	ldr	r3, [r7, #24]
 8017172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017176:	687a      	ldr	r2, [r7, #4]
 8017178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801717a:	69b8      	ldr	r0, [r7, #24]
 801717c:	f000 f900 	bl	8017380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017180:	4b1d      	ldr	r3, [pc, #116]	; (80171f8 <pvPortMalloc+0x18c>)
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	1ad3      	subs	r3, r2, r3
 801718a:	4a1b      	ldr	r2, [pc, #108]	; (80171f8 <pvPortMalloc+0x18c>)
 801718c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801718e:	4b1a      	ldr	r3, [pc, #104]	; (80171f8 <pvPortMalloc+0x18c>)
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	4b1b      	ldr	r3, [pc, #108]	; (8017200 <pvPortMalloc+0x194>)
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	429a      	cmp	r2, r3
 8017198:	d203      	bcs.n	80171a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801719a:	4b17      	ldr	r3, [pc, #92]	; (80171f8 <pvPortMalloc+0x18c>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	4a18      	ldr	r2, [pc, #96]	; (8017200 <pvPortMalloc+0x194>)
 80171a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80171a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a4:	685a      	ldr	r2, [r3, #4]
 80171a6:	4b13      	ldr	r3, [pc, #76]	; (80171f4 <pvPortMalloc+0x188>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	431a      	orrs	r2, r3
 80171ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80171b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171b2:	2200      	movs	r2, #0
 80171b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80171b6:	f7fe feaf 	bl	8015f18 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80171ba:	69fb      	ldr	r3, [r7, #28]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d101      	bne.n	80171c4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80171c0:	f7fd faaf 	bl	8014722 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80171c4:	69fb      	ldr	r3, [r7, #28]
 80171c6:	f003 0307 	and.w	r3, r3, #7
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d00b      	beq.n	80171e6 <pvPortMalloc+0x17a>
 80171ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171d2:	b672      	cpsid	i
 80171d4:	f383 8811 	msr	BASEPRI, r3
 80171d8:	f3bf 8f6f 	isb	sy
 80171dc:	f3bf 8f4f 	dsb	sy
 80171e0:	b662      	cpsie	i
 80171e2:	60fb      	str	r3, [r7, #12]
 80171e4:	e7fe      	b.n	80171e4 <pvPortMalloc+0x178>
	return pvReturn;
 80171e6:	69fb      	ldr	r3, [r7, #28]
}
 80171e8:	4618      	mov	r0, r3
 80171ea:	3728      	adds	r7, #40	; 0x28
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}
 80171f0:	20008e34 	.word	0x20008e34
 80171f4:	20008e40 	.word	0x20008e40
 80171f8:	20008e38 	.word	0x20008e38
 80171fc:	20008e2c 	.word	0x20008e2c
 8017200:	20008e3c 	.word	0x20008e3c

08017204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b086      	sub	sp, #24
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d04a      	beq.n	80172ac <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017216:	2308      	movs	r3, #8
 8017218:	425b      	negs	r3, r3
 801721a:	697a      	ldr	r2, [r7, #20]
 801721c:	4413      	add	r3, r2
 801721e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	685a      	ldr	r2, [r3, #4]
 8017228:	4b22      	ldr	r3, [pc, #136]	; (80172b4 <vPortFree+0xb0>)
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	4013      	ands	r3, r2
 801722e:	2b00      	cmp	r3, #0
 8017230:	d10b      	bne.n	801724a <vPortFree+0x46>
 8017232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017236:	b672      	cpsid	i
 8017238:	f383 8811 	msr	BASEPRI, r3
 801723c:	f3bf 8f6f 	isb	sy
 8017240:	f3bf 8f4f 	dsb	sy
 8017244:	b662      	cpsie	i
 8017246:	60fb      	str	r3, [r7, #12]
 8017248:	e7fe      	b.n	8017248 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801724a:	693b      	ldr	r3, [r7, #16]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d00b      	beq.n	801726a <vPortFree+0x66>
 8017252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017256:	b672      	cpsid	i
 8017258:	f383 8811 	msr	BASEPRI, r3
 801725c:	f3bf 8f6f 	isb	sy
 8017260:	f3bf 8f4f 	dsb	sy
 8017264:	b662      	cpsie	i
 8017266:	60bb      	str	r3, [r7, #8]
 8017268:	e7fe      	b.n	8017268 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	685a      	ldr	r2, [r3, #4]
 801726e:	4b11      	ldr	r3, [pc, #68]	; (80172b4 <vPortFree+0xb0>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	4013      	ands	r3, r2
 8017274:	2b00      	cmp	r3, #0
 8017276:	d019      	beq.n	80172ac <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017278:	693b      	ldr	r3, [r7, #16]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d115      	bne.n	80172ac <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	685a      	ldr	r2, [r3, #4]
 8017284:	4b0b      	ldr	r3, [pc, #44]	; (80172b4 <vPortFree+0xb0>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	43db      	mvns	r3, r3
 801728a:	401a      	ands	r2, r3
 801728c:	693b      	ldr	r3, [r7, #16]
 801728e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017290:	f7fe fe34 	bl	8015efc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017294:	693b      	ldr	r3, [r7, #16]
 8017296:	685a      	ldr	r2, [r3, #4]
 8017298:	4b07      	ldr	r3, [pc, #28]	; (80172b8 <vPortFree+0xb4>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	4413      	add	r3, r2
 801729e:	4a06      	ldr	r2, [pc, #24]	; (80172b8 <vPortFree+0xb4>)
 80172a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80172a2:	6938      	ldr	r0, [r7, #16]
 80172a4:	f000 f86c 	bl	8017380 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80172a8:	f7fe fe36 	bl	8015f18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80172ac:	bf00      	nop
 80172ae:	3718      	adds	r7, #24
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}
 80172b4:	20008e40 	.word	0x20008e40
 80172b8:	20008e38 	.word	0x20008e38

080172bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80172bc:	b480      	push	{r7}
 80172be:	b085      	sub	sp, #20
 80172c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80172c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80172c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80172c8:	4b27      	ldr	r3, [pc, #156]	; (8017368 <prvHeapInit+0xac>)
 80172ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	f003 0307 	and.w	r3, r3, #7
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d00c      	beq.n	80172f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	3307      	adds	r3, #7
 80172da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f023 0307 	bic.w	r3, r3, #7
 80172e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80172e4:	68ba      	ldr	r2, [r7, #8]
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	1ad3      	subs	r3, r2, r3
 80172ea:	4a1f      	ldr	r2, [pc, #124]	; (8017368 <prvHeapInit+0xac>)
 80172ec:	4413      	add	r3, r2
 80172ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80172f4:	4a1d      	ldr	r2, [pc, #116]	; (801736c <prvHeapInit+0xb0>)
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80172fa:	4b1c      	ldr	r3, [pc, #112]	; (801736c <prvHeapInit+0xb0>)
 80172fc:	2200      	movs	r2, #0
 80172fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	68ba      	ldr	r2, [r7, #8]
 8017304:	4413      	add	r3, r2
 8017306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017308:	2208      	movs	r2, #8
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	1a9b      	subs	r3, r3, r2
 801730e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	f023 0307 	bic.w	r3, r3, #7
 8017316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	4a15      	ldr	r2, [pc, #84]	; (8017370 <prvHeapInit+0xb4>)
 801731c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801731e:	4b14      	ldr	r3, [pc, #80]	; (8017370 <prvHeapInit+0xb4>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2200      	movs	r2, #0
 8017324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017326:	4b12      	ldr	r3, [pc, #72]	; (8017370 <prvHeapInit+0xb4>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2200      	movs	r2, #0
 801732c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	68fa      	ldr	r2, [r7, #12]
 8017336:	1ad2      	subs	r2, r2, r3
 8017338:	683b      	ldr	r3, [r7, #0]
 801733a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801733c:	4b0c      	ldr	r3, [pc, #48]	; (8017370 <prvHeapInit+0xb4>)
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	685b      	ldr	r3, [r3, #4]
 8017348:	4a0a      	ldr	r2, [pc, #40]	; (8017374 <prvHeapInit+0xb8>)
 801734a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	685b      	ldr	r3, [r3, #4]
 8017350:	4a09      	ldr	r2, [pc, #36]	; (8017378 <prvHeapInit+0xbc>)
 8017352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017354:	4b09      	ldr	r3, [pc, #36]	; (801737c <prvHeapInit+0xc0>)
 8017356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801735a:	601a      	str	r2, [r3, #0]
}
 801735c:	bf00      	nop
 801735e:	3714      	adds	r7, #20
 8017360:	46bd      	mov	sp, r7
 8017362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017366:	4770      	bx	lr
 8017368:	20000e2c 	.word	0x20000e2c
 801736c:	20008e2c 	.word	0x20008e2c
 8017370:	20008e34 	.word	0x20008e34
 8017374:	20008e3c 	.word	0x20008e3c
 8017378:	20008e38 	.word	0x20008e38
 801737c:	20008e40 	.word	0x20008e40

08017380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017380:	b480      	push	{r7}
 8017382:	b085      	sub	sp, #20
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017388:	4b28      	ldr	r3, [pc, #160]	; (801742c <prvInsertBlockIntoFreeList+0xac>)
 801738a:	60fb      	str	r3, [r7, #12]
 801738c:	e002      	b.n	8017394 <prvInsertBlockIntoFreeList+0x14>
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	60fb      	str	r3, [r7, #12]
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	687a      	ldr	r2, [r7, #4]
 801739a:	429a      	cmp	r2, r3
 801739c:	d8f7      	bhi.n	801738e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	68ba      	ldr	r2, [r7, #8]
 80173a8:	4413      	add	r3, r2
 80173aa:	687a      	ldr	r2, [r7, #4]
 80173ac:	429a      	cmp	r2, r3
 80173ae:	d108      	bne.n	80173c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	685a      	ldr	r2, [r3, #4]
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	441a      	add	r2, r3
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	685b      	ldr	r3, [r3, #4]
 80173ca:	68ba      	ldr	r2, [r7, #8]
 80173cc:	441a      	add	r2, r3
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d118      	bne.n	8017408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	4b15      	ldr	r3, [pc, #84]	; (8017430 <prvInsertBlockIntoFreeList+0xb0>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	429a      	cmp	r2, r3
 80173e0:	d00d      	beq.n	80173fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	685a      	ldr	r2, [r3, #4]
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	441a      	add	r2, r3
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	601a      	str	r2, [r3, #0]
 80173fc:	e008      	b.n	8017410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80173fe:	4b0c      	ldr	r3, [pc, #48]	; (8017430 <prvInsertBlockIntoFreeList+0xb0>)
 8017400:	681a      	ldr	r2, [r3, #0]
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	e003      	b.n	8017410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	681a      	ldr	r2, [r3, #0]
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017410:	68fa      	ldr	r2, [r7, #12]
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	429a      	cmp	r2, r3
 8017416:	d002      	beq.n	801741e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	687a      	ldr	r2, [r7, #4]
 801741c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801741e:	bf00      	nop
 8017420:	3714      	adds	r7, #20
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
 801742a:	bf00      	nop
 801742c:	20008e2c 	.word	0x20008e2c
 8017430:	20008e34 	.word	0x20008e34

08017434 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b08a      	sub	sp, #40	; 0x28
 8017438:	af00      	add	r7, sp, #0
 801743a:	4603      	mov	r3, r0
 801743c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 801743e:	79fb      	ldrb	r3, [r7, #7]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d122      	bne.n	801748a <BSP_LED_Init+0x56>
  {
    gpio_led = LED1_GPIO_PORT;
 8017444:	4b13      	ldr	r3, [pc, #76]	; (8017494 <BSP_LED_Init+0x60>)
 8017446:	627b      	str	r3, [r7, #36]	; 0x24
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8017448:	4b13      	ldr	r3, [pc, #76]	; (8017498 <BSP_LED_Init+0x64>)
 801744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801744c:	4a12      	ldr	r2, [pc, #72]	; (8017498 <BSP_LED_Init+0x64>)
 801744e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017452:	6313      	str	r3, [r2, #48]	; 0x30
 8017454:	4b10      	ldr	r3, [pc, #64]	; (8017498 <BSP_LED_Init+0x64>)
 8017456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801745c:	60fb      	str	r3, [r7, #12]
 801745e:	68fb      	ldr	r3, [r7, #12]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8017460:	2302      	movs	r3, #2
 8017462:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8017464:	2301      	movs	r3, #1
 8017466:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8017468:	2301      	movs	r3, #1
 801746a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 801746c:	2303      	movs	r3, #3
 801746e:	61fb      	str	r3, [r7, #28]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8017470:	f107 0310 	add.w	r3, r7, #16
 8017474:	4619      	mov	r1, r3
 8017476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017478:	f7ed f9c8 	bl	800480c <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 801747c:	2302      	movs	r3, #2
 801747e:	b29b      	uxth	r3, r3
 8017480:	2200      	movs	r2, #0
 8017482:	4619      	mov	r1, r3
 8017484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017486:	f7ed fc8d 	bl	8004da4 <HAL_GPIO_WritePin>
  }
}
 801748a:	bf00      	nop
 801748c:	3728      	adds	r7, #40	; 0x28
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	40022000 	.word	0x40022000
 8017498:	40023800 	.word	0x40023800

0801749c <BSP_LED_Toggle>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	4603      	mov	r3, r0
 80174a4:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 80174a6:	79fb      	ldrb	r3, [r7, #7]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d107      	bne.n	80174bc <BSP_LED_Toggle+0x20>
  {
    gpio_led = LED1_GPIO_PORT;
 80174ac:	4b05      	ldr	r3, [pc, #20]	; (80174c4 <BSP_LED_Toggle+0x28>)
 80174ae:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 80174b0:	2302      	movs	r3, #2
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	4619      	mov	r1, r3
 80174b6:	68f8      	ldr	r0, [r7, #12]
 80174b8:	f7ed fc8d 	bl	8004dd6 <HAL_GPIO_TogglePin>
  }
}
 80174bc:	bf00      	nop
 80174be:	3710      	adds	r7, #16
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}
 80174c4:	40022000 	.word	0x40022000

080174c8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b08c      	sub	sp, #48	; 0x30
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	4a51      	ldr	r2, [pc, #324]	; (8017618 <I2Cx_MspInit+0x150>)
 80174d4:	4293      	cmp	r3, r2
 80174d6:	d14d      	bne.n	8017574 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80174d8:	4b50      	ldr	r3, [pc, #320]	; (801761c <I2Cx_MspInit+0x154>)
 80174da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174dc:	4a4f      	ldr	r2, [pc, #316]	; (801761c <I2Cx_MspInit+0x154>)
 80174de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174e2:	6313      	str	r3, [r2, #48]	; 0x30
 80174e4:	4b4d      	ldr	r3, [pc, #308]	; (801761c <I2Cx_MspInit+0x154>)
 80174e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174ec:	61bb      	str	r3, [r7, #24]
 80174ee:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80174f0:	2380      	movs	r3, #128	; 0x80
 80174f2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80174f4:	2312      	movs	r3, #18
 80174f6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80174f8:	2300      	movs	r3, #0
 80174fa:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80174fc:	2302      	movs	r3, #2
 80174fe:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8017500:	2304      	movs	r3, #4
 8017502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8017504:	f107 031c 	add.w	r3, r7, #28
 8017508:	4619      	mov	r1, r3
 801750a:	4845      	ldr	r0, [pc, #276]	; (8017620 <I2Cx_MspInit+0x158>)
 801750c:	f7ed f97e 	bl	800480c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8017510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8017516:	f107 031c 	add.w	r3, r7, #28
 801751a:	4619      	mov	r1, r3
 801751c:	4840      	ldr	r0, [pc, #256]	; (8017620 <I2Cx_MspInit+0x158>)
 801751e:	f7ed f975 	bl	800480c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8017522:	4b3e      	ldr	r3, [pc, #248]	; (801761c <I2Cx_MspInit+0x154>)
 8017524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017526:	4a3d      	ldr	r2, [pc, #244]	; (801761c <I2Cx_MspInit+0x154>)
 8017528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801752c:	6413      	str	r3, [r2, #64]	; 0x40
 801752e:	4b3b      	ldr	r3, [pc, #236]	; (801761c <I2Cx_MspInit+0x154>)
 8017530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017536:	617b      	str	r3, [r7, #20]
 8017538:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 801753a:	4b38      	ldr	r3, [pc, #224]	; (801761c <I2Cx_MspInit+0x154>)
 801753c:	6a1b      	ldr	r3, [r3, #32]
 801753e:	4a37      	ldr	r2, [pc, #220]	; (801761c <I2Cx_MspInit+0x154>)
 8017540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017544:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8017546:	4b35      	ldr	r3, [pc, #212]	; (801761c <I2Cx_MspInit+0x154>)
 8017548:	6a1b      	ldr	r3, [r3, #32]
 801754a:	4a34      	ldr	r2, [pc, #208]	; (801761c <I2Cx_MspInit+0x154>)
 801754c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017550:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8017552:	2200      	movs	r2, #0
 8017554:	210f      	movs	r1, #15
 8017556:	2048      	movs	r0, #72	; 0x48
 8017558:	f7ec fa3e 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 801755c:	2048      	movs	r0, #72	; 0x48
 801755e:	f7ec fa57 	bl	8003a10 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8017562:	2200      	movs	r2, #0
 8017564:	210f      	movs	r1, #15
 8017566:	2049      	movs	r0, #73	; 0x49
 8017568:	f7ec fa36 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 801756c:	2049      	movs	r0, #73	; 0x49
 801756e:	f7ec fa4f 	bl	8003a10 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8017572:	e04d      	b.n	8017610 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8017574:	4b29      	ldr	r3, [pc, #164]	; (801761c <I2Cx_MspInit+0x154>)
 8017576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017578:	4a28      	ldr	r2, [pc, #160]	; (801761c <I2Cx_MspInit+0x154>)
 801757a:	f043 0302 	orr.w	r3, r3, #2
 801757e:	6313      	str	r3, [r2, #48]	; 0x30
 8017580:	4b26      	ldr	r3, [pc, #152]	; (801761c <I2Cx_MspInit+0x154>)
 8017582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017584:	f003 0302 	and.w	r3, r3, #2
 8017588:	613b      	str	r3, [r7, #16]
 801758a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 801758c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017590:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8017592:	2312      	movs	r3, #18
 8017594:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8017596:	2300      	movs	r3, #0
 8017598:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 801759a:	2302      	movs	r3, #2
 801759c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 801759e:	2304      	movs	r3, #4
 80175a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80175a2:	f107 031c 	add.w	r3, r7, #28
 80175a6:	4619      	mov	r1, r3
 80175a8:	481e      	ldr	r0, [pc, #120]	; (8017624 <I2Cx_MspInit+0x15c>)
 80175aa:	f7ed f92f 	bl	800480c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80175ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80175b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80175b4:	f107 031c 	add.w	r3, r7, #28
 80175b8:	4619      	mov	r1, r3
 80175ba:	481a      	ldr	r0, [pc, #104]	; (8017624 <I2Cx_MspInit+0x15c>)
 80175bc:	f7ed f926 	bl	800480c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80175c0:	4b16      	ldr	r3, [pc, #88]	; (801761c <I2Cx_MspInit+0x154>)
 80175c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175c4:	4a15      	ldr	r2, [pc, #84]	; (801761c <I2Cx_MspInit+0x154>)
 80175c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80175ca:	6413      	str	r3, [r2, #64]	; 0x40
 80175cc:	4b13      	ldr	r3, [pc, #76]	; (801761c <I2Cx_MspInit+0x154>)
 80175ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80175d4:	60fb      	str	r3, [r7, #12]
 80175d6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80175d8:	4b10      	ldr	r3, [pc, #64]	; (801761c <I2Cx_MspInit+0x154>)
 80175da:	6a1b      	ldr	r3, [r3, #32]
 80175dc:	4a0f      	ldr	r2, [pc, #60]	; (801761c <I2Cx_MspInit+0x154>)
 80175de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80175e2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80175e4:	4b0d      	ldr	r3, [pc, #52]	; (801761c <I2Cx_MspInit+0x154>)
 80175e6:	6a1b      	ldr	r3, [r3, #32]
 80175e8:	4a0c      	ldr	r2, [pc, #48]	; (801761c <I2Cx_MspInit+0x154>)
 80175ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80175ee:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80175f0:	2200      	movs	r2, #0
 80175f2:	210f      	movs	r1, #15
 80175f4:	201f      	movs	r0, #31
 80175f6:	f7ec f9ef 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80175fa:	201f      	movs	r0, #31
 80175fc:	f7ec fa08 	bl	8003a10 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8017600:	2200      	movs	r2, #0
 8017602:	210f      	movs	r1, #15
 8017604:	2020      	movs	r0, #32
 8017606:	f7ec f9e7 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 801760a:	2020      	movs	r0, #32
 801760c:	f7ec fa00 	bl	8003a10 <HAL_NVIC_EnableIRQ>
}
 8017610:	bf00      	nop
 8017612:	3730      	adds	r7, #48	; 0x30
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}
 8017618:	20008e44 	.word	0x20008e44
 801761c:	40023800 	.word	0x40023800
 8017620:	40021c00 	.word	0x40021c00
 8017624:	40020400 	.word	0x40020400

08017628 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7ef fb35 	bl	8006ca0 <HAL_I2C_GetState>
 8017636:	4603      	mov	r3, r0
 8017638:	2b00      	cmp	r3, #0
 801763a:	d125      	bne.n	8017688 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	4a14      	ldr	r2, [pc, #80]	; (8017690 <I2Cx_Init+0x68>)
 8017640:	4293      	cmp	r3, r2
 8017642:	d103      	bne.n	801764c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	4a13      	ldr	r2, [pc, #76]	; (8017694 <I2Cx_Init+0x6c>)
 8017648:	601a      	str	r2, [r3, #0]
 801764a:	e002      	b.n	8017652 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4a12      	ldr	r2, [pc, #72]	; (8017698 <I2Cx_Init+0x70>)
 8017650:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	4a11      	ldr	r2, [pc, #68]	; (801769c <I2Cx_Init+0x74>)
 8017656:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2200      	movs	r2, #0
 801765c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2201      	movs	r2, #1
 8017662:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2200      	movs	r2, #0
 8017668:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	2200      	movs	r2, #0
 801766e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2200      	movs	r2, #0
 8017674:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2200      	movs	r2, #0
 801767a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f7ff ff23 	bl	80174c8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ef f81e 	bl	80066c4 <HAL_I2C_Init>
  }
}
 8017688:	bf00      	nop
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}
 8017690:	20008e44 	.word	0x20008e44
 8017694:	40005c00 	.word	0x40005c00
 8017698:	40005400 	.word	0x40005400
 801769c:	40912732 	.word	0x40912732

080176a0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08a      	sub	sp, #40	; 0x28
 80176a4:	af04      	add	r7, sp, #16
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	4608      	mov	r0, r1
 80176aa:	4611      	mov	r1, r2
 80176ac:	461a      	mov	r2, r3
 80176ae:	4603      	mov	r3, r0
 80176b0:	72fb      	strb	r3, [r7, #11]
 80176b2:	460b      	mov	r3, r1
 80176b4:	813b      	strh	r3, [r7, #8]
 80176b6:	4613      	mov	r3, r2
 80176b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80176ba:	2300      	movs	r3, #0
 80176bc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80176be:	7afb      	ldrb	r3, [r7, #11]
 80176c0:	b299      	uxth	r1, r3
 80176c2:	88f8      	ldrh	r0, [r7, #6]
 80176c4:	893a      	ldrh	r2, [r7, #8]
 80176c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80176ca:	9302      	str	r3, [sp, #8]
 80176cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176ce:	9301      	str	r3, [sp, #4]
 80176d0:	6a3b      	ldr	r3, [r7, #32]
 80176d2:	9300      	str	r3, [sp, #0]
 80176d4:	4603      	mov	r3, r0
 80176d6:	68f8      	ldr	r0, [r7, #12]
 80176d8:	f7ef f9c8 	bl	8006a6c <HAL_I2C_Mem_Read>
 80176dc:	4603      	mov	r3, r0
 80176de:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80176e0:	7dfb      	ldrb	r3, [r7, #23]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d004      	beq.n	80176f0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80176e6:	7afb      	ldrb	r3, [r7, #11]
 80176e8:	4619      	mov	r1, r3
 80176ea:	68f8      	ldr	r0, [r7, #12]
 80176ec:	f000 f832 	bl	8017754 <I2Cx_Error>
  }
  return status;    
 80176f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3718      	adds	r7, #24
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}

080176fa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80176fa:	b580      	push	{r7, lr}
 80176fc:	b08a      	sub	sp, #40	; 0x28
 80176fe:	af04      	add	r7, sp, #16
 8017700:	60f8      	str	r0, [r7, #12]
 8017702:	4608      	mov	r0, r1
 8017704:	4611      	mov	r1, r2
 8017706:	461a      	mov	r2, r3
 8017708:	4603      	mov	r3, r0
 801770a:	72fb      	strb	r3, [r7, #11]
 801770c:	460b      	mov	r3, r1
 801770e:	813b      	strh	r3, [r7, #8]
 8017710:	4613      	mov	r3, r2
 8017712:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8017714:	2300      	movs	r3, #0
 8017716:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8017718:	7afb      	ldrb	r3, [r7, #11]
 801771a:	b299      	uxth	r1, r3
 801771c:	88f8      	ldrh	r0, [r7, #6]
 801771e:	893a      	ldrh	r2, [r7, #8]
 8017720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017724:	9302      	str	r3, [sp, #8]
 8017726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017728:	9301      	str	r3, [sp, #4]
 801772a:	6a3b      	ldr	r3, [r7, #32]
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	4603      	mov	r3, r0
 8017730:	68f8      	ldr	r0, [r7, #12]
 8017732:	f7ef f887 	bl	8006844 <HAL_I2C_Mem_Write>
 8017736:	4603      	mov	r3, r0
 8017738:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 801773a:	7dfb      	ldrb	r3, [r7, #23]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d004      	beq.n	801774a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8017740:	7afb      	ldrb	r3, [r7, #11]
 8017742:	4619      	mov	r1, r3
 8017744:	68f8      	ldr	r0, [r7, #12]
 8017746:	f000 f805 	bl	8017754 <I2Cx_Error>
  }
  return status;
 801774a:	7dfb      	ldrb	r3, [r7, #23]
}
 801774c:	4618      	mov	r0, r3
 801774e:	3718      	adds	r7, #24
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	460b      	mov	r3, r1
 801775e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f7ef f83f 	bl	80067e4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f7ff ff5e 	bl	8017628 <I2Cx_Init>
}
 801776c:	bf00      	nop
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8017778:	4802      	ldr	r0, [pc, #8]	; (8017784 <TS_IO_Init+0x10>)
 801777a:	f7ff ff55 	bl	8017628 <I2Cx_Init>
}
 801777e:	bf00      	nop
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	20008e44 	.word	0x20008e44

08017788 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b084      	sub	sp, #16
 801778c:	af02      	add	r7, sp, #8
 801778e:	4603      	mov	r3, r0
 8017790:	71fb      	strb	r3, [r7, #7]
 8017792:	460b      	mov	r3, r1
 8017794:	71bb      	strb	r3, [r7, #6]
 8017796:	4613      	mov	r3, r2
 8017798:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 801779a:	79bb      	ldrb	r3, [r7, #6]
 801779c:	b29a      	uxth	r2, r3
 801779e:	79f9      	ldrb	r1, [r7, #7]
 80177a0:	2301      	movs	r3, #1
 80177a2:	9301      	str	r3, [sp, #4]
 80177a4:	1d7b      	adds	r3, r7, #5
 80177a6:	9300      	str	r3, [sp, #0]
 80177a8:	2301      	movs	r3, #1
 80177aa:	4803      	ldr	r0, [pc, #12]	; (80177b8 <TS_IO_Write+0x30>)
 80177ac:	f7ff ffa5 	bl	80176fa <I2Cx_WriteMultiple>
}
 80177b0:	bf00      	nop
 80177b2:	3708      	adds	r7, #8
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}
 80177b8:	20008e44 	.word	0x20008e44

080177bc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b086      	sub	sp, #24
 80177c0:	af02      	add	r7, sp, #8
 80177c2:	4603      	mov	r3, r0
 80177c4:	460a      	mov	r2, r1
 80177c6:	71fb      	strb	r3, [r7, #7]
 80177c8:	4613      	mov	r3, r2
 80177ca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80177cc:	2300      	movs	r3, #0
 80177ce:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80177d0:	79bb      	ldrb	r3, [r7, #6]
 80177d2:	b29a      	uxth	r2, r3
 80177d4:	79f9      	ldrb	r1, [r7, #7]
 80177d6:	2301      	movs	r3, #1
 80177d8:	9301      	str	r3, [sp, #4]
 80177da:	f107 030f 	add.w	r3, r7, #15
 80177de:	9300      	str	r3, [sp, #0]
 80177e0:	2301      	movs	r3, #1
 80177e2:	4804      	ldr	r0, [pc, #16]	; (80177f4 <TS_IO_Read+0x38>)
 80177e4:	f7ff ff5c 	bl	80176a0 <I2Cx_ReadMultiple>

  return read_value;
 80177e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3710      	adds	r7, #16
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	bf00      	nop
 80177f4:	20008e44 	.word	0x20008e44

080177f8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f7eb fd7b 	bl	80032fc <HAL_Delay>
}
 8017806:	bf00      	nop
 8017808:	3708      	adds	r7, #8
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
	...

08017810 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8017810:	b580      	push	{r7, lr}
 8017812:	b082      	sub	sp, #8
 8017814:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8017816:	4b28      	ldr	r3, [pc, #160]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017818:	4a28      	ldr	r2, [pc, #160]	; (80178bc <BSP_QSPI_Init+0xac>)
 801781a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 801781c:	4826      	ldr	r0, [pc, #152]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 801781e:	f7f0 fa21 	bl	8007c64 <HAL_QSPI_DeInit>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d001      	beq.n	801782c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8017828:	2301      	movs	r3, #1
 801782a:	e041      	b.n	80178b0 <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 801782c:	2100      	movs	r1, #0
 801782e:	4822      	ldr	r0, [pc, #136]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017830:	f000 f878 	bl	8017924 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8017834:	4b20      	ldr	r3, [pc, #128]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017836:	2201      	movs	r2, #1
 8017838:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 801783a:	4b1f      	ldr	r3, [pc, #124]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 801783c:	2204      	movs	r2, #4
 801783e:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8017840:	4b1d      	ldr	r3, [pc, #116]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017842:	2210      	movs	r2, #16
 8017844:	60da      	str	r2, [r3, #12]
 8017846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801784a:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	fa93 f3a3 	rbit	r3, r3
 8017852:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8017854:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8017856:	fab3 f383 	clz	r3, r3
 801785a:	b2db      	uxtb	r3, r3
 801785c:	3b01      	subs	r3, #1
 801785e:	461a      	mov	r2, r3
 8017860:	4b15      	ldr	r3, [pc, #84]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017862:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8017864:	4b14      	ldr	r3, [pc, #80]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017866:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801786a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 801786c:	4b12      	ldr	r3, [pc, #72]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 801786e:	2200      	movs	r2, #0
 8017870:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8017872:	4b11      	ldr	r3, [pc, #68]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017874:	2200      	movs	r2, #0
 8017876:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8017878:	4b0f      	ldr	r3, [pc, #60]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 801787a:	2200      	movs	r2, #0
 801787c:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 801787e:	480e      	ldr	r0, [pc, #56]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017880:	f7f0 f966 	bl	8007b50 <HAL_QSPI_Init>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d001      	beq.n	801788e <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 801788a:	2301      	movs	r3, #1
 801788c:	e010      	b.n	80178b0 <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 801788e:	480a      	ldr	r0, [pc, #40]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 8017890:	f000 f908 	bl	8017aa4 <QSPI_ResetMemory>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d001      	beq.n	801789e <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 801789a:	2304      	movs	r3, #4
 801789c:	e008      	b.n	80178b0 <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 801789e:	4806      	ldr	r0, [pc, #24]	; (80178b8 <BSP_QSPI_Init+0xa8>)
 80178a0:	f000 f942 	bl	8017b28 <QSPI_DummyCyclesCfg>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d001      	beq.n	80178ae <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 80178aa:	2304      	movs	r3, #4
 80178ac:	e000      	b.n	80178b0 <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 80178ae:	2300      	movs	r3, #0
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	3708      	adds	r7, #8
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}
 80178b8:	2000a874 	.word	0x2000a874
 80178bc:	a0001000 	.word	0xa0001000

080178c0 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b090      	sub	sp, #64	; 0x40
 80178c4:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80178c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80178ca:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80178cc:	23eb      	movs	r3, #235	; 0xeb
 80178ce:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80178d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80178d4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80178d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80178da:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80178dc:	2300      	movs	r3, #0
 80178de:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80178e0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80178e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80178e6:	230a      	movs	r3, #10
 80178e8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80178ea:	2300      	movs	r3, #0
 80178ec:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80178ee:	2300      	movs	r3, #0
 80178f0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80178f2:	2300      	movs	r3, #0
 80178f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80178f6:	2300      	movs	r3, #0
 80178f8:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80178fa:	2300      	movs	r3, #0
 80178fc:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80178fe:	463a      	mov	r2, r7
 8017900:	f107 0308 	add.w	r3, r7, #8
 8017904:	4619      	mov	r1, r3
 8017906:	4806      	ldr	r0, [pc, #24]	; (8017920 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8017908:	f7f0 fbea 	bl	80080e0 <HAL_QSPI_MemoryMapped>
 801790c:	4603      	mov	r3, r0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d001      	beq.n	8017916 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8017912:	2301      	movs	r3, #1
 8017914:	e000      	b.n	8017918 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8017916:	2300      	movs	r3, #0
}
 8017918:	4618      	mov	r0, r3
 801791a:	3740      	adds	r7, #64	; 0x40
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}
 8017920:	2000a874 	.word	0x2000a874

08017924 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b08e      	sub	sp, #56	; 0x38
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 801792e:	4b59      	ldr	r3, [pc, #356]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017932:	4a58      	ldr	r2, [pc, #352]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017934:	f043 0302 	orr.w	r3, r3, #2
 8017938:	6393      	str	r3, [r2, #56]	; 0x38
 801793a:	4b56      	ldr	r3, [pc, #344]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 801793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801793e:	f003 0302 	and.w	r3, r3, #2
 8017942:	623b      	str	r3, [r7, #32]
 8017944:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8017946:	4b53      	ldr	r3, [pc, #332]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017948:	699b      	ldr	r3, [r3, #24]
 801794a:	4a52      	ldr	r2, [pc, #328]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 801794c:	f043 0302 	orr.w	r3, r3, #2
 8017950:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8017952:	4b50      	ldr	r3, [pc, #320]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017954:	699b      	ldr	r3, [r3, #24]
 8017956:	4a4f      	ldr	r2, [pc, #316]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017958:	f023 0302 	bic.w	r3, r3, #2
 801795c:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 801795e:	4b4d      	ldr	r3, [pc, #308]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017962:	4a4c      	ldr	r2, [pc, #304]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017964:	f043 0302 	orr.w	r3, r3, #2
 8017968:	6313      	str	r3, [r2, #48]	; 0x30
 801796a:	4b4a      	ldr	r3, [pc, #296]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 801796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801796e:	f003 0302 	and.w	r3, r3, #2
 8017972:	61fb      	str	r3, [r7, #28]
 8017974:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8017976:	4b47      	ldr	r3, [pc, #284]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801797a:	4a46      	ldr	r2, [pc, #280]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 801797c:	f043 0302 	orr.w	r3, r3, #2
 8017980:	6313      	str	r3, [r2, #48]	; 0x30
 8017982:	4b44      	ldr	r3, [pc, #272]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017986:	f003 0302 	and.w	r3, r3, #2
 801798a:	61bb      	str	r3, [r7, #24]
 801798c:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 801798e:	4b41      	ldr	r3, [pc, #260]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017992:	4a40      	ldr	r2, [pc, #256]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 8017994:	f043 0308 	orr.w	r3, r3, #8
 8017998:	6313      	str	r3, [r2, #48]	; 0x30
 801799a:	4b3e      	ldr	r3, [pc, #248]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 801799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801799e:	f003 0308 	and.w	r3, r3, #8
 80179a2:	617b      	str	r3, [r7, #20]
 80179a4:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 80179a6:	4b3b      	ldr	r3, [pc, #236]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179aa:	4a3a      	ldr	r2, [pc, #232]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179ac:	f043 0308 	orr.w	r3, r3, #8
 80179b0:	6313      	str	r3, [r2, #48]	; 0x30
 80179b2:	4b38      	ldr	r3, [pc, #224]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179b6:	f003 0308 	and.w	r3, r3, #8
 80179ba:	613b      	str	r3, [r7, #16]
 80179bc:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 80179be:	4b35      	ldr	r3, [pc, #212]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179c2:	4a34      	ldr	r2, [pc, #208]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179c4:	f043 0310 	orr.w	r3, r3, #16
 80179c8:	6313      	str	r3, [r2, #48]	; 0x30
 80179ca:	4b32      	ldr	r3, [pc, #200]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179ce:	f003 0310 	and.w	r3, r3, #16
 80179d2:	60fb      	str	r3, [r7, #12]
 80179d4:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 80179d6:	4b2f      	ldr	r3, [pc, #188]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179da:	4a2e      	ldr	r2, [pc, #184]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179dc:	f043 0308 	orr.w	r3, r3, #8
 80179e0:	6313      	str	r3, [r2, #48]	; 0x30
 80179e2:	4b2c      	ldr	r3, [pc, #176]	; (8017a94 <BSP_QSPI_MspInit+0x170>)
 80179e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179e6:	f003 0308 	and.w	r3, r3, #8
 80179ea:	60bb      	str	r3, [r7, #8]
 80179ec:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 80179ee:	2340      	movs	r3, #64	; 0x40
 80179f0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80179f2:	2302      	movs	r3, #2
 80179f4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80179f6:	2301      	movs	r3, #1
 80179f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80179fa:	2303      	movs	r3, #3
 80179fc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80179fe:	230a      	movs	r3, #10
 8017a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8017a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a06:	4619      	mov	r1, r3
 8017a08:	4823      	ldr	r0, [pc, #140]	; (8017a98 <BSP_QSPI_MspInit+0x174>)
 8017a0a:	f7ec feff 	bl	800480c <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8017a0e:	2304      	movs	r3, #4
 8017a10:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8017a16:	2309      	movs	r3, #9
 8017a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8017a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a1e:	4619      	mov	r1, r3
 8017a20:	481d      	ldr	r0, [pc, #116]	; (8017a98 <BSP_QSPI_MspInit+0x174>)
 8017a22:	f7ec fef3 	bl	800480c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8017a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a2a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8017a2c:	2309      	movs	r3, #9
 8017a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8017a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a34:	4619      	mov	r1, r3
 8017a36:	4819      	ldr	r0, [pc, #100]	; (8017a9c <BSP_QSPI_MspInit+0x178>)
 8017a38:	f7ec fee8 	bl	800480c <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8017a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017a40:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8017a42:	2309      	movs	r3, #9
 8017a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8017a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a4a:	4619      	mov	r1, r3
 8017a4c:	4813      	ldr	r0, [pc, #76]	; (8017a9c <BSP_QSPI_MspInit+0x178>)
 8017a4e:	f7ec fedd 	bl	800480c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8017a52:	2304      	movs	r3, #4
 8017a54:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8017a56:	2309      	movs	r3, #9
 8017a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8017a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a5e:	4619      	mov	r1, r3
 8017a60:	480f      	ldr	r0, [pc, #60]	; (8017aa0 <BSP_QSPI_MspInit+0x17c>)
 8017a62:	f7ec fed3 	bl	800480c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8017a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017a6a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8017a6c:	2309      	movs	r3, #9
 8017a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8017a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a74:	4619      	mov	r1, r3
 8017a76:	4809      	ldr	r0, [pc, #36]	; (8017a9c <BSP_QSPI_MspInit+0x178>)
 8017a78:	f7ec fec8 	bl	800480c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	210f      	movs	r1, #15
 8017a80:	205c      	movs	r0, #92	; 0x5c
 8017a82:	f7eb ffa9 	bl	80039d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8017a86:	205c      	movs	r0, #92	; 0x5c
 8017a88:	f7eb ffc2 	bl	8003a10 <HAL_NVIC_EnableIRQ>
}
 8017a8c:	bf00      	nop
 8017a8e:	3738      	adds	r7, #56	; 0x38
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}
 8017a94:	40023800 	.word	0x40023800
 8017a98:	40020400 	.word	0x40020400
 8017a9c:	40020c00 	.word	0x40020c00
 8017aa0:	40021000 	.word	0x40021000

08017aa4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b090      	sub	sp, #64	; 0x40
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8017aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017ab0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8017ab2:	2366      	movs	r3, #102	; 0x66
 8017ab4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8017aba:	2300      	movs	r3, #0
 8017abc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8017aca:	2300      	movs	r3, #0
 8017acc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017ad2:	f107 0308 	add.w	r3, r7, #8
 8017ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8017ada:	4619      	mov	r1, r3
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f7f0 f8f1 	bl	8007cc4 <HAL_QSPI_Command>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d001      	beq.n	8017aec <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8017ae8:	2301      	movs	r3, #1
 8017aea:	e019      	b.n	8017b20 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8017aec:	2399      	movs	r3, #153	; 0x99
 8017aee:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017af0:	f107 0308 	add.w	r3, r7, #8
 8017af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8017af8:	4619      	mov	r1, r3
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	f7f0 f8e2 	bl	8007cc4 <HAL_QSPI_Command>
 8017b00:	4603      	mov	r3, r0
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d001      	beq.n	8017b0a <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8017b06:	2301      	movs	r3, #1
 8017b08:	e00a      	b.n	8017b20 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8017b0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	f000 f8c7 	bl	8017ca2 <QSPI_AutoPollingMemReady>
 8017b14:	4603      	mov	r3, r0
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d001      	beq.n	8017b1e <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	e000      	b.n	8017b20 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 8017b1e:	2300      	movs	r3, #0
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3740      	adds	r7, #64	; 0x40
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b094      	sub	sp, #80	; 0x50
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8017b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017b34:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8017b36:	2385      	movs	r3, #133	; 0x85
 8017b38:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8017b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017b46:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8017b50:	2300      	movs	r3, #0
 8017b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8017b54:	2300      	movs	r3, #0
 8017b56:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017b5c:	f107 0310 	add.w	r3, r7, #16
 8017b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b64:	4619      	mov	r1, r3
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7f0 f8ac 	bl	8007cc4 <HAL_QSPI_Command>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d001      	beq.n	8017b76 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8017b72:	2301      	movs	r3, #1
 8017b74:	e048      	b.n	8017c08 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017b76:	f107 030f 	add.w	r3, r7, #15
 8017b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b7e:	4619      	mov	r1, r3
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f7f0 f994 	bl	8007eae <HAL_QSPI_Receive>
 8017b86:	4603      	mov	r3, r0
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d001      	beq.n	8017b90 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8017b8c:	2301      	movs	r3, #1
 8017b8e:	e03b      	b.n	8017c08 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	f000 f83d 	bl	8017c10 <QSPI_WriteEnable>
 8017b96:	4603      	mov	r3, r0
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d001      	beq.n	8017ba0 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	e033      	b.n	8017c08 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8017ba0:	2381      	movs	r3, #129	; 0x81
 8017ba2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8017ba4:	7bfb      	ldrb	r3, [r7, #15]
 8017ba6:	b25b      	sxtb	r3, r3
 8017ba8:	f003 030f 	and.w	r3, r3, #15
 8017bac:	b25a      	sxtb	r2, r3
 8017bae:	23f0      	movs	r3, #240	; 0xf0
 8017bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bb4:	fa93 f3a3 	rbit	r3, r3
 8017bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8017bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bbc:	fab3 f383 	clz	r3, r3
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	230a      	movs	r3, #10
 8017bc6:	408b      	lsls	r3, r1
 8017bc8:	b25b      	sxtb	r3, r3
 8017bca:	4313      	orrs	r3, r2
 8017bcc:	b25b      	sxtb	r3, r3
 8017bce:	b2db      	uxtb	r3, r3
 8017bd0:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017bd2:	f107 0310 	add.w	r3, r7, #16
 8017bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8017bda:	4619      	mov	r1, r3
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f7f0 f871 	bl	8007cc4 <HAL_QSPI_Command>
 8017be2:	4603      	mov	r3, r0
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d001      	beq.n	8017bec <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 8017be8:	2301      	movs	r3, #1
 8017bea:	e00d      	b.n	8017c08 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017bec:	f107 030f 	add.w	r3, r7, #15
 8017bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	6878      	ldr	r0, [r7, #4]
 8017bf8:	f7f0 f8c4 	bl	8007d84 <HAL_QSPI_Transmit>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d001      	beq.n	8017c06 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 8017c02:	2301      	movs	r3, #1
 8017c04:	e000      	b.n	8017c08 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 8017c06:	2300      	movs	r3, #0
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3750      	adds	r7, #80	; 0x50
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b096      	sub	sp, #88	; 0x58
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8017c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8017c1e:	2306      	movs	r3, #6
 8017c20:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8017c22:	2300      	movs	r3, #0
 8017c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8017c26:	2300      	movs	r3, #0
 8017c28:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8017c2e:	2300      	movs	r3, #0
 8017c30:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8017c32:	2300      	movs	r3, #0
 8017c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8017c36:	2300      	movs	r3, #0
 8017c38:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017c3e:	f107 0320 	add.w	r3, r7, #32
 8017c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8017c46:	4619      	mov	r1, r3
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f7f0 f83b 	bl	8007cc4 <HAL_QSPI_Command>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d001      	beq.n	8017c58 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8017c54:	2301      	movs	r3, #1
 8017c56:	e020      	b.n	8017c9a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8017c58:	2302      	movs	r3, #2
 8017c5a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8017c5c:	2302      	movs	r3, #2
 8017c5e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8017c60:	2300      	movs	r3, #0
 8017c62:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8017c64:	2301      	movs	r3, #1
 8017c66:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8017c68:	2310      	movs	r3, #16
 8017c6a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8017c6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017c70:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8017c72:	2305      	movs	r3, #5
 8017c74:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8017c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017c7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017c7c:	f107 0208 	add.w	r2, r7, #8
 8017c80:	f107 0120 	add.w	r1, r7, #32
 8017c84:	f241 3388 	movw	r3, #5000	; 0x1388
 8017c88:	6878      	ldr	r0, [r7, #4]
 8017c8a:	f7f0 f9b0 	bl	8007fee <HAL_QSPI_AutoPolling>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d001      	beq.n	8017c98 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8017c94:	2301      	movs	r3, #1
 8017c96:	e000      	b.n	8017c9a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8017c98:	2300      	movs	r3, #0
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3758      	adds	r7, #88	; 0x58
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}

08017ca2 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8017ca2:	b580      	push	{r7, lr}
 8017ca4:	b096      	sub	sp, #88	; 0x58
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
 8017caa:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8017cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8017cb2:	2305      	movs	r3, #5
 8017cb4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8017cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017cc2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8017cc8:	2300      	movs	r3, #0
 8017cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8017cd8:	2301      	movs	r3, #1
 8017cda:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8017ce0:	2301      	movs	r3, #1
 8017ce2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8017ce4:	2310      	movs	r3, #16
 8017ce6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8017ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017cec:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8017cee:	f107 0208 	add.w	r2, r7, #8
 8017cf2:	f107 0120 	add.w	r1, r7, #32
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7f0 f978 	bl	8007fee <HAL_QSPI_AutoPolling>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8017d04:	2301      	movs	r3, #1
 8017d06:	e000      	b.n	8017d0a <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8017d08:	2300      	movs	r3, #0
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3758      	adds	r7, #88	; 0x58
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
	...

08017d14 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b084      	sub	sp, #16
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	460a      	mov	r2, r1
 8017d1e:	80fb      	strh	r3, [r7, #6]
 8017d20:	4613      	mov	r3, r2
 8017d22:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8017d24:	2300      	movs	r3, #0
 8017d26:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8017d28:	4a14      	ldr	r2, [pc, #80]	; (8017d7c <BSP_TS_Init+0x68>)
 8017d2a:	88fb      	ldrh	r3, [r7, #6]
 8017d2c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8017d2e:	4a14      	ldr	r2, [pc, #80]	; (8017d80 <BSP_TS_Init+0x6c>)
 8017d30:	88bb      	ldrh	r3, [r7, #4]
 8017d32:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8017d34:	4b13      	ldr	r3, [pc, #76]	; (8017d84 <BSP_TS_Init+0x70>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	2070      	movs	r0, #112	; 0x70
 8017d3a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8017d3c:	4b11      	ldr	r3, [pc, #68]	; (8017d84 <BSP_TS_Init+0x70>)
 8017d3e:	685b      	ldr	r3, [r3, #4]
 8017d40:	2070      	movs	r0, #112	; 0x70
 8017d42:	4798      	blx	r3
 8017d44:	4603      	mov	r3, r0
 8017d46:	2b51      	cmp	r3, #81	; 0x51
 8017d48:	d111      	bne.n	8017d6e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8017d4a:	4b0f      	ldr	r3, [pc, #60]	; (8017d88 <BSP_TS_Init+0x74>)
 8017d4c:	4a0d      	ldr	r2, [pc, #52]	; (8017d84 <BSP_TS_Init+0x70>)
 8017d4e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8017d50:	4b0e      	ldr	r3, [pc, #56]	; (8017d8c <BSP_TS_Init+0x78>)
 8017d52:	2270      	movs	r2, #112	; 0x70
 8017d54:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8017d56:	4b0e      	ldr	r3, [pc, #56]	; (8017d90 <BSP_TS_Init+0x7c>)
 8017d58:	2208      	movs	r2, #8
 8017d5a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8017d5c:	4b0a      	ldr	r3, [pc, #40]	; (8017d88 <BSP_TS_Init+0x74>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	68db      	ldr	r3, [r3, #12]
 8017d62:	4a0a      	ldr	r2, [pc, #40]	; (8017d8c <BSP_TS_Init+0x78>)
 8017d64:	7812      	ldrb	r2, [r2, #0]
 8017d66:	b292      	uxth	r2, r2
 8017d68:	4610      	mov	r0, r2
 8017d6a:	4798      	blx	r3
 8017d6c:	e001      	b.n	8017d72 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8017d6e:	2303      	movs	r3, #3
 8017d70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	3710      	adds	r7, #16
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd80      	pop	{r7, pc}
 8017d7c:	20008e94 	.word	0x20008e94
 8017d80:	20008e96 	.word	0x20008e96
 8017d84:	20000000 	.word	0x20000000
 8017d88:	20008e90 	.word	0x20008e90
 8017d8c:	20008e99 	.word	0x20008e99
 8017d90:	20008e98 	.word	0x20008e98

08017d94 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8017d94:	b590      	push	{r4, r7, lr}
 8017d96:	b097      	sub	sp, #92	; 0x5c
 8017d98:	af02      	add	r7, sp, #8
 8017d9a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8017da6:	2300      	movs	r3, #0
 8017da8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8017daa:	2300      	movs	r3, #0
 8017dac:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8017dae:	4b97      	ldr	r3, [pc, #604]	; (801800c <BSP_TS_GetState+0x278>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	691b      	ldr	r3, [r3, #16]
 8017db4:	4a96      	ldr	r2, [pc, #600]	; (8018010 <BSP_TS_GetState+0x27c>)
 8017db6:	7812      	ldrb	r2, [r2, #0]
 8017db8:	b292      	uxth	r2, r2
 8017dba:	4610      	mov	r0, r2
 8017dbc:	4798      	blx	r3
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	461a      	mov	r2, r3
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	781b      	ldrb	r3, [r3, #0]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	f000 81a8 	beq.w	8018120 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8017dd4:	e197      	b.n	8018106 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8017dd6:	4b8d      	ldr	r3, [pc, #564]	; (801800c <BSP_TS_GetState+0x278>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	695b      	ldr	r3, [r3, #20]
 8017ddc:	4a8c      	ldr	r2, [pc, #560]	; (8018010 <BSP_TS_GetState+0x27c>)
 8017dde:	7812      	ldrb	r2, [r2, #0]
 8017de0:	b290      	uxth	r0, r2
 8017de2:	f107 0120 	add.w	r1, r7, #32
 8017de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017de8:	0052      	lsls	r2, r2, #1
 8017dea:	188c      	adds	r4, r1, r2
 8017dec:	f107 0114 	add.w	r1, r7, #20
 8017df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017df2:	0052      	lsls	r2, r2, #1
 8017df4:	440a      	add	r2, r1
 8017df6:	4621      	mov	r1, r4
 8017df8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8017dfa:	4b86      	ldr	r3, [pc, #536]	; (8018014 <BSP_TS_GetState+0x280>)
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d11b      	bne.n	8017e3a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8017e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e04:	005b      	lsls	r3, r3, #1
 8017e06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017e0a:	4413      	add	r3, r2
 8017e0c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8017e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e12:	005b      	lsls	r3, r3, #1
 8017e14:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017e18:	440b      	add	r3, r1
 8017e1a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8017e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e20:	005b      	lsls	r3, r3, #1
 8017e22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017e26:	4413      	add	r3, r2
 8017e28:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8017e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017e34:	440b      	add	r3, r1
 8017e36:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8017e3a:	4b76      	ldr	r3, [pc, #472]	; (8018014 <BSP_TS_GetState+0x280>)
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	f003 0302 	and.w	r3, r3, #2
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d010      	beq.n	8017e68 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8017e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e48:	005b      	lsls	r3, r3, #1
 8017e4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017e4e:	4413      	add	r3, r2
 8017e50:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8017e54:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e5c:	005b      	lsls	r3, r3, #1
 8017e5e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017e62:	440b      	add	r3, r1
 8017e64:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8017e68:	4b6a      	ldr	r3, [pc, #424]	; (8018014 <BSP_TS_GetState+0x280>)
 8017e6a:	781b      	ldrb	r3, [r3, #0]
 8017e6c:	f003 0304 	and.w	r3, r3, #4
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d010      	beq.n	8017e96 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8017e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e76:	005b      	lsls	r3, r3, #1
 8017e78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017e7c:	4413      	add	r3, r2
 8017e7e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8017e82:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8017e86:	b29a      	uxth	r2, r3
 8017e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e8a:	005b      	lsls	r3, r3, #1
 8017e8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017e90:	440b      	add	r3, r1
 8017e92:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8017e96:	4b5f      	ldr	r3, [pc, #380]	; (8018014 <BSP_TS_GetState+0x280>)
 8017e98:	781b      	ldrb	r3, [r3, #0]
 8017e9a:	f003 0308 	and.w	r3, r3, #8
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d01b      	beq.n	8017eda <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8017ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ea4:	005b      	lsls	r3, r3, #1
 8017ea6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017eaa:	4413      	add	r3, r2
 8017eac:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8017eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017eb2:	005b      	lsls	r3, r3, #1
 8017eb4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017eb8:	440b      	add	r3, r1
 8017eba:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8017ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017ec6:	4413      	add	r3, r2
 8017ec8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8017ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ece:	005b      	lsls	r3, r3, #1
 8017ed0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017ed4:	440b      	add	r3, r1
 8017ed6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8017eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017ee2:	4413      	add	r3, r2
 8017ee4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8017ee8:	4619      	mov	r1, r3
 8017eea:	4a4b      	ldr	r2, [pc, #300]	; (8018018 <BSP_TS_GetState+0x284>)
 8017eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ef2:	4299      	cmp	r1, r3
 8017ef4:	d90e      	bls.n	8017f14 <BSP_TS_GetState+0x180>
 8017ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ef8:	005b      	lsls	r3, r3, #1
 8017efa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017efe:	4413      	add	r3, r2
 8017f00:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017f04:	4944      	ldr	r1, [pc, #272]	; (8018018 <BSP_TS_GetState+0x284>)
 8017f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8017f0c:	b29b      	uxth	r3, r3
 8017f0e:	1ad3      	subs	r3, r2, r3
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	e00d      	b.n	8017f30 <BSP_TS_GetState+0x19c>
 8017f14:	4a40      	ldr	r2, [pc, #256]	; (8018018 <BSP_TS_GetState+0x284>)
 8017f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f1c:	b29a      	uxth	r2, r3
 8017f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017f26:	440b      	add	r3, r1
 8017f28:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8017f2c:	1ad3      	subs	r3, r2, r3
 8017f2e:	b29b      	uxth	r3, r3
 8017f30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8017f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f36:	005b      	lsls	r3, r3, #1
 8017f38:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017f3c:	4413      	add	r3, r2
 8017f3e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8017f42:	4619      	mov	r1, r3
 8017f44:	4a35      	ldr	r2, [pc, #212]	; (801801c <BSP_TS_GetState+0x288>)
 8017f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f4c:	4299      	cmp	r1, r3
 8017f4e:	d90e      	bls.n	8017f6e <BSP_TS_GetState+0x1da>
 8017f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f52:	005b      	lsls	r3, r3, #1
 8017f54:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017f58:	4413      	add	r3, r2
 8017f5a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8017f5e:	492f      	ldr	r1, [pc, #188]	; (801801c <BSP_TS_GetState+0x288>)
 8017f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	1ad3      	subs	r3, r2, r3
 8017f6a:	b29b      	uxth	r3, r3
 8017f6c:	e00d      	b.n	8017f8a <BSP_TS_GetState+0x1f6>
 8017f6e:	4a2b      	ldr	r2, [pc, #172]	; (801801c <BSP_TS_GetState+0x288>)
 8017f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f76:	b29a      	uxth	r2, r3
 8017f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f7a:	005b      	lsls	r3, r3, #1
 8017f7c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017f80:	440b      	add	r3, r1
 8017f82:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8017f86:	1ad3      	subs	r3, r2, r3
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8017f8e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017f92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017f96:	4413      	add	r3, r2
 8017f98:	2b05      	cmp	r3, #5
 8017f9a:	dd17      	ble.n	8017fcc <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8017f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f9e:	005b      	lsls	r3, r3, #1
 8017fa0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017fa4:	4413      	add	r3, r2
 8017fa6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8017faa:	4619      	mov	r1, r3
 8017fac:	4a1a      	ldr	r2, [pc, #104]	; (8018018 <BSP_TS_GetState+0x284>)
 8017fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8017fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fb6:	005b      	lsls	r3, r3, #1
 8017fb8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017fbc:	4413      	add	r3, r2
 8017fbe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	4a15      	ldr	r2, [pc, #84]	; (801801c <BSP_TS_GetState+0x288>)
 8017fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8017fcc:	4b10      	ldr	r3, [pc, #64]	; (8018010 <BSP_TS_GetState+0x27c>)
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	2b70      	cmp	r3, #112	; 0x70
 8017fd2:	d125      	bne.n	8018020 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8017fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fd6:	005b      	lsls	r3, r3, #1
 8017fd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017fdc:	4413      	add	r3, r2
 8017fde:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8017fe2:	687a      	ldr	r2, [r7, #4]
 8017fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fe6:	005b      	lsls	r3, r3, #1
 8017fe8:	4413      	add	r3, r2
 8017fea:	460a      	mov	r2, r1
 8017fec:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8017fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ff0:	005b      	lsls	r3, r3, #1
 8017ff2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017ff6:	4413      	add	r3, r2
 8017ff8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8017ffc:	687a      	ldr	r2, [r7, #4]
 8017ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018000:	3304      	adds	r3, #4
 8018002:	005b      	lsls	r3, r3, #1
 8018004:	4413      	add	r3, r2
 8018006:	460a      	mov	r2, r1
 8018008:	809a      	strh	r2, [r3, #4]
 801800a:	e02c      	b.n	8018066 <BSP_TS_GetState+0x2d2>
 801800c:	20008e90 	.word	0x20008e90
 8018010:	20008e99 	.word	0x20008e99
 8018014:	20008e98 	.word	0x20008e98
 8018018:	20008e9c 	.word	0x20008e9c
 801801c:	20008eb0 	.word	0x20008eb0
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8018020:	4b42      	ldr	r3, [pc, #264]	; (801812c <BSP_TS_GetState+0x398>)
 8018022:	881b      	ldrh	r3, [r3, #0]
 8018024:	4619      	mov	r1, r3
 8018026:	4a42      	ldr	r2, [pc, #264]	; (8018130 <BSP_TS_GetState+0x39c>)
 8018028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801802a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801802e:	fb03 f301 	mul.w	r3, r3, r1
 8018032:	0b1b      	lsrs	r3, r3, #12
 8018034:	b299      	uxth	r1, r3
 8018036:	687a      	ldr	r2, [r7, #4]
 8018038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801803a:	005b      	lsls	r3, r3, #1
 801803c:	4413      	add	r3, r2
 801803e:	460a      	mov	r2, r1
 8018040:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8018042:	4b3c      	ldr	r3, [pc, #240]	; (8018134 <BSP_TS_GetState+0x3a0>)
 8018044:	881b      	ldrh	r3, [r3, #0]
 8018046:	4619      	mov	r1, r3
 8018048:	4a3b      	ldr	r2, [pc, #236]	; (8018138 <BSP_TS_GetState+0x3a4>)
 801804a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801804c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018050:	fb03 f301 	mul.w	r3, r3, r1
 8018054:	0b1b      	lsrs	r3, r3, #12
 8018056:	b299      	uxth	r1, r3
 8018058:	687a      	ldr	r2, [r7, #4]
 801805a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801805c:	3304      	adds	r3, #4
 801805e:	005b      	lsls	r3, r3, #1
 8018060:	4413      	add	r3, r2
 8018062:	460a      	mov	r2, r1
 8018064:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8018066:	4b35      	ldr	r3, [pc, #212]	; (801813c <BSP_TS_GetState+0x3a8>)
 8018068:	781b      	ldrb	r3, [r3, #0]
 801806a:	b298      	uxth	r0, r3
 801806c:	f107 010c 	add.w	r1, r7, #12
 8018070:	f107 0210 	add.w	r2, r7, #16
 8018074:	f107 0308 	add.w	r3, r7, #8
 8018078:	9300      	str	r3, [sp, #0]
 801807a:	460b      	mov	r3, r1
 801807c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801807e:	f7e8 fc61 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	b2d9      	uxtb	r1, r3
 8018086:	687a      	ldr	r2, [r7, #4]
 8018088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801808a:	4413      	add	r3, r2
 801808c:	3316      	adds	r3, #22
 801808e:	460a      	mov	r2, r1
 8018090:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	b2d9      	uxtb	r1, r3
 8018096:	687a      	ldr	r2, [r7, #4]
 8018098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801809a:	4413      	add	r3, r2
 801809c:	3320      	adds	r3, #32
 801809e:	460a      	mov	r2, r1
 80180a0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80180a2:	68bb      	ldr	r3, [r7, #8]
 80180a4:	2b03      	cmp	r3, #3
 80180a6:	d827      	bhi.n	80180f8 <BSP_TS_GetState+0x364>
 80180a8:	a201      	add	r2, pc, #4	; (adr r2, 80180b0 <BSP_TS_GetState+0x31c>)
 80180aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180ae:	bf00      	nop
 80180b0:	080180c1 	.word	0x080180c1
 80180b4:	080180cf 	.word	0x080180cf
 80180b8:	080180dd 	.word	0x080180dd
 80180bc:	080180eb 	.word	0x080180eb
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80180c0:	687a      	ldr	r2, [r7, #4]
 80180c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180c4:	4413      	add	r3, r2
 80180c6:	331b      	adds	r3, #27
 80180c8:	2201      	movs	r2, #1
 80180ca:	701a      	strb	r2, [r3, #0]
          break;
 80180cc:	e018      	b.n	8018100 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80180ce:	687a      	ldr	r2, [r7, #4]
 80180d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180d2:	4413      	add	r3, r2
 80180d4:	331b      	adds	r3, #27
 80180d6:	2202      	movs	r2, #2
 80180d8:	701a      	strb	r2, [r3, #0]
          break;
 80180da:	e011      	b.n	8018100 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80180dc:	687a      	ldr	r2, [r7, #4]
 80180de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180e0:	4413      	add	r3, r2
 80180e2:	331b      	adds	r3, #27
 80180e4:	2203      	movs	r2, #3
 80180e6:	701a      	strb	r2, [r3, #0]
          break;
 80180e8:	e00a      	b.n	8018100 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80180ea:	687a      	ldr	r2, [r7, #4]
 80180ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80180ee:	4413      	add	r3, r2
 80180f0:	331b      	adds	r3, #27
 80180f2:	2200      	movs	r2, #0
 80180f4:	701a      	strb	r2, [r3, #0]
          break;
 80180f6:	e003      	b.n	8018100 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80180f8:	2301      	movs	r3, #1
 80180fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80180fe:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8018100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018102:	3301      	adds	r3, #1
 8018104:	64bb      	str	r3, [r7, #72]	; 0x48
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	781b      	ldrb	r3, [r3, #0]
 801810a:	461a      	mov	r2, r3
 801810c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801810e:	4293      	cmp	r3, r2
 8018110:	f4ff ae61 	bcc.w	8017dd6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f000 f813 	bl	8018140 <BSP_TS_Get_GestureId>
 801811a:	4603      	mov	r3, r0
 801811c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8018120:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8018124:	4618      	mov	r0, r3
 8018126:	3754      	adds	r7, #84	; 0x54
 8018128:	46bd      	mov	sp, r7
 801812a:	bd90      	pop	{r4, r7, pc}
 801812c:	20008e94 	.word	0x20008e94
 8018130:	20008e9c 	.word	0x20008e9c
 8018134:	20008e96 	.word	0x20008e96
 8018138:	20008eb0 	.word	0x20008eb0
 801813c:	20008e99 	.word	0x20008e99

08018140 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b084      	sub	sp, #16
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8018148:	2300      	movs	r3, #0
 801814a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 801814c:	2300      	movs	r3, #0
 801814e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8018150:	4b1f      	ldr	r3, [pc, #124]	; (80181d0 <BSP_TS_Get_GestureId+0x90>)
 8018152:	781b      	ldrb	r3, [r3, #0]
 8018154:	b29b      	uxth	r3, r3
 8018156:	f107 0208 	add.w	r2, r7, #8
 801815a:	4611      	mov	r1, r2
 801815c:	4618      	mov	r0, r3
 801815e:	f7e8 fbd8 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8018162:	68bb      	ldr	r3, [r7, #8]
 8018164:	2b18      	cmp	r3, #24
 8018166:	d01b      	beq.n	80181a0 <BSP_TS_Get_GestureId+0x60>
 8018168:	2b18      	cmp	r3, #24
 801816a:	d806      	bhi.n	801817a <BSP_TS_Get_GestureId+0x3a>
 801816c:	2b10      	cmp	r3, #16
 801816e:	d00f      	beq.n	8018190 <BSP_TS_Get_GestureId+0x50>
 8018170:	2b14      	cmp	r3, #20
 8018172:	d011      	beq.n	8018198 <BSP_TS_Get_GestureId+0x58>
 8018174:	2b00      	cmp	r3, #0
 8018176:	d007      	beq.n	8018188 <BSP_TS_Get_GestureId+0x48>
 8018178:	e022      	b.n	80181c0 <BSP_TS_Get_GestureId+0x80>
 801817a:	2b40      	cmp	r3, #64	; 0x40
 801817c:	d018      	beq.n	80181b0 <BSP_TS_Get_GestureId+0x70>
 801817e:	2b49      	cmp	r3, #73	; 0x49
 8018180:	d01a      	beq.n	80181b8 <BSP_TS_Get_GestureId+0x78>
 8018182:	2b1c      	cmp	r3, #28
 8018184:	d010      	beq.n	80181a8 <BSP_TS_Get_GestureId+0x68>
 8018186:	e01b      	b.n	80181c0 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2200      	movs	r2, #0
 801818c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801818e:	e01a      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	2201      	movs	r2, #1
 8018194:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8018196:	e016      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2202      	movs	r2, #2
 801819c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801819e:	e012      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2203      	movs	r2, #3
 80181a4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80181a6:	e00e      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	2204      	movs	r2, #4
 80181ac:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80181ae:	e00a      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	2205      	movs	r2, #5
 80181b4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80181b6:	e006      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2206      	movs	r2, #6
 80181bc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80181be:	e002      	b.n	80181c6 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80181c0:	2301      	movs	r3, #1
 80181c2:	73fb      	strb	r3, [r7, #15]
      break;
 80181c4:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80181c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	3710      	adds	r7, #16
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	20008e99 	.word	0x20008e99

080181d4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80181d4:	b480      	push	{r7}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
    {
 80181dc:	4a04      	ldr	r2, [pc, #16]	; (80181f0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	601a      	str	r2, [r3, #0]
    }
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	4618      	mov	r0, r3
 80181e6:	370c      	adds	r7, #12
 80181e8:	46bd      	mov	sp, r7
 80181ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ee:	4770      	bx	lr
 80181f0:	08024dbc 	.word	0x08024dbc

080181f4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b082      	sub	sp, #8
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
    }
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f7ff ffe9 	bl	80181d4 <_ZN8touchgfx12FontProviderD1Ev>
 8018202:	2104      	movs	r1, #4
 8018204:	6878      	ldr	r0, [r7, #4]
 8018206:	f00a fba6 	bl	8022956 <_ZdlPvj>
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	4618      	mov	r0, r3
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_15_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	460b      	mov	r3, r1
 801821e:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 8018220:	887b      	ldrh	r3, [r7, #2]
 8018222:	2b01      	cmp	r3, #1
 8018224:	d007      	beq.n	8018236 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 8018226:	2b02      	cmp	r3, #2
 8018228:	d009      	beq.n	801823e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 801822a:	2b00      	cmp	r3, #0
 801822c:	d10b      	bne.n	8018246 <_ZN23ApplicationFontProvider7getFontEt+0x32>
    {
    case Typography::DEFAULT:
        return &(getFont_verdana_20_4bpp());
 801822e:	f000 f8b9 	bl	80183a4 <_Z23getFont_verdana_20_4bppv>
 8018232:	4603      	mov	r3, r0
 8018234:	e008      	b.n	8018248 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
 8018236:	f000 f8f3 	bl	8018420 <_Z23getFont_verdana_40_4bppv>
 801823a:	4603      	mov	r3, r0
 801823c:	e004      	b.n	8018248 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::SMALL:
        return &(getFont_verdana_15_4bpp());
 801823e:	f000 f873 	bl	8018328 <_Z23getFont_verdana_15_4bppv>
 8018242:	4603      	mov	r3, r0
 8018244:	e000      	b.n	8018248 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    default:
        return 0;
 8018246:	2300      	movs	r3, #0
    }
}
 8018248:	4618      	mov	r0, r3
 801824a:	3708      	adds	r7, #8
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}

08018250 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
 8018258:	4a05      	ldr	r2, [pc, #20]	; (8018270 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	601a      	str	r2, [r3, #0]
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	4618      	mov	r0, r3
 8018262:	f7ff ffb7 	bl	80181d4 <_ZN8touchgfx12FontProviderD1Ev>
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	4618      	mov	r0, r3
 801826a:	3708      	adds	r7, #8
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}
 8018270:	08024da8 	.word	0x08024da8

08018274 <_ZN23ApplicationFontProviderD0Ev>:
 8018274:	b580      	push	{r7, lr}
 8018276:	b082      	sub	sp, #8
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
 801827c:	6878      	ldr	r0, [r7, #4]
 801827e:	f7ff ffe7 	bl	8018250 <_ZN23ApplicationFontProviderD1Ev>
 8018282:	2104      	movs	r1, #4
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f00a fb66 	bl	8022956 <_ZdlPvj>
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	4618      	mov	r0, r3
 801828e:	3708      	adds	r7, #8
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8018294:	b480      	push	{r7}
 8018296:	b083      	sub	sp, #12
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
 801829c:	4a04      	ldr	r2, [pc, #16]	; (80182b0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	601a      	str	r2, [r3, #0]
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	4618      	mov	r0, r3
 80182a6:	370c      	adds	r7, #12
 80182a8:	46bd      	mov	sp, r7
 80182aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ae:	4770      	bx	lr
 80182b0:	0802607c 	.word	0x0802607c

080182b4 <_ZN8touchgfx4FontD0Ev>:
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b082      	sub	sp, #8
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f7ff ffe9 	bl	8018294 <_ZN8touchgfx4FontD1Ev>
 80182c2:	2110      	movs	r1, #16
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f00a fb46 	bl	8022956 <_ZdlPvj>
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	4618      	mov	r0, r3
 80182ce:	3708      	adds	r7, #8
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}

080182d4 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	4a05      	ldr	r2, [pc, #20]	; (80182f4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	601a      	str	r2, [r3, #0]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7ff ffd5 	bl	8018294 <_ZN8touchgfx4FontD1Ev>
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	4618      	mov	r0, r3
 80182ee:	3708      	adds	r7, #8
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	08026130 	.word	0x08026130

080182f8 <_ZN8touchgfx9ConstFontD0Ev>:
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b082      	sub	sp, #8
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	6878      	ldr	r0, [r7, #4]
 8018302:	f7ff ffe7 	bl	80182d4 <_ZN8touchgfx9ConstFontD1Ev>
 8018306:	2118      	movs	r1, #24
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f00a fb24 	bl	8022956 <_ZdlPvj>
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	4618      	mov	r0, r3
 8018312:	3708      	adds	r7, #8
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}

08018318 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_15_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_15_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_15_4bpp()
{
    static touchgfx::InternalFlashFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 83, 15, 4, 4, 1, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 0, 0);
 8018318:	b580      	push	{r7, lr}
 801831a:	af00      	add	r7, sp, #0
 801831c:	4801      	ldr	r0, [pc, #4]	; (8018324 <__tcf_0+0xc>)
 801831e:	f000 f8b5 	bl	801848c <_ZN8touchgfx17InternalFlashFontD1Ev>
 8018322:	bd80      	pop	{r7, pc}
 8018324:	20008ec4 	.word	0x20008ec4

08018328 <_Z23getFont_verdana_15_4bppv>:
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b088      	sub	sp, #32
 801832c:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 83, 15, 4, 4, 1, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 0, 0);
 801832e:	4b13      	ldr	r3, [pc, #76]	; (801837c <_Z23getFont_verdana_15_4bppv+0x54>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	f003 0301 	and.w	r3, r3, #1
 8018336:	2b00      	cmp	r3, #0
 8018338:	d11b      	bne.n	8018372 <_Z23getFont_verdana_15_4bppv+0x4a>
 801833a:	2300      	movs	r3, #0
 801833c:	9307      	str	r3, [sp, #28]
 801833e:	2300      	movs	r3, #0
 8018340:	9306      	str	r3, [sp, #24]
 8018342:	4b0f      	ldr	r3, [pc, #60]	; (8018380 <_Z23getFont_verdana_15_4bppv+0x58>)
 8018344:	9305      	str	r3, [sp, #20]
 8018346:	4b0f      	ldr	r3, [pc, #60]	; (8018384 <_Z23getFont_verdana_15_4bppv+0x5c>)
 8018348:	9304      	str	r3, [sp, #16]
 801834a:	2301      	movs	r3, #1
 801834c:	9303      	str	r3, [sp, #12]
 801834e:	2301      	movs	r3, #1
 8018350:	9302      	str	r3, [sp, #8]
 8018352:	2304      	movs	r3, #4
 8018354:	9301      	str	r3, [sp, #4]
 8018356:	2304      	movs	r3, #4
 8018358:	9300      	str	r3, [sp, #0]
 801835a:	230f      	movs	r3, #15
 801835c:	2253      	movs	r2, #83	; 0x53
 801835e:	490a      	ldr	r1, [pc, #40]	; (8018388 <_Z23getFont_verdana_15_4bppv+0x60>)
 8018360:	480a      	ldr	r0, [pc, #40]	; (801838c <_Z23getFont_verdana_15_4bppv+0x64>)
 8018362:	f007 fd49 	bl	801fdf8 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8018366:	4b05      	ldr	r3, [pc, #20]	; (801837c <_Z23getFont_verdana_15_4bppv+0x54>)
 8018368:	2201      	movs	r2, #1
 801836a:	601a      	str	r2, [r3, #0]
 801836c:	4808      	ldr	r0, [pc, #32]	; (8018390 <_Z23getFont_verdana_15_4bppv+0x68>)
 801836e:	f00a fb2d 	bl	80229cc <atexit>
    return verdana_15_4bpp;
 8018372:	4b06      	ldr	r3, [pc, #24]	; (801838c <_Z23getFont_verdana_15_4bppv+0x64>)
}
 8018374:	4618      	mov	r0, r3
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	20008ee4 	.word	0x20008ee4
 8018380:	900cf644 	.word	0x900cf644
 8018384:	900ccce8 	.word	0x900ccce8
 8018388:	900cf7e4 	.word	0x900cf7e4
 801838c:	20008ec4 	.word	0x20008ec4
 8018390:	08018319 	.word	0x08018319

08018394 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 83, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 8018394:	b580      	push	{r7, lr}
 8018396:	af00      	add	r7, sp, #0
 8018398:	4801      	ldr	r0, [pc, #4]	; (80183a0 <__tcf_1+0xc>)
 801839a:	f000 f877 	bl	801848c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801839e:	bd80      	pop	{r7, pc}
 80183a0:	20008ee8 	.word	0x20008ee8

080183a4 <_Z23getFont_verdana_20_4bppv>:
{
 80183a4:	b580      	push	{r7, lr}
 80183a6:	b088      	sub	sp, #32
 80183a8:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 83, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 80183aa:	4b13      	ldr	r3, [pc, #76]	; (80183f8 <_Z23getFont_verdana_20_4bppv+0x54>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	f003 0301 	and.w	r3, r3, #1
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d11b      	bne.n	80183ee <_Z23getFont_verdana_20_4bppv+0x4a>
 80183b6:	2300      	movs	r3, #0
 80183b8:	9307      	str	r3, [sp, #28]
 80183ba:	2300      	movs	r3, #0
 80183bc:	9306      	str	r3, [sp, #24]
 80183be:	4b0f      	ldr	r3, [pc, #60]	; (80183fc <_Z23getFont_verdana_20_4bppv+0x58>)
 80183c0:	9305      	str	r3, [sp, #20]
 80183c2:	4b0f      	ldr	r3, [pc, #60]	; (8018400 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80183c4:	9304      	str	r3, [sp, #16]
 80183c6:	2301      	movs	r3, #1
 80183c8:	9303      	str	r3, [sp, #12]
 80183ca:	2301      	movs	r3, #1
 80183cc:	9302      	str	r3, [sp, #8]
 80183ce:	2304      	movs	r3, #4
 80183d0:	9301      	str	r3, [sp, #4]
 80183d2:	2304      	movs	r3, #4
 80183d4:	9300      	str	r3, [sp, #0]
 80183d6:	2314      	movs	r3, #20
 80183d8:	2253      	movs	r2, #83	; 0x53
 80183da:	490a      	ldr	r1, [pc, #40]	; (8018404 <_Z23getFont_verdana_20_4bppv+0x60>)
 80183dc:	480a      	ldr	r0, [pc, #40]	; (8018408 <_Z23getFont_verdana_20_4bppv+0x64>)
 80183de:	f007 fd0b 	bl	801fdf8 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80183e2:	4b05      	ldr	r3, [pc, #20]	; (80183f8 <_Z23getFont_verdana_20_4bppv+0x54>)
 80183e4:	2201      	movs	r2, #1
 80183e6:	601a      	str	r2, [r3, #0]
 80183e8:	4808      	ldr	r0, [pc, #32]	; (801840c <_Z23getFont_verdana_20_4bppv+0x68>)
 80183ea:	f00a faef 	bl	80229cc <atexit>
    return verdana_20_4bpp;
 80183ee:	4b06      	ldr	r3, [pc, #24]	; (8018408 <_Z23getFont_verdana_20_4bppv+0x64>)
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
 80183f6:	bf00      	nop
 80183f8:	20008f08 	.word	0x20008f08
 80183fc:	900cf6bc 	.word	0x900cf6bc
 8018400:	900cdd08 	.word	0x900cdd08
 8018404:	900cfc70 	.word	0x900cfc70
 8018408:	20008ee8 	.word	0x20008ee8
 801840c:	08018395 	.word	0x08018395

08018410 <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 8018410:	b580      	push	{r7, lr}
 8018412:	af00      	add	r7, sp, #0
 8018414:	4801      	ldr	r0, [pc, #4]	; (801841c <__tcf_2+0xc>)
 8018416:	f000 f839 	bl	801848c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801841a:	bd80      	pop	{r7, pc}
 801841c:	20008f0c 	.word	0x20008f0c

08018420 <_Z23getFont_verdana_40_4bppv>:
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b088      	sub	sp, #32
 8018424:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 8018426:	4b13      	ldr	r3, [pc, #76]	; (8018474 <_Z23getFont_verdana_40_4bppv+0x54>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	f003 0301 	and.w	r3, r3, #1
 801842e:	2b00      	cmp	r3, #0
 8018430:	d11b      	bne.n	801846a <_Z23getFont_verdana_40_4bppv+0x4a>
 8018432:	2300      	movs	r3, #0
 8018434:	9307      	str	r3, [sp, #28]
 8018436:	2300      	movs	r3, #0
 8018438:	9306      	str	r3, [sp, #24]
 801843a:	4b0f      	ldr	r3, [pc, #60]	; (8018478 <_Z23getFont_verdana_40_4bppv+0x58>)
 801843c:	9305      	str	r3, [sp, #20]
 801843e:	4b0f      	ldr	r3, [pc, #60]	; (801847c <_Z23getFont_verdana_40_4bppv+0x5c>)
 8018440:	9304      	str	r3, [sp, #16]
 8018442:	2300      	movs	r3, #0
 8018444:	9303      	str	r3, [sp, #12]
 8018446:	2300      	movs	r3, #0
 8018448:	9302      	str	r3, [sp, #8]
 801844a:	2304      	movs	r3, #4
 801844c:	9301      	str	r3, [sp, #4]
 801844e:	2300      	movs	r3, #0
 8018450:	9300      	str	r3, [sp, #0]
 8018452:	2328      	movs	r3, #40	; 0x28
 8018454:	2200      	movs	r2, #0
 8018456:	490a      	ldr	r1, [pc, #40]	; (8018480 <_Z23getFont_verdana_40_4bppv+0x60>)
 8018458:	480a      	ldr	r0, [pc, #40]	; (8018484 <_Z23getFont_verdana_40_4bppv+0x64>)
 801845a:	f007 fccd 	bl	801fdf8 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801845e:	4b05      	ldr	r3, [pc, #20]	; (8018474 <_Z23getFont_verdana_40_4bppv+0x54>)
 8018460:	2201      	movs	r2, #1
 8018462:	601a      	str	r2, [r3, #0]
 8018464:	4808      	ldr	r0, [pc, #32]	; (8018488 <_Z23getFont_verdana_40_4bppv+0x68>)
 8018466:	f00a fab1 	bl	80229cc <atexit>
    return verdana_40_4bpp;
 801846a:	4b06      	ldr	r3, [pc, #24]	; (8018484 <_Z23getFont_verdana_40_4bppv+0x64>)
}
 801846c:	4618      	mov	r0, r3
 801846e:	46bd      	mov	sp, r7
 8018470:	bd80      	pop	{r7, pc}
 8018472:	bf00      	nop
 8018474:	20008f2c 	.word	0x20008f2c
 8018478:	900cf7e0 	.word	0x900cf7e0
 801847c:	900cf640 	.word	0x900cf640
 8018480:	900d00fc 	.word	0x900d00fc
 8018484:	20008f0c 	.word	0x20008f0c
 8018488:	08018411 	.word	0x08018411

0801848c <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 801848c:	b580      	push	{r7, lr}
 801848e:	b082      	sub	sp, #8
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	4a05      	ldr	r2, [pc, #20]	; (80184ac <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	601a      	str	r2, [r3, #0]
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	4618      	mov	r0, r3
 801849e:	f7ff ff19 	bl	80182d4 <_ZN8touchgfx9ConstFontD1Ev>
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	4618      	mov	r0, r3
 80184a6:	3708      	adds	r7, #8
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}
 80184ac:	080261c4 	.word	0x080261c4

080184b0 <_ZN8touchgfx17InternalFlashFontD0Ev>:
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f7ff ffe7 	bl	801848c <_ZN8touchgfx17InternalFlashFontD1Ev>
 80184be:	2120      	movs	r1, #32
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f00a fa48 	bl	8022956 <_ZdlPvj>
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	4618      	mov	r0, r3
 80184ca:	3708      	adds	r7, #8
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}

080184d0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80184d0:	b480      	push	{r7}
 80184d2:	b083      	sub	sp, #12
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
 80184d8:	6039      	str	r1, [r7, #0]
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	4618      	mov	r0, r3
 80184de:	370c      	adds	r7, #12
 80184e0:	46bd      	mov	sp, r7
 80184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e6:	4770      	bx	lr

080184e8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80184e8:	b480      	push	{r7}
 80184ea:	b083      	sub	sp, #12
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	6039      	str	r1, [r7, #0]
    {
    }
 80184f2:	bf00      	nop
 80184f4:	370c      	adds	r7, #12
 80184f6:	46bd      	mov	sp, r7
 80184f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fc:	4770      	bx	lr

080184fe <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80184fe:	b480      	push	{r7}
 8018500:	b083      	sub	sp, #12
 8018502:	af00      	add	r7, sp, #0
 8018504:	6078      	str	r0, [r7, #4]
 8018506:	6039      	str	r1, [r7, #0]
    {
    }
 8018508:	bf00      	nop
 801850a:	370c      	adds	r7, #12
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr

08018514 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8018514:	b480      	push	{r7}
 8018516:	b083      	sub	sp, #12
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
 801851c:	6039      	str	r1, [r7, #0]
    {
    }
 801851e:	bf00      	nop
 8018520:	370c      	adds	r7, #12
 8018522:	46bd      	mov	sp, r7
 8018524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018528:	4770      	bx	lr

0801852a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801852a:	b480      	push	{r7}
 801852c:	b083      	sub	sp, #12
 801852e:	af00      	add	r7, sp, #0
 8018530:	6078      	str	r0, [r7, #4]
 8018532:	460b      	mov	r3, r1
 8018534:	70fb      	strb	r3, [r7, #3]
    {
    }
 8018536:	bf00      	nop
 8018538:	370c      	adds	r7, #12
 801853a:	46bd      	mov	sp, r7
 801853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018540:	4770      	bx	lr

08018542 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8018542:	b480      	push	{r7}
 8018544:	b083      	sub	sp, #12
 8018546:	af00      	add	r7, sp, #0
 8018548:	6078      	str	r0, [r7, #4]
    {
    }
 801854a:	bf00      	nop
 801854c:	370c      	adds	r7, #12
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr

08018556 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8018556:	b480      	push	{r7}
 8018558:	b083      	sub	sp, #12
 801855a:	af00      	add	r7, sp, #0
 801855c:	6078      	str	r0, [r7, #4]
    {
    }
 801855e:	bf00      	nop
 8018560:	370c      	adds	r7, #12
 8018562:	46bd      	mov	sp, r7
 8018564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018568:	4770      	bx	lr
	...

0801856c <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 801856c:	b480      	push	{r7}
 801856e:	b083      	sub	sp, #12
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
    {
 8018574:	4a04      	ldr	r2, [pc, #16]	; (8018588 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	601a      	str	r2, [r3, #0]
    }
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	4618      	mov	r0, r3
 801857e:	370c      	adds	r7, #12
 8018580:	46bd      	mov	sp, r7
 8018582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018586:	4770      	bx	lr
 8018588:	08024eb8 	.word	0x08024eb8

0801858c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 801858c:	b580      	push	{r7, lr}
 801858e:	b082      	sub	sp, #8
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
    }
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f7ff ffe9 	bl	801856c <_ZN8touchgfx15UIEventListenerD1Ev>
 801859a:	2104      	movs	r1, #4
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f00a f9da 	bl	8022956 <_ZdlPvj>
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	4618      	mov	r0, r3
 80185a6:	3708      	adds	r7, #8
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 80185b4:	4a07      	ldr	r2, [pc, #28]	; (80185d4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	601a      	str	r2, [r3, #0]
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2200      	movs	r2, #0
 80185be:	605a      	str	r2, [r3, #4]
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	2200      	movs	r2, #0
 80185c4:	721a      	strb	r2, [r3, #8]
    {
    }
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	4618      	mov	r0, r3
 80185ca:	370c      	adds	r7, #12
 80185cc:	46bd      	mov	sp, r7
 80185ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d2:	4770      	bx	lr
 80185d4:	08024e98 	.word	0x08024e98

080185d8 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 80185d8:	b480      	push	{r7}
 80185da:	b083      	sub	sp, #12
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
    {
 80185e0:	4a04      	ldr	r2, [pc, #16]	; (80185f4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	601a      	str	r2, [r3, #0]
    }
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	4618      	mov	r0, r3
 80185ea:	370c      	adds	r7, #12
 80185ec:	46bd      	mov	sp, r7
 80185ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f2:	4770      	bx	lr
 80185f4:	08024e98 	.word	0x08024e98

080185f8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b082      	sub	sp, #8
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
    }
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f7ff ffe9 	bl	80185d8 <_ZN8touchgfx10TransitionD1Ev>
 8018606:	210c      	movs	r1, #12
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f00a f9a4 	bl	8022956 <_ZdlPvj>
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	4618      	mov	r0, r3
 8018612:	3708      	adds	r7, #8
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}

08018618 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8018618:	b480      	push	{r7}
 801861a:	b083      	sub	sp, #12
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	bf00      	nop
 8018622:	370c      	adds	r7, #12
 8018624:	46bd      	mov	sp, r7
 8018626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801862a:	4770      	bx	lr

0801862c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801862c:	b480      	push	{r7}
 801862e:	b083      	sub	sp, #12
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
 8018634:	bf00      	nop
 8018636:	370c      	adds	r7, #12
 8018638:	46bd      	mov	sp, r7
 801863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863e:	4770      	bx	lr

08018640 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	bf00      	nop
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
 801865c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	683a      	ldr	r2, [r7, #0]
 8018662:	605a      	str	r2, [r3, #4]
    }
 8018664:	bf00      	nop
 8018666:	370c      	adds	r7, #12
 8018668:	46bd      	mov	sp, r7
 801866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866e:	4770      	bx	lr

08018670 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8018670:	b480      	push	{r7}
 8018672:	b083      	sub	sp, #12
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	460b      	mov	r3, r1
 801867a:	70fb      	strb	r3, [r7, #3]
    {
    }
 801867c:	bf00      	nop
 801867e:	370c      	adds	r7, #12
 8018680:	46bd      	mov	sp, r7
 8018682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018686:	4770      	bx	lr

08018688 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8018688:	b480      	push	{r7}
 801868a:	b083      	sub	sp, #12
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
    {
 8018690:	4a04      	ldr	r2, [pc, #16]	; (80186a4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	601a      	str	r2, [r3, #0]
    }
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	4618      	mov	r0, r3
 801869a:	370c      	adds	r7, #12
 801869c:	46bd      	mov	sp, r7
 801869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a2:	4770      	bx	lr
 80186a4:	08024e80 	.word	0x08024e80

080186a8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b082      	sub	sp, #8
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
    }
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f7ff ffe9 	bl	8018688 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80186b6:	2104      	movs	r1, #4
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	f00a f94c 	bl	8022956 <_ZdlPvj>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	4618      	mov	r0, r3
 80186c2:	3708      	adds	r7, #8
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}

080186c8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b082      	sub	sp, #8
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	4a05      	ldr	r2, [pc, #20]	; (80186e8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	601a      	str	r2, [r3, #0]
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	4618      	mov	r0, r3
 80186da:	f7ff ff47 	bl	801856c <_ZN8touchgfx15UIEventListenerD1Ev>
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	4618      	mov	r0, r3
 80186e2:	3708      	adds	r7, #8
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bd80      	pop	{r7, pc}
 80186e8:	08025f94 	.word	0x08025f94

080186ec <_ZN8touchgfx11ApplicationD0Ev>:
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b082      	sub	sp, #8
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f7ff ffe7 	bl	80186c8 <_ZN8touchgfx11ApplicationD1Ev>
 80186fa:	f44f 7198 	mov.w	r1, #304	; 0x130
 80186fe:	6878      	ldr	r0, [r7, #4]
 8018700:	f00a f929 	bl	8022956 <_ZdlPvj>
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	4618      	mov	r0, r3
 8018708:	3708      	adds	r7, #8
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}
	...

08018710 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	4618      	mov	r0, r3
 801871c:	f006 fb5e 	bl	801eddc <_ZN8touchgfx11ApplicationC1Ev>
 8018720:	4a09      	ldr	r2, [pc, #36]	; (8018748 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	601a      	str	r2, [r3, #0]
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	2200      	movs	r2, #0
 801872a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	2200      	movs	r2, #0
 8018732:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	4a04      	ldr	r2, [pc, #16]	; (801874c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801873a:	6013      	str	r3, [r2, #0]
    }
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	4618      	mov	r0, r3
 8018740:	3708      	adds	r7, #8
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	08024e44 	.word	0x08024e44
 801874c:	2000a2ec 	.word	0x2000a2ec

08018750 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	4a05      	ldr	r2, [pc, #20]	; (8018770 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	601a      	str	r2, [r3, #0]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	4618      	mov	r0, r3
 8018762:	f7ff ffb1 	bl	80186c8 <_ZN8touchgfx11ApplicationD1Ev>
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	4618      	mov	r0, r3
 801876a:	3708      	adds	r7, #8
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}
 8018770:	08024e44 	.word	0x08024e44

08018774 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f7ff ffe7 	bl	8018750 <_ZN8touchgfx14MVPApplicationD1Ev>
 8018782:	f44f 719c 	mov.w	r1, #312	; 0x138
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f00a f8e5 	bl	8022956 <_ZdlPvj>
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	4618      	mov	r0, r3
 8018790:	3708      	adds	r7, #8
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}

08018796 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8018796:	b580      	push	{r7, lr}
 8018798:	b082      	sub	sp, #8
 801879a:	af00      	add	r7, sp, #0
 801879c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f000 f804 	bl	80187ac <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80187a4:	bf00      	nop
 80187a6:	3708      	adds	r7, #8
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}

080187ac <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b082      	sub	sp, #8
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d00f      	beq.n	80187de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	330c      	adds	r3, #12
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	4610      	mov	r0, r2
 80187d2:	4798      	blx	r3
 80187d4:	4603      	mov	r3, r0
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d001      	beq.n	80187de <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80187da:	2301      	movs	r3, #1
 80187dc:	e000      	b.n	80187e0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80187de:	2300      	movs	r3, #0
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d00e      	beq.n	8018802 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	3308      	adds	r3, #8
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	4610      	mov	r0, r2
 80187f8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	2200      	movs	r2, #0
 80187fe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8018802:	bf00      	nop
 8018804:	3708      	adds	r7, #8
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}

0801880a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801880a:	b580      	push	{r7, lr}
 801880c:	b084      	sub	sp, #16
 801880e:	af00      	add	r7, sp, #0
 8018810:	60f8      	str	r0, [r7, #12]
 8018812:	60b9      	str	r1, [r7, #8]
 8018814:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8018816:	f006 fabf 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801881a:	4603      	mov	r3, r0
 801881c:	4618      	mov	r0, r3
 801881e:	f006 fac1 	bl	801eda4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d008      	beq.n	801883c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681a      	ldr	r2, [r3, #0]
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	330c      	adds	r3, #12
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	4610      	mov	r0, r2
 801883a:	4798      	blx	r3
    }
    if (*currentTrans)
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d007      	beq.n	8018854 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681a      	ldr	r2, [r3, #0]
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	4610      	mov	r0, r2
 8018852:	4798      	blx	r3
    }
    if (*currentScreen)
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d008      	beq.n	801886e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	3314      	adds	r3, #20
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	4610      	mov	r0, r2
 801886c:	4798      	blx	r3
    }
    if (*currentPresenter)
 801886e:	68bb      	ldr	r3, [r7, #8]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d008      	beq.n	8018888 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8018876:	68bb      	ldr	r3, [r7, #8]
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	68bb      	ldr	r3, [r7, #8]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	3304      	adds	r3, #4
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	4610      	mov	r0, r2
 8018886:	4798      	blx	r3
    }
    if (*currentScreen)
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d007      	beq.n	80188a0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	681a      	ldr	r2, [r3, #0]
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	4610      	mov	r0, r2
 801889e:	4798      	blx	r3
    }
    if (*currentPresenter)
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d008      	beq.n	80188ba <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	68bb      	ldr	r3, [r7, #8]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	3308      	adds	r3, #8
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	4610      	mov	r0, r2
 80188b8:	4798      	blx	r3
    }
}
 80188ba:	bf00      	nop
 80188bc:	3710      	adds	r7, #16
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}

080188c2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 80188c2:	b580      	push	{r7, lr}
 80188c4:	b084      	sub	sp, #16
 80188c6:	af00      	add	r7, sp, #0
 80188c8:	60f8      	str	r0, [r7, #12]
 80188ca:	60b9      	str	r1, [r7, #8]
 80188cc:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	330c      	adds	r3, #12
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	68f8      	ldr	r0, [r7, #12]
 80188d8:	4798      	blx	r3
    newPresenter->activate();
 80188da:	68bb      	ldr	r3, [r7, #8]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	68b8      	ldr	r0, [r7, #8]
 80188e2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80188e4:	6879      	ldr	r1, [r7, #4]
 80188e6:	68f8      	ldr	r0, [r7, #12]
 80188e8:	f007 fa64 	bl	801fdb4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	3310      	adds	r3, #16
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	4798      	blx	r3

    Application::getInstance()->draw();
 80188f8:	f006 fa4e 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 80188fc:	4602      	mov	r2, r0
 80188fe:	6813      	ldr	r3, [r2, #0]
 8018900:	3328      	adds	r3, #40	; 0x28
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	4610      	mov	r0, r2
 8018906:	4798      	blx	r3
}
 8018908:	bf00      	nop
 801890a:	3710      	adds	r7, #16
 801890c:	46bd      	mov	sp, r7
 801890e:	bd80      	pop	{r7, pc}

08018910 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8018910:	b480      	push	{r7}
 8018912:	b083      	sub	sp, #12
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	683a      	ldr	r2, [r7, #0]
 801891e:	605a      	str	r2, [r3, #4]
    }
 8018920:	bf00      	nop
 8018922:	370c      	adds	r7, #12
 8018924:	46bd      	mov	sp, r7
 8018926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892a:	4770      	bx	lr

0801892c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801892c:	b580      	push	{r7, lr}
 801892e:	b082      	sub	sp, #8
 8018930:	af00      	add	r7, sp, #0
 8018932:	6078      	str	r0, [r7, #4]
 8018934:	4a08      	ldr	r2, [pc, #32]	; (8018958 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	601a      	str	r2, [r3, #0]
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018940:	4618      	mov	r0, r3
 8018942:	f000 fa4f 	bl	8018de4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	4618      	mov	r0, r3
 801894a:	f7ff ff01 	bl	8018750 <_ZN8touchgfx14MVPApplicationD1Ev>
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	4618      	mov	r0, r3
 8018952:	3708      	adds	r7, #8
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}
 8018958:	08024df0 	.word	0x08024df0

0801895c <_ZN23FrontendApplicationBaseD0Ev>:
 801895c:	b580      	push	{r7, lr}
 801895e:	b082      	sub	sp, #8
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
 8018964:	6878      	ldr	r0, [r7, #4]
 8018966:	f7ff ffe1 	bl	801892c <_ZN23FrontendApplicationBaseD1Ev>
 801896a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	f009 fff1 	bl	8022956 <_ZdlPvj>
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	4618      	mov	r0, r3
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
	...

08018980 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8018980:	b580      	push	{r7, lr}
 8018982:	b082      	sub	sp, #8
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f7ff fe0e 	bl	80185ac <_ZN8touchgfx10TransitionC1Ev>
 8018990:	4a03      	ldr	r2, [pc, #12]	; (80189a0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	601a      	str	r2, [r3, #0]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	4618      	mov	r0, r3
 801899a:	3708      	adds	r7, #8
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}
 80189a0:	08024dd0 	.word	0x08024dd0

080189a4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	4a05      	ldr	r2, [pc, #20]	; (80189c4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	601a      	str	r2, [r3, #0]
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7ff fe0f 	bl	80185d8 <_ZN8touchgfx10TransitionD1Ev>
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	4618      	mov	r0, r3
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	08024dd0 	.word	0x08024dd0

080189c8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b082      	sub	sp, #8
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f7ff ffe7 	bl	80189a4 <_ZN8touchgfx12NoTransitionD1Ev>
 80189d6:	210c      	movs	r1, #12
 80189d8:	6878      	ldr	r0, [r7, #4]
 80189da:	f009 ffbc 	bl	8022956 <_ZdlPvj>
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	4618      	mov	r0, r3
 80189e2:	3708      	adds	r7, #8
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}

080189e8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 80189e8:	b480      	push	{r7}
 80189ea:	b083      	sub	sp, #12
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	2201      	movs	r2, #1
 80189f4:	721a      	strb	r2, [r3, #8]
    }
 80189f6:	bf00      	nop
 80189f8:	370c      	adds	r7, #12
 80189fa:	46bd      	mov	sp, r7
 80189fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a00:	4770      	bx	lr

08018a02 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8018a02:	b480      	push	{r7}
 8018a04:	b083      	sub	sp, #12
 8018a06:	af00      	add	r7, sp, #0
 8018a08:	6078      	str	r0, [r7, #4]
 8018a0a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	683a      	ldr	r2, [r7, #0]
 8018a10:	605a      	str	r2, [r3, #4]
    }
 8018a12:	bf00      	nop
 8018a14:	370c      	adds	r7, #12
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr
	...

08018a20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	60b9      	str	r1, [r7, #8]
 8018a2a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7ff fe6e 	bl	8018710 <_ZN8touchgfx14MVPApplicationC1Ev>
 8018a34:	4a0c      	ldr	r2, [pc, #48]	; (8018a68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	601a      	str	r2, [r3, #0]
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018a40:	4618      	mov	r0, r3
 8018a42:	f000 f891 	bl	8018b68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	687a      	ldr	r2, [r7, #4]
 8018a4a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	68ba      	ldr	r2, [r7, #8]
 8018a52:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 8018a56:	2000      	movs	r0, #0
 8018a58:	f001 fa48 	bl	8019eec <_ZN8touchgfx5Texts11setLanguageEt>
}
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3710      	adds	r7, #16
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	08024df0 	.word	0x08024df0

08018a6c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8018a6c:	b480      	push	{r7}
 8018a6e:	b083      	sub	sp, #12
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
 8018a74:	6039      	str	r1, [r7, #0]
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	4618      	mov	r0, r3
 8018a7a:	370c      	adds	r7, #12
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a82:	4770      	bx	lr

08018a84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b082      	sub	sp, #8
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
 8018a8c:	6039      	str	r1, [r7, #0]
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	683a      	ldr	r2, [r7, #0]
 8018a92:	4611      	mov	r1, r2
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7ff ffe9 	bl	8018a6c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	685a      	ldr	r2, [r3, #4]
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	605a      	str	r2, [r3, #4]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	683a      	ldr	r2, [r7, #0]
 8018aa6:	3308      	adds	r3, #8
 8018aa8:	3208      	adds	r2, #8
 8018aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018aae:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	3708      	adds	r7, #8
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	bd80      	pop	{r7, pc}

08018abc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8018abc:	b590      	push	{r4, r7, lr}
 8018abe:	b089      	sub	sp, #36	; 0x24
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8018aca:	4b10      	ldr	r3, [pc, #64]	; (8018b0c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8018acc:	61bb      	str	r3, [r7, #24]
 8018ace:	2300      	movs	r3, #0
 8018ad0:	61fb      	str	r3, [r7, #28]
 8018ad2:	f107 0008 	add.w	r0, r7, #8
 8018ad6:	f107 0318 	add.w	r3, r7, #24
 8018ada:	cb0c      	ldmia	r3, {r2, r3}
 8018adc:	6879      	ldr	r1, [r7, #4]
 8018ade:	f000 f85f 	bl	8018ba0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8018ae2:	f107 0308 	add.w	r3, r7, #8
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	4620      	mov	r0, r4
 8018aea:	f7ff ffcb 	bl	8018a84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8018aee:	f107 0308 	add.w	r3, r7, #8
 8018af2:	4618      	mov	r0, r3
 8018af4:	f000 f976 	bl	8018de4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8018b04:	bf00      	nop
 8018b06:	3724      	adds	r7, #36	; 0x24
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd90      	pop	{r4, r7, pc}
 8018b0c:	08018b11 	.word	0x08018b11

08018b10 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b084      	sub	sp, #16
 8018b14:	af02      	add	r7, sp, #8
 8018b16:	6078      	str	r0, [r7, #4]
    makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8018b24:	461a      	mov	r2, r3
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018b2c:	9300      	str	r3, [sp, #0]
 8018b2e:	4b04      	ldr	r3, [pc, #16]	; (8018b40 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8018b30:	4804      	ldr	r0, [pc, #16]	; (8018b44 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8018b32:	f000 f855 	bl	8018be0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8018b36:	bf00      	nop
 8018b38:	3708      	adds	r7, #8
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	2000a2e8 	.word	0x2000a2e8
 8018b44:	2000a2e4 	.word	0x2000a2e4

08018b48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8018b48:	b480      	push	{r7}
 8018b4a:	b083      	sub	sp, #12
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	4a04      	ldr	r2, [pc, #16]	; (8018b64 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	601a      	str	r2, [r3, #0]
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	370c      	adds	r7, #12
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b62:	4770      	bx	lr
 8018b64:	08024e80 	.word	0x08024e80

08018b68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7ff ffe8 	bl	8018b48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8018b78:	4a08      	ldr	r2, [pc, #32]	; (8018b9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	601a      	str	r2, [r3, #0]
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	2200      	movs	r2, #0
 8018b82:	605a      	str	r2, [r3, #4]
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	2200      	movs	r2, #0
 8018b88:	609a      	str	r2, [r3, #8]
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	60da      	str	r2, [r3, #12]
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	4618      	mov	r0, r3
 8018b94:	3708      	adds	r7, #8
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}
 8018b9a:	bf00      	nop
 8018b9c:	08024e2c 	.word	0x08024e2c

08018ba0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b084      	sub	sp, #16
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	60f8      	str	r0, [r7, #12]
 8018ba8:	60b9      	str	r1, [r7, #8]
 8018baa:	4639      	mov	r1, r7
 8018bac:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7ff ffc8 	bl	8018b48 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8018bb8:	4a08      	ldr	r2, [pc, #32]	; (8018bdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	68ba      	ldr	r2, [r7, #8]
 8018bc2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	3308      	adds	r3, #8
 8018bc8:	463a      	mov	r2, r7
 8018bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	3710      	adds	r7, #16
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}
 8018bdc:	08024e2c 	.word	0x08024e2c

08018be0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8018be0:	b590      	push	{r4, r7, lr}
 8018be2:	b089      	sub	sp, #36	; 0x24
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60f8      	str	r0, [r7, #12]
 8018be8:	60b9      	str	r1, [r7, #8]
 8018bea:	607a      	str	r2, [r7, #4]
 8018bec:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	689a      	ldr	r2, [r3, #8]
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	689b      	ldr	r3, [r3, #8]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	3320      	adds	r3, #32
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	4610      	mov	r0, r2
 8018bfe:	4798      	blx	r3
 8018c00:	4603      	mov	r3, r0
 8018c02:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8018c06:	d205      	bcs.n	8018c14 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8018c08:	4b4d      	ldr	r3, [pc, #308]	; (8018d40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018c0a:	4a4e      	ldr	r2, [pc, #312]	; (8018d44 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018c0c:	21c2      	movs	r1, #194	; 0xc2
 8018c0e:	484e      	ldr	r0, [pc, #312]	; (8018d48 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018c10:	f009 febe 	bl	8022990 <__assert_func>
 8018c14:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	685a      	ldr	r2, [r3, #4]
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	3320      	adds	r3, #32
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	4610      	mov	r0, r2
 8018c26:	4798      	blx	r3
 8018c28:	4603      	mov	r3, r0
 8018c2a:	2b0f      	cmp	r3, #15
 8018c2c:	d805      	bhi.n	8018c3a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8018c2e:	4b47      	ldr	r3, [pc, #284]	; (8018d4c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8018c30:	4a44      	ldr	r2, [pc, #272]	; (8018d44 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018c32:	21c3      	movs	r1, #195	; 0xc3
 8018c34:	4844      	ldr	r0, [pc, #272]	; (8018d48 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018c36:	f009 feab 	bl	8022990 <__assert_func>
 8018c3a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	68da      	ldr	r2, [r3, #12]
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	3320      	adds	r3, #32
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	4610      	mov	r0, r2
 8018c4c:	4798      	blx	r3
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b0b      	cmp	r3, #11
 8018c52:	d805      	bhi.n	8018c60 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8018c54:	4b3e      	ldr	r3, [pc, #248]	; (8018d50 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8018c56:	4a3b      	ldr	r2, [pc, #236]	; (8018d44 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018c58:	21c4      	movs	r1, #196	; 0xc4
 8018c5a:	483b      	ldr	r0, [pc, #236]	; (8018d48 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018c5c:	f009 fe98 	bl	8022990 <__assert_func>
 8018c60:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8018c62:	683a      	ldr	r2, [r7, #0]
 8018c64:	68b9      	ldr	r1, [r7, #8]
 8018c66:	68f8      	ldr	r0, [r7, #12]
 8018c68:	f7ff fdcf 	bl	801880a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	68db      	ldr	r3, [r3, #12]
 8018c70:	2100      	movs	r1, #0
 8018c72:	4618      	mov	r0, r3
 8018c74:	f000 f86e 	bl	8018d54 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	4619      	mov	r1, r3
 8018c7c:	200c      	movs	r0, #12
 8018c7e:	f7ff fc27 	bl	80184d0 <_ZnwjPv>
 8018c82:	4604      	mov	r4, r0
 8018c84:	2c00      	cmp	r4, #0
 8018c86:	d004      	beq.n	8018c92 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8018c88:	4620      	mov	r0, r4
 8018c8a:	f7ff fe79 	bl	8018980 <_ZN8touchgfx12NoTransitionC1Ev>
 8018c8e:	4623      	mov	r3, r4
 8018c90:	e000      	b.n	8018c94 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8018c92:	4623      	mov	r3, r4
 8018c94:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	689b      	ldr	r3, [r3, #8]
 8018c9a:	2100      	movs	r1, #0
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f000 f86c 	bl	8018d7a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	f44f 6098 	mov.w	r0, #1216	; 0x4c0
 8018caa:	f7ff fc11 	bl	80184d0 <_ZnwjPv>
 8018cae:	4604      	mov	r4, r0
 8018cb0:	2c00      	cmp	r4, #0
 8018cb2:	d004      	beq.n	8018cbe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f001 fbcb 	bl	801a450 <_ZN8MainViewC1Ev>
 8018cba:	4623      	mov	r3, r4
 8018cbc:	e000      	b.n	8018cc0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8018cbe:	4623      	mov	r3, r4
 8018cc0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	685b      	ldr	r3, [r3, #4]
 8018cc6:	2100      	movs	r1, #0
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f000 f869 	bl	8018da0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8018cce:	4603      	mov	r3, r0
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	2010      	movs	r0, #16
 8018cd4:	f7ff fbfc 	bl	80184d0 <_ZnwjPv>
 8018cd8:	4604      	mov	r4, r0
 8018cda:	2c00      	cmp	r4, #0
 8018cdc:	d005      	beq.n	8018cea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8018cde:	69b9      	ldr	r1, [r7, #24]
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f001 faa7 	bl	801a234 <_ZN13MainPresenterC1ER8MainView>
 8018ce6:	4623      	mov	r3, r4
 8018ce8:	e000      	b.n	8018cec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8018cea:	4623      	mov	r3, r4
 8018cec:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	69fa      	ldr	r2, [r7, #28]
 8018cf2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	697a      	ldr	r2, [r7, #20]
 8018cf8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	69ba      	ldr	r2, [r7, #24]
 8018cfe:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8018d00:	697b      	ldr	r3, [r7, #20]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d002      	beq.n	8018d0c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	3304      	adds	r3, #4
 8018d0a:	e000      	b.n	8018d0e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	4619      	mov	r1, r3
 8018d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d12:	f7ff fdfd 	bl	8018910 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8018d16:	697b      	ldr	r3, [r7, #20]
 8018d18:	3304      	adds	r3, #4
 8018d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f7ff fe70 	bl	8018a02 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8018d22:	69bb      	ldr	r3, [r7, #24]
 8018d24:	6979      	ldr	r1, [r7, #20]
 8018d26:	4618      	mov	r0, r3
 8018d28:	f000 f84d 	bl	8018dc6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8018d2c:	69fa      	ldr	r2, [r7, #28]
 8018d2e:	6979      	ldr	r1, [r7, #20]
 8018d30:	69b8      	ldr	r0, [r7, #24]
 8018d32:	f7ff fdc6 	bl	80188c2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8018d36:	697b      	ldr	r3, [r7, #20]
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	3724      	adds	r7, #36	; 0x24
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd90      	pop	{r4, r7, pc}
 8018d40:	0802416c 	.word	0x0802416c
 8018d44:	08024ed8 	.word	0x08024ed8
 8018d48:	080241fc 	.word	0x080241fc
 8018d4c:	0802424c 	.word	0x0802424c
 8018d50:	080242f0 	.word	0x080242f0

08018d54 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
 8018d5c:	460b      	mov	r3, r1
 8018d5e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	3324      	adds	r3, #36	; 0x24
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	887a      	ldrh	r2, [r7, #2]
 8018d6a:	4611      	mov	r1, r2
 8018d6c:	6878      	ldr	r0, [r7, #4]
 8018d6e:	4798      	blx	r3
 8018d70:	4603      	mov	r3, r0
    }
 8018d72:	4618      	mov	r0, r3
 8018d74:	3708      	adds	r7, #8
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}

08018d7a <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b082      	sub	sp, #8
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	6078      	str	r0, [r7, #4]
 8018d82:	460b      	mov	r3, r1
 8018d84:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	3324      	adds	r3, #36	; 0x24
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	887a      	ldrh	r2, [r7, #2]
 8018d90:	4611      	mov	r1, r2
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	4798      	blx	r3
 8018d96:	4603      	mov	r3, r0
    }
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}

08018da0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b082      	sub	sp, #8
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
 8018da8:	460b      	mov	r3, r1
 8018daa:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	3324      	adds	r3, #36	; 0x24
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	887a      	ldrh	r2, [r7, #2]
 8018db6:	4611      	mov	r1, r2
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	4798      	blx	r3
 8018dbc:	4603      	mov	r3, r0
    }
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	3708      	adds	r7, #8
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}

08018dc6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8018dc6:	b480      	push	{r7}
 8018dc8:	b083      	sub	sp, #12
 8018dca:	af00      	add	r7, sp, #0
 8018dcc:	6078      	str	r0, [r7, #4]
 8018dce:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	683a      	ldr	r2, [r7, #0]
 8018dd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8018dd6:	bf00      	nop
 8018dd8:	370c      	adds	r7, #12
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de0:	4770      	bx	lr
	...

08018de4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b082      	sub	sp, #8
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	4a05      	ldr	r2, [pc, #20]	; (8018e04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	601a      	str	r2, [r3, #0]
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7ff fc47 	bl	8018688 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	3708      	adds	r7, #8
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}
 8018e04:	08024e2c 	.word	0x08024e2c

08018e08 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f7ff ffe7 	bl	8018de4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8018e16:	2110      	movs	r1, #16
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	f009 fd9c 	bl	8022956 <_ZdlPvj>
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	4618      	mov	r0, r3
 8018e22:	3708      	adds	r7, #8
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b082      	sub	sp, #8
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	68d2      	ldr	r2, [r2, #12]
 8018e38:	1052      	asrs	r2, r2, #1
 8018e3a:	1899      	adds	r1, r3, r2
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	68db      	ldr	r3, [r3, #12]
 8018e40:	f003 0301 	and.w	r3, r3, #1
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d102      	bne.n	8018e4e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	689b      	ldr	r3, [r3, #8]
 8018e4c:	e00a      	b.n	8018e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	685b      	ldr	r3, [r3, #4]
 8018e52:	687a      	ldr	r2, [r7, #4]
 8018e54:	68d2      	ldr	r2, [r2, #12]
 8018e56:	1052      	asrs	r2, r2, #1
 8018e58:	4413      	add	r3, r2
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	687a      	ldr	r2, [r7, #4]
 8018e5e:	6892      	ldr	r2, [r2, #8]
 8018e60:	4413      	add	r3, r2
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	4608      	mov	r0, r1
 8018e66:	4798      	blx	r3
    }
 8018e68:	bf00      	nop
 8018e6a:	3708      	adds	r7, #8
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}

08018e70 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8018e70:	b480      	push	{r7}
 8018e72:	b083      	sub	sp, #12
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d010      	beq.n	8018ea2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	689b      	ldr	r3, [r3, #8]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d107      	bne.n	8018e98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	68db      	ldr	r3, [r3, #12]
 8018e8c:	f003 0301 	and.w	r3, r3, #1
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d101      	bne.n	8018e98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8018e94:	2301      	movs	r3, #1
 8018e96:	e000      	b.n	8018e9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8018e98:	2300      	movs	r3, #0
 8018e9a:	2b01      	cmp	r3, #1
 8018e9c:	d001      	beq.n	8018ea2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	e000      	b.n	8018ea4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8018ea2:	2300      	movs	r3, #0
    }
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	370c      	adds	r7, #12
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eae:	4770      	bx	lr

08018eb0 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b082      	sub	sp, #8
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
 8018eb8:	4a06      	ldr	r2, [pc, #24]	; (8018ed4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	601a      	str	r2, [r3, #0]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	3304      	adds	r3, #4
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7f9 f850 	bl	8011f68 <_ZN8touchgfx9ContainerD1Ev>
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3708      	adds	r7, #8
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	bf00      	nop
 8018ed4:	08026190 	.word	0x08026190

08018ed8 <_ZN8touchgfx6ScreenD0Ev>:
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b082      	sub	sp, #8
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	f7ff ffe5 	bl	8018eb0 <_ZN8touchgfx6ScreenD1Ev>
 8018ee6:	213c      	movs	r1, #60	; 0x3c
 8018ee8:	6878      	ldr	r0, [r7, #4]
 8018eea:	f009 fd34 	bl	8022956 <_ZdlPvj>
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	3708      	adds	r7, #8
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}

08018ef8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8018ef8:	b480      	push	{r7}
 8018efa:	b083      	sub	sp, #12
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
 8018f00:	bf00      	nop
 8018f02:	370c      	adds	r7, #12
 8018f04:	46bd      	mov	sp, r7
 8018f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0a:	4770      	bx	lr

08018f0c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8018f0c:	b480      	push	{r7}
 8018f0e:	b083      	sub	sp, #12
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
 8018f14:	bf00      	nop
 8018f16:	370c      	adds	r7, #12
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1e:	4770      	bx	lr

08018f20 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8018f20:	b480      	push	{r7}
 8018f22:	b083      	sub	sp, #12
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	bf00      	nop
 8018f2a:	370c      	adds	r7, #12
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f32:	4770      	bx	lr

08018f34 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8018f34:	b480      	push	{r7}
 8018f36:	b083      	sub	sp, #12
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
    {
    }
 8018f3c:	bf00      	nop
 8018f3e:	370c      	adds	r7, #12
 8018f40:	46bd      	mov	sp, r7
 8018f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f46:	4770      	bx	lr

08018f48 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8018f48:	b480      	push	{r7}
 8018f4a:	b083      	sub	sp, #12
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
 8018f50:	460b      	mov	r3, r1
 8018f52:	70fb      	strb	r3, [r7, #3]
    {
    }
 8018f54:	bf00      	nop
 8018f56:	370c      	adds	r7, #12
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5e:	4770      	bx	lr

08018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b082      	sub	sp, #8
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	3304      	adds	r3, #4
 8018f6e:	6839      	ldr	r1, [r7, #0]
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7f9 f849 	bl	8012008 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8018f76:	bf00      	nop
 8018f78:	3708      	adds	r7, #8
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}

08018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>:
    inline void setLinespacing(uint16_t space)
 8018f7e:	b480      	push	{r7}
 8018f80:	b083      	sub	sp, #12
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	6078      	str	r0, [r7, #4]
 8018f86:	460b      	mov	r3, r1
 8018f88:	807b      	strh	r3, [r7, #2]
        linespace = space;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	887a      	ldrh	r2, [r7, #2]
 8018f8e:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8018f90:	bf00      	nop
 8018f92:	370c      	adds	r7, #12
 8018f94:	46bd      	mov	sp, r7
 8018f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9a:	4770      	bx	lr

08018f9c <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
    void setStopValueCallback(GenericCallback< const Slider&, int >& callback)
 8018f9c:	b480      	push	{r7}
 8018f9e:	b083      	sub	sp, #12
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
 8018fa4:	6039      	str	r1, [r7, #0]
        stopValueCallback = &callback;
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	683a      	ldr	r2, [r7, #0]
 8018faa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }
 8018fae:	bf00      	nop
 8018fb0:	370c      	adds	r7, #12
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb8:	4770      	bx	lr
	...

08018fbc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b082      	sub	sp, #8
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	4a05      	ldr	r2, [pc, #20]	; (8018fdc <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	601a      	str	r2, [r3, #0]
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7ff ff6f 	bl	8018eb0 <_ZN8touchgfx6ScreenD1Ev>
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	3708      	adds	r7, #8
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}
 8018fdc:	08025064 	.word	0x08025064

08018fe0 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f7ff ffe7 	bl	8018fbc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8018fee:	2140      	movs	r1, #64	; 0x40
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f009 fcb0 	bl	8022956 <_ZdlPvj>
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3708      	adds	r7, #8
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}

08019000 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8019000:	b580      	push	{r7, lr}
 8019002:	b082      	sub	sp, #8
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	4a39      	ldr	r2, [pc, #228]	; (80190f0 <_ZN12MainViewBaseD1Ev+0xf0>)
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	601a      	str	r2, [r3, #0]
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8019014:	4618      	mov	r0, r3
 8019016:	f000 fe6b 	bl	8019cf0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8019020:	4618      	mov	r0, r3
 8019022:	f000 fe87 	bl	8019d34 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	f203 4324 	addw	r3, r3, #1060	; 0x424
 801902c:	4618      	mov	r0, r3
 801902e:	f7f9 fbcf 	bl	80127d0 <_ZN8touchgfx5ImageD1Ev>
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8019038:	4618      	mov	r0, r3
 801903a:	f7fa fe7f 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8019044:	4618      	mov	r0, r3
 8019046:	f7fa fe79 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8019050:	4618      	mov	r0, r3
 8019052:	f7fa fe73 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	f503 7351 	add.w	r3, r3, #836	; 0x344
 801905c:	4618      	mov	r0, r3
 801905e:	f7fa fe6d 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8019068:	4618      	mov	r0, r3
 801906a:	f7fa fe67 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019074:	4618      	mov	r0, r3
 8019076:	f7f9 fe2b 	bl	8012cd0 <_ZN8touchgfx6SliderD1Ev>
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8019080:	4618      	mov	r0, r3
 8019082:	f7f9 fd01 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801908c:	4618      	mov	r0, r3
 801908e:	f7f9 fcfb 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8019098:	4618      	mov	r0, r3
 801909a:	f7f9 fcf5 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80190a4:	4618      	mov	r0, r3
 80190a6:	f7fa fe49 	bl	8013d3c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80190b0:	4618      	mov	r0, r3
 80190b2:	f7f9 fce9 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	33d4      	adds	r3, #212	; 0xd4
 80190ba:	4618      	mov	r0, r3
 80190bc:	f7f9 fce4 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	33a0      	adds	r3, #160	; 0xa0
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7f9 fcdf 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	336c      	adds	r3, #108	; 0x6c
 80190ce:	4618      	mov	r0, r3
 80190d0:	f7f9 fcda 	bl	8012a88 <_ZN8touchgfx6ButtonD1Ev>
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	3340      	adds	r3, #64	; 0x40
 80190d8:	4618      	mov	r0, r3
 80190da:	f7f9 fb79 	bl	80127d0 <_ZN8touchgfx5ImageD1Ev>
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7ff ff6b 	bl	8018fbc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	4618      	mov	r0, r3
 80190ea:	3708      	adds	r7, #8
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	08024fe0 	.word	0x08024fe0

080190f4 <_ZN12MainViewBaseD0Ev>:
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f7ff ff7f 	bl	8019000 <_ZN12MainViewBaseD1Ev>
 8019102:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f009 fc25 	bl	8022956 <_ZdlPvj>
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	4618      	mov	r0, r3
 8019110:	3708      	adds	r7, #8
 8019112:	46bd      	mov	sp, r7
 8019114:	bd80      	pop	{r7, pc}

08019116 <_ZN12MainViewBase23buttonUpVirtualFunctionEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void buttonUpVirtualFunction()
 8019116:	b480      	push	{r7}
 8019118:	b083      	sub	sp, #12
 801911a:	af00      	add	r7, sp, #0
 801911c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 801911e:	bf00      	nop
 8019120:	370c      	adds	r7, #12
 8019122:	46bd      	mov	sp, r7
 8019124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019128:	4770      	bx	lr

0801912a <_ZN12MainViewBase25buttonDownVirtualFunctionEv>:

    virtual void buttonDownVirtualFunction()
 801912a:	b480      	push	{r7}
 801912c:	b083      	sub	sp, #12
 801912e:	af00      	add	r7, sp, #0
 8019130:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8019132:	bf00      	nop
 8019134:	370c      	adds	r7, #12
 8019136:	46bd      	mov	sp, r7
 8019138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913c:	4770      	bx	lr

0801913e <_ZN12MainViewBase25buttonLeftVirtualFunctionEv>:

    virtual void buttonLeftVirtualFunction()
 801913e:	b480      	push	{r7}
 8019140:	b083      	sub	sp, #12
 8019142:	af00      	add	r7, sp, #0
 8019144:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8019146:	bf00      	nop
 8019148:	370c      	adds	r7, #12
 801914a:	46bd      	mov	sp, r7
 801914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019150:	4770      	bx	lr

08019152 <_ZN12MainViewBase26buttonRightVirtualFunctionEv>:

    virtual void buttonRightVirtualFunction()
 8019152:	b480      	push	{r7}
 8019154:	b083      	sub	sp, #12
 8019156:	af00      	add	r7, sp, #0
 8019158:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 801915a:	bf00      	nop
 801915c:	370c      	adds	r7, #12
 801915e:	46bd      	mov	sp, r7
 8019160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019164:	4770      	bx	lr

08019166 <_ZN12MainViewBase25buttonStopVirtualFunctionEv>:

    virtual void buttonStopVirtualFunction()
 8019166:	b480      	push	{r7}
 8019168:	b083      	sub	sp, #12
 801916a:	af00      	add	r7, sp, #0
 801916c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 801916e:	bf00      	nop
 8019170:	370c      	adds	r7, #12
 8019172:	46bd      	mov	sp, r7
 8019174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019178:	4770      	bx	lr

0801917a <_ZN12MainViewBase34buttonRightRotationVirtualFunctionEv>:

    virtual void buttonRightRotationVirtualFunction()
 801917a:	b480      	push	{r7}
 801917c:	b083      	sub	sp, #12
 801917e:	af00      	add	r7, sp, #0
 8019180:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8019182:	bf00      	nop
 8019184:	370c      	adds	r7, #12
 8019186:	46bd      	mov	sp, r7
 8019188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801918c:	4770      	bx	lr

0801918e <_ZN12MainViewBase33buttonLeftRotationVirtualFunctionEv>:

    virtual void buttonLeftRotationVirtualFunction()
 801918e:	b480      	push	{r7}
 8019190:	b083      	sub	sp, #12
 8019192:	af00      	add	r7, sp, #0
 8019194:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in MainView
    }
 8019196:	bf00      	nop
 8019198:	370c      	adds	r7, #12
 801919a:	46bd      	mov	sp, r7
 801919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a0:	4770      	bx	lr

080191a2 <_ZN12MainViewBase21sliderVirtualFunctionEi>:

    virtual void sliderVirtualFunction(int value)
 80191a2:	b480      	push	{r7}
 80191a4:	b083      	sub	sp, #12
 80191a6:	af00      	add	r7, sp, #0
 80191a8:	6078      	str	r0, [r7, #4]
 80191aa:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in MainView
    }
 80191ac:	bf00      	nop
 80191ae:	370c      	adds	r7, #12
 80191b0:	46bd      	mov	sp, r7
 80191b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b6:	4770      	bx	lr

080191b8 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MainViewBase::MainViewBase() :
 80191b8:	b590      	push	{r4, r7, lr}
 80191ba:	b0ab      	sub	sp, #172	; 0xac
 80191bc:	af02      	add	r7, sp, #8
 80191be:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueConfirmedCallback(this, &MainViewBase::sliderValueConfirmedCallbackHandler)
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	4618      	mov	r0, r3
 80191c4:	f000 fd0e 	bl	8019be4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 80191c8:	4adf      	ldr	r2, [pc, #892]	; (8019548 <_ZN12MainViewBaseC1Ev+0x390>)
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	601a      	str	r2, [r3, #0]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80191d4:	f107 030c 	add.w	r3, r7, #12
 80191d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191dc:	4618      	mov	r0, r3
 80191de:	f7f9 f9e4 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80191e2:	f107 030c 	add.w	r3, r7, #12
 80191e6:	4619      	mov	r1, r3
 80191e8:	4620      	mov	r0, r4
 80191ea:	f7f9 facf 	bl	801278c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	336c      	adds	r3, #108	; 0x6c
 80191f2:	4618      	mov	r0, r3
 80191f4:	f7f9 fc24 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	33a0      	adds	r3, #160	; 0xa0
 80191fc:	4618      	mov	r0, r3
 80191fe:	f7f9 fc1f 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	33d4      	adds	r3, #212	; 0xd4
 8019206:	4618      	mov	r0, r3
 8019208:	f7f9 fc1a 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019212:	4618      	mov	r0, r3
 8019214:	f7f9 fc14 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801921e:	4618      	mov	r0, r3
 8019220:	f7fa fcaa 	bl	8013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801922a:	4618      	mov	r0, r3
 801922c:	f7f9 fc08 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019236:	4618      	mov	r0, r3
 8019238:	f7f9 fc02 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8019242:	4618      	mov	r0, r3
 8019244:	f7f9 fbfc 	bl	8012a40 <_ZN8touchgfx6ButtonC1Ev>
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801924e:	4618      	mov	r0, r3
 8019250:	f7f9 fcae 	bl	8012bb0 <_ZN8touchgfx6SliderC1Ev>
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 801925a:	4618      	mov	r0, r3
 801925c:	f7fa fc8c 	bl	8013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8019266:	4618      	mov	r0, r3
 8019268:	f7fa fc86 	bl	8013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8019272:	4618      	mov	r0, r3
 8019274:	f7fa fc80 	bl	8013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 801927e:	4618      	mov	r0, r3
 8019280:	f7fa fc7a 	bl	8013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 801928a:	4618      	mov	r0, r3
 801928c:	f7fa fc74 	bl	8013b78 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	f203 4424 	addw	r4, r3, #1060	; 0x424
 8019296:	f107 0310 	add.w	r3, r7, #16
 801929a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801929e:	4618      	mov	r0, r3
 80192a0:	f7f9 f983 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80192a4:	f107 0310 	add.w	r3, r7, #16
 80192a8:	4619      	mov	r1, r3
 80192aa:	4620      	mov	r0, r4
 80192ac:	f7f9 fa6e 	bl	801278c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	f503 6094 	add.w	r0, r3, #1184	; 0x4a0
 80192b6:	4ba5      	ldr	r3, [pc, #660]	; (801954c <_ZN12MainViewBaseC1Ev+0x394>)
 80192b8:	617b      	str	r3, [r7, #20]
 80192ba:	2300      	movs	r3, #0
 80192bc:	61bb      	str	r3, [r7, #24]
 80192be:	f107 0314 	add.w	r3, r7, #20
 80192c2:	cb0c      	ldmia	r3, {r2, r3}
 80192c4:	6879      	ldr	r1, [r7, #4]
 80192c6:	f000 fca3 	bl	8019c10 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f503 6096 	add.w	r0, r3, #1200	; 0x4b0
 80192d0:	4b9f      	ldr	r3, [pc, #636]	; (8019550 <_ZN12MainViewBaseC1Ev+0x398>)
 80192d2:	61fb      	str	r3, [r7, #28]
 80192d4:	2300      	movs	r3, #0
 80192d6:	623b      	str	r3, [r7, #32]
 80192d8:	f107 031c 	add.w	r3, r7, #28
 80192dc:	cb0c      	ldmia	r3, {r2, r3}
 80192de:	6879      	ldr	r1, [r7, #4]
 80192e0:	f000 fcc6 	bl	8019c70 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{
    imageBackground.setXY(0, 0);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	3340      	adds	r3, #64	; 0x40
 80192e8:	2200      	movs	r2, #0
 80192ea:	2100      	movs	r1, #0
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7f8 fd8c 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    imageBackground.setBitmap(Bitmap(BITMAP_BACKGROUND_ID));
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80192f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80192fc:	210a      	movs	r1, #10
 80192fe:	4618      	mov	r0, r3
 8019300:	f7f9 f953 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019308:	4619      	mov	r1, r3
 801930a:	4620      	mov	r0, r4
 801930c:	f7fa fea6 	bl	801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonUp.setXY(295, 0);
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	336c      	adds	r3, #108	; 0x6c
 8019314:	2200      	movs	r2, #0
 8019316:	f240 1127 	movw	r1, #295	; 0x127
 801931a:	4618      	mov	r0, r3
 801931c:	f7f8 fd75 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonUp.setBitmaps(Bitmap(BITMAP_BUTTON_UP_RELEASED_ID), Bitmap(BITMAP_BUTTON_UP_PRESSED_ID));
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8019326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801932a:	2119      	movs	r1, #25
 801932c:	4618      	mov	r0, r3
 801932e:	f7f9 f93c 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019336:	2118      	movs	r1, #24
 8019338:	4618      	mov	r0, r3
 801933a:	f7f9 f936 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 801933e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8019342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019346:	4619      	mov	r1, r3
 8019348:	4620      	mov	r0, r4
 801934a:	f7fa fe0b 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonUp.setAction(buttonCallback);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 801935a:	4619      	mov	r1, r3
 801935c:	4610      	mov	r0, r2
 801935e:	f7f9 fb3f 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonLeft.setXY(240, 71);
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	33a0      	adds	r3, #160	; 0xa0
 8019366:	2247      	movs	r2, #71	; 0x47
 8019368:	21f0      	movs	r1, #240	; 0xf0
 801936a:	4618      	mov	r0, r3
 801936c:	f7f8 fd4d 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonLeft.setBitmaps(Bitmap(BITMAP_BUTTON_LEFT_RELEASED_ID), Bitmap(BITMAP_BUTTON_LEFT_PRESSED_ID));
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8019376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801937a:	2113      	movs	r1, #19
 801937c:	4618      	mov	r0, r3
 801937e:	f7f9 f914 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019382:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019386:	2112      	movs	r1, #18
 8019388:	4618      	mov	r0, r3
 801938a:	f7f9 f90e 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 801938e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8019392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019396:	4619      	mov	r1, r3
 8019398:	4620      	mov	r0, r4
 801939a:	f7fa fde3 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonLeft.setAction(buttonCallback);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80193aa:	4619      	mov	r1, r3
 80193ac:	4610      	mov	r0, r2
 80193ae:	f7f9 fb17 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonRight.setXY(425, 71);
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	33d4      	adds	r3, #212	; 0xd4
 80193b6:	2247      	movs	r2, #71	; 0x47
 80193b8:	f240 11a9 	movw	r1, #425	; 0x1a9
 80193bc:	4618      	mov	r0, r3
 80193be:	f7f8 fd24 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonRight.setBitmaps(Bitmap(BITMAP_BUTTON_RIGHT_RELEASED_ID), Bitmap(BITMAP_BUTTON_RIGHT_PRESSED_ID));
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 80193c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80193cc:	2116      	movs	r1, #22
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f9 f8eb 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80193d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80193d8:	2115      	movs	r1, #21
 80193da:	4618      	mov	r0, r3
 80193dc:	f7f9 f8e5 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80193e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80193e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80193e8:	4619      	mov	r1, r3
 80193ea:	4620      	mov	r0, r4
 80193ec:	f7fa fdba 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonRight.setAction(buttonCallback);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80193fc:	4619      	mov	r1, r3
 80193fe:	4610      	mov	r0, r2
 8019400:	f7f9 faee 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonDown.setXY(295, 216);
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801940a:	22d8      	movs	r2, #216	; 0xd8
 801940c:	f240 1127 	movw	r1, #295	; 0x127
 8019410:	4618      	mov	r0, r3
 8019412:	f7f8 fcfa 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonDown.setBitmaps(Bitmap(BITMAP_BUTTON_DOWN_RELEASED_ID), Bitmap(BITMAP_BUTTON_DOWN_PRESSED_ID));
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f503 7484 	add.w	r4, r3, #264	; 0x108
 801941c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019420:	2110      	movs	r1, #16
 8019422:	4618      	mov	r0, r3
 8019424:	f7f9 f8c1 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019428:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801942c:	210f      	movs	r1, #15
 801942e:	4618      	mov	r0, r3
 8019430:	f7f9 f8bb 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019434:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8019438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801943c:	4619      	mov	r1, r3
 801943e:	4620      	mov	r0, r4
 8019440:	f7fa fd90 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonDown.setAction(buttonCallback);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8019450:	4619      	mov	r1, r3
 8019452:	4610      	mov	r0, r2
 8019454:	f7f9 fac4 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea.setXY(102, 6);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801945e:	2206      	movs	r2, #6
 8019460:	2166      	movs	r1, #102	; 0x66
 8019462:	4618      	mov	r0, r3
 8019464:	f7f8 fcd1 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 801946e:	22ff      	movs	r2, #255	; 0xff
 8019470:	21ff      	movs	r1, #255	; 0xff
 8019472:	20ff      	movs	r0, #255	; 0xff
 8019474:	f007 f89e 	bl	80205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8019478:	4603      	mov	r3, r0
 801947a:	4619      	mov	r1, r3
 801947c:	4620      	mov	r0, r4
 801947e:	f7fa faba 	bl	80139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea.setLinespacing(0);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8019488:	2100      	movs	r1, #0
 801948a:	4618      	mov	r0, r3
 801948c:	f7ff fd77 	bl	8018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "%s", TypedText(T_SINGLEUSEID2).getText());
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 8019496:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801949a:	2101      	movs	r1, #1
 801949c:	4618      	mov	r0, r3
 801949e:	f7fa f9b7 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 80194a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7fa f9d6 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 80194ac:	4603      	mov	r3, r0
 80194ae:	4a29      	ldr	r2, [pc, #164]	; (8019554 <_ZN12MainViewBaseC1Ev+0x39c>)
 80194b0:	210a      	movs	r1, #10
 80194b2:	4620      	mov	r0, r4
 80194b4:	f007 f870 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea.setWildcard(textAreaBuffer);
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80194c4:	4619      	mov	r1, r3
 80194c6:	4610      	mov	r0, r2
 80194c8:	f7fa fbf0 	bl	8013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea.resizeToCurrentText();
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80194d2:	4618      	mov	r0, r3
 80194d4:	f7fa ff2e 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea.setTypedText(TypedText(T_SINGLEUSEID1));
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80194de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80194e2:	2100      	movs	r1, #0
 80194e4:	4618      	mov	r0, r3
 80194e6:	f7fa f993 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 80194ea:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80194ee:	4620      	mov	r0, r4
 80194f0:	f7fa fefe 	bl	80142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonStop.setXY(300, 146);
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80194fa:	2292      	movs	r2, #146	; 0x92
 80194fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8019500:	4618      	mov	r0, r3
 8019502:	f7f8 fc82 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonStop.setBitmaps(Bitmap(BITMAP_ROUND_EDGE_ICON_BUTTON_STOP_ID), Bitmap(BITMAP_ROUND_EDGE_ICON_BUTTON_PRESSED_STOP_ID));
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801950c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019510:	2103      	movs	r1, #3
 8019512:	4618      	mov	r0, r3
 8019514:	f7f9 f849 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019518:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801951c:	2102      	movs	r1, #2
 801951e:	4618      	mov	r0, r3
 8019520:	f7f9 f843 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019524:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8019528:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801952c:	4619      	mov	r1, r3
 801952e:	4620      	mov	r0, r4
 8019530:	f7fa fd18 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonStop.setAction(buttonCallback);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8019540:	4619      	mov	r1, r3
 8019542:	4610      	mov	r0, r2
 8019544:	e008      	b.n	8019558 <_ZN12MainViewBaseC1Ev+0x3a0>
 8019546:	bf00      	nop
 8019548:	08024fe0 	.word	0x08024fe0
 801954c:	08019af5 	.word	0x08019af5
 8019550:	08019bb5 	.word	0x08019bb5
 8019554:	0802447c 	.word	0x0802447c
 8019558:	f7f9 fa42 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonLeftRotation.setXY(300, 71);
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019562:	2247      	movs	r2, #71	; 0x47
 8019564:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8019568:	4618      	mov	r0, r3
 801956a:	f7f8 fc4e 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonLeftRotation.setBitmaps(Bitmap(BITMAP_ROUND_LEFT_ROTATION_ID), Bitmap(BITMAP_ROUND_LEFT_ROTATION_PRESSED_ID));
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8019574:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019578:	2104      	movs	r1, #4
 801957a:	4618      	mov	r0, r3
 801957c:	f7f9 f815 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019584:	2105      	movs	r1, #5
 8019586:	4618      	mov	r0, r3
 8019588:	f7f9 f80f 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 801958c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8019590:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019594:	4619      	mov	r1, r3
 8019596:	4620      	mov	r0, r4
 8019598:	f7fa fce4 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonLeftRotation.setAction(buttonCallback);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80195a8:	4619      	mov	r1, r3
 80195aa:	4610      	mov	r0, r2
 80195ac:	f7f9 fa18 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonRightRoration.setXY(360, 71);
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80195b6:	2247      	movs	r2, #71	; 0x47
 80195b8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80195bc:	4618      	mov	r0, r3
 80195be:	f7f8 fc24 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    buttonRightRoration.setBitmaps(Bitmap(BITMAP_ROUND_RIGHT_ROTATION_ID), Bitmap(BITMAP_ROUND_RIGHT_ROTATION_PRESSED_ID));
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 80195c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80195cc:	2106      	movs	r1, #6
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7f8 ffeb 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80195d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80195d8:	2107      	movs	r1, #7
 80195da:	4618      	mov	r0, r3
 80195dc:	f7f8 ffe5 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80195e0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80195e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80195e8:	4619      	mov	r1, r3
 80195ea:	4620      	mov	r0, r4
 80195ec:	f7fa fcba 	bl	8013f64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonRightRoration.setAction(buttonCallback);
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80195fc:	4619      	mov	r1, r3
 80195fe:	4610      	mov	r0, r2
 8019600:	f7f9 f9ee 	bl	80129e0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    slider.setXY(19, 81);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801960a:	2251      	movs	r2, #81	; 0x51
 801960c:	2113      	movs	r1, #19
 801960e:	4618      	mov	r0, r3
 8019610:	f7f8 fbfb 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    slider.setBitmaps(Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_BACK_ID), Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_FILL_ID), Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_NOB_ID));
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	f503 7404 	add.w	r4, r3, #528	; 0x210
 801961a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801961e:	210c      	movs	r1, #12
 8019620:	4618      	mov	r0, r3
 8019622:	f7f8 ffc2 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019626:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801962a:	210d      	movs	r1, #13
 801962c:	4618      	mov	r0, r3
 801962e:	f7f8 ffbc 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 8019632:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8019636:	210b      	movs	r1, #11
 8019638:	4618      	mov	r0, r3
 801963a:	f7f8 ffb6 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 801963e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8019642:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8019646:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801964a:	4620      	mov	r0, r4
 801964c:	f7f9 fb76 	bl	8012d3c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider.setupVerticalSlider(7, 3, 0, 0, 125);
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	f503 7004 	add.w	r0, r3, #528	; 0x210
 8019656:	237d      	movs	r3, #125	; 0x7d
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	2300      	movs	r3, #0
 801965c:	9300      	str	r3, [sp, #0]
 801965e:	2300      	movs	r3, #0
 8019660:	2203      	movs	r2, #3
 8019662:	2107      	movs	r1, #7
 8019664:	f7f9 fc70 	bl	8012f48 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    slider.setValueRange(0, 2240);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801966e:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8019672:	2100      	movs	r1, #0
 8019674:	4618      	mov	r0, r3
 8019676:	f7fa f80b 	bl	8013690 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider.setValue(0);
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019680:	2100      	movs	r1, #0
 8019682:	4618      	mov	r0, r3
 8019684:	f7f9 fd04 	bl	8013090 <_ZN8touchgfx6Slider8setValueEi>
    slider.setStopValueCallback(sliderValueConfirmedCallback);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8019694:	4619      	mov	r1, r3
 8019696:	4610      	mov	r0, r2
 8019698:	f7ff fc80 	bl	8018f9c <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    textAreaSlider.setXY(5, 6);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80196a2:	2206      	movs	r2, #6
 80196a4:	2105      	movs	r1, #5
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7f8 fbaf 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaSlider.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	f503 7443 	add.w	r4, r3, #780	; 0x30c
 80196b2:	22ff      	movs	r2, #255	; 0xff
 80196b4:	21ff      	movs	r1, #255	; 0xff
 80196b6:	20ff      	movs	r0, #255	; 0xff
 80196b8:	f006 ff7c 	bl	80205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80196bc:	4603      	mov	r3, r0
 80196be:	4619      	mov	r1, r3
 80196c0:	4620      	mov	r0, r4
 80196c2:	f7fa f998 	bl	80139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaSlider.setLinespacing(0);
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80196cc:	2100      	movs	r1, #0
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff fc55 	bl	8018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textAreaSliderBuffer, TEXTAREASLIDER_SIZE, "%s", TypedText(T_SINGLEUSEID13).getText());
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f203 4464 	addw	r4, r3, #1124	; 0x464
 80196da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80196de:	2103      	movs	r1, #3
 80196e0:	4618      	mov	r0, r3
 80196e2:	f7fa f895 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 80196e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7fa f8b4 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 80196f0:	4603      	mov	r3, r0
 80196f2:	4ade      	ldr	r2, [pc, #888]	; (8019a6c <_ZN12MainViewBaseC1Ev+0x8b4>)
 80196f4:	2105      	movs	r1, #5
 80196f6:	4620      	mov	r0, r4
 80196f8:	f006 ff4e 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaSlider.setWildcard(textAreaSliderBuffer);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	f503 7243 	add.w	r2, r3, #780	; 0x30c
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8019708:	4619      	mov	r1, r3
 801970a:	4610      	mov	r0, r2
 801970c:	f7fa face 	bl	8013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaSlider.resizeToCurrentText();
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8019716:	4618      	mov	r0, r3
 8019718:	f7fa fe0c 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaSlider.setTypedText(TypedText(T_SINGLEUSEID12));
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	f503 7443 	add.w	r4, r3, #780	; 0x30c
 8019722:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8019726:	2102      	movs	r1, #2
 8019728:	4618      	mov	r0, r3
 801972a:	f7fa f871 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 801972e:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8019732:	4620      	mov	r0, r4
 8019734:	f7fa fddc 	bl	80142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textAreaEncoderFR.setXY(175, 127);
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 801973e:	227f      	movs	r2, #127	; 0x7f
 8019740:	21af      	movs	r1, #175	; 0xaf
 8019742:	4618      	mov	r0, r3
 8019744:	f7f8 fb61 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaEncoderFR.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	f503 7451 	add.w	r4, r3, #836	; 0x344
 801974e:	22ff      	movs	r2, #255	; 0xff
 8019750:	21ff      	movs	r1, #255	; 0xff
 8019752:	20ff      	movs	r0, #255	; 0xff
 8019754:	f006 ff2e 	bl	80205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8019758:	4603      	mov	r3, r0
 801975a:	4619      	mov	r1, r3
 801975c:	4620      	mov	r0, r4
 801975e:	f7fa f94a 	bl	80139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaEncoderFR.setLinespacing(0);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8019768:	2100      	movs	r1, #0
 801976a:	4618      	mov	r0, r3
 801976c:	f7ff fc07 	bl	8018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textAreaEncoderFRBuffer, TEXTAREAENCODERFR_SIZE, "%s", TypedText(T_SINGLEUSEID15).getText());
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	f203 446e 	addw	r4, r3, #1134	; 0x46e
 8019776:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801977a:	2105      	movs	r1, #5
 801977c:	4618      	mov	r0, r3
 801977e:	f7fa f847 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 8019782:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8019786:	4618      	mov	r0, r3
 8019788:	f7fa f866 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 801978c:	4603      	mov	r3, r0
 801978e:	4ab7      	ldr	r2, [pc, #732]	; (8019a6c <_ZN12MainViewBaseC1Ev+0x8b4>)
 8019790:	2106      	movs	r1, #6
 8019792:	4620      	mov	r0, r4
 8019794:	f006 ff00 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaEncoderFR.setWildcard(textAreaEncoderFRBuffer);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	f503 7251 	add.w	r2, r3, #836	; 0x344
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	f203 436e 	addw	r3, r3, #1134	; 0x46e
 80197a4:	4619      	mov	r1, r3
 80197a6:	4610      	mov	r0, r2
 80197a8:	f7fa fa80 	bl	8013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaEncoderFR.resizeToCurrentText();
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7fa fdbe 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaEncoderFR.setTypedText(TypedText(T_SINGLEUSEID14));
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	f503 7451 	add.w	r4, r3, #836	; 0x344
 80197be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80197c2:	2104      	movs	r1, #4
 80197c4:	4618      	mov	r0, r3
 80197c6:	f7fa f823 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 80197ca:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 80197ce:	4620      	mov	r0, r4
 80197d0:	f7fa fd8e 	bl	80142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textAreaEncoderFL.setXY(83, 127);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80197da:	227f      	movs	r2, #127	; 0x7f
 80197dc:	2153      	movs	r1, #83	; 0x53
 80197de:	4618      	mov	r0, r3
 80197e0:	f7f8 fb13 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaEncoderFL.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 80197ea:	22ff      	movs	r2, #255	; 0xff
 80197ec:	21ff      	movs	r1, #255	; 0xff
 80197ee:	20ff      	movs	r0, #255	; 0xff
 80197f0:	f006 fee0 	bl	80205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80197f4:	4603      	mov	r3, r0
 80197f6:	4619      	mov	r1, r3
 80197f8:	4620      	mov	r0, r4
 80197fa:	f7fa f8fc 	bl	80139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaEncoderFL.setLinespacing(0);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8019804:	2100      	movs	r1, #0
 8019806:	4618      	mov	r0, r3
 8019808:	f7ff fbb9 	bl	8018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textAreaEncoderFLBuffer, TEXTAREAENCODERFL_SIZE, "%s", TypedText(T_SINGLEUSEID17).getText());
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f203 447a 	addw	r4, r3, #1146	; 0x47a
 8019812:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019816:	2107      	movs	r1, #7
 8019818:	4618      	mov	r0, r3
 801981a:	f7f9 fff9 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 801981e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8019822:	4618      	mov	r0, r3
 8019824:	f7fa f818 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 8019828:	4603      	mov	r3, r0
 801982a:	4a90      	ldr	r2, [pc, #576]	; (8019a6c <_ZN12MainViewBaseC1Ev+0x8b4>)
 801982c:	2106      	movs	r1, #6
 801982e:	4620      	mov	r0, r4
 8019830:	f006 feb2 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaEncoderFL.setWildcard(textAreaEncoderFLBuffer);
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	f203 437a 	addw	r3, r3, #1146	; 0x47a
 8019840:	4619      	mov	r1, r3
 8019842:	4610      	mov	r0, r2
 8019844:	f7fa fa32 	bl	8013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaEncoderFL.resizeToCurrentText();
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 801984e:	4618      	mov	r0, r3
 8019850:	f7fa fd70 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaEncoderFL.setTypedText(TypedText(T_SINGLEUSEID16));
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 801985a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801985e:	2106      	movs	r1, #6
 8019860:	4618      	mov	r0, r3
 8019862:	f7f9 ffd5 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 8019866:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 801986a:	4620      	mov	r0, r4
 801986c:	f7fa fd40 	bl	80142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textAreaEncoderRL.setXY(83, 189);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8019876:	22bd      	movs	r2, #189	; 0xbd
 8019878:	2153      	movs	r1, #83	; 0x53
 801987a:	4618      	mov	r0, r3
 801987c:	f7f8 fac5 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaEncoderRL.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	f503 746d 	add.w	r4, r3, #948	; 0x3b4
 8019886:	22ff      	movs	r2, #255	; 0xff
 8019888:	21ff      	movs	r1, #255	; 0xff
 801988a:	20ff      	movs	r0, #255	; 0xff
 801988c:	f006 fe92 	bl	80205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8019890:	4603      	mov	r3, r0
 8019892:	4619      	mov	r1, r3
 8019894:	4620      	mov	r0, r4
 8019896:	f7fa f8ae 	bl	80139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaEncoderRL.setLinespacing(0);
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80198a0:	2100      	movs	r1, #0
 80198a2:	4618      	mov	r0, r3
 80198a4:	f7ff fb6b 	bl	8018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textAreaEncoderRLBuffer, TEXTAREAENCODERRL_SIZE, "%s", TypedText(T_SINGLEUSEID19).getText());
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f203 4486 	addw	r4, r3, #1158	; 0x486
 80198ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80198b2:	2109      	movs	r1, #9
 80198b4:	4618      	mov	r0, r3
 80198b6:	f7f9 ffab 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 80198ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80198be:	4618      	mov	r0, r3
 80198c0:	f7f9 ffca 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 80198c4:	4603      	mov	r3, r0
 80198c6:	4a69      	ldr	r2, [pc, #420]	; (8019a6c <_ZN12MainViewBaseC1Ev+0x8b4>)
 80198c8:	2106      	movs	r1, #6
 80198ca:	4620      	mov	r0, r4
 80198cc:	f006 fe64 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaEncoderRL.setWildcard(textAreaEncoderRLBuffer);
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	f503 726d 	add.w	r2, r3, #948	; 0x3b4
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f203 4386 	addw	r3, r3, #1158	; 0x486
 80198dc:	4619      	mov	r1, r3
 80198de:	4610      	mov	r0, r2
 80198e0:	f7fa f9e4 	bl	8013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaEncoderRL.resizeToCurrentText();
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7fa fd22 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaEncoderRL.setTypedText(TypedText(T_SINGLEUSEID18));
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f503 746d 	add.w	r4, r3, #948	; 0x3b4
 80198f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80198fa:	2108      	movs	r1, #8
 80198fc:	4618      	mov	r0, r3
 80198fe:	f7f9 ff87 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 8019902:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8019906:	4620      	mov	r0, r4
 8019908:	f7fa fcf2 	bl	80142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textAreaEncoderRR.setXY(175, 189);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8019912:	22bd      	movs	r2, #189	; 0xbd
 8019914:	21af      	movs	r1, #175	; 0xaf
 8019916:	4618      	mov	r0, r3
 8019918:	f7f8 fa77 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaEncoderRR.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f503 747b 	add.w	r4, r3, #1004	; 0x3ec
 8019922:	22ff      	movs	r2, #255	; 0xff
 8019924:	21ff      	movs	r1, #255	; 0xff
 8019926:	20ff      	movs	r0, #255	; 0xff
 8019928:	f006 fe44 	bl	80205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801992c:	4603      	mov	r3, r0
 801992e:	4619      	mov	r1, r3
 8019930:	4620      	mov	r0, r4
 8019932:	f7fa f860 	bl	80139f6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaEncoderRR.setLinespacing(0);
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 801993c:	2100      	movs	r1, #0
 801993e:	4618      	mov	r0, r3
 8019940:	f7ff fb1d 	bl	8018f7e <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textAreaEncoderRRBuffer, TEXTAREAENCODERRR_SIZE, "%s", TypedText(T_SINGLEUSEID21).getText());
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	f203 4492 	addw	r4, r3, #1170	; 0x492
 801994a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801994e:	210b      	movs	r1, #11
 8019950:	4618      	mov	r0, r3
 8019952:	f7f9 ff5d 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 8019956:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801995a:	4618      	mov	r0, r3
 801995c:	f7f9 ff7c 	bl	8013858 <_ZNK8touchgfx9TypedText7getTextEv>
 8019960:	4603      	mov	r3, r0
 8019962:	4a42      	ldr	r2, [pc, #264]	; (8019a6c <_ZN12MainViewBaseC1Ev+0x8b4>)
 8019964:	2106      	movs	r1, #6
 8019966:	4620      	mov	r0, r4
 8019968:	f006 fe16 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaEncoderRR.setWildcard(textAreaEncoderRRBuffer);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f503 727b 	add.w	r2, r3, #1004	; 0x3ec
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	f203 4392 	addw	r3, r3, #1170	; 0x492
 8019978:	4619      	mov	r1, r3
 801997a:	4610      	mov	r0, r2
 801997c:	f7fa f996 	bl	8013cac <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaEncoderRR.resizeToCurrentText();
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8019986:	4618      	mov	r0, r3
 8019988:	f7fa fcd4 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaEncoderRR.setTypedText(TypedText(T_SINGLEUSEID20));
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	f503 747b 	add.w	r4, r3, #1004	; 0x3ec
 8019992:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019996:	210a      	movs	r1, #10
 8019998:	4618      	mov	r0, r3
 801999a:	f7f9 ff39 	bl	8013810 <_ZN8touchgfx9TypedTextC1Et>
 801999e:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80199a2:	4620      	mov	r0, r4
 80199a4:	f7fa fca4 	bl	80142f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ikony_wlasne21.setXY(131, 136);
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80199ae:	2288      	movs	r2, #136	; 0x88
 80199b0:	2183      	movs	r1, #131	; 0x83
 80199b2:	4618      	mov	r0, r3
 80199b4:	f7f8 fa29 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
    ikony_wlasne21.setBitmap(Bitmap(BITMAP_IKONY_WLASNE2_ID));
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	f203 4424 	addw	r4, r3, #1060	; 0x424
 80199be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80199c2:	211c      	movs	r1, #28
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7f8 fdf0 	bl	80125aa <_ZN8touchgfx6BitmapC1Et>
 80199ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80199ce:	4619      	mov	r1, r3
 80199d0:	4620      	mov	r0, r4
 80199d2:	f7fa fb43 	bl	801405c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(imageBackground);
 80199d6:	687a      	ldr	r2, [r7, #4]
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	3340      	adds	r3, #64	; 0x40
 80199dc:	4619      	mov	r1, r3
 80199de:	4610      	mov	r0, r2
 80199e0:	f7ff fabe 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonUp);
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	336c      	adds	r3, #108	; 0x6c
 80199ea:	4619      	mov	r1, r3
 80199ec:	4610      	mov	r0, r2
 80199ee:	f7ff fab7 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonLeft);
 80199f2:	687a      	ldr	r2, [r7, #4]
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	33a0      	adds	r3, #160	; 0xa0
 80199f8:	4619      	mov	r1, r3
 80199fa:	4610      	mov	r0, r2
 80199fc:	f7ff fab0 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonRight);
 8019a00:	687a      	ldr	r2, [r7, #4]
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	33d4      	adds	r3, #212	; 0xd4
 8019a06:	4619      	mov	r1, r3
 8019a08:	4610      	mov	r0, r2
 8019a0a:	f7ff faa9 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonDown);
 8019a0e:	687a      	ldr	r2, [r7, #4]
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019a16:	4619      	mov	r1, r3
 8019a18:	4610      	mov	r0, r2
 8019a1a:	f7ff faa1 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea);
 8019a1e:	687a      	ldr	r2, [r7, #4]
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8019a26:	4619      	mov	r1, r3
 8019a28:	4610      	mov	r0, r2
 8019a2a:	f7ff fa99 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonStop);
 8019a2e:	687a      	ldr	r2, [r7, #4]
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8019a36:	4619      	mov	r1, r3
 8019a38:	4610      	mov	r0, r2
 8019a3a:	f7ff fa91 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonLeftRotation);
 8019a3e:	687a      	ldr	r2, [r7, #4]
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019a46:	4619      	mov	r1, r3
 8019a48:	4610      	mov	r0, r2
 8019a4a:	f7ff fa89 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonRightRoration);
 8019a4e:	687a      	ldr	r2, [r7, #4]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8019a56:	4619      	mov	r1, r3
 8019a58:	4610      	mov	r0, r2
 8019a5a:	f7ff fa81 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider);
 8019a5e:	687a      	ldr	r2, [r7, #4]
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019a66:	4619      	mov	r1, r3
 8019a68:	4610      	mov	r0, r2
 8019a6a:	e001      	b.n	8019a70 <_ZN12MainViewBaseC1Ev+0x8b8>
 8019a6c:	0802447c 	.word	0x0802447c
 8019a70:	f7ff fa76 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaSlider);
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	4610      	mov	r0, r2
 8019a80:	f7ff fa6e 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaEncoderFR);
 8019a84:	687a      	ldr	r2, [r7, #4]
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8019a8c:	4619      	mov	r1, r3
 8019a8e:	4610      	mov	r0, r2
 8019a90:	f7ff fa66 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaEncoderFL);
 8019a94:	687a      	ldr	r2, [r7, #4]
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8019a9c:	4619      	mov	r1, r3
 8019a9e:	4610      	mov	r0, r2
 8019aa0:	f7ff fa5e 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaEncoderRL);
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8019aac:	4619      	mov	r1, r3
 8019aae:	4610      	mov	r0, r2
 8019ab0:	f7ff fa56 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaEncoderRR);
 8019ab4:	687a      	ldr	r2, [r7, #4]
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8019abc:	4619      	mov	r1, r3
 8019abe:	4610      	mov	r0, r2
 8019ac0:	f7ff fa4e 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ikony_wlasne21);
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8019acc:	4619      	mov	r1, r3
 8019ace:	4610      	mov	r0, r2
 8019ad0:	f7ff fa46 	bl	8018f60 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	37a4      	adds	r7, #164	; 0xa4
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bd90      	pop	{r4, r7, pc}
 8019ade:	bf00      	nop

08019ae0 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8019ae0:	b480      	push	{r7}
 8019ae2:	b083      	sub	sp, #12
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]

}
 8019ae8:	bf00      	nop
 8019aea:	370c      	adds	r7, #12
 8019aec:	46bd      	mov	sp, r7
 8019aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af2:	4770      	bx	lr

08019af4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b082      	sub	sp, #8
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	6039      	str	r1, [r7, #0]
    if (&src == &buttonUp)
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	336c      	adds	r3, #108	; 0x6c
 8019b02:	683a      	ldr	r2, [r7, #0]
 8019b04:	429a      	cmp	r2, r3
 8019b06:	d106      	bne.n	8019b16 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //ButtonUp
        //When buttonUp clicked call virtual function
        //Call buttonUpVirtualFunction
        buttonUpVirtualFunction();
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	332c      	adds	r3, #44	; 0x2c
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	6878      	ldr	r0, [r7, #4]
 8019b12:	4798      	blx	r3
        //ButtonRightRotation
        //When buttonRightRoration clicked call virtual function
        //Call buttonRightRotationVirtualFunction
        buttonRightRotationVirtualFunction();
    }
}
 8019b14:	e04a      	b.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
    else if (&src == &buttonLeft)
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	33a0      	adds	r3, #160	; 0xa0
 8019b1a:	683a      	ldr	r2, [r7, #0]
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d106      	bne.n	8019b2e <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        buttonLeftVirtualFunction();
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	3334      	adds	r3, #52	; 0x34
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	6878      	ldr	r0, [r7, #4]
 8019b2a:	4798      	blx	r3
}
 8019b2c:	e03e      	b.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
    else if (&src == &buttonRight)
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	33d4      	adds	r3, #212	; 0xd4
 8019b32:	683a      	ldr	r2, [r7, #0]
 8019b34:	429a      	cmp	r2, r3
 8019b36:	d106      	bne.n	8019b46 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x52>
        buttonRightVirtualFunction();
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	3338      	adds	r3, #56	; 0x38
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	4798      	blx	r3
}
 8019b44:	e032      	b.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
    else if (&src == &buttonDown)
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019b4c:	683a      	ldr	r2, [r7, #0]
 8019b4e:	429a      	cmp	r2, r3
 8019b50:	d106      	bne.n	8019b60 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6c>
        buttonDownVirtualFunction();
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	3330      	adds	r3, #48	; 0x30
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	6878      	ldr	r0, [r7, #4]
 8019b5c:	4798      	blx	r3
}
 8019b5e:	e025      	b.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
    else if (&src == &buttonStop)
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8019b66:	683a      	ldr	r2, [r7, #0]
 8019b68:	429a      	cmp	r2, r3
 8019b6a:	d106      	bne.n	8019b7a <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x86>
        buttonStopVirtualFunction();
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	333c      	adds	r3, #60	; 0x3c
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	4798      	blx	r3
}
 8019b78:	e018      	b.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
    else if (&src == &buttonLeftRotation)
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019b80:	683a      	ldr	r2, [r7, #0]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d106      	bne.n	8019b94 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa0>
        buttonLeftRotationVirtualFunction();
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	3344      	adds	r3, #68	; 0x44
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	4798      	blx	r3
}
 8019b92:	e00b      	b.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
    else if (&src == &buttonRightRoration)
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8019b9a:	683a      	ldr	r2, [r7, #0]
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	d105      	bne.n	8019bac <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb8>
        buttonRightRotationVirtualFunction();
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	3340      	adds	r3, #64	; 0x40
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	6878      	ldr	r0, [r7, #4]
 8019baa:	4798      	blx	r3
}
 8019bac:	bf00      	nop
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}

08019bb4 <_ZN12MainViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	60f8      	str	r0, [r7, #12]
 8019bbc:	60b9      	str	r1, [r7, #8]
 8019bbe:	607a      	str	r2, [r7, #4]
    if (&src == &slider)
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8019bc6:	68ba      	ldr	r2, [r7, #8]
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	d106      	bne.n	8019bda <_ZN12MainViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //SliderFunction
        //When slider value confirmed call virtual function
        //Call sliderVirtualFunction
        sliderVirtualFunction(value);
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	3348      	adds	r3, #72	; 0x48
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	6879      	ldr	r1, [r7, #4]
 8019bd6:	68f8      	ldr	r0, [r7, #12]
 8019bd8:	4798      	blx	r3
    }
}
 8019bda:	bf00      	nop
 8019bdc:	3710      	adds	r7, #16
 8019bde:	46bd      	mov	sp, r7
 8019be0:	bd80      	pop	{r7, pc}
	...

08019be4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b082      	sub	sp, #8
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f005 ff62 	bl	801fab8 <_ZN8touchgfx6ScreenC1Ev>
 8019bf4:	4a05      	ldr	r2, [pc, #20]	; (8019c0c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	601a      	str	r2, [r3, #0]
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	4618      	mov	r0, r3
 8019c04:	3708      	adds	r7, #8
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
 8019c0a:	bf00      	nop
 8019c0c:	08025064 	.word	0x08025064

08019c10 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b084      	sub	sp, #16
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	60f8      	str	r0, [r7, #12]
 8019c18:	60b9      	str	r1, [r7, #8]
 8019c1a:	4639      	mov	r1, r7
 8019c1c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7f8 ff52 	bl	8012acc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8019c28:	4a08      	ldr	r2, [pc, #32]	; (8019c4c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	68ba      	ldr	r2, [r7, #8]
 8019c32:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	3308      	adds	r3, #8
 8019c38:	463a      	mov	r2, r7
 8019c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	4618      	mov	r0, r3
 8019c46:	3710      	adds	r7, #16
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd80      	pop	{r7, pc}
 8019c4c:	0802504c 	.word	0x0802504c

08019c50 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8019c50:	b480      	push	{r7}
 8019c52:	b083      	sub	sp, #12
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
 8019c58:	4a04      	ldr	r2, [pc, #16]	; (8019c6c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	601a      	str	r2, [r3, #0]
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	4618      	mov	r0, r3
 8019c62:	370c      	adds	r7, #12
 8019c64:	46bd      	mov	sp, r7
 8019c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6a:	4770      	bx	lr
 8019c6c:	08025098 	.word	0x08025098

08019c70 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	60f8      	str	r0, [r7, #12]
 8019c78:	60b9      	str	r1, [r7, #8]
 8019c7a:	4639      	mov	r1, r7
 8019c7c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	4618      	mov	r0, r3
 8019c84:	f7ff ffe4 	bl	8019c50 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8019c88:	4a08      	ldr	r2, [pc, #32]	; (8019cac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	68ba      	ldr	r2, [r7, #8]
 8019c92:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	3308      	adds	r3, #8
 8019c98:	463a      	mov	r2, r7
 8019c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3710      	adds	r7, #16
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	08025034 	.word	0x08025034

08019cb0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8019cb0:	b480      	push	{r7}
 8019cb2:	b083      	sub	sp, #12
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
    }
 8019cb8:	4a04      	ldr	r2, [pc, #16]	; (8019ccc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	601a      	str	r2, [r3, #0]
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	370c      	adds	r7, #12
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cca:	4770      	bx	lr
 8019ccc:	08025098 	.word	0x08025098

08019cd0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b082      	sub	sp, #8
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
    }
 8019cd8:	6878      	ldr	r0, [r7, #4]
 8019cda:	f7ff ffe9 	bl	8019cb0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8019cde:	2104      	movs	r1, #4
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	f008 fe38 	bl	8022956 <_ZdlPvj>
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	4618      	mov	r0, r3
 8019cea:	3708      	adds	r7, #8
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd80      	pop	{r7, pc}

08019cf0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	4a05      	ldr	r2, [pc, #20]	; (8019d10 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	601a      	str	r2, [r3, #0]
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	4618      	mov	r0, r3
 8019d02:	f7ff ffd5 	bl	8019cb0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3708      	adds	r7, #8
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}
 8019d10:	08025034 	.word	0x08025034

08019d14 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b082      	sub	sp, #8
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	6878      	ldr	r0, [r7, #4]
 8019d1e:	f7ff ffe7 	bl	8019cf0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8019d22:	2110      	movs	r1, #16
 8019d24:	6878      	ldr	r0, [r7, #4]
 8019d26:	f008 fe16 	bl	8022956 <_ZdlPvj>
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	3708      	adds	r7, #8
 8019d30:	46bd      	mov	sp, r7
 8019d32:	bd80      	pop	{r7, pc}

08019d34 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b082      	sub	sp, #8
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	4a05      	ldr	r2, [pc, #20]	; (8019d54 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	601a      	str	r2, [r3, #0]
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	4618      	mov	r0, r3
 8019d46:	f7f8 fed1 	bl	8012aec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}
 8019d54:	0802504c 	.word	0x0802504c

08019d58 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
 8019d60:	6878      	ldr	r0, [r7, #4]
 8019d62:	f7ff ffe7 	bl	8019d34 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8019d66:	2110      	movs	r1, #16
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f008 fdf4 	bl	8022956 <_ZdlPvj>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	4618      	mov	r0, r3
 8019d72:	3708      	adds	r7, #8
 8019d74:	46bd      	mov	sp, r7
 8019d76:	bd80      	pop	{r7, pc}

08019d78 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b084      	sub	sp, #16
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	60f8      	str	r0, [r7, #12]
 8019d80:	60b9      	str	r1, [r7, #8]
 8019d82:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	685b      	ldr	r3, [r3, #4]
 8019d88:	68fa      	ldr	r2, [r7, #12]
 8019d8a:	68d2      	ldr	r2, [r2, #12]
 8019d8c:	1052      	asrs	r2, r2, #1
 8019d8e:	1898      	adds	r0, r3, r2
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	68db      	ldr	r3, [r3, #12]
 8019d94:	f003 0301 	and.w	r3, r3, #1
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d102      	bne.n	8019da2 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	689b      	ldr	r3, [r3, #8]
 8019da0:	e00a      	b.n	8019db8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	68fa      	ldr	r2, [r7, #12]
 8019da8:	68d2      	ldr	r2, [r2, #12]
 8019daa:	1052      	asrs	r2, r2, #1
 8019dac:	4413      	add	r3, r2
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	68fa      	ldr	r2, [r7, #12]
 8019db2:	6892      	ldr	r2, [r2, #8]
 8019db4:	4413      	add	r3, r2
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	687a      	ldr	r2, [r7, #4]
 8019dba:	68b9      	ldr	r1, [r7, #8]
 8019dbc:	4798      	blx	r3
    }
 8019dbe:	bf00      	nop
 8019dc0:	3710      	adds	r7, #16
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}

08019dc6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8019dc6:	b480      	push	{r7}
 8019dc8:	b083      	sub	sp, #12
 8019dca:	af00      	add	r7, sp, #0
 8019dcc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d010      	beq.n	8019df8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	689b      	ldr	r3, [r3, #8]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d107      	bne.n	8019dee <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	68db      	ldr	r3, [r3, #12]
 8019de2:	f003 0301 	and.w	r3, r3, #1
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d101      	bne.n	8019dee <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8019dea:	2301      	movs	r3, #1
 8019dec:	e000      	b.n	8019df0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8019dee:	2300      	movs	r3, #0
 8019df0:	2b01      	cmp	r3, #1
 8019df2:	d001      	beq.n	8019df8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8019df4:	2301      	movs	r3, #1
 8019df6:	e000      	b.n	8019dfa <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8019df8:	2300      	movs	r3, #0
    }
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	370c      	adds	r7, #12
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e04:	4770      	bx	lr

08019e06 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8019e06:	b580      	push	{r7, lr}
 8019e08:	b082      	sub	sp, #8
 8019e0a:	af00      	add	r7, sp, #0
 8019e0c:	6078      	str	r0, [r7, #4]
 8019e0e:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	685b      	ldr	r3, [r3, #4]
 8019e14:	687a      	ldr	r2, [r7, #4]
 8019e16:	68d2      	ldr	r2, [r2, #12]
 8019e18:	1052      	asrs	r2, r2, #1
 8019e1a:	1898      	adds	r0, r3, r2
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	68db      	ldr	r3, [r3, #12]
 8019e20:	f003 0301 	and.w	r3, r3, #1
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d102      	bne.n	8019e2e <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	689b      	ldr	r3, [r3, #8]
 8019e2c:	e00a      	b.n	8019e44 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	68d2      	ldr	r2, [r2, #12]
 8019e36:	1052      	asrs	r2, r2, #1
 8019e38:	4413      	add	r3, r2
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	687a      	ldr	r2, [r7, #4]
 8019e3e:	6892      	ldr	r2, [r2, #8]
 8019e40:	4413      	add	r3, r2
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	6839      	ldr	r1, [r7, #0]
 8019e46:	4798      	blx	r3
    }
 8019e48:	bf00      	nop
 8019e4a:	3708      	adds	r7, #8
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}

08019e50 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8019e50:	b480      	push	{r7}
 8019e52:	b083      	sub	sp, #12
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d010      	beq.n	8019e82 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	689b      	ldr	r3, [r3, #8]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d107      	bne.n	8019e78 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	68db      	ldr	r3, [r3, #12]
 8019e6c:	f003 0301 	and.w	r3, r3, #1
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d101      	bne.n	8019e78 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8019e74:	2301      	movs	r3, #1
 8019e76:	e000      	b.n	8019e7a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8019e78:	2300      	movs	r3, #0
 8019e7a:	2b01      	cmp	r3, #1
 8019e7c:	d001      	beq.n	8019e82 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8019e7e:	2301      	movs	r3, #1
 8019e80:	e000      	b.n	8019e84 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8019e82:	2300      	movs	r3, #0
    }
 8019e84:	4618      	mov	r0, r3
 8019e86:	370c      	adds	r7, #12
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8e:	4770      	bx	lr

08019e90 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8019e90:	b480      	push	{r7}
 8019e92:	af00      	add	r7, sp, #0
    return bitmap_database;
 8019e94:	4b02      	ldr	r3, [pc, #8]	; (8019ea0 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9e:	4770      	bx	lr
 8019ea0:	080250a8 	.word	0x080250a8

08019ea4 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 8019ea4:	b480      	push	{r7}
 8019ea6:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8019ea8:	231d      	movs	r3, #29
}
 8019eaa:	4618      	mov	r0, r3
 8019eac:	46bd      	mov	sp, r7
 8019eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb2:	4770      	bx	lr

08019eb4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8019eb4:	b480      	push	{r7}
 8019eb6:	b085      	sub	sp, #20
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	60f8      	str	r0, [r7, #12]
 8019ebc:	60b9      	str	r1, [r7, #8]
 8019ebe:	4613      	mov	r3, r2
 8019ec0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8019ec2:	4a07      	ldr	r2, [pc, #28]	; (8019ee0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	6013      	str	r3, [r2, #0]
        fonts = f;
 8019ec8:	4a06      	ldr	r2, [pc, #24]	; (8019ee4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8019eca:	68bb      	ldr	r3, [r7, #8]
 8019ecc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8019ece:	4a06      	ldr	r2, [pc, #24]	; (8019ee8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8019ed0:	88fb      	ldrh	r3, [r7, #6]
 8019ed2:	8013      	strh	r3, [r2, #0]
    }
 8019ed4:	bf00      	nop
 8019ed6:	3714      	adds	r7, #20
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ede:	4770      	bx	lr
 8019ee0:	2000a2f0 	.word	0x2000a2f0
 8019ee4:	2000a2f8 	.word	0x2000a2f8
 8019ee8:	2000a2f4 	.word	0x2000a2f4

08019eec <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8019eec:	b5b0      	push	{r4, r5, r7, lr}
 8019eee:	b082      	sub	sp, #8
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 8019ef6:	4a0d      	ldr	r2, [pc, #52]	; (8019f2c <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 8019ef8:	88fb      	ldrh	r3, [r7, #6]
 8019efa:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 8019efc:	4a0c      	ldr	r2, [pc, #48]	; (8019f30 <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 8019efe:	4b0d      	ldr	r3, [pc, #52]	; (8019f34 <_ZN8touchgfx5Texts11setLanguageEt+0x48>)
 8019f00:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 8019f02:	4b0a      	ldr	r3, [pc, #40]	; (8019f2c <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 8019f04:	881b      	ldrh	r3, [r3, #0]
 8019f06:	4618      	mov	r0, r3
 8019f08:	f000 f838 	bl	8019f7c <_ZN17TypedTextDatabase11getInstanceEt>
 8019f0c:	4604      	mov	r4, r0
 8019f0e:	f000 f84b 	bl	8019fa8 <_ZN17TypedTextDatabase8getFontsEv>
 8019f12:	4605      	mov	r5, r0
 8019f14:	f000 f840 	bl	8019f98 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8019f18:	4603      	mov	r3, r0
 8019f1a:	461a      	mov	r2, r3
 8019f1c:	4629      	mov	r1, r5
 8019f1e:	4620      	mov	r0, r4
 8019f20:	f7ff ffc8 	bl	8019eb4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 8019f24:	bf00      	nop
 8019f26:	3708      	adds	r7, #8
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8019f2c:	20008f40 	.word	0x20008f40
 8019f30:	900d018c 	.word	0x900d018c
 8019f34:	20008f44 	.word	0x20008f44

08019f38 <_Z41__static_initialization_and_destruction_0ii>:
 8019f38:	b480      	push	{r7}
 8019f3a:	b083      	sub	sp, #12
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	6078      	str	r0, [r7, #4]
 8019f40:	6039      	str	r1, [r7, #0]
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	2b01      	cmp	r3, #1
 8019f46:	d107      	bne.n	8019f58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f4e:	4293      	cmp	r3, r2
 8019f50:	d102      	bne.n	8019f58 <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 8019f52:	4a04      	ldr	r2, [pc, #16]	; (8019f64 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8019f54:	4b04      	ldr	r3, [pc, #16]	; (8019f68 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8019f56:	601a      	str	r2, [r3, #0]
}
 8019f58:	bf00      	nop
 8019f5a:	370c      	adds	r7, #12
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr
 8019f64:	900d018c 	.word	0x900d018c
 8019f68:	20008f44 	.word	0x20008f44

08019f6c <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	af00      	add	r7, sp, #0
 8019f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f74:	2001      	movs	r0, #1
 8019f76:	f7ff ffdf 	bl	8019f38 <_Z41__static_initialization_and_destruction_0ii>
 8019f7a:	bd80      	pop	{r7, pc}

08019f7c <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 8019f7c:	b480      	push	{r7}
 8019f7e:	b083      	sub	sp, #12
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	4603      	mov	r3, r0
 8019f84:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 8019f86:	4b03      	ldr	r3, [pc, #12]	; (8019f94 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 8019f88:	4618      	mov	r0, r3
 8019f8a:	370c      	adds	r7, #12
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f92:	4770      	bx	lr
 8019f94:	900d01bc 	.word	0x900d01bc

08019f98 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8019f98:	b480      	push	{r7}
 8019f9a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8019f9c:	230c      	movs	r3, #12
}
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa6:	4770      	bx	lr

08019fa8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 8019fa8:	b480      	push	{r7}
 8019faa:	af00      	add	r7, sp, #0
    return _fonts;
 8019fac:	4b02      	ldr	r3, [pc, #8]	; (8019fb8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb6:	4770      	bx	lr
 8019fb8:	20008f48 	.word	0x20008f48

08019fbc <_Z41__static_initialization_and_destruction_0ii>:
}
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b082      	sub	sp, #8
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6039      	str	r1, [r7, #0]
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	2b01      	cmp	r3, #1
 8019fca:	d113      	bne.n	8019ff4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fd2:	4293      	cmp	r3, r2
 8019fd4:	d10e      	bne.n	8019ff4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8019fd6:	f7fe f9e5 	bl	80183a4 <_Z23getFont_verdana_20_4bppv>
 8019fda:	4602      	mov	r2, r0
};
 8019fdc:	4b07      	ldr	r3, [pc, #28]	; (8019ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8019fde:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8019fe0:	f7fe fa1e 	bl	8018420 <_Z23getFont_verdana_40_4bppv>
 8019fe4:	4602      	mov	r2, r0
};
 8019fe6:	4b05      	ldr	r3, [pc, #20]	; (8019ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8019fe8:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_15_4bpp())
 8019fea:	f7fe f99d 	bl	8018328 <_Z23getFont_verdana_15_4bppv>
 8019fee:	4602      	mov	r2, r0
};
 8019ff0:	4b02      	ldr	r3, [pc, #8]	; (8019ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8019ff2:	609a      	str	r2, [r3, #8]
}
 8019ff4:	bf00      	nop
 8019ff6:	3708      	adds	r7, #8
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}
 8019ffc:	20008f48 	.word	0x20008f48

0801a000 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 801a000:	b580      	push	{r7, lr}
 801a002:	af00      	add	r7, sp, #0
 801a004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a008:	2001      	movs	r0, #1
 801a00a:	f7ff ffd7 	bl	8019fbc <_Z41__static_initialization_and_destruction_0ii>
 801a00e:	bd80      	pop	{r7, pc}

0801a010 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	4a05      	ldr	r2, [pc, #20]	; (801a030 <_ZN19FrontendApplicationD1Ev+0x20>)
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	601a      	str	r2, [r3, #0]
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	4618      	mov	r0, r3
 801a022:	f7fe fc83 	bl	801892c <_ZN23FrontendApplicationBaseD1Ev>
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	4618      	mov	r0, r3
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	080252f4 	.word	0x080252f4

0801a034 <_ZN19FrontendApplicationD0Ev>:
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f7ff ffe7 	bl	801a010 <_ZN19FrontendApplicationD1Ev>
 801a042:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801a046:	6878      	ldr	r0, [r7, #4]
 801a048:	f008 fc85 	bl	8022956 <_ZdlPvj>
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	4618      	mov	r0, r3
 801a050:	3708      	adds	r7, #8
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}

0801a056 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801a056:	b580      	push	{r7, lr}
 801a058:	b082      	sub	sp, #8
 801a05a:	af00      	add	r7, sp, #0
 801a05c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a064:	4618      	mov	r0, r3
 801a066:	f000 fb79 	bl	801a75c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	4618      	mov	r0, r3
 801a06e:	f004 fdc9 	bl	801ec04 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801a072:	bf00      	nop
 801a074:	3708      	adds	r7, #8
 801a076:	46bd      	mov	sp, r7
 801a078:	bd80      	pop	{r7, pc}
	...

0801a07c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b084      	sub	sp, #16
 801a080:	af00      	add	r7, sp, #0
 801a082:	60f8      	str	r0, [r7, #12]
 801a084:	60b9      	str	r1, [r7, #8]
 801a086:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	687a      	ldr	r2, [r7, #4]
 801a08c:	68b9      	ldr	r1, [r7, #8]
 801a08e:	4618      	mov	r0, r3
 801a090:	f7fe fcc6 	bl	8018a20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801a094:	4a03      	ldr	r2, [pc, #12]	; (801a0a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	601a      	str	r2, [r3, #0]
{
}
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	4618      	mov	r0, r3
 801a09e:	3710      	adds	r7, #16
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bd80      	pop	{r7, pc}
 801a0a4:	080252f4 	.word	0x080252f4

0801a0a8 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801a0a8:	b480      	push	{r7}
 801a0aa:	b083      	sub	sp, #12
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
    {
    }
 801a0b0:	bf00      	nop
 801a0b2:	370c      	adds	r7, #12
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ba:	4770      	bx	lr

0801a0bc <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801a0bc:	b480      	push	{r7}
 801a0be:	b083      	sub	sp, #12
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
    {
    }
 801a0c4:	bf00      	nop
 801a0c6:	370c      	adds	r7, #12
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr

0801a0d0 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801a0d0:	b480      	push	{r7}
 801a0d2:	b083      	sub	sp, #12
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
    {
 801a0d8:	4a04      	ldr	r2, [pc, #16]	; (801a0ec <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	601a      	str	r2, [r3, #0]
    }
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	370c      	adds	r7, #12
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ea:	4770      	bx	lr
 801a0ec:	080253a0 	.word	0x080253a0

0801a0f0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b082      	sub	sp, #8
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
    }
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7ff ffe9 	bl	801a0d0 <_ZN8touchgfx9PresenterD1Ev>
 801a0fe:	2104      	movs	r1, #4
 801a100:	6878      	ldr	r0, [r7, #4]
 801a102:	f008 fc28 	bl	8022956 <_ZdlPvj>
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	4618      	mov	r0, r3
 801a10a:	3708      	adds	r7, #8
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}

0801a110 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801a110:	b480      	push	{r7}
 801a112:	b083      	sub	sp, #12
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
    {
 801a118:	4a04      	ldr	r2, [pc, #16]	; (801a12c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	601a      	str	r2, [r3, #0]
    }
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	4618      	mov	r0, r3
 801a122:	370c      	adds	r7, #12
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr
 801a12c:	080253a0 	.word	0x080253a0

0801a130 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801a130:	b480      	push	{r7}
 801a132:	b083      	sub	sp, #12
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	4a06      	ldr	r2, [pc, #24]	; (801a154 <_ZN13ModelListenerC1Ev+0x24>)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	601a      	str	r2, [r3, #0]
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2200      	movs	r2, #0
 801a142:	605a      	str	r2, [r3, #4]
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	4618      	mov	r0, r3
 801a148:	370c      	adds	r7, #12
 801a14a:	46bd      	mov	sp, r7
 801a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a150:	4770      	bx	lr
 801a152:	bf00      	nop
 801a154:	08025388 	.word	0x08025388

0801a158 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801a158:	b480      	push	{r7}
 801a15a:	b083      	sub	sp, #12
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	4a04      	ldr	r2, [pc, #16]	; (801a174 <_ZN13ModelListenerD1Ev+0x1c>)
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	601a      	str	r2, [r3, #0]
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	4618      	mov	r0, r3
 801a16a:	370c      	adds	r7, #12
 801a16c:	46bd      	mov	sp, r7
 801a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a172:	4770      	bx	lr
 801a174:	08025388 	.word	0x08025388

0801a178 <_ZN13ModelListenerD0Ev>:
 801a178:	b580      	push	{r7, lr}
 801a17a:	b082      	sub	sp, #8
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	6878      	ldr	r0, [r7, #4]
 801a182:	f7ff ffe9 	bl	801a158 <_ZN13ModelListenerD1Ev>
 801a186:	2108      	movs	r1, #8
 801a188:	6878      	ldr	r0, [r7, #4]
 801a18a:	f008 fbe4 	bl	8022956 <_ZdlPvj>
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	4618      	mov	r0, r3
 801a192:	3708      	adds	r7, #8
 801a194:	46bd      	mov	sp, r7
 801a196:	bd80      	pop	{r7, pc}

0801a198 <_ZN13ModelListener22DisplayConnectedStatusEh>:
    virtual void DisplayConnectedStatus(uint8_t status) {}
 801a198:	b480      	push	{r7}
 801a19a:	b083      	sub	sp, #12
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	6078      	str	r0, [r7, #4]
 801a1a0:	460b      	mov	r3, r1
 801a1a2:	70fb      	strb	r3, [r7, #3]
 801a1a4:	bf00      	nop
 801a1a6:	370c      	adds	r7, #12
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ae:	4770      	bx	lr

0801a1b0 <_ZN13ModelListener19DisplayEncoderValueEiiii>:
    virtual void DisplayEncoderValue(int encoderValueFR ,int encoderValueFL ,int encoderValueRR ,int encoderValueRL) {}
 801a1b0:	b480      	push	{r7}
 801a1b2:	b085      	sub	sp, #20
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60f8      	str	r0, [r7, #12]
 801a1b8:	60b9      	str	r1, [r7, #8]
 801a1ba:	607a      	str	r2, [r7, #4]
 801a1bc:	603b      	str	r3, [r7, #0]
 801a1be:	bf00      	nop
 801a1c0:	3714      	adds	r7, #20
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c8:	4770      	bx	lr
	...

0801a1cc <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b082      	sub	sp, #8
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
 801a1d4:	4a09      	ldr	r2, [pc, #36]	; (801a1fc <_ZN13MainPresenterD1Ev+0x30>)
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	601a      	str	r2, [r3, #0]
 801a1da:	4a09      	ldr	r2, [pc, #36]	; (801a200 <_ZN13MainPresenterD1Ev+0x34>)
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	605a      	str	r2, [r3, #4]
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	3304      	adds	r3, #4
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7ff ffb7 	bl	801a158 <_ZN13ModelListenerD1Ev>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	f7ff ff6f 	bl	801a0d0 <_ZN8touchgfx9PresenterD1Ev>
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	3708      	adds	r7, #8
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	bd80      	pop	{r7, pc}
 801a1fc:	08025330 	.word	0x08025330
 801a200:	08025370 	.word	0x08025370

0801a204 <_ZThn4_N13MainPresenterD1Ev>:
 801a204:	f1a0 0004 	sub.w	r0, r0, #4
 801a208:	e7e0      	b.n	801a1cc <_ZN13MainPresenterD1Ev>
 801a20a:	bf00      	nop

0801a20c <_ZN13MainPresenterD0Ev>:
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b082      	sub	sp, #8
 801a210:	af00      	add	r7, sp, #0
 801a212:	6078      	str	r0, [r7, #4]
 801a214:	6878      	ldr	r0, [r7, #4]
 801a216:	f7ff ffd9 	bl	801a1cc <_ZN13MainPresenterD1Ev>
 801a21a:	2110      	movs	r1, #16
 801a21c:	6878      	ldr	r0, [r7, #4]
 801a21e:	f008 fb9a 	bl	8022956 <_ZdlPvj>
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	4618      	mov	r0, r3
 801a226:	3708      	adds	r7, #8
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <_ZThn4_N13MainPresenterD0Ev>:
 801a22c:	f1a0 0004 	sub.w	r0, r0, #4
 801a230:	e7ec      	b.n	801a20c <_ZN13MainPresenterD0Ev>
	...

0801a234 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 801a234:	b580      	push	{r7, lr}
 801a236:	b082      	sub	sp, #8
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
 801a23c:	6039      	str	r1, [r7, #0]
    : view(v)
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	4618      	mov	r0, r3
 801a242:	f7ff ff65 	bl	801a110 <_ZN8touchgfx9PresenterC1Ev>
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	3304      	adds	r3, #4
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7ff ff70 	bl	801a130 <_ZN13ModelListenerC1Ev>
 801a250:	4a06      	ldr	r2, [pc, #24]	; (801a26c <_ZN13MainPresenterC1ER8MainView+0x38>)
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	601a      	str	r2, [r3, #0]
 801a256:	4a06      	ldr	r2, [pc, #24]	; (801a270 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	605a      	str	r2, [r3, #4]
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	683a      	ldr	r2, [r7, #0]
 801a260:	60da      	str	r2, [r3, #12]
{
}
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	4618      	mov	r0, r3
 801a266:	3708      	adds	r7, #8
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}
 801a26c:	08025330 	.word	0x08025330
 801a270:	08025370 	.word	0x08025370

0801a274 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 801a274:	b480      	push	{r7}
 801a276:	b083      	sub	sp, #12
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]

}
 801a27c:	bf00      	nop
 801a27e:	370c      	adds	r7, #12
 801a280:	46bd      	mov	sp, r7
 801a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a286:	4770      	bx	lr

0801a288 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 801a288:	b480      	push	{r7}
 801a28a:	b083      	sub	sp, #12
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]

}
 801a290:	bf00      	nop
 801a292:	370c      	adds	r7, #12
 801a294:	46bd      	mov	sp, r7
 801a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29a:	4770      	bx	lr

0801a29c <_ZN13MainPresenter15SendUpPresenterEv>:

void MainPresenter::SendUpPresenter()
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b082      	sub	sp, #8
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
	model->buttonUpVirtualFunction();
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	689a      	ldr	r2, [r3, #8]
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	689b      	ldr	r3, [r3, #8]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	4610      	mov	r0, r2
 801a2b2:	4798      	blx	r3
}
 801a2b4:	bf00      	nop
 801a2b6:	3708      	adds	r7, #8
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bd80      	pop	{r7, pc}

0801a2bc <_ZN13MainPresenter17SendDownPresenterEv>:
void MainPresenter::SendDownPresenter()
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b082      	sub	sp, #8
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
	model->buttonDownVirtualFunction();
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	689a      	ldr	r2, [r3, #8]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	689b      	ldr	r3, [r3, #8]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	3304      	adds	r3, #4
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	4610      	mov	r0, r2
 801a2d4:	4798      	blx	r3
}
 801a2d6:	bf00      	nop
 801a2d8:	3708      	adds	r7, #8
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	bd80      	pop	{r7, pc}

0801a2de <_ZN13MainPresenter18SendRightPresenterEv>:
void MainPresenter::SendRightPresenter()
{
 801a2de:	b580      	push	{r7, lr}
 801a2e0:	b082      	sub	sp, #8
 801a2e2:	af00      	add	r7, sp, #0
 801a2e4:	6078      	str	r0, [r7, #4]
	model->buttonRightVirtualFunction();
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	689a      	ldr	r2, [r3, #8]
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	689b      	ldr	r3, [r3, #8]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	330c      	adds	r3, #12
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	4610      	mov	r0, r2
 801a2f6:	4798      	blx	r3
}
 801a2f8:	bf00      	nop
 801a2fa:	3708      	adds	r7, #8
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}

0801a300 <_ZN13MainPresenter17SendLeftPresenterEv>:
void MainPresenter::SendLeftPresenter()
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b082      	sub	sp, #8
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
	model->buttonLeftVirtualFunction();
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	689a      	ldr	r2, [r3, #8]
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	689b      	ldr	r3, [r3, #8]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	3308      	adds	r3, #8
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	4610      	mov	r0, r2
 801a318:	4798      	blx	r3
}
 801a31a:	bf00      	nop
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}

0801a322 <_ZN13MainPresenter26SendRightRotationPresenterEv>:
void MainPresenter::SendRightRotationPresenter()
{
 801a322:	b580      	push	{r7, lr}
 801a324:	b082      	sub	sp, #8
 801a326:	af00      	add	r7, sp, #0
 801a328:	6078      	str	r0, [r7, #4]
	model->buttonRightRotationVirtualFunction();
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	689a      	ldr	r2, [r3, #8]
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	689b      	ldr	r3, [r3, #8]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	3314      	adds	r3, #20
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	4610      	mov	r0, r2
 801a33a:	4798      	blx	r3
}
 801a33c:	bf00      	nop
 801a33e:	3708      	adds	r7, #8
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}

0801a344 <_ZN13MainPresenter25SendLeftRotationPresenterEv>:
void MainPresenter::SendLeftRotationPresenter()
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b082      	sub	sp, #8
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
	model->buttonLeftRotationVirtualFunction();
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	689a      	ldr	r2, [r3, #8]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	689b      	ldr	r3, [r3, #8]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	3318      	adds	r3, #24
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	4610      	mov	r0, r2
 801a35c:	4798      	blx	r3
}
 801a35e:	bf00      	nop
 801a360:	3708      	adds	r7, #8
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}

0801a366 <_ZN13MainPresenter17SendStopPresenterEv>:
void MainPresenter::SendStopPresenter()
{
 801a366:	b580      	push	{r7, lr}
 801a368:	b082      	sub	sp, #8
 801a36a:	af00      	add	r7, sp, #0
 801a36c:	6078      	str	r0, [r7, #4]
	model->buttonStopVirtualFunction();
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	689a      	ldr	r2, [r3, #8]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	689b      	ldr	r3, [r3, #8]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	3310      	adds	r3, #16
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	4610      	mov	r0, r2
 801a37e:	4798      	blx	r3
}
 801a380:	bf00      	nop
 801a382:	3708      	adds	r7, #8
 801a384:	46bd      	mov	sp, r7
 801a386:	bd80      	pop	{r7, pc}

0801a388 <_ZN13MainPresenter22SendSliderCurrentValueEi>:
void MainPresenter::SendSliderCurrentValue(int value)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	6039      	str	r1, [r7, #0]
	model->sliderVirtualFunction(value);
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	689a      	ldr	r2, [r3, #8]
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	689b      	ldr	r3, [r3, #8]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	331c      	adds	r3, #28
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	6839      	ldr	r1, [r7, #0]
 801a3a2:	4610      	mov	r0, r2
 801a3a4:	4798      	blx	r3
}
 801a3a6:	bf00      	nop
 801a3a8:	3708      	adds	r7, #8
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}

0801a3ae <_ZN13MainPresenter22DisplayConnectedStatusEh>:
void MainPresenter::DisplayConnectedStatus(uint8_t status)
{
 801a3ae:	b580      	push	{r7, lr}
 801a3b0:	b082      	sub	sp, #8
 801a3b2:	af00      	add	r7, sp, #0
 801a3b4:	6078      	str	r0, [r7, #4]
 801a3b6:	460b      	mov	r3, r1
 801a3b8:	70fb      	strb	r3, [r7, #3]
	view.updateConnectedStatus(status);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	68db      	ldr	r3, [r3, #12]
 801a3be:	78fa      	ldrb	r2, [r7, #3]
 801a3c0:	4611      	mov	r1, r2
 801a3c2:	4618      	mov	r0, r3
 801a3c4:	f000 f90c 	bl	801a5e0 <_ZN8MainView21updateConnectedStatusEh>
}
 801a3c8:	bf00      	nop
 801a3ca:	3708      	adds	r7, #8
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd80      	pop	{r7, pc}

0801a3d0 <_ZThn4_N13MainPresenter22DisplayConnectedStatusEh>:
    virtual void SendRightRotationPresenter();
    virtual void SendLeftRotationPresenter();
    virtual void SendStopPresenter();
    virtual void SendSliderCurrentValue(int value);

    void DisplayConnectedStatus(uint8_t status);
 801a3d0:	f1a0 0004 	sub.w	r0, r0, #4
 801a3d4:	f7ff bfeb 	b.w	801a3ae <_ZN13MainPresenter22DisplayConnectedStatusEh>

0801a3d8 <_ZN13MainPresenter19DisplayEncoderValueEiiii>:
void MainPresenter::DisplayEncoderValue(int encoderValueFR ,int encoderValueFL ,int encoderValueRR ,int encoderValueRL)
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b086      	sub	sp, #24
 801a3dc:	af02      	add	r7, sp, #8
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	607a      	str	r2, [r7, #4]
 801a3e4:	603b      	str	r3, [r7, #0]
	view.updateEncoderValue(encoderValueFR,encoderValueFL,encoderValueRR,encoderValueRL);
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	68d8      	ldr	r0, [r3, #12]
 801a3ea:	69bb      	ldr	r3, [r7, #24]
 801a3ec:	9300      	str	r3, [sp, #0]
 801a3ee:	683b      	ldr	r3, [r7, #0]
 801a3f0:	687a      	ldr	r2, [r7, #4]
 801a3f2:	68b9      	ldr	r1, [r7, #8]
 801a3f4:	f000 f932 	bl	801a65c <_ZN8MainView18updateEncoderValueEiiii>
}
 801a3f8:	bf00      	nop
 801a3fa:	3710      	adds	r7, #16
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <_ZThn4_N13MainPresenter19DisplayEncoderValueEiiii>:
    void DisplayEncoderValue(int encoderValueFR ,int encoderValueFL ,int encoderValueRR ,int encoderValueRL);
 801a400:	f1a0 0004 	sub.w	r0, r0, #4
 801a404:	f7ff bfe8 	b.w	801a3d8 <_ZN13MainPresenter19DisplayEncoderValueEiiii>

0801a408 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
 801a410:	4a05      	ldr	r2, [pc, #20]	; (801a428 <_ZN8MainViewD1Ev+0x20>)
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	601a      	str	r2, [r3, #0]
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	4618      	mov	r0, r3
 801a41a:	f7fe fdf1 	bl	8019000 <_ZN12MainViewBaseD1Ev>
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	4618      	mov	r0, r3
 801a422:	3708      	adds	r7, #8
 801a424:	46bd      	mov	sp, r7
 801a426:	bd80      	pop	{r7, pc}
 801a428:	080253b8 	.word	0x080253b8

0801a42c <_ZN8MainViewD0Ev>:
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
 801a434:	6878      	ldr	r0, [r7, #4]
 801a436:	f7ff ffe7 	bl	801a408 <_ZN8MainViewD1Ev>
 801a43a:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 801a43e:	6878      	ldr	r0, [r7, #4]
 801a440:	f008 fa89 	bl	8022956 <_ZdlPvj>
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	4618      	mov	r0, r3
 801a448:	3708      	adds	r7, #8
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}
	...

0801a450 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>



MainView::MainView()
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	4618      	mov	r0, r3
 801a45c:	f7fe feac 	bl	80191b8 <_ZN12MainViewBaseC1Ev>
 801a460:	4a03      	ldr	r2, [pc, #12]	; (801a470 <_ZN8MainViewC1Ev+0x20>)
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	601a      	str	r2, [r3, #0]
{

}
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	4618      	mov	r0, r3
 801a46a:	3708      	adds	r7, #8
 801a46c:	46bd      	mov	sp, r7
 801a46e:	bd80      	pop	{r7, pc}
 801a470:	080253b8 	.word	0x080253b8

0801a474 <_ZN8MainView11setupScreenEv>:

uint16_t tabON[]={'O','N','\0'};
uint16_t tabOFF[]={'O','F','F','\0'};
void MainView::setupScreen()
{
 801a474:	b580      	push	{r7, lr}
 801a476:	b082      	sub	sp, #8
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	4618      	mov	r0, r3
 801a480:	f7ff fb2e 	bl	8019ae0 <_ZN12MainViewBase11setupScreenEv>
}
 801a484:	bf00      	nop
 801a486:	3708      	adds	r7, #8
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}

0801a48c <_ZN8MainView14tearDownScreenEv>:
void MainView::tearDownScreen()
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b082      	sub	sp, #8
 801a490:	af00      	add	r7, sp, #0
 801a492:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	4618      	mov	r0, r3
 801a498:	f7fe fd42 	bl	8018f20 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801a49c:	bf00      	nop
 801a49e:	3708      	adds	r7, #8
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}

0801a4a4 <_ZN8MainView23buttonUpVirtualFunctionEv>:
void MainView::buttonUpVirtualFunction()
{
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b082      	sub	sp, #8
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	6078      	str	r0, [r7, #4]
	presenter->SendUpPresenter();
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	3310      	adds	r3, #16
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	4610      	mov	r0, r2
 801a4bc:	4798      	blx	r3
}
 801a4be:	bf00      	nop
 801a4c0:	3708      	adds	r7, #8
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd80      	pop	{r7, pc}

0801a4c6 <_ZN8MainView25buttonDownVirtualFunctionEv>:
void MainView::buttonDownVirtualFunction()
{
 801a4c6:	b580      	push	{r7, lr}
 801a4c8:	b082      	sub	sp, #8
 801a4ca:	af00      	add	r7, sp, #0
 801a4cc:	6078      	str	r0, [r7, #4]
	presenter->SendDownPresenter();
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	3314      	adds	r3, #20
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	4610      	mov	r0, r2
 801a4de:	4798      	blx	r3
}
 801a4e0:	bf00      	nop
 801a4e2:	3708      	adds	r7, #8
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}

0801a4e8 <_ZN8MainView25buttonLeftVirtualFunctionEv>:
void MainView::buttonLeftVirtualFunction()
{
 801a4e8:	b580      	push	{r7, lr}
 801a4ea:	b082      	sub	sp, #8
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
	presenter->SendLeftPresenter();
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	331c      	adds	r3, #28
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	4610      	mov	r0, r2
 801a500:	4798      	blx	r3
}
 801a502:	bf00      	nop
 801a504:	3708      	adds	r7, #8
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}

0801a50a <_ZN8MainView26buttonRightVirtualFunctionEv>:
void MainView::buttonRightVirtualFunction()
{
 801a50a:	b580      	push	{r7, lr}
 801a50c:	b082      	sub	sp, #8
 801a50e:	af00      	add	r7, sp, #0
 801a510:	6078      	str	r0, [r7, #4]
	presenter->SendRightPresenter();
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	3318      	adds	r3, #24
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	4610      	mov	r0, r2
 801a522:	4798      	blx	r3
}
 801a524:	bf00      	nop
 801a526:	3708      	adds	r7, #8
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd80      	pop	{r7, pc}

0801a52c <_ZN8MainView33buttonLeftRotationVirtualFunctionEv>:
void MainView::buttonLeftRotationVirtualFunction()
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b082      	sub	sp, #8
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
	presenter->SendLeftRotationPresenter();
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	3324      	adds	r3, #36	; 0x24
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	4610      	mov	r0, r2
 801a544:	4798      	blx	r3
}
 801a546:	bf00      	nop
 801a548:	3708      	adds	r7, #8
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}

0801a54e <_ZN8MainView34buttonRightRotationVirtualFunctionEv>:
void MainView::buttonRightRotationVirtualFunction()
{
 801a54e:	b580      	push	{r7, lr}
 801a550:	b082      	sub	sp, #8
 801a552:	af00      	add	r7, sp, #0
 801a554:	6078      	str	r0, [r7, #4]
	presenter->SendRightRotationPresenter();
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	3320      	adds	r3, #32
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	4610      	mov	r0, r2
 801a566:	4798      	blx	r3
}
 801a568:	bf00      	nop
 801a56a:	3708      	adds	r7, #8
 801a56c:	46bd      	mov	sp, r7
 801a56e:	bd80      	pop	{r7, pc}

0801a570 <_ZN8MainView25buttonStopVirtualFunctionEv>:
void MainView::buttonStopVirtualFunction()
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b082      	sub	sp, #8
 801a574:	af00      	add	r7, sp, #0
 801a576:	6078      	str	r0, [r7, #4]
	presenter->SendStopPresenter();
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	3328      	adds	r3, #40	; 0x28
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	4610      	mov	r0, r2
 801a588:	4798      	blx	r3
}
 801a58a:	bf00      	nop
 801a58c:	3708      	adds	r7, #8
 801a58e:	46bd      	mov	sp, r7
 801a590:	bd80      	pop	{r7, pc}
	...

0801a594 <_ZN8MainView21sliderVirtualFunctionEi>:
void MainView::sliderVirtualFunction(int value)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
 801a59c:	6039      	str	r1, [r7, #0]
	presenter->SendSliderCurrentValue(value);
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	332c      	adds	r3, #44	; 0x2c
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	6839      	ldr	r1, [r7, #0]
 801a5ae:	4610      	mov	r0, r2
 801a5b0:	4798      	blx	r3
	Unicode::snprintf(textAreaSliderBuffer,TEXTAREASLIDER_SIZE,"%d",value);
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f203 4064 	addw	r0, r3, #1124	; 0x464
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	4a08      	ldr	r2, [pc, #32]	; (801a5dc <_ZN8MainView21sliderVirtualFunctionEi+0x48>)
 801a5bc:	2105      	movs	r1, #5
 801a5be:	f005 ffeb 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaSlider.invalidate();
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f004 ff8a 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
	value = 0x0000;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	603b      	str	r3, [r7, #0]
}
 801a5d2:	bf00      	nop
 801a5d4:	3708      	adds	r7, #8
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	bd80      	pop	{r7, pc}
 801a5da:	bf00      	nop
 801a5dc:	08024568 	.word	0x08024568

0801a5e0 <_ZN8MainView21updateConnectedStatusEh>:

void MainView::updateConnectedStatus(uint8_t status)
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b082      	sub	sp, #8
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	460b      	mov	r3, r1
 801a5ea:	70fb      	strb	r3, [r7, #3]
	if(status == 1)
 801a5ec:	78fb      	ldrb	r3, [r7, #3]
 801a5ee:	2b01      	cmp	r3, #1
 801a5f0:	d113      	bne.n	801a61a <_ZN8MainView21updateConnectedStatusEh+0x3a>
	{
		Unicode::snprintf(textAreaBuffer,TEXTAREA_SIZE,"%s",tabON);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	f503 608a 	add.w	r0, r3, #1104	; 0x450
 801a5f8:	4b15      	ldr	r3, [pc, #84]	; (801a650 <_ZN8MainView21updateConnectedStatusEh+0x70>)
 801a5fa:	4a16      	ldr	r2, [pc, #88]	; (801a654 <_ZN8MainView21updateConnectedStatusEh+0x74>)
 801a5fc:	210a      	movs	r1, #10
 801a5fe:	f005 ffcb 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textArea.resizeToCurrentText();
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801a608:	4618      	mov	r0, r3
 801a60a:	f7f9 fe93 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		textArea.invalidate();
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801a614:	4618      	mov	r0, r3
 801a616:	f004 ff64 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
	if(status == 0)
 801a61a:	78fb      	ldrb	r3, [r7, #3]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d113      	bne.n	801a648 <_ZN8MainView21updateConnectedStatusEh+0x68>
	{
		Unicode::snprintf(textAreaBuffer,TEXTAREA_SIZE,"%s",tabOFF);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	f503 608a 	add.w	r0, r3, #1104	; 0x450
 801a626:	4b0c      	ldr	r3, [pc, #48]	; (801a658 <_ZN8MainView21updateConnectedStatusEh+0x78>)
 801a628:	4a0a      	ldr	r2, [pc, #40]	; (801a654 <_ZN8MainView21updateConnectedStatusEh+0x74>)
 801a62a:	210a      	movs	r1, #10
 801a62c:	f005 ffb4 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		textArea.resizeToCurrentText();
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801a636:	4618      	mov	r0, r3
 801a638:	f7f9 fe7c 	bl	8014334 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		textArea.invalidate();
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801a642:	4618      	mov	r0, r3
 801a644:	f004 ff4d 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

}
 801a648:	bf00      	nop
 801a64a:	3708      	adds	r7, #8
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd80      	pop	{r7, pc}
 801a650:	20000174 	.word	0x20000174
 801a654:	0802456c 	.word	0x0802456c
 801a658:	2000017c 	.word	0x2000017c

0801a65c <_ZN8MainView18updateEncoderValueEiiii>:
void MainView::updateEncoderValue(int encoderValueFR ,int encoderValueFL ,int encoderValueRR ,int encoderValueRL)
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b084      	sub	sp, #16
 801a660:	af00      	add	r7, sp, #0
 801a662:	60f8      	str	r0, [r7, #12]
 801a664:	60b9      	str	r1, [r7, #8]
 801a666:	607a      	str	r2, [r7, #4]
 801a668:	603b      	str	r3, [r7, #0]
	Unicode::snprintf(textAreaEncoderFRBuffer,TEXTAREAENCODERFR_SIZE,"%d",encoderValueFR);
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	f203 406e 	addw	r0, r3, #1134	; 0x46e
 801a670:	68bb      	ldr	r3, [r7, #8]
 801a672:	4a1c      	ldr	r2, [pc, #112]	; (801a6e4 <_ZN8MainView18updateEncoderValueEiiii+0x88>)
 801a674:	2106      	movs	r1, #6
 801a676:	f005 ff8f 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(textAreaEncoderFLBuffer,TEXTAREAENCODERFL_SIZE,"%d",encoderValueFL);
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	f203 407a 	addw	r0, r3, #1146	; 0x47a
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	4a18      	ldr	r2, [pc, #96]	; (801a6e4 <_ZN8MainView18updateEncoderValueEiiii+0x88>)
 801a684:	2106      	movs	r1, #6
 801a686:	f005 ff87 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(textAreaEncoderRRBuffer,TEXTAREAENCODERRR_SIZE,"%d",encoderValueRR);
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	f203 4092 	addw	r0, r3, #1170	; 0x492
 801a690:	683b      	ldr	r3, [r7, #0]
 801a692:	4a14      	ldr	r2, [pc, #80]	; (801a6e4 <_ZN8MainView18updateEncoderValueEiiii+0x88>)
 801a694:	2106      	movs	r1, #6
 801a696:	f005 ff7f 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(textAreaEncoderRLBuffer,TEXTAREAENCODERRL_SIZE,"%d",encoderValueRL);
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	f203 4086 	addw	r0, r3, #1158	; 0x486
 801a6a0:	69bb      	ldr	r3, [r7, #24]
 801a6a2:	4a10      	ldr	r2, [pc, #64]	; (801a6e4 <_ZN8MainView18updateEncoderValueEiiii+0x88>)
 801a6a4:	2106      	movs	r1, #6
 801a6a6:	f005 ff77 	bl	8020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaEncoderFR.invalidate();
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	f503 7351 	add.w	r3, r3, #836	; 0x344
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	f004 ff16 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaEncoderFL.invalidate();
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f004 ff10 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaEncoderRR.invalidate();
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	f004 ff0a 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaEncoderRL.invalidate();
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	f004 ff04 	bl	801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801a6da:	bf00      	nop
 801a6dc:	3710      	adds	r7, #16
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	08024568 	.word	0x08024568

0801a6e8 <_ZN5ModelC1Ev>:
xQueueHandle QueueSendSliderValue;
xQueueHandle QueueReceive;
xQueueHandle QueueReceiveEncoderValue;
}

Model::Model() : modelListener(0)
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b082      	sub	sp, #8
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
 801a6f0:	4a15      	ldr	r2, [pc, #84]	; (801a748 <_ZN5ModelC1Ev+0x60>)
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	601a      	str	r2, [r3, #0]
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	2200      	movs	r2, #0
 801a6fa:	605a      	str	r2, [r3, #4]
{
	QueueSend = xQueueCreate(1,sizeof(uint8_t));
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	2101      	movs	r1, #1
 801a700:	2001      	movs	r0, #1
 801a702:	f7fa fb9f 	bl	8014e44 <xQueueGenericCreate>
 801a706:	4602      	mov	r2, r0
 801a708:	4b10      	ldr	r3, [pc, #64]	; (801a74c <_ZN5ModelC1Ev+0x64>)
 801a70a:	601a      	str	r2, [r3, #0]
	QueueSendSliderValue = xQueueCreate(1,sizeof(int));
 801a70c:	2200      	movs	r2, #0
 801a70e:	2104      	movs	r1, #4
 801a710:	2001      	movs	r0, #1
 801a712:	f7fa fb97 	bl	8014e44 <xQueueGenericCreate>
 801a716:	4602      	mov	r2, r0
 801a718:	4b0d      	ldr	r3, [pc, #52]	; (801a750 <_ZN5ModelC1Ev+0x68>)
 801a71a:	601a      	str	r2, [r3, #0]
	QueueReceive = xQueueCreate(1,sizeof(uint8_t));
 801a71c:	2200      	movs	r2, #0
 801a71e:	2101      	movs	r1, #1
 801a720:	2001      	movs	r0, #1
 801a722:	f7fa fb8f 	bl	8014e44 <xQueueGenericCreate>
 801a726:	4602      	mov	r2, r0
 801a728:	4b0a      	ldr	r3, [pc, #40]	; (801a754 <_ZN5ModelC1Ev+0x6c>)
 801a72a:	601a      	str	r2, [r3, #0]
	QueueReceiveEncoderValue = xQueueCreate(1,sizeof(int)*4);
 801a72c:	2200      	movs	r2, #0
 801a72e:	2110      	movs	r1, #16
 801a730:	2001      	movs	r0, #1
 801a732:	f7fa fb87 	bl	8014e44 <xQueueGenericCreate>
 801a736:	4602      	mov	r2, r0
 801a738:	4b07      	ldr	r3, [pc, #28]	; (801a758 <_ZN5ModelC1Ev+0x70>)
 801a73a:	601a      	str	r2, [r3, #0]
}
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	4618      	mov	r0, r3
 801a740:	3708      	adds	r7, #8
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}
 801a746:	bf00      	nop
 801a748:	0802540c 	.word	0x0802540c
 801a74c:	20008f70 	.word	0x20008f70
 801a750:	20008f74 	.word	0x20008f74
 801a754:	20008f78 	.word	0x20008f78
 801a758:	20008f7c 	.word	0x20008f7c

0801a75c <_ZN5Model4tickEv>:

void Model::tick()
{
 801a75c:	b5b0      	push	{r4, r5, r7, lr}
 801a75e:	b084      	sub	sp, #16
 801a760:	af02      	add	r7, sp, #8
 801a762:	6078      	str	r0, [r7, #4]

		if(xQueueReceive(QueueReceive, &status, 0) == pdTRUE)
 801a764:	4b42      	ldr	r3, [pc, #264]	; (801a870 <_ZN5Model4tickEv+0x114>)
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	2200      	movs	r2, #0
 801a76a:	4942      	ldr	r1, [pc, #264]	; (801a874 <_ZN5Model4tickEv+0x118>)
 801a76c:	4618      	mov	r0, r3
 801a76e:	f7fa fdf7 	bl	8015360 <xQueueReceive>
 801a772:	4603      	mov	r3, r0
 801a774:	2b01      	cmp	r3, #1
 801a776:	bf0c      	ite	eq
 801a778:	2301      	moveq	r3, #1
 801a77a:	2300      	movne	r3, #0
 801a77c:	b2db      	uxtb	r3, r3
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d002      	beq.n	801a788 <_ZN5Model4tickEv+0x2c>
		{
			connected = true;
 801a782:	4b3d      	ldr	r3, [pc, #244]	; (801a878 <_ZN5Model4tickEv+0x11c>)
 801a784:	2201      	movs	r2, #1
 801a786:	701a      	strb	r2, [r3, #0]
		}
		if(timer % (24*2) == 0 && connected == true)
 801a788:	4b3c      	ldr	r3, [pc, #240]	; (801a87c <_ZN5Model4tickEv+0x120>)
 801a78a:	6819      	ldr	r1, [r3, #0]
 801a78c:	4b3c      	ldr	r3, [pc, #240]	; (801a880 <_ZN5Model4tickEv+0x124>)
 801a78e:	fb83 2301 	smull	r2, r3, r3, r1
 801a792:	10da      	asrs	r2, r3, #3
 801a794:	17cb      	asrs	r3, r1, #31
 801a796:	1ad2      	subs	r2, r2, r3
 801a798:	4613      	mov	r3, r2
 801a79a:	005b      	lsls	r3, r3, #1
 801a79c:	4413      	add	r3, r2
 801a79e:	011b      	lsls	r3, r3, #4
 801a7a0:	1aca      	subs	r2, r1, r3
 801a7a2:	2a00      	cmp	r2, #0
 801a7a4:	d115      	bne.n	801a7d2 <_ZN5Model4tickEv+0x76>
 801a7a6:	4b34      	ldr	r3, [pc, #208]	; (801a878 <_ZN5Model4tickEv+0x11c>)
 801a7a8:	781b      	ldrb	r3, [r3, #0]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d011      	beq.n	801a7d2 <_ZN5Model4tickEv+0x76>
		{
			modelListener->DisplayConnectedStatus(status);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	6858      	ldr	r0, [r3, #4]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	685b      	ldr	r3, [r3, #4]
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	3308      	adds	r3, #8
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	4a2d      	ldr	r2, [pc, #180]	; (801a874 <_ZN5Model4tickEv+0x118>)
 801a7be:	7812      	ldrb	r2, [r2, #0]
 801a7c0:	4611      	mov	r1, r2
 801a7c2:	4798      	blx	r3
			status = 0;
 801a7c4:	4b2b      	ldr	r3, [pc, #172]	; (801a874 <_ZN5Model4tickEv+0x118>)
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	701a      	strb	r2, [r3, #0]
			connected = false;
 801a7ca:	4b2b      	ldr	r3, [pc, #172]	; (801a878 <_ZN5Model4tickEv+0x11c>)
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	701a      	strb	r2, [r3, #0]
 801a7d0:	e023      	b.n	801a81a <_ZN5Model4tickEv+0xbe>
		}
		else if(timer % (24*2) == 0 && connected == false)
 801a7d2:	4b2a      	ldr	r3, [pc, #168]	; (801a87c <_ZN5Model4tickEv+0x120>)
 801a7d4:	6819      	ldr	r1, [r3, #0]
 801a7d6:	4b2a      	ldr	r3, [pc, #168]	; (801a880 <_ZN5Model4tickEv+0x124>)
 801a7d8:	fb83 2301 	smull	r2, r3, r3, r1
 801a7dc:	10da      	asrs	r2, r3, #3
 801a7de:	17cb      	asrs	r3, r1, #31
 801a7e0:	1ad2      	subs	r2, r2, r3
 801a7e2:	4613      	mov	r3, r2
 801a7e4:	005b      	lsls	r3, r3, #1
 801a7e6:	4413      	add	r3, r2
 801a7e8:	011b      	lsls	r3, r3, #4
 801a7ea:	1aca      	subs	r2, r1, r3
 801a7ec:	2a00      	cmp	r2, #0
 801a7ee:	d114      	bne.n	801a81a <_ZN5Model4tickEv+0xbe>
 801a7f0:	4b21      	ldr	r3, [pc, #132]	; (801a878 <_ZN5Model4tickEv+0x11c>)
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	f083 0301 	eor.w	r3, r3, #1
 801a7f8:	b2db      	uxtb	r3, r3
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d00d      	beq.n	801a81a <_ZN5Model4tickEv+0xbe>
		{
			modelListener->DisplayConnectedStatus(status);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	6858      	ldr	r0, [r3, #4]
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	685b      	ldr	r3, [r3, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	3308      	adds	r3, #8
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	4a19      	ldr	r2, [pc, #100]	; (801a874 <_ZN5Model4tickEv+0x118>)
 801a80e:	7812      	ldrb	r2, [r2, #0]
 801a810:	4611      	mov	r1, r2
 801a812:	4798      	blx	r3
			connected = false;
 801a814:	4b18      	ldr	r3, [pc, #96]	; (801a878 <_ZN5Model4tickEv+0x11c>)
 801a816:	2200      	movs	r2, #0
 801a818:	701a      	strb	r2, [r3, #0]
		}

	if(xQueueReceive(QueueReceiveEncoderValue, encoderValueResponse, 0) == pdTRUE)
 801a81a:	4b1a      	ldr	r3, [pc, #104]	; (801a884 <_ZN5Model4tickEv+0x128>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	2200      	movs	r2, #0
 801a820:	4919      	ldr	r1, [pc, #100]	; (801a888 <_ZN5Model4tickEv+0x12c>)
 801a822:	4618      	mov	r0, r3
 801a824:	f7fa fd9c 	bl	8015360 <xQueueReceive>
 801a828:	4603      	mov	r3, r0
 801a82a:	2b01      	cmp	r3, #1
 801a82c:	bf0c      	ite	eq
 801a82e:	2301      	moveq	r3, #1
 801a830:	2300      	movne	r3, #0
 801a832:	b2db      	uxtb	r3, r3
 801a834:	2b00      	cmp	r3, #0
 801a836:	d011      	beq.n	801a85c <_ZN5Model4tickEv+0x100>
	{
		modelListener->DisplayEncoderValue(encoderValueResponse[0],encoderValueResponse[1],encoderValueResponse[2],encoderValueResponse[3]);
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	6858      	ldr	r0, [r3, #4]
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	330c      	adds	r3, #12
 801a844:	681c      	ldr	r4, [r3, #0]
 801a846:	4b10      	ldr	r3, [pc, #64]	; (801a888 <_ZN5Model4tickEv+0x12c>)
 801a848:	6819      	ldr	r1, [r3, #0]
 801a84a:	4b0f      	ldr	r3, [pc, #60]	; (801a888 <_ZN5Model4tickEv+0x12c>)
 801a84c:	685a      	ldr	r2, [r3, #4]
 801a84e:	4b0e      	ldr	r3, [pc, #56]	; (801a888 <_ZN5Model4tickEv+0x12c>)
 801a850:	689d      	ldr	r5, [r3, #8]
 801a852:	4b0d      	ldr	r3, [pc, #52]	; (801a888 <_ZN5Model4tickEv+0x12c>)
 801a854:	68db      	ldr	r3, [r3, #12]
 801a856:	9300      	str	r3, [sp, #0]
 801a858:	462b      	mov	r3, r5
 801a85a:	47a0      	blx	r4
	}

timer++;
 801a85c:	4b07      	ldr	r3, [pc, #28]	; (801a87c <_ZN5Model4tickEv+0x120>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	3301      	adds	r3, #1
 801a862:	4a06      	ldr	r2, [pc, #24]	; (801a87c <_ZN5Model4tickEv+0x120>)
 801a864:	6013      	str	r3, [r2, #0]
}
 801a866:	bf00      	nop
 801a868:	3708      	adds	r7, #8
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bdb0      	pop	{r4, r5, r7, pc}
 801a86e:	bf00      	nop
 801a870:	20008f78 	.word	0x20008f78
 801a874:	20008f55 	.word	0x20008f55
 801a878:	20008f6c 	.word	0x20008f6c
 801a87c:	20008f68 	.word	0x20008f68
 801a880:	2aaaaaab 	.word	0x2aaaaaab
 801a884:	20008f7c 	.word	0x20008f7c
 801a888:	20008f58 	.word	0x20008f58

0801a88c <_ZN5Model23buttonUpVirtualFunctionEv>:




void Model::buttonUpVirtualFunction()
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b082      	sub	sp, #8
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
	sterowanie = 1;
 801a894:	4b06      	ldr	r3, [pc, #24]	; (801a8b0 <_ZN5Model23buttonUpVirtualFunctionEv+0x24>)
 801a896:	2201      	movs	r2, #1
 801a898:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a89a:	4b06      	ldr	r3, [pc, #24]	; (801a8b4 <_ZN5Model23buttonUpVirtualFunctionEv+0x28>)
 801a89c:	6818      	ldr	r0, [r3, #0]
 801a89e:	2300      	movs	r3, #0
 801a8a0:	2200      	movs	r2, #0
 801a8a2:	4903      	ldr	r1, [pc, #12]	; (801a8b0 <_ZN5Model23buttonUpVirtualFunctionEv+0x24>)
 801a8a4:	f7fa fb2c 	bl	8014f00 <xQueueGenericSend>
}
 801a8a8:	bf00      	nop
 801a8aa:	3708      	adds	r7, #8
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bd80      	pop	{r7, pc}
 801a8b0:	20008f54 	.word	0x20008f54
 801a8b4:	20008f70 	.word	0x20008f70

0801a8b8 <_ZN5Model25buttonDownVirtualFunctionEv>:
void Model::buttonDownVirtualFunction()
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b082      	sub	sp, #8
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
	sterowanie = 2;
 801a8c0:	4b06      	ldr	r3, [pc, #24]	; (801a8dc <_ZN5Model25buttonDownVirtualFunctionEv+0x24>)
 801a8c2:	2202      	movs	r2, #2
 801a8c4:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a8c6:	4b06      	ldr	r3, [pc, #24]	; (801a8e0 <_ZN5Model25buttonDownVirtualFunctionEv+0x28>)
 801a8c8:	6818      	ldr	r0, [r3, #0]
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	4903      	ldr	r1, [pc, #12]	; (801a8dc <_ZN5Model25buttonDownVirtualFunctionEv+0x24>)
 801a8d0:	f7fa fb16 	bl	8014f00 <xQueueGenericSend>
}
 801a8d4:	bf00      	nop
 801a8d6:	3708      	adds	r7, #8
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}
 801a8dc:	20008f54 	.word	0x20008f54
 801a8e0:	20008f70 	.word	0x20008f70

0801a8e4 <_ZN5Model26buttonRightVirtualFunctionEv>:
void Model::buttonRightVirtualFunction()
{
 801a8e4:	b580      	push	{r7, lr}
 801a8e6:	b082      	sub	sp, #8
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
	sterowanie = 3;
 801a8ec:	4b06      	ldr	r3, [pc, #24]	; (801a908 <_ZN5Model26buttonRightVirtualFunctionEv+0x24>)
 801a8ee:	2203      	movs	r2, #3
 801a8f0:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a8f2:	4b06      	ldr	r3, [pc, #24]	; (801a90c <_ZN5Model26buttonRightVirtualFunctionEv+0x28>)
 801a8f4:	6818      	ldr	r0, [r3, #0]
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	2200      	movs	r2, #0
 801a8fa:	4903      	ldr	r1, [pc, #12]	; (801a908 <_ZN5Model26buttonRightVirtualFunctionEv+0x24>)
 801a8fc:	f7fa fb00 	bl	8014f00 <xQueueGenericSend>
}
 801a900:	bf00      	nop
 801a902:	3708      	adds	r7, #8
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}
 801a908:	20008f54 	.word	0x20008f54
 801a90c:	20008f70 	.word	0x20008f70

0801a910 <_ZN5Model25buttonLeftVirtualFunctionEv>:
void Model::buttonLeftVirtualFunction()
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
	sterowanie = 4;
 801a918:	4b06      	ldr	r3, [pc, #24]	; (801a934 <_ZN5Model25buttonLeftVirtualFunctionEv+0x24>)
 801a91a:	2204      	movs	r2, #4
 801a91c:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a91e:	4b06      	ldr	r3, [pc, #24]	; (801a938 <_ZN5Model25buttonLeftVirtualFunctionEv+0x28>)
 801a920:	6818      	ldr	r0, [r3, #0]
 801a922:	2300      	movs	r3, #0
 801a924:	2200      	movs	r2, #0
 801a926:	4903      	ldr	r1, [pc, #12]	; (801a934 <_ZN5Model25buttonLeftVirtualFunctionEv+0x24>)
 801a928:	f7fa faea 	bl	8014f00 <xQueueGenericSend>
}
 801a92c:	bf00      	nop
 801a92e:	3708      	adds	r7, #8
 801a930:	46bd      	mov	sp, r7
 801a932:	bd80      	pop	{r7, pc}
 801a934:	20008f54 	.word	0x20008f54
 801a938:	20008f70 	.word	0x20008f70

0801a93c <_ZN5Model34buttonRightRotationVirtualFunctionEv>:
void Model::buttonRightRotationVirtualFunction()
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b082      	sub	sp, #8
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
	sterowanie = 5;
 801a944:	4b06      	ldr	r3, [pc, #24]	; (801a960 <_ZN5Model34buttonRightRotationVirtualFunctionEv+0x24>)
 801a946:	2205      	movs	r2, #5
 801a948:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a94a:	4b06      	ldr	r3, [pc, #24]	; (801a964 <_ZN5Model34buttonRightRotationVirtualFunctionEv+0x28>)
 801a94c:	6818      	ldr	r0, [r3, #0]
 801a94e:	2300      	movs	r3, #0
 801a950:	2200      	movs	r2, #0
 801a952:	4903      	ldr	r1, [pc, #12]	; (801a960 <_ZN5Model34buttonRightRotationVirtualFunctionEv+0x24>)
 801a954:	f7fa fad4 	bl	8014f00 <xQueueGenericSend>
}
 801a958:	bf00      	nop
 801a95a:	3708      	adds	r7, #8
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	20008f54 	.word	0x20008f54
 801a964:	20008f70 	.word	0x20008f70

0801a968 <_ZN5Model33buttonLeftRotationVirtualFunctionEv>:
void Model::buttonLeftRotationVirtualFunction()
{
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
	sterowanie = 6;
 801a970:	4b06      	ldr	r3, [pc, #24]	; (801a98c <_ZN5Model33buttonLeftRotationVirtualFunctionEv+0x24>)
 801a972:	2206      	movs	r2, #6
 801a974:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a976:	4b06      	ldr	r3, [pc, #24]	; (801a990 <_ZN5Model33buttonLeftRotationVirtualFunctionEv+0x28>)
 801a978:	6818      	ldr	r0, [r3, #0]
 801a97a:	2300      	movs	r3, #0
 801a97c:	2200      	movs	r2, #0
 801a97e:	4903      	ldr	r1, [pc, #12]	; (801a98c <_ZN5Model33buttonLeftRotationVirtualFunctionEv+0x24>)
 801a980:	f7fa fabe 	bl	8014f00 <xQueueGenericSend>
}
 801a984:	bf00      	nop
 801a986:	3708      	adds	r7, #8
 801a988:	46bd      	mov	sp, r7
 801a98a:	bd80      	pop	{r7, pc}
 801a98c:	20008f54 	.word	0x20008f54
 801a990:	20008f70 	.word	0x20008f70

0801a994 <_ZN5Model25buttonStopVirtualFunctionEv>:
void Model::buttonStopVirtualFunction()
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b082      	sub	sp, #8
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
	sterowanie = 7;
 801a99c:	4b06      	ldr	r3, [pc, #24]	; (801a9b8 <_ZN5Model25buttonStopVirtualFunctionEv+0x24>)
 801a99e:	2207      	movs	r2, #7
 801a9a0:	701a      	strb	r2, [r3, #0]
	xQueueSend(QueueSend,&sterowanie,0);
 801a9a2:	4b06      	ldr	r3, [pc, #24]	; (801a9bc <_ZN5Model25buttonStopVirtualFunctionEv+0x28>)
 801a9a4:	6818      	ldr	r0, [r3, #0]
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	4903      	ldr	r1, [pc, #12]	; (801a9b8 <_ZN5Model25buttonStopVirtualFunctionEv+0x24>)
 801a9ac:	f7fa faa8 	bl	8014f00 <xQueueGenericSend>
}
 801a9b0:	bf00      	nop
 801a9b2:	3708      	adds	r7, #8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}
 801a9b8:	20008f54 	.word	0x20008f54
 801a9bc:	20008f70 	.word	0x20008f70

0801a9c0 <_ZN5Model21sliderVirtualFunctionEi>:
void Model::sliderVirtualFunction(int value)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]
 801a9c8:	6039      	str	r1, [r7, #0]
	xQueueSend(QueueSendSliderValue,&value,0);
 801a9ca:	4b05      	ldr	r3, [pc, #20]	; (801a9e0 <_ZN5Model21sliderVirtualFunctionEi+0x20>)
 801a9cc:	6818      	ldr	r0, [r3, #0]
 801a9ce:	4639      	mov	r1, r7
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	f7fa fa94 	bl	8014f00 <xQueueGenericSend>
}
 801a9d8:	bf00      	nop
 801a9da:	3708      	adds	r7, #8
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	bd80      	pop	{r7, pc}
 801a9e0:	20008f74 	.word	0x20008f74

0801a9e4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 801a9e4:	b480      	push	{r7}
 801a9e6:	b083      	sub	sp, #12
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	801a      	strh	r2, [r3, #0]
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	805a      	strh	r2, [r3, #2]
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	809a      	strh	r2, [r3, #4]
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	2200      	movs	r2, #0
 801aa02:	80da      	strh	r2, [r3, #6]
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	2200      	movs	r2, #0
 801aa08:	811a      	strh	r2, [r3, #8]
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	815a      	strh	r2, [r3, #10]
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2200      	movs	r2, #0
 801aa14:	819a      	strh	r2, [r3, #12]
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	2200      	movs	r2, #0
 801aa1a:	739a      	strb	r2, [r3, #14]
        {
        }
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	4618      	mov	r0, r3
 801aa20:	370c      	adds	r7, #12
 801aa22:	46bd      	mov	sp, r7
 801aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa28:	4770      	bx	lr

0801aa2a <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801aa2a:	b580      	push	{r7, lr}
 801aa2c:	b082      	sub	sp, #8
 801aa2e:	af00      	add	r7, sp, #0
 801aa30:	6078      	str	r0, [r7, #4]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	4618      	mov	r0, r3
 801aa36:	f7ff ffd5 	bl	801a9e4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	611a      	str	r2, [r3, #16]
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	2200      	movs	r2, #0
 801aa44:	829a      	strh	r2, [r3, #20]
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	4618      	mov	r0, r3
 801aa4a:	3708      	adds	r7, #8
 801aa4c:	46bd      	mov	sp, r7
 801aa4e:	bd80      	pop	{r7, pc}

0801aa50 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 801aa50:	b480      	push	{r7}
 801aa52:	b083      	sub	sp, #12
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 801aa58:	4a07      	ldr	r2, [pc, #28]	; (801aa78 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	601a      	str	r2, [r3, #0]
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2200      	movs	r2, #0
 801aa62:	605a      	str	r2, [r3, #4]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2200      	movs	r2, #0
 801aa68:	609a      	str	r2, [r3, #8]
    {
    }
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	370c      	adds	r7, #12
 801aa70:	46bd      	mov	sp, r7
 801aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa76:	4770      	bx	lr
 801aa78:	0802553c 	.word	0x0802553c

0801aa7c <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 801aa7c:	b480      	push	{r7}
 801aa7e:	b083      	sub	sp, #12
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	4a04      	ldr	r2, [pc, #16]	; (801aa98 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	601a      	str	r2, [r3, #0]
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	370c      	adds	r7, #12
 801aa90:	46bd      	mov	sp, r7
 801aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa96:	4770      	bx	lr
 801aa98:	0802553c 	.word	0x0802553c

0801aa9c <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b082      	sub	sp, #8
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	6878      	ldr	r0, [r7, #4]
 801aaa6:	f7ff ffe9 	bl	801aa7c <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801aaaa:	210c      	movs	r1, #12
 801aaac:	6878      	ldr	r0, [r7, #4]
 801aaae:	f007 ff52 	bl	8022956 <_ZdlPvj>
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	4618      	mov	r0, r3
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b084      	sub	sp, #16
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	460b      	mov	r3, r1
 801aac6:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 801aac8:	78fb      	ldrb	r3, [r7, #3]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d011      	beq.n	801aaf2 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	3310      	adds	r3, #16
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	6878      	ldr	r0, [r7, #4]
 801aad8:	4798      	blx	r3
 801aada:	4602      	mov	r2, r0
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	689b      	ldr	r3, [r3, #8]
 801aae0:	1ad3      	subs	r3, r2, r3
 801aae2:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	685a      	ldr	r2, [r3, #4]
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	441a      	add	r2, r3
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 801aaf0:	e008      	b.n	801ab04 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	3310      	adds	r3, #16
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	6878      	ldr	r0, [r7, #4]
 801aafc:	4798      	blx	r3
 801aafe:	4602      	mov	r2, r0
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	609a      	str	r2, [r3, #8]
    }
 801ab04:	bf00      	nop
 801ab06:	3710      	adds	r7, #16
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}

0801ab0c <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 801ab0c:	b480      	push	{r7}
 801ab0e:	b083      	sub	sp, #12
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	685b      	ldr	r3, [r3, #4]
    }
 801ab18:	4618      	mov	r0, r3
 801ab1a:	370c      	adds	r7, #12
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab22:	4770      	bx	lr

0801ab24 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 801ab24:	b480      	push	{r7}
 801ab26:	b083      	sub	sp, #12
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
 801ab2c:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	683a      	ldr	r2, [r7, #0]
 801ab32:	605a      	str	r2, [r3, #4]
    }
 801ab34:	bf00      	nop
 801ab36:	370c      	adds	r7, #12
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3e:	4770      	bx	lr

0801ab40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b084      	sub	sp, #16
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	60f8      	str	r0, [r7, #12]
 801ab48:	60b9      	str	r1, [r7, #8]
 801ab4a:	607a      	str	r2, [r7, #4]
 801ab4c:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801ab4e:	4a3e      	ldr	r2, [pc, #248]	; (801ac48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x108>)
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	601a      	str	r2, [r3, #0]
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	68ba      	ldr	r2, [r7, #8]
 801ab58:	605a      	str	r2, [r3, #4]
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	687a      	ldr	r2, [r7, #4]
 801ab5e:	609a      	str	r2, [r3, #8]
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	683a      	ldr	r2, [r7, #0]
 801ab64:	60da      	str	r2, [r3, #12]
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	611a      	str	r2, [r3, #16]
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	2200      	movs	r2, #0
 801ab70:	615a      	str	r2, [r3, #20]
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	3318      	adds	r3, #24
 801ab76:	4618      	mov	r0, r3
 801ab78:	f7ff ff57 	bl	801aa2a <_ZN8touchgfx8GesturesC1Ev>
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	2200      	movs	r2, #0
 801ab80:	635a      	str	r2, [r3, #52]	; 0x34
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	2200      	movs	r2, #0
 801ab86:	639a      	str	r2, [r3, #56]	; 0x38
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	63da      	str	r2, [r3, #60]	; 0x3c
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	2200      	movs	r2, #0
 801ab92:	641a      	str	r2, [r3, #64]	; 0x40
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	2200      	movs	r2, #0
 801ab98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2201      	movs	r2, #1
 801aba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	2201      	movs	r2, #1
 801aba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	2201      	movs	r2, #1
 801abb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	2200      	movs	r2, #0
 801abb8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2200      	movs	r2, #0
 801abc0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	2201      	movs	r2, #1
 801abc8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	2200      	movs	r2, #0
 801abd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	2200      	movs	r2, #0
 801abd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2200      	movs	r2, #0
 801abe0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	2200      	movs	r2, #0
 801abe8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2200      	movs	r2, #0
 801abf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	2200      	movs	r2, #0
 801abf8:	661a      	str	r2, [r3, #96]	; 0x60
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	2200      	movs	r2, #0
 801abfe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 801ac02:	4a12      	ldr	r2, [pc, #72]	; (801ac4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 801ac08:	4a11      	ldr	r2, [pc, #68]	; (801ac50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 801ac0a:	8b3b      	ldrh	r3, [r7, #24]
 801ac0c:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801ac0e:	4a11      	ldr	r2, [pc, #68]	; (801ac54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 801ac10:	8bbb      	ldrh	r3, [r7, #28]
 801ac12:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801ac14:	4b10      	ldr	r3, [pc, #64]	; (801ac58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 801ac16:	2200      	movs	r2, #0
 801ac18:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801ac1a:	4b0d      	ldr	r3, [pc, #52]	; (801ac50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 801ac1c:	881a      	ldrh	r2, [r3, #0]
 801ac1e:	4b0f      	ldr	r3, [pc, #60]	; (801ac5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 801ac20:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801ac22:	4b0c      	ldr	r3, [pc, #48]	; (801ac54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 801ac24:	881a      	ldrh	r2, [r3, #0]
 801ac26:	4b0e      	ldr	r3, [pc, #56]	; (801ac60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801ac28:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801ac2a:	8b3a      	ldrh	r2, [r7, #24]
 801ac2c:	8bbb      	ldrh	r3, [r7, #28]
 801ac2e:	429a      	cmp	r2, r3
 801ac30:	d301      	bcc.n	801ac36 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf6>
 801ac32:	2200      	movs	r2, #0
 801ac34:	e000      	b.n	801ac38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf8>
 801ac36:	2201      	movs	r2, #1
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	4618      	mov	r0, r3
 801ac42:	3710      	adds	r7, #16
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}
 801ac48:	08025a60 	.word	0x08025a60
 801ac4c:	2000a290 	.word	0x2000a290
 801ac50:	2000a282 	.word	0x2000a282
 801ac54:	2000a284 	.word	0x2000a284
 801ac58:	2000a286 	.word	0x2000a286
 801ac5c:	2000a288 	.word	0x2000a288
 801ac60:	2000a28a 	.word	0x2000a28a

0801ac64 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 801ac64:	b480      	push	{r7}
 801ac66:	b083      	sub	sp, #12
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
 801ac6c:	4a04      	ldr	r2, [pc, #16]	; (801ac80 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	601a      	str	r2, [r3, #0]
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	4618      	mov	r0, r3
 801ac76:	370c      	adds	r7, #12
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7e:	4770      	bx	lr
 801ac80:	08025a60 	.word	0x08025a60

0801ac84 <_ZN8touchgfx3HALD0Ev>:
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b082      	sub	sp, #8
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
 801ac8c:	6878      	ldr	r0, [r7, #4]
 801ac8e:	f7ff ffe9 	bl	801ac64 <_ZN8touchgfx3HALD1Ev>
 801ac92:	2168      	movs	r1, #104	; 0x68
 801ac94:	6878      	ldr	r0, [r7, #4]
 801ac96:	f007 fe5e 	bl	8022956 <_ZdlPvj>
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	3708      	adds	r7, #8
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}

0801aca4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 801aca4:	b480      	push	{r7}
 801aca6:	b083      	sub	sp, #12
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	460b      	mov	r3, r1
 801acae:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	78fa      	ldrb	r2, [r7, #3]
 801acb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 801acb8:	bf00      	nop
 801acba:	370c      	adds	r7, #12
 801acbc:	46bd      	mov	sp, r7
 801acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc2:	4770      	bx	lr

0801acc4 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 801acc4:	b480      	push	{r7}
 801acc6:	b083      	sub	sp, #12
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
 801accc:	460b      	mov	r3, r1
 801acce:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	78fa      	ldrb	r2, [r7, #3]
 801acd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 801acd8:	bf00      	nop
 801acda:	370c      	adds	r7, #12
 801acdc:	46bd      	mov	sp, r7
 801acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace2:	4770      	bx	lr

0801ace4 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 801ace4:	b480      	push	{r7}
 801ace6:	b083      	sub	sp, #12
 801ace8:	af00      	add	r7, sp, #0
 801acea:	6078      	str	r0, [r7, #4]
 801acec:	460b      	mov	r3, r1
 801acee:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 801acf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	dd03      	ble.n	801ad00 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	78fa      	ldrb	r2, [r7, #3]
 801acfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 801ad00:	bf00      	nop
 801ad02:	370c      	adds	r7, #12
 801ad04:	46bd      	mov	sp, r7
 801ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad0a:	4770      	bx	lr

0801ad0c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 801ad0c:	b480      	push	{r7}
 801ad0e:	b083      	sub	sp, #12
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
 801ad14:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	683a      	ldr	r2, [r7, #0]
 801ad1a:	611a      	str	r2, [r3, #16]
    }
 801ad1c:	bf00      	nop
 801ad1e:	370c      	adds	r7, #12
 801ad20:	46bd      	mov	sp, r7
 801ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad26:	4770      	bx	lr

0801ad28 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 801ad28:	b480      	push	{r7}
 801ad2a:	b083      	sub	sp, #12
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
 801ad30:	460b      	mov	r3, r1
 801ad32:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	78fa      	ldrb	r2, [r7, #3]
 801ad38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 801ad3c:	bf00      	nop
 801ad3e:	370c      	adds	r7, #12
 801ad40:	46bd      	mov	sp, r7
 801ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad46:	4770      	bx	lr

0801ad48 <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 801ad48:	b480      	push	{r7}
 801ad4a:	b083      	sub	sp, #12
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	460b      	mov	r3, r1
 801ad52:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	78fa      	ldrb	r2, [r7, #3]
 801ad58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 801ad5c:	bf00      	nop
 801ad5e:	370c      	adds	r7, #12
 801ad60:	46bd      	mov	sp, r7
 801ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad66:	4770      	bx	lr

0801ad68 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 801ad68:	b480      	push	{r7}
 801ad6a:	b083      	sub	sp, #12
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
        texts = t;
 801ad70:	4a04      	ldr	r2, [pc, #16]	; (801ad84 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	6013      	str	r3, [r2, #0]
    }
 801ad76:	bf00      	nop
 801ad78:	370c      	adds	r7, #12
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad80:	4770      	bx	lr
 801ad82:	bf00      	nop
 801ad84:	2000a2fc 	.word	0x2000a2fc

0801ad88 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801ad88:	b480      	push	{r7}
 801ad8a:	b085      	sub	sp, #20
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	60f8      	str	r0, [r7, #12]
 801ad90:	60b9      	str	r1, [r7, #8]
 801ad92:	607a      	str	r2, [r7, #4]
 801ad94:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801ad96:	4a0b      	ldr	r2, [pc, #44]	; (801adc4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	601a      	str	r2, [r3, #0]
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	68ba      	ldr	r2, [r7, #8]
 801ada0:	605a      	str	r2, [r3, #4]
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	609a      	str	r2, [r3, #8]
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	683a      	ldr	r2, [r7, #0]
 801adac:	60da      	str	r2, [r3, #12]
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	69ba      	ldr	r2, [r7, #24]
 801adb2:	611a      	str	r2, [r3, #16]
    {
    }
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	4618      	mov	r0, r3
 801adb8:	3714      	adds	r7, #20
 801adba:	46bd      	mov	sp, r7
 801adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc0:	4770      	bx	lr
 801adc2:	bf00      	nop
 801adc4:	0802552c 	.word	0x0802552c

0801adc8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801adc8:	b480      	push	{r7}
 801adca:	b083      	sub	sp, #12
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
    {
 801add0:	4a04      	ldr	r2, [pc, #16]	; (801ade4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	601a      	str	r2, [r3, #0]
    }
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	4618      	mov	r0, r3
 801adda:	370c      	adds	r7, #12
 801addc:	46bd      	mov	sp, r7
 801adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade2:	4770      	bx	lr
 801ade4:	0802552c 	.word	0x0802552c

0801ade8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801ade8:	b580      	push	{r7, lr}
 801adea:	b082      	sub	sp, #8
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
    }
 801adf0:	6878      	ldr	r0, [r7, #4]
 801adf2:	f7ff ffe9 	bl	801adc8 <_ZN8touchgfx7MVPHeapD1Ev>
 801adf6:	2114      	movs	r1, #20
 801adf8:	6878      	ldr	r0, [r7, #4]
 801adfa:	f007 fdac 	bl	8022956 <_ZdlPvj>
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	4618      	mov	r0, r3
 801ae02:	3708      	adds	r7, #8
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bd80      	pop	{r7, pc}

0801ae08 <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD() { }
 801ae08:	b480      	push	{r7}
 801ae0a:	b083      	sub	sp, #12
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
 801ae10:	4a04      	ldr	r2, [pc, #16]	; (801ae24 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	601a      	str	r2, [r3, #0]
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	370c      	adds	r7, #12
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae22:	4770      	bx	lr
 801ae24:	080254f8 	.word	0x080254f8

0801ae28 <_ZN8touchgfx3LCDD0Ev>:
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b082      	sub	sp, #8
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	6078      	str	r0, [r7, #4]
 801ae30:	6878      	ldr	r0, [r7, #4]
 801ae32:	f7ff ffe9 	bl	801ae08 <_ZN8touchgfx3LCDD1Ev>
 801ae36:	2104      	movs	r1, #4
 801ae38:	6878      	ldr	r0, [r7, #4]
 801ae3a:	f007 fd8c 	bl	8022956 <_ZdlPvj>
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	4618      	mov	r0, r3
 801ae42:	3708      	adds	r7, #8
 801ae44:	46bd      	mov	sp, r7
 801ae46:	bd80      	pop	{r7, pc}

0801ae48 <_ZN8touchgfx3LCD4initEv>:
    virtual void init() { }
 801ae48:	b480      	push	{r7}
 801ae4a:	b083      	sub	sp, #12
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	bf00      	nop
 801ae52:	370c      	adds	r7, #12
 801ae54:	46bd      	mov	sp, r7
 801ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5a:	4770      	bx	lr

0801ae5c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
 801ae64:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801ae66:	683b      	ldr	r3, [r7, #0]
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7fd fe27 	bl	8018abc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801ae6e:	bf00      	nop
 801ae70:	3708      	adds	r7, #8
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd80      	pop	{r7, pc}
	...

0801ae78 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b086      	sub	sp, #24
 801ae7c:	af02      	add	r7, sp, #8
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	60b9      	str	r1, [r7, #8]
 801ae82:	607a      	str	r2, [r7, #4]
 801ae84:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801ae86:	68f8      	ldr	r0, [r7, #12]
 801ae88:	69bb      	ldr	r3, [r7, #24]
 801ae8a:	9300      	str	r3, [sp, #0]
 801ae8c:	683b      	ldr	r3, [r7, #0]
 801ae8e:	687a      	ldr	r2, [r7, #4]
 801ae90:	68b9      	ldr	r1, [r7, #8]
 801ae92:	f7ff ff79 	bl	801ad88 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801ae96:	4a04      	ldr	r2, [pc, #16]	; (801aea8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	601a      	str	r2, [r3, #0]
    {

    }
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3710      	adds	r7, #16
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd80      	pop	{r7, pc}
 801aea6:	bf00      	nop
 801aea8:	080254e4 	.word	0x080254e4

0801aeac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801aeac:	b580      	push	{r7, lr}
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	4801      	ldr	r0, [pc, #4]	; (801aeb8 <__tcf_0+0xc>)
 801aeb2:	f000 fab7 	bl	801b424 <_ZN12FrontendHeapD1Ev>
 801aeb6:	bd80      	pop	{r7, pc}
 801aeb8:	20008f80 	.word	0x20008f80

0801aebc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801aebc:	b580      	push	{r7, lr}
 801aebe:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801aec0:	4b08      	ldr	r3, [pc, #32]	; (801aee4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	f003 0301 	and.w	r3, r3, #1
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d108      	bne.n	801aede <_ZN12FrontendHeap11getInstanceEv+0x22>
 801aecc:	4806      	ldr	r0, [pc, #24]	; (801aee8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801aece:	f000 f831 	bl	801af34 <_ZN12FrontendHeapC1Ev>
 801aed2:	4b04      	ldr	r3, [pc, #16]	; (801aee4 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801aed4:	2201      	movs	r2, #1
 801aed6:	601a      	str	r2, [r3, #0]
 801aed8:	4804      	ldr	r0, [pc, #16]	; (801aeec <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801aeda:	f007 fd77 	bl	80229cc <atexit>
        return instance;
 801aede:	4b02      	ldr	r3, [pc, #8]	; (801aee8 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801aee0:	4618      	mov	r0, r3
 801aee2:	bd80      	pop	{r7, pc}
 801aee4:	200095e0 	.word	0x200095e0
 801aee8:	20008f80 	.word	0x20008f80
 801aeec:	0801aead 	.word	0x0801aead

0801aef0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b082      	sub	sp, #8
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	4a05      	ldr	r2, [pc, #20]	; (801af10 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	601a      	str	r2, [r3, #0]
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	4618      	mov	r0, r3
 801af02:	f7ff ff61 	bl	801adc8 <_ZN8touchgfx7MVPHeapD1Ev>
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	4618      	mov	r0, r3
 801af0a:	3708      	adds	r7, #8
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}
 801af10:	080254e4 	.word	0x080254e4

0801af14 <_ZN16FrontendHeapBaseD0Ev>:
 801af14:	b580      	push	{r7, lr}
 801af16:	b082      	sub	sp, #8
 801af18:	af00      	add	r7, sp, #0
 801af1a:	6078      	str	r0, [r7, #4]
 801af1c:	6878      	ldr	r0, [r7, #4]
 801af1e:	f7ff ffe7 	bl	801aef0 <_ZN16FrontendHeapBaseD1Ev>
 801af22:	2114      	movs	r1, #20
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f007 fd16 	bl	8022956 <_ZdlPvj>
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	4618      	mov	r0, r3
 801af2e:	3708      	adds	r7, #8
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}

0801af34 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801af34:	b590      	push	{r4, r7, lr}
 801af36:	b085      	sub	sp, #20
 801af38:	af02      	add	r7, sp, #8
 801af3a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801af3c:	6878      	ldr	r0, [r7, #4]
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	f103 0114 	add.w	r1, r3, #20
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	f203 44f4 	addw	r4, r3, #1268	; 0x4f4
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 801af56:	9300      	str	r3, [sp, #0]
 801af58:	4623      	mov	r3, r4
 801af5a:	f7ff ff8d 	bl	801ae78 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801af5e:	4a18      	ldr	r2, [pc, #96]	; (801afc0 <_ZN12FrontendHeapC1Ev+0x8c>)
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	601a      	str	r2, [r3, #0]
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	3314      	adds	r3, #20
 801af68:	4618      	mov	r0, r3
 801af6a:	f000 f927 	bl	801b1bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	332c      	adds	r3, #44	; 0x2c
 801af72:	4618      	mov	r0, r3
 801af74:	f000 f956 	bl	801b224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 801af7e:	4618      	mov	r0, r3
 801af80:	f000 f986 	bl	801b290 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 801af90:	687a      	ldr	r2, [r7, #4]
 801af92:	4619      	mov	r1, r3
 801af94:	f7ff f872 	bl	801a07c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 801af9e:	4618      	mov	r0, r3
 801afa0:	f7ff fba2 	bl	801a6e8 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801afa4:	687a      	ldr	r2, [r7, #4]
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 801afac:	4619      	mov	r1, r3
 801afae:	4610      	mov	r0, r2
 801afb0:	f7ff ff54 	bl	801ae5c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	4618      	mov	r0, r3
 801afb8:	370c      	adds	r7, #12
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd90      	pop	{r4, r7, pc}
 801afbe:	bf00      	nop
 801afc0:	08025434 	.word	0x08025434

0801afc4 <_ZN8touchgfx8LCD16bppD1Ev>:
 */
class LCD16bpp : public LCD
{
public:

    virtual ~LCD16bpp() {}
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b082      	sub	sp, #8
 801afc8:	af00      	add	r7, sp, #0
 801afca:	6078      	str	r0, [r7, #4]
 801afcc:	4a05      	ldr	r2, [pc, #20]	; (801afe4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	601a      	str	r2, [r3, #0]
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7ff ff17 	bl	801ae08 <_ZN8touchgfx3LCDD1Ev>
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	4618      	mov	r0, r3
 801afde:	3708      	adds	r7, #8
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	080266b0 	.word	0x080266b0

0801afe8 <_ZN8touchgfx8LCD16bppD0Ev>:
 801afe8:	b580      	push	{r7, lr}
 801afea:	b082      	sub	sp, #8
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
 801aff0:	6878      	ldr	r0, [r7, #4]
 801aff2:	f7ff ffe7 	bl	801afc4 <_ZN8touchgfx8LCD16bppD1Ev>
 801aff6:	2104      	movs	r1, #4
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f007 fcac 	bl	8022956 <_ZdlPvj>
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	4618      	mov	r0, r3
 801b002:	3708      	adds	r7, #8
 801b004:	46bd      	mov	sp, r7
 801b006:	bd80      	pop	{r7, pc}

0801b008 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801b008:	b580      	push	{r7, lr}
 801b00a:	b086      	sub	sp, #24
 801b00c:	af02      	add	r7, sp, #8
 801b00e:	60f8      	str	r0, [r7, #12]
 801b010:	60b9      	str	r1, [r7, #8]
 801b012:	607a      	str	r2, [r7, #4]
 801b014:	603b      	str	r3, [r7, #0]
 801b016:	68f8      	ldr	r0, [r7, #12]
 801b018:	8bbb      	ldrh	r3, [r7, #28]
 801b01a:	9301      	str	r3, [sp, #4]
 801b01c:	8b3b      	ldrh	r3, [r7, #24]
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	683b      	ldr	r3, [r7, #0]
 801b022:	687a      	ldr	r2, [r7, #4]
 801b024:	68b9      	ldr	r1, [r7, #8]
 801b026:	f7ff fd8b 	bl	801ab40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801b02a:	4a04      	ldr	r2, [pc, #16]	; (801b03c <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	601a      	str	r2, [r3, #0]
    {
    }
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	4618      	mov	r0, r3
 801b034:	3710      	adds	r7, #16
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}
 801b03a:	bf00      	nop
 801b03c:	080255d4 	.word	0x080255d4

0801b040 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801b040:	b480      	push	{r7}
 801b042:	b083      	sub	sp, #12
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
 801b048:	4a04      	ldr	r2, [pc, #16]	; (801b05c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	601a      	str	r2, [r3, #0]
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	4618      	mov	r0, r3
 801b052:	370c      	adds	r7, #12
 801b054:	46bd      	mov	sp, r7
 801b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b05a:	4770      	bx	lr
 801b05c:	08024690 	.word	0x08024690

0801b060 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 801b060:	b580      	push	{r7, lr}
 801b062:	b082      	sub	sp, #8
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7ff ffe8 	bl	801b040 <_ZN8touchgfx15TouchControllerC1Ev>
 801b070:	4a03      	ldr	r2, [pc, #12]	; (801b080 <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	601a      	str	r2, [r3, #0]
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	4618      	mov	r0, r3
 801b07a:	3708      	adds	r7, #8
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}
 801b080:	08025748 	.word	0x08025748

0801b084 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 801b084:	b480      	push	{r7}
 801b086:	af00      	add	r7, sp, #0
  return 480;
 801b088:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 801b08c:	4618      	mov	r0, r3
 801b08e:	46bd      	mov	sp, r7
 801b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b094:	4770      	bx	lr

0801b096 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 801b096:	b480      	push	{r7}
 801b098:	af00      	add	r7, sp, #0
  return 272;
 801b09a:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 801b09e:	4618      	mov	r0, r3
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a6:	4770      	bx	lr

0801b0a8 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801b0ac:	f000 fbca 	bl	801b844 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 801b0b0:	f000 fc1e 	bl	801b8f0 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 801b0b4:	f000 fb36 	bl	801b724 <_Z11MX_LCD_Initv>
    GPIO::init();
 801b0b8:	f001 ff50 	bl	801cf5c <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 801b0bc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801b0c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 801b0c4:	601a      	str	r2, [r3, #0]
}
 801b0c6:	bf00      	nop
 801b0c8:	bd80      	pop	{r7, pc}
	...

0801b0cc <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b082      	sub	sp, #8
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f7ff fcba 	bl	801aa50 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 801b0dc:	4a03      	ldr	r2, [pc, #12]	; (801b0ec <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	601a      	str	r2, [r3, #0]
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3708      	adds	r7, #8
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}
 801b0ec:	08025720 	.word	0x08025720

0801b0f0 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 801b0f0:	b590      	push	{r4, r7, lr}
 801b0f2:	b087      	sub	sp, #28
 801b0f4:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 801b0f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b0fa:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 801b0fc:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b100:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 801b102:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801b106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801b10a:	2200      	movs	r2, #0
 801b10c:	9203      	str	r2, [sp, #12]
 801b10e:	2200      	movs	r2, #0
 801b110:	9202      	str	r2, [sp, #8]
 801b112:	2200      	movs	r2, #0
 801b114:	9201      	str	r2, [sp, #4]
 801b116:	9300      	str	r3, [sp, #0]
 801b118:	460b      	mov	r3, r1
 801b11a:	4a19      	ldr	r2, [pc, #100]	; (801b180 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 801b11c:	4919      	ldr	r1, [pc, #100]	; (801b184 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 801b11e:	481a      	ldr	r0, [pc, #104]	; (801b188 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 801b120:	f000 f8ea 	bl	801b2f8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 801b124:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 801b126:	683b      	ldr	r3, [r7, #0]
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	3374      	adds	r3, #116	; 0x74
 801b12c:	681c      	ldr	r4, [r3, #0]
 801b12e:	4b17      	ldr	r3, [pc, #92]	; (801b18c <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	4619      	mov	r1, r3
 801b134:	4b16      	ldr	r3, [pc, #88]	; (801b190 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 801b136:	881a      	ldrh	r2, [r3, #0]
 801b138:	2301      	movs	r3, #1
 801b13a:	9300      	str	r3, [sp, #0]
 801b13c:	2301      	movs	r3, #1
 801b13e:	6838      	ldr	r0, [r7, #0]
 801b140:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 801b142:	2102      	movs	r1, #2
 801b144:	6838      	ldr	r0, [r7, #0]
 801b146:	f7ff fdcd 	bl	801ace4 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 801b14a:	2101      	movs	r1, #1
 801b14c:	6838      	ldr	r0, [r7, #0]
 801b14e:	f7ff fdfb 	bl	801ad48 <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 801b152:	2100      	movs	r1, #0
 801b154:	6838      	ldr	r0, [r7, #0]
 801b156:	f7ff fdb5 	bl	801acc4 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 801b15a:	2100      	movs	r1, #0
 801b15c:	6838      	ldr	r0, [r7, #0]
 801b15e:	f7ff fda1 	bl	801aca4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 801b162:	480c      	ldr	r0, [pc, #48]	; (801b194 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801b164:	f001 fd5c 	bl	801cc20 <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 801b168:	490a      	ldr	r1, [pc, #40]	; (801b194 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801b16a:	6838      	ldr	r0, [r7, #0]
 801b16c:	f7ff fdce 	bl	801ad0c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 801b170:	2101      	movs	r1, #1
 801b172:	6838      	ldr	r0, [r7, #0]
 801b174:	f7ff fdd8 	bl	801ad28 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 801b178:	bf00      	nop
 801b17a:	370c      	adds	r7, #12
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd90      	pop	{r4, r7, pc}
 801b180:	2000a088 	.word	0x2000a088
 801b184:	2000018c 	.word	0x2000018c
 801b188:	200095e8 	.word	0x200095e8
 801b18c:	20000188 	.word	0x20000188
 801b190:	20000190 	.word	0x20000190
 801b194:	2000a08c 	.word	0x2000a08c

0801b198 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 801b19c:	f7ff ffa8 	bl	801b0f0 <_ZN8touchgfx13touchgfx_initEv>
}
 801b1a0:	bf00      	nop
 801b1a2:	bd80      	pop	{r7, pc}

0801b1a4 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 801b1a8:	f7f7 fbf0 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 801b1ac:	4602      	mov	r2, r0
 801b1ae:	6813      	ldr	r3, [r2, #0]
 801b1b0:	330c      	adds	r3, #12
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	4610      	mov	r0, r2
 801b1b6:	4798      	blx	r3
}
 801b1b8:	bf00      	nop
 801b1ba:	bd80      	pop	{r7, pc}

0801b1bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801b1bc:	b580      	push	{r7, lr}
 801b1be:	b082      	sub	sp, #8
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f002 fa6e 	bl	801d6a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801b1cc:	4a03      	ldr	r2, [pc, #12]	; (801b1dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	601a      	str	r2, [r3, #0]
    {
    }
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	4618      	mov	r0, r3
 801b1d6:	3708      	adds	r7, #8
 801b1d8:	46bd      	mov	sp, r7
 801b1da:	bd80      	pop	{r7, pc}
 801b1dc:	080254b0 	.word	0x080254b0

0801b1e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b082      	sub	sp, #8
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	6078      	str	r0, [r7, #4]
    {
    }
 801b1e8:	4a05      	ldr	r2, [pc, #20]	; (801b200 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	601a      	str	r2, [r3, #0]
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f002 fa57 	bl	801d6a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	4618      	mov	r0, r3
 801b1fa:	3708      	adds	r7, #8
 801b1fc:	46bd      	mov	sp, r7
 801b1fe:	bd80      	pop	{r7, pc}
 801b200:	080254b0 	.word	0x080254b0

0801b204 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801b204:	b580      	push	{r7, lr}
 801b206:	b082      	sub	sp, #8
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
    }
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	f7ff ffe7 	bl	801b1e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801b212:	2118      	movs	r1, #24
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f007 fb9e 	bl	8022956 <_ZdlPvj>
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	4618      	mov	r0, r3
 801b21e:	3708      	adds	r7, #8
 801b220:	46bd      	mov	sp, r7
 801b222:	bd80      	pop	{r7, pc}

0801b224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801b224:	b580      	push	{r7, lr}
 801b226:	b082      	sub	sp, #8
 801b228:	af00      	add	r7, sp, #0
 801b22a:	6078      	str	r0, [r7, #4]
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	4618      	mov	r0, r3
 801b230:	f002 fa3a 	bl	801d6a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801b234:	4a03      	ldr	r2, [pc, #12]	; (801b244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	601a      	str	r2, [r3, #0]
    }
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	4618      	mov	r0, r3
 801b23e:	3708      	adds	r7, #8
 801b240:	46bd      	mov	sp, r7
 801b242:	bd80      	pop	{r7, pc}
 801b244:	0802547c 	.word	0x0802547c

0801b248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801b248:	b580      	push	{r7, lr}
 801b24a:	b082      	sub	sp, #8
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
    }
 801b250:	4a05      	ldr	r2, [pc, #20]	; (801b268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	601a      	str	r2, [r3, #0]
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	4618      	mov	r0, r3
 801b25a:	f002 fa23 	bl	801d6a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	4618      	mov	r0, r3
 801b262:	3708      	adds	r7, #8
 801b264:	46bd      	mov	sp, r7
 801b266:	bd80      	pop	{r7, pc}
 801b268:	0802547c 	.word	0x0802547c

0801b26c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801b26c:	b580      	push	{r7, lr}
 801b26e:	b082      	sub	sp, #8
 801b270:	af00      	add	r7, sp, #0
 801b272:	6078      	str	r0, [r7, #4]
    }
 801b274:	6878      	ldr	r0, [r7, #4]
 801b276:	f7ff ffe7 	bl	801b248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801b27a:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 801b27e:	6878      	ldr	r0, [r7, #4]
 801b280:	f007 fb69 	bl	8022956 <_ZdlPvj>
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	4618      	mov	r0, r3
 801b288:	3708      	adds	r7, #8
 801b28a:	46bd      	mov	sp, r7
 801b28c:	bd80      	pop	{r7, pc}
	...

0801b290 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801b290:	b580      	push	{r7, lr}
 801b292:	b082      	sub	sp, #8
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	4618      	mov	r0, r3
 801b29c:	f002 fa04 	bl	801d6a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801b2a0:	4a03      	ldr	r2, [pc, #12]	; (801b2b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	601a      	str	r2, [r3, #0]
    }
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	3708      	adds	r7, #8
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	bd80      	pop	{r7, pc}
 801b2b0:	08025448 	.word	0x08025448

0801b2b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b082      	sub	sp, #8
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
    }
 801b2bc:	4a05      	ldr	r2, [pc, #20]	; (801b2d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	601a      	str	r2, [r3, #0]
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	f002 f9ed 	bl	801d6a4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	3708      	adds	r7, #8
 801b2d0:	46bd      	mov	sp, r7
 801b2d2:	bd80      	pop	{r7, pc}
 801b2d4:	08025448 	.word	0x08025448

0801b2d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b082      	sub	sp, #8
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
    }
 801b2e0:	6878      	ldr	r0, [r7, #4]
 801b2e2:	f7ff ffe7 	bl	801b2b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801b2e6:	2114      	movs	r1, #20
 801b2e8:	6878      	ldr	r0, [r7, #4]
 801b2ea:	f007 fb34 	bl	8022956 <_ZdlPvj>
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	3708      	adds	r7, #8
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}

0801b2f8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 801b2f8:	b590      	push	{r4, r7, lr}
 801b2fa:	b089      	sub	sp, #36	; 0x24
 801b2fc:	af02      	add	r7, sp, #8
 801b2fe:	60f8      	str	r0, [r7, #12]
 801b300:	60b9      	str	r1, [r7, #8]
 801b302:	607a      	str	r2, [r7, #4]
 801b304:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 801b306:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b30a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b30e:	9300      	str	r3, [sp, #0]
 801b310:	4613      	mov	r3, r2
 801b312:	687a      	ldr	r2, [r7, #4]
 801b314:	68b9      	ldr	r1, [r7, #8]
 801b316:	68f8      	ldr	r0, [r7, #12]
 801b318:	f000 f85c 	bl	801b3d4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 801b31c:	6178      	str	r0, [r7, #20]
    hal.initialize();
 801b31e:	6978      	ldr	r0, [r7, #20]
 801b320:	f002 fb94 	bl	801da4c <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 801b324:	f7fe fdb4 	bl	8019e90 <_ZN14BitmapDatabase11getInstanceEv>
 801b328:	4604      	mov	r4, r0
 801b32a:	f7fe fdbb 	bl	8019ea4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801b32e:	4603      	mov	r3, r0
 801b330:	4619      	mov	r1, r3
 801b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b334:	9300      	str	r3, [sp, #0]
 801b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b33a:	4620      	mov	r0, r4
 801b33c:	f005 fa28 	bl	8020790 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 801b340:	480d      	ldr	r0, [pc, #52]	; (801b378 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 801b342:	f7ff fd11 	bl	801ad68 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801b346:	2000      	movs	r0, #0
 801b348:	f7fe fdd0 	bl	8019eec <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801b34c:	480b      	ldr	r0, [pc, #44]	; (801b37c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 801b34e:	f005 f989 	bl	8020664 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801b352:	f7ff fdb3 	bl	801aebc <_ZN12FrontendHeap11getInstanceEv>
 801b356:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 801b358:	697b      	ldr	r3, [r7, #20]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	3350      	adds	r3, #80	; 0x50
 801b35e:	681c      	ldr	r4, [r3, #0]
 801b360:	f003 fd1a 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801b364:	4603      	mov	r3, r0
 801b366:	4619      	mov	r1, r3
 801b368:	6978      	ldr	r0, [r7, #20]
 801b36a:	47a0      	blx	r4

    return hal;
 801b36c:	697b      	ldr	r3, [r7, #20]
}
 801b36e:	4618      	mov	r0, r3
 801b370:	371c      	adds	r7, #28
 801b372:	46bd      	mov	sp, r7
 801b374:	bd90      	pop	{r4, r7, pc}
 801b376:	bf00      	nop
 801b378:	200095e4 	.word	0x200095e4
 801b37c:	20000184 	.word	0x20000184

0801b380 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 801b380:	b580      	push	{r7, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
 801b388:	4a05      	ldr	r2, [pc, #20]	; (801b3a0 <_ZN10STM32F7HALD1Ev+0x20>)
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	601a      	str	r2, [r3, #0]
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	4618      	mov	r0, r3
 801b392:	f7ff fc67 	bl	801ac64 <_ZN8touchgfx3HALD1Ev>
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	4618      	mov	r0, r3
 801b39a:	3708      	adds	r7, #8
 801b39c:	46bd      	mov	sp, r7
 801b39e:	bd80      	pop	{r7, pc}
 801b3a0:	080255d4 	.word	0x080255d4

0801b3a4 <_ZN10STM32F7HALD0Ev>:
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b082      	sub	sp, #8
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
 801b3ac:	6878      	ldr	r0, [r7, #4]
 801b3ae:	f7ff ffe7 	bl	801b380 <_ZN10STM32F7HALD1Ev>
 801b3b2:	2168      	movs	r1, #104	; 0x68
 801b3b4:	6878      	ldr	r0, [r7, #4]
 801b3b6:	f007 face 	bl	8022956 <_ZdlPvj>
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4618      	mov	r0, r3
 801b3be:	3708      	adds	r7, #8
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	bd80      	pop	{r7, pc}

0801b3c4 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	af00      	add	r7, sp, #0
 801b3c8:	4801      	ldr	r0, [pc, #4]	; (801b3d0 <__tcf_1+0xc>)
 801b3ca:	f7ff ffd9 	bl	801b380 <_ZN10STM32F7HALD1Ev>
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	2000a09c 	.word	0x2000a09c

0801b3d4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b086      	sub	sp, #24
 801b3d8:	af02      	add	r7, sp, #8
 801b3da:	60f8      	str	r0, [r7, #12]
 801b3dc:	60b9      	str	r1, [r7, #8]
 801b3de:	607a      	str	r2, [r7, #4]
 801b3e0:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 801b3e2:	4b0d      	ldr	r3, [pc, #52]	; (801b418 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	f003 0301 	and.w	r3, r3, #1
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d10f      	bne.n	801b40e <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 801b3ee:	887b      	ldrh	r3, [r7, #2]
 801b3f0:	8b3a      	ldrh	r2, [r7, #24]
 801b3f2:	9201      	str	r2, [sp, #4]
 801b3f4:	9300      	str	r3, [sp, #0]
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	68ba      	ldr	r2, [r7, #8]
 801b3fa:	68f9      	ldr	r1, [r7, #12]
 801b3fc:	4807      	ldr	r0, [pc, #28]	; (801b41c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 801b3fe:	f7ff fe03 	bl	801b008 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801b402:	4b05      	ldr	r3, [pc, #20]	; (801b418 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 801b404:	2201      	movs	r2, #1
 801b406:	601a      	str	r2, [r3, #0]
 801b408:	4805      	ldr	r0, [pc, #20]	; (801b420 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 801b40a:	f007 fadf 	bl	80229cc <atexit>
    return hal;
 801b40e:	4b03      	ldr	r3, [pc, #12]	; (801b41c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 801b410:	4618      	mov	r0, r3
 801b412:	3710      	adds	r7, #16
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}
 801b418:	2000a104 	.word	0x2000a104
 801b41c:	2000a09c 	.word	0x2000a09c
 801b420:	0801b3c5 	.word	0x0801b3c5

0801b424 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801b424:	b580      	push	{r7, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
 801b42c:	4a10      	ldr	r2, [pc, #64]	; (801b470 <_ZN12FrontendHeapD1Ev+0x4c>)
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	601a      	str	r2, [r3, #0]
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 801b438:	4618      	mov	r0, r3
 801b43a:	f7fe fde9 	bl	801a010 <_ZN19FrontendApplicationD1Ev>
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 801b444:	4618      	mov	r0, r3
 801b446:	f7ff ff35 	bl	801b2b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	332c      	adds	r3, #44	; 0x2c
 801b44e:	4618      	mov	r0, r3
 801b450:	f7ff fefa 	bl	801b248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	3314      	adds	r3, #20
 801b458:	4618      	mov	r0, r3
 801b45a:	f7ff fec1 	bl	801b1e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	4618      	mov	r0, r3
 801b462:	f7ff fd45 	bl	801aef0 <_ZN16FrontendHeapBaseD1Ev>
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	4618      	mov	r0, r3
 801b46a:	3708      	adds	r7, #8
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd80      	pop	{r7, pc}
 801b470:	08025434 	.word	0x08025434

0801b474 <_ZN12FrontendHeapD0Ev>:
 801b474:	b580      	push	{r7, lr}
 801b476:	b082      	sub	sp, #8
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
 801b47c:	6878      	ldr	r0, [r7, #4]
 801b47e:	f7ff ffd1 	bl	801b424 <_ZN12FrontendHeapD1Ev>
 801b482:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	f007 fa65 	bl	8022956 <_ZdlPvj>
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	4618      	mov	r0, r3
 801b490:	3708      	adds	r7, #8
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
	...

0801b498 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 801b498:	b580      	push	{r7, lr}
 801b49a:	b082      	sub	sp, #8
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
 801b4a0:	4a05      	ldr	r2, [pc, #20]	; (801b4b8 <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	601a      	str	r2, [r3, #0]
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	f7ff fae7 	bl	801aa7c <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3708      	adds	r7, #8
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}
 801b4b8:	08025720 	.word	0x08025720

0801b4bc <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b082      	sub	sp, #8
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
 801b4c4:	6878      	ldr	r0, [r7, #4]
 801b4c6:	f7ff ffe7 	bl	801b498 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 801b4ca:	2110      	movs	r1, #16
 801b4cc:	6878      	ldr	r0, [r7, #4]
 801b4ce:	f007 fa42 	bl	8022956 <_ZdlPvj>
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	3708      	adds	r7, #8
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}

0801b4dc <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b082      	sub	sp, #8
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
 801b4e4:	4a05      	ldr	r2, [pc, #20]	; (801b4fc <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	601a      	str	r2, [r3, #0]
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7f6 f9fb 	bl	80118e8 <_ZN8touchgfx15TouchControllerD1Ev>
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	3708      	adds	r7, #8
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	bd80      	pop	{r7, pc}
 801b4fc:	08025748 	.word	0x08025748

0801b500 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 801b500:	b580      	push	{r7, lr}
 801b502:	b082      	sub	sp, #8
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f7ff ffe7 	bl	801b4dc <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 801b50e:	2104      	movs	r1, #4
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	f007 fa20 	bl	8022956 <_ZdlPvj>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	4618      	mov	r0, r3
 801b51a:	3708      	adds	r7, #8
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}

0801b520 <_Z41__static_initialization_and_destruction_0ii>:
 801b520:	b580      	push	{r7, lr}
 801b522:	b082      	sub	sp, #8
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
 801b528:	6039      	str	r1, [r7, #0]
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	2b01      	cmp	r3, #1
 801b52e:	d10d      	bne.n	801b54c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 801b530:	683b      	ldr	r3, [r7, #0]
 801b532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b536:	4293      	cmp	r3, r2
 801b538:	d108      	bne.n	801b54c <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 801b53a:	4812      	ldr	r0, [pc, #72]	; (801b584 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801b53c:	f000 fd36 	bl	801bfac <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 801b540:	4811      	ldr	r0, [pc, #68]	; (801b588 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801b542:	f7ff fd8d 	bl	801b060 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 801b546:	4811      	ldr	r0, [pc, #68]	; (801b58c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801b548:	f7ff fdc0 	bl	801b0cc <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d113      	bne.n	801b57a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b558:	4293      	cmp	r3, r2
 801b55a:	d10e      	bne.n	801b57a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801b55c:	480c      	ldr	r0, [pc, #48]	; (801b590 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 801b55e:	f7ff fd31 	bl	801afc4 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 801b562:	480a      	ldr	r0, [pc, #40]	; (801b58c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801b564:	f7ff ff98 	bl	801b498 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 801b568:	4807      	ldr	r0, [pc, #28]	; (801b588 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801b56a:	f7ff ffb7 	bl	801b4dc <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 801b56e:	4805      	ldr	r0, [pc, #20]	; (801b584 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801b570:	f000 fd46 	bl	801c000 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 801b574:	4807      	ldr	r0, [pc, #28]	; (801b594 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801b576:	f7fc fe6b 	bl	8018250 <_ZN23ApplicationFontProviderD1Ev>
}
 801b57a:	bf00      	nop
 801b57c:	3708      	adds	r7, #8
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd80      	pop	{r7, pc}
 801b582:	bf00      	nop
 801b584:	200095e8 	.word	0x200095e8
 801b588:	2000a088 	.word	0x2000a088
 801b58c:	2000a08c 	.word	0x2000a08c
 801b590:	2000018c 	.word	0x2000018c
 801b594:	20000184 	.word	0x20000184

0801b598 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 801b598:	b480      	push	{r7}
 801b59a:	b083      	sub	sp, #12
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 801b5a0:	2301      	movs	r3, #1
    }
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	370c      	adds	r7, #12
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ac:	4770      	bx	lr

0801b5ae <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801b5ae:	b480      	push	{r7}
 801b5b0:	b083      	sub	sp, #12
 801b5b2:	af00      	add	r7, sp, #0
 801b5b4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801b5b6:	230c      	movs	r3, #12
    }
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	370c      	adds	r7, #12
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5c2:	4770      	bx	lr

0801b5c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801b5c4:	b480      	push	{r7}
 801b5c6:	b083      	sub	sp, #12
 801b5c8:	af00      	add	r7, sp, #0
 801b5ca:	6078      	str	r0, [r7, #4]
 801b5cc:	460b      	mov	r3, r1
 801b5ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801b5d0:	887a      	ldrh	r2, [r7, #2]
 801b5d2:	4613      	mov	r3, r2
 801b5d4:	005b      	lsls	r3, r3, #1
 801b5d6:	4413      	add	r3, r2
 801b5d8:	009b      	lsls	r3, r3, #2
 801b5da:	3308      	adds	r3, #8
 801b5dc:	687a      	ldr	r2, [r7, #4]
 801b5de:	4413      	add	r3, r2
    }
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	370c      	adds	r7, #12
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ea:	4770      	bx	lr

0801b5ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801b5ec:	b480      	push	{r7}
 801b5ee:	b083      	sub	sp, #12
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
 801b5f4:	460b      	mov	r3, r1
 801b5f6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801b5f8:	887a      	ldrh	r2, [r7, #2]
 801b5fa:	4613      	mov	r3, r2
 801b5fc:	005b      	lsls	r3, r3, #1
 801b5fe:	4413      	add	r3, r2
 801b600:	009b      	lsls	r3, r3, #2
 801b602:	3308      	adds	r3, #8
 801b604:	687a      	ldr	r2, [r7, #4]
 801b606:	4413      	add	r3, r2
    }
 801b608:	4618      	mov	r0, r3
 801b60a:	370c      	adds	r7, #12
 801b60c:	46bd      	mov	sp, r7
 801b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b612:	4770      	bx	lr

0801b614 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801b614:	b480      	push	{r7}
 801b616:	b083      	sub	sp, #12
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801b61c:	2301      	movs	r3, #1
    }
 801b61e:	4618      	mov	r0, r3
 801b620:	370c      	adds	r7, #12
 801b622:	46bd      	mov	sp, r7
 801b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b628:	4770      	bx	lr

0801b62a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801b62a:	b480      	push	{r7}
 801b62c:	b083      	sub	sp, #12
 801b62e:	af00      	add	r7, sp, #0
 801b630:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801b632:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    }
 801b636:	4618      	mov	r0, r3
 801b638:	370c      	adds	r7, #12
 801b63a:	46bd      	mov	sp, r7
 801b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b640:	4770      	bx	lr

0801b642 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801b642:	b480      	push	{r7}
 801b644:	b083      	sub	sp, #12
 801b646:	af00      	add	r7, sp, #0
 801b648:	6078      	str	r0, [r7, #4]
 801b64a:	460b      	mov	r3, r1
 801b64c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b64e:	887b      	ldrh	r3, [r7, #2]
 801b650:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b654:	fb02 f303 	mul.w	r3, r2, r3
 801b658:	3308      	adds	r3, #8
 801b65a:	687a      	ldr	r2, [r7, #4]
 801b65c:	4413      	add	r3, r2
    }
 801b65e:	4618      	mov	r0, r3
 801b660:	370c      	adds	r7, #12
 801b662:	46bd      	mov	sp, r7
 801b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b668:	4770      	bx	lr

0801b66a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801b66a:	b480      	push	{r7}
 801b66c:	b083      	sub	sp, #12
 801b66e:	af00      	add	r7, sp, #0
 801b670:	6078      	str	r0, [r7, #4]
 801b672:	460b      	mov	r3, r1
 801b674:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b676:	887b      	ldrh	r3, [r7, #2]
 801b678:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b67c:	fb02 f303 	mul.w	r3, r2, r3
 801b680:	3308      	adds	r3, #8
 801b682:	687a      	ldr	r2, [r7, #4]
 801b684:	4413      	add	r3, r2
    }
 801b686:	4618      	mov	r0, r3
 801b688:	370c      	adds	r7, #12
 801b68a:	46bd      	mov	sp, r7
 801b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b690:	4770      	bx	lr

0801b692 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801b692:	b480      	push	{r7}
 801b694:	b083      	sub	sp, #12
 801b696:	af00      	add	r7, sp, #0
 801b698:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801b69a:	2301      	movs	r3, #1
    }
 801b69c:	4618      	mov	r0, r3
 801b69e:	370c      	adds	r7, #12
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a6:	4770      	bx	lr

0801b6a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801b6a8:	b480      	push	{r7}
 801b6aa:	b083      	sub	sp, #12
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801b6b0:	2310      	movs	r3, #16
    }
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	370c      	adds	r7, #12
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6bc:	4770      	bx	lr

0801b6be <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801b6be:	b480      	push	{r7}
 801b6c0:	b083      	sub	sp, #12
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	6078      	str	r0, [r7, #4]
 801b6c6:	460b      	mov	r3, r1
 801b6c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b6ca:	887b      	ldrh	r3, [r7, #2]
 801b6cc:	011b      	lsls	r3, r3, #4
 801b6ce:	3308      	adds	r3, #8
 801b6d0:	687a      	ldr	r2, [r7, #4]
 801b6d2:	4413      	add	r3, r2
    }
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	370c      	adds	r7, #12
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6de:	4770      	bx	lr

0801b6e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801b6e0:	b480      	push	{r7}
 801b6e2:	b083      	sub	sp, #12
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
 801b6e8:	460b      	mov	r3, r1
 801b6ea:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801b6ec:	887b      	ldrh	r3, [r7, #2]
 801b6ee:	011b      	lsls	r3, r3, #4
 801b6f0:	3308      	adds	r3, #8
 801b6f2:	687a      	ldr	r2, [r7, #4]
 801b6f4:	4413      	add	r3, r2
    }
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	370c      	adds	r7, #12
 801b6fa:	46bd      	mov	sp, r7
 801b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b700:	4770      	bx	lr

0801b702 <_GLOBAL__sub_I_LCD_GetXSize>:
 801b702:	b580      	push	{r7, lr}
 801b704:	af00      	add	r7, sp, #0
 801b706:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b70a:	2001      	movs	r0, #1
 801b70c:	f7ff ff08 	bl	801b520 <_Z41__static_initialization_and_destruction_0ii>
 801b710:	bd80      	pop	{r7, pc}

0801b712 <_GLOBAL__sub_D_LCD_GetXSize>:
 801b712:	b580      	push	{r7, lr}
 801b714:	af00      	add	r7, sp, #0
 801b716:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b71a:	2000      	movs	r0, #0
 801b71c:	f7ff ff00 	bl	801b520 <_Z41__static_initialization_and_destruction_0ii>
 801b720:	bd80      	pop	{r7, pc}
	...

0801b724 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 801b724:	b580      	push	{r7, lr}
 801b726:	b08e      	sub	sp, #56	; 0x38
 801b728:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 801b72a:	4844      	ldr	r0, [pc, #272]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b72c:	f7eb fe4a 	bl	80073c4 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 801b730:	4b42      	ldr	r3, [pc, #264]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b732:	4a43      	ldr	r2, [pc, #268]	; (801b840 <_Z11MX_LCD_Initv+0x11c>)
 801b734:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801b736:	4b41      	ldr	r3, [pc, #260]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b738:	2200      	movs	r2, #0
 801b73a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801b73c:	4b3f      	ldr	r3, [pc, #252]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b73e:	2200      	movs	r2, #0
 801b740:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801b742:	4b3e      	ldr	r3, [pc, #248]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b744:	2200      	movs	r2, #0
 801b746:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801b748:	4b3c      	ldr	r3, [pc, #240]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b74a:	2200      	movs	r2, #0
 801b74c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 801b74e:	4b3b      	ldr	r3, [pc, #236]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b750:	2228      	movs	r2, #40	; 0x28
 801b752:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 801b754:	4b39      	ldr	r3, [pc, #228]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b756:	2209      	movs	r2, #9
 801b758:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 801b75a:	4b38      	ldr	r3, [pc, #224]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b75c:	2235      	movs	r2, #53	; 0x35
 801b75e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 801b760:	4b36      	ldr	r3, [pc, #216]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b762:	220b      	movs	r2, #11
 801b764:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 801b766:	4b35      	ldr	r3, [pc, #212]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b768:	f240 2215 	movw	r2, #533	; 0x215
 801b76c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 801b76e:	4b33      	ldr	r3, [pc, #204]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b770:	f240 121b 	movw	r2, #283	; 0x11b
 801b774:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 801b776:	4b31      	ldr	r3, [pc, #196]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b778:	f240 2235 	movw	r2, #565	; 0x235
 801b77c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 801b77e:	4b2f      	ldr	r3, [pc, #188]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b780:	f240 121d 	movw	r2, #285	; 0x11d
 801b784:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801b786:	4b2d      	ldr	r3, [pc, #180]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b788:	2200      	movs	r2, #0
 801b78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801b78e:	4b2b      	ldr	r3, [pc, #172]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b790:	2200      	movs	r2, #0
 801b792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801b796:	4b29      	ldr	r3, [pc, #164]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b798:	2200      	movs	r2, #0
 801b79a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801b79e:	4827      	ldr	r0, [pc, #156]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b7a0:	f7eb fd40 	bl	8007224 <HAL_LTDC_Init>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	bf14      	ite	ne
 801b7aa:	2301      	movne	r3, #1
 801b7ac:	2300      	moveq	r3, #0
 801b7ae:	b2db      	uxtb	r3, r3
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d001      	beq.n	801b7b8 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 801b7b4:	f7e6 fd54 	bl	8002260 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801b7bc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b7c0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 801b7c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b7ca:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801b7cc:	2302      	movs	r3, #2
 801b7ce:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801b7d0:	23ff      	movs	r3, #255	; 0xff
 801b7d2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 801b7d4:	2300      	movs	r3, #0
 801b7d6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 801b7d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801b7dc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801b7de:	2307      	movs	r3, #7
 801b7e0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 801b7e2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 801b7e6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 801b7e8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 801b7ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b7f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 801b800:	2300      	movs	r3, #0
 801b802:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801b806:	1d3b      	adds	r3, r7, #4
 801b808:	2200      	movs	r2, #0
 801b80a:	4619      	mov	r1, r3
 801b80c:	480b      	ldr	r0, [pc, #44]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b80e:	f7eb fea9 	bl	8007564 <HAL_LTDC_ConfigLayer>
 801b812:	4603      	mov	r3, r0
 801b814:	2b00      	cmp	r3, #0
 801b816:	bf14      	ite	ne
 801b818:	2301      	movne	r3, #1
 801b81a:	2300      	moveq	r3, #0
 801b81c:	b2db      	uxtb	r3, r3
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d001      	beq.n	801b826 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 801b822:	f7e6 fd1d 	bl	8002260 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 801b826:	2200      	movs	r2, #0
 801b828:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801b82c:	4803      	ldr	r0, [pc, #12]	; (801b83c <_Z11MX_LCD_Initv+0x118>)
 801b82e:	f7eb fed7 	bl	80075e0 <HAL_LTDC_SetPitch>

}
 801b832:	bf00      	nop
 801b834:	3738      	adds	r7, #56	; 0x38
 801b836:	46bd      	mov	sp, r7
 801b838:	bd80      	pop	{r7, pc}
 801b83a:	bf00      	nop
 801b83c:	2000a108 	.word	0x2000a108
 801b840:	40016800 	.word	0x40016800

0801b844 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 801b844:	b580      	push	{r7, lr}
 801b846:	b088      	sub	sp, #32
 801b848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 801b84a:	1d3b      	adds	r3, r7, #4
 801b84c:	2200      	movs	r2, #0
 801b84e:	601a      	str	r2, [r3, #0]
 801b850:	605a      	str	r2, [r3, #4]
 801b852:	609a      	str	r2, [r3, #8]
 801b854:	60da      	str	r2, [r3, #12]
 801b856:	611a      	str	r2, [r3, #16]
 801b858:	615a      	str	r2, [r3, #20]
 801b85a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801b85c:	4b22      	ldr	r3, [pc, #136]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b85e:	4a23      	ldr	r2, [pc, #140]	; (801b8ec <_Z11MX_FMC_Initv+0xa8>)
 801b860:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801b862:	4b21      	ldr	r3, [pc, #132]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b864:	2200      	movs	r2, #0
 801b866:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801b868:	4b1f      	ldr	r3, [pc, #124]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b86a:	2200      	movs	r2, #0
 801b86c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801b86e:	4b1e      	ldr	r3, [pc, #120]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b870:	2204      	movs	r2, #4
 801b872:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 801b874:	4b1c      	ldr	r3, [pc, #112]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b876:	2210      	movs	r2, #16
 801b878:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801b87a:	4b1b      	ldr	r3, [pc, #108]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b87c:	2240      	movs	r2, #64	; 0x40
 801b87e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801b880:	4b19      	ldr	r3, [pc, #100]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b882:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801b886:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801b888:	4b17      	ldr	r3, [pc, #92]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b88a:	2200      	movs	r2, #0
 801b88c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801b88e:	4b16      	ldr	r3, [pc, #88]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b894:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801b896:	4b14      	ldr	r3, [pc, #80]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801b89c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801b89e:	4b12      	ldr	r3, [pc, #72]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 801b8a4:	2302      	movs	r3, #2
 801b8a6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801b8a8:	2307      	movs	r3, #7
 801b8aa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 801b8ac:	2304      	movs	r3, #4
 801b8ae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801b8b0:	2307      	movs	r3, #7
 801b8b2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 801b8b4:	2303      	movs	r3, #3
 801b8b6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801b8b8:	2302      	movs	r3, #2
 801b8ba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 801b8bc:	2302      	movs	r3, #2
 801b8be:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801b8c0:	1d3b      	adds	r3, r7, #4
 801b8c2:	4619      	mov	r1, r3
 801b8c4:	4808      	ldr	r0, [pc, #32]	; (801b8e8 <_Z11MX_FMC_Initv+0xa4>)
 801b8c6:	f7ef fe5b 	bl	800b580 <HAL_SDRAM_Init>
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	bf14      	ite	ne
 801b8d0:	2301      	movne	r3, #1
 801b8d2:	2300      	moveq	r3, #0
 801b8d4:	b2db      	uxtb	r3, r3
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d001      	beq.n	801b8de <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 801b8da:	f7e6 fcc1 	bl	8002260 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801b8de:	bf00      	nop
 801b8e0:	3720      	adds	r7, #32
 801b8e2:	46bd      	mov	sp, r7
 801b8e4:	bd80      	pop	{r7, pc}
 801b8e6:	bf00      	nop
 801b8e8:	2000a1f0 	.word	0x2000a1f0
 801b8ec:	a0000140 	.word	0xa0000140

0801b8f0 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b082      	sub	sp, #8
 801b8f4:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 801b8fa:	4b2b      	ldr	r3, [pc, #172]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b8fc:	2201      	movs	r2, #1
 801b8fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 801b900:	4b29      	ldr	r3, [pc, #164]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b902:	2210      	movs	r2, #16
 801b904:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801b906:	4b28      	ldr	r3, [pc, #160]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b908:	2201      	movs	r2, #1
 801b90a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801b90c:	4b26      	ldr	r3, [pc, #152]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b90e:	2200      	movs	r2, #0
 801b910:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801b912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b916:	4924      	ldr	r1, [pc, #144]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b918:	4824      	ldr	r0, [pc, #144]	; (801b9ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801b91a:	f7ef fe65 	bl	800b5e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801b91e:	2001      	movs	r0, #1
 801b920:	f7e7 fcec 	bl	80032fc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 801b924:	4b20      	ldr	r3, [pc, #128]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b926:	2202      	movs	r2, #2
 801b928:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801b92a:	4b1f      	ldr	r3, [pc, #124]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b92c:	2210      	movs	r2, #16
 801b92e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801b930:	4b1d      	ldr	r3, [pc, #116]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b932:	2201      	movs	r2, #1
 801b934:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801b936:	4b1c      	ldr	r3, [pc, #112]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b938:	2200      	movs	r2, #0
 801b93a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 801b93c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b940:	4919      	ldr	r1, [pc, #100]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b942:	481a      	ldr	r0, [pc, #104]	; (801b9ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801b944:	f7ef fe50 	bl	800b5e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801b948:	4b17      	ldr	r3, [pc, #92]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b94a:	2203      	movs	r2, #3
 801b94c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801b94e:	4b16      	ldr	r3, [pc, #88]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b950:	2210      	movs	r2, #16
 801b952:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 801b954:	4b14      	ldr	r3, [pc, #80]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b956:	2208      	movs	r2, #8
 801b958:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801b95a:	4b13      	ldr	r3, [pc, #76]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b95c:	2200      	movs	r2, #0
 801b95e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801b960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b964:	4910      	ldr	r1, [pc, #64]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b966:	4811      	ldr	r0, [pc, #68]	; (801b9ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801b968:	f7ef fe3e 	bl	800b5e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 801b96c:	f44f 730c 	mov.w	r3, #560	; 0x230
 801b970:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 801b972:	4b0d      	ldr	r3, [pc, #52]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b974:	2204      	movs	r2, #4
 801b976:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801b978:	4b0b      	ldr	r3, [pc, #44]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b97a:	2210      	movs	r2, #16
 801b97c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801b97e:	4b0a      	ldr	r3, [pc, #40]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b980:	2201      	movs	r2, #1
 801b982:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	4a08      	ldr	r2, [pc, #32]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b988:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801b98a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b98e:	4906      	ldr	r1, [pc, #24]	; (801b9a8 <_Z15MX_SDRAM_InitExv+0xb8>)
 801b990:	4806      	ldr	r0, [pc, #24]	; (801b9ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801b992:	f7ef fe29 	bl	800b5e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 801b996:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 801b99a:	4804      	ldr	r0, [pc, #16]	; (801b9ac <_Z15MX_SDRAM_InitExv+0xbc>)
 801b99c:	f7ef fe4f 	bl	800b63e <HAL_SDRAM_ProgramRefreshRate>
}
 801b9a0:	bf00      	nop
 801b9a2:	3708      	adds	r7, #8
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	2000a224 	.word	0x2000a224
 801b9ac:	2000a1f0 	.word	0x2000a1f0

0801b9b0 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 801b9b0:	b580      	push	{r7, lr}
 801b9b2:	b08e      	sub	sp, #56	; 0x38
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b9b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b9bc:	2200      	movs	r2, #0
 801b9be:	601a      	str	r2, [r3, #0]
 801b9c0:	605a      	str	r2, [r3, #4]
 801b9c2:	609a      	str	r2, [r3, #8]
 801b9c4:	60da      	str	r2, [r3, #12]
 801b9c6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	4a55      	ldr	r2, [pc, #340]	; (801bb24 <HAL_LTDC_MspInit+0x174>)
 801b9ce:	4293      	cmp	r3, r2
 801b9d0:	f040 80a3 	bne.w	801bb1a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801b9d4:	4b54      	ldr	r3, [pc, #336]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801b9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9d8:	4a53      	ldr	r2, [pc, #332]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801b9da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b9de:	6453      	str	r3, [r2, #68]	; 0x44
 801b9e0:	4b51      	ldr	r3, [pc, #324]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801b9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b9e8:	623b      	str	r3, [r7, #32]
 801b9ea:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801b9ec:	4b4e      	ldr	r3, [pc, #312]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801b9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9f0:	4a4d      	ldr	r2, [pc, #308]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801b9f2:	f043 0310 	orr.w	r3, r3, #16
 801b9f6:	6313      	str	r3, [r2, #48]	; 0x30
 801b9f8:	4b4b      	ldr	r3, [pc, #300]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9fc:	f003 0310 	and.w	r3, r3, #16
 801ba00:	61fb      	str	r3, [r7, #28]
 801ba02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801ba04:	4b48      	ldr	r3, [pc, #288]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba08:	4a47      	ldr	r2, [pc, #284]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ba0e:	6313      	str	r3, [r2, #48]	; 0x30
 801ba10:	4b45      	ldr	r3, [pc, #276]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ba18:	61bb      	str	r3, [r7, #24]
 801ba1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 801ba1c:	4b42      	ldr	r3, [pc, #264]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba20:	4a41      	ldr	r2, [pc, #260]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ba26:	6313      	str	r3, [r2, #48]	; 0x30
 801ba28:	4b3f      	ldr	r3, [pc, #252]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba30:	617b      	str	r3, [r7, #20]
 801ba32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801ba34:	4b3c      	ldr	r3, [pc, #240]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba38:	4a3b      	ldr	r2, [pc, #236]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba3e:	6313      	str	r3, [r2, #48]	; 0x30
 801ba40:	4b39      	ldr	r3, [pc, #228]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ba48:	613b      	str	r3, [r7, #16]
 801ba4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801ba4c:	4b36      	ldr	r3, [pc, #216]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba50:	4a35      	ldr	r2, [pc, #212]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ba56:	6313      	str	r3, [r2, #48]	; 0x30
 801ba58:	4b33      	ldr	r3, [pc, #204]	; (801bb28 <HAL_LTDC_MspInit+0x178>)
 801ba5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba60:	60fb      	str	r3, [r7, #12]
 801ba62:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 801ba64:	2310      	movs	r3, #16
 801ba66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ba68:	2302      	movs	r3, #2
 801ba6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ba70:	2300      	movs	r3, #0
 801ba72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801ba74:	230e      	movs	r3, #14
 801ba76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 801ba78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ba7c:	4619      	mov	r1, r3
 801ba7e:	482b      	ldr	r0, [pc, #172]	; (801bb2c <HAL_LTDC_MspInit+0x17c>)
 801ba80:	f7e8 fec4 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801ba84:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801ba88:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ba8a:	2302      	movs	r3, #2
 801ba8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ba8e:	2300      	movs	r3, #0
 801ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ba92:	2300      	movs	r3, #0
 801ba94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801ba96:	230e      	movs	r3, #14
 801ba98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801ba9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ba9e:	4619      	mov	r1, r3
 801baa0:	4823      	ldr	r0, [pc, #140]	; (801bb30 <HAL_LTDC_MspInit+0x180>)
 801baa2:	f7e8 feb3 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 801baa6:	23f7      	movs	r3, #247	; 0xf7
 801baa8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801baaa:	2302      	movs	r3, #2
 801baac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801baae:	2300      	movs	r3, #0
 801bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801bab2:	2300      	movs	r3, #0
 801bab4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801bab6:	230e      	movs	r3, #14
 801bab8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801baba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801babe:	4619      	mov	r1, r3
 801bac0:	481c      	ldr	r0, [pc, #112]	; (801bb34 <HAL_LTDC_MspInit+0x184>)
 801bac2:	f7e8 fea3 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 801bac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801baca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bacc:	2302      	movs	r3, #2
 801bace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bad0:	2300      	movs	r3, #0
 801bad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801bad4:	2300      	movs	r3, #0
 801bad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801bad8:	2309      	movs	r3, #9
 801bada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 801badc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bae0:	4619      	mov	r1, r3
 801bae2:	4815      	ldr	r0, [pc, #84]	; (801bb38 <HAL_LTDC_MspInit+0x188>)
 801bae4:	f7e8 fe92 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 801bae8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 801baec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801baee:	2302      	movs	r3, #2
 801baf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801baf2:	2300      	movs	r3, #0
 801baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801baf6:	2300      	movs	r3, #0
 801baf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801bafa:	230e      	movs	r3, #14
 801bafc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801bafe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bb02:	4619      	mov	r1, r3
 801bb04:	480d      	ldr	r0, [pc, #52]	; (801bb3c <HAL_LTDC_MspInit+0x18c>)
 801bb06:	f7e8 fe81 	bl	800480c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	2105      	movs	r1, #5
 801bb0e:	2058      	movs	r0, #88	; 0x58
 801bb10:	f7e7 ff62 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 801bb14:	2058      	movs	r0, #88	; 0x58
 801bb16:	f7e7 ff7b 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801bb1a:	bf00      	nop
 801bb1c:	3738      	adds	r7, #56	; 0x38
 801bb1e:	46bd      	mov	sp, r7
 801bb20:	bd80      	pop	{r7, pc}
 801bb22:	bf00      	nop
 801bb24:	40016800 	.word	0x40016800
 801bb28:	40023800 	.word	0x40023800
 801bb2c:	40021000 	.word	0x40021000
 801bb30:	40022400 	.word	0x40022400
 801bb34:	40022800 	.word	0x40022800
 801bb38:	40021800 	.word	0x40021800
 801bb3c:	40022000 	.word	0x40022000

0801bb40 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b082      	sub	sp, #8
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	4a13      	ldr	r2, [pc, #76]	; (801bb9c <HAL_LTDC_MspDeInit+0x5c>)
 801bb4e:	4293      	cmp	r3, r2
 801bb50:	d11f      	bne.n	801bb92 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 801bb52:	4b13      	ldr	r3, [pc, #76]	; (801bba0 <HAL_LTDC_MspDeInit+0x60>)
 801bb54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb56:	4a12      	ldr	r2, [pc, #72]	; (801bba0 <HAL_LTDC_MspDeInit+0x60>)
 801bb58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801bb5c:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 801bb5e:	2110      	movs	r1, #16
 801bb60:	4810      	ldr	r0, [pc, #64]	; (801bba4 <HAL_LTDC_MspDeInit+0x64>)
 801bb62:	f7e8 fffd 	bl	8004b60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801bb66:	f64e 71ff 	movw	r1, #61439	; 0xefff
 801bb6a:	480f      	ldr	r0, [pc, #60]	; (801bba8 <HAL_LTDC_MspDeInit+0x68>)
 801bb6c:	f7e8 fff8 	bl	8004b60 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 801bb70:	21f7      	movs	r1, #247	; 0xf7
 801bb72:	480e      	ldr	r0, [pc, #56]	; (801bbac <HAL_LTDC_MspDeInit+0x6c>)
 801bb74:	f7e8 fff4 	bl	8004b60 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 801bb78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801bb7c:	480c      	ldr	r0, [pc, #48]	; (801bbb0 <HAL_LTDC_MspDeInit+0x70>)
 801bb7e:	f7e8 ffef 	bl	8004b60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 801bb82:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 801bb86:	480b      	ldr	r0, [pc, #44]	; (801bbb4 <HAL_LTDC_MspDeInit+0x74>)
 801bb88:	f7e8 ffea 	bl	8004b60 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 801bb8c:	2058      	movs	r0, #88	; 0x58
 801bb8e:	f7e7 ff4d 	bl	8003a2c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 801bb92:	bf00      	nop
 801bb94:	3708      	adds	r7, #8
 801bb96:	46bd      	mov	sp, r7
 801bb98:	bd80      	pop	{r7, pc}
 801bb9a:	bf00      	nop
 801bb9c:	40016800 	.word	0x40016800
 801bba0:	40023800 	.word	0x40023800
 801bba4:	40021000 	.word	0x40021000
 801bba8:	40022400 	.word	0x40022400
 801bbac:	40022800 	.word	0x40022800
 801bbb0:	40021800 	.word	0x40021800
 801bbb4:	40022000 	.word	0x40022000

0801bbb8 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801bbb8:	b580      	push	{r7, lr}
 801bbba:	b086      	sub	sp, #24
 801bbbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 801bbbe:	1d3b      	adds	r3, r7, #4
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	601a      	str	r2, [r3, #0]
 801bbc4:	605a      	str	r2, [r3, #4]
 801bbc6:	609a      	str	r2, [r3, #8]
 801bbc8:	60da      	str	r2, [r3, #12]
 801bbca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 801bbcc:	4b3a      	ldr	r3, [pc, #232]	; (801bcb8 <_ZL15HAL_FMC_MspInitv+0x100>)
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d16d      	bne.n	801bcb0 <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 801bbd4:	4b38      	ldr	r3, [pc, #224]	; (801bcb8 <_ZL15HAL_FMC_MspInitv+0x100>)
 801bbd6:	2201      	movs	r2, #1
 801bbd8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801bbda:	4b38      	ldr	r3, [pc, #224]	; (801bcbc <_ZL15HAL_FMC_MspInitv+0x104>)
 801bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbde:	4a37      	ldr	r2, [pc, #220]	; (801bcbc <_ZL15HAL_FMC_MspInitv+0x104>)
 801bbe0:	f043 0301 	orr.w	r3, r3, #1
 801bbe4:	6393      	str	r3, [r2, #56]	; 0x38
 801bbe6:	4b35      	ldr	r3, [pc, #212]	; (801bcbc <_ZL15HAL_FMC_MspInitv+0x104>)
 801bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbea:	f003 0301 	and.w	r3, r3, #1
 801bbee:	603b      	str	r3, [r7, #0]
 801bbf0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 801bbf2:	f64f 7383 	movw	r3, #65411	; 0xff83
 801bbf6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bbf8:	2302      	movs	r3, #2
 801bbfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc00:	2303      	movs	r3, #3
 801bc02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801bc04:	230c      	movs	r3, #12
 801bc06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801bc08:	1d3b      	adds	r3, r7, #4
 801bc0a:	4619      	mov	r1, r3
 801bc0c:	482c      	ldr	r0, [pc, #176]	; (801bcc0 <_ZL15HAL_FMC_MspInitv+0x108>)
 801bc0e:	f7e8 fdfd 	bl	800480c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 801bc12:	f248 1333 	movw	r3, #33075	; 0x8133
 801bc16:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc18:	2302      	movs	r3, #2
 801bc1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc20:	2303      	movs	r3, #3
 801bc22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801bc24:	230c      	movs	r3, #12
 801bc26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801bc28:	1d3b      	adds	r3, r7, #4
 801bc2a:	4619      	mov	r1, r3
 801bc2c:	4825      	ldr	r0, [pc, #148]	; (801bcc4 <_ZL15HAL_FMC_MspInitv+0x10c>)
 801bc2e:	f7e8 fded 	bl	800480c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 801bc32:	f24c 7303 	movw	r3, #50947	; 0xc703
 801bc36:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc38:	2302      	movs	r3, #2
 801bc3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc40:	2303      	movs	r3, #3
 801bc42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801bc44:	230c      	movs	r3, #12
 801bc46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801bc48:	1d3b      	adds	r3, r7, #4
 801bc4a:	4619      	mov	r1, r3
 801bc4c:	481e      	ldr	r0, [pc, #120]	; (801bcc8 <_ZL15HAL_FMC_MspInitv+0x110>)
 801bc4e:	f7e8 fddd 	bl	800480c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 801bc52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801bc56:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc58:	2302      	movs	r3, #2
 801bc5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc60:	2303      	movs	r3, #3
 801bc62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801bc64:	230c      	movs	r3, #12
 801bc66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bc68:	1d3b      	adds	r3, r7, #4
 801bc6a:	4619      	mov	r1, r3
 801bc6c:	4817      	ldr	r0, [pc, #92]	; (801bccc <_ZL15HAL_FMC_MspInitv+0x114>)
 801bc6e:	f7e8 fdcd 	bl	800480c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 801bc72:	2328      	movs	r3, #40	; 0x28
 801bc74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc76:	2302      	movs	r3, #2
 801bc78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc7e:	2303      	movs	r3, #3
 801bc80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801bc82:	230c      	movs	r3, #12
 801bc84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801bc86:	1d3b      	adds	r3, r7, #4
 801bc88:	4619      	mov	r1, r3
 801bc8a:	4811      	ldr	r0, [pc, #68]	; (801bcd0 <_ZL15HAL_FMC_MspInitv+0x118>)
 801bc8c:	f7e8 fdbe 	bl	800480c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 801bc90:	2308      	movs	r3, #8
 801bc92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc94:	2302      	movs	r3, #2
 801bc96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc98:	2300      	movs	r3, #0
 801bc9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc9c:	2303      	movs	r3, #3
 801bc9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801bca0:	230c      	movs	r3, #12
 801bca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 801bca4:	1d3b      	adds	r3, r7, #4
 801bca6:	4619      	mov	r1, r3
 801bca8:	480a      	ldr	r0, [pc, #40]	; (801bcd4 <_ZL15HAL_FMC_MspInitv+0x11c>)
 801bcaa:	f7e8 fdaf 	bl	800480c <HAL_GPIO_Init>
 801bcae:	e000      	b.n	801bcb2 <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 801bcb0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801bcb2:	3718      	adds	r7, #24
 801bcb4:	46bd      	mov	sp, r7
 801bcb6:	bd80      	pop	{r7, pc}
 801bcb8:	2000a234 	.word	0x2000a234
 801bcbc:	40023800 	.word	0x40023800
 801bcc0:	40021000 	.word	0x40021000
 801bcc4:	40021800 	.word	0x40021800
 801bcc8:	40020c00 	.word	0x40020c00
 801bccc:	40021400 	.word	0x40021400
 801bcd0:	40021c00 	.word	0x40021c00
 801bcd4:	40020800 	.word	0x40020800

0801bcd8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b082      	sub	sp, #8
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801bce0:	f7ff ff6a 	bl	801bbb8 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801bce4:	bf00      	nop
 801bce6:	3708      	adds	r7, #8
 801bce8:	46bd      	mov	sp, r7
 801bcea:	bd80      	pop	{r7, pc}

0801bcec <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b084      	sub	sp, #16
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	4a0d      	ldr	r2, [pc, #52]	; (801bd30 <HAL_DMA2D_MspInit+0x44>)
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	d113      	bne.n	801bd26 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801bcfe:	4b0d      	ldr	r3, [pc, #52]	; (801bd34 <HAL_DMA2D_MspInit+0x48>)
 801bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd02:	4a0c      	ldr	r2, [pc, #48]	; (801bd34 <HAL_DMA2D_MspInit+0x48>)
 801bd04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801bd08:	6313      	str	r3, [r2, #48]	; 0x30
 801bd0a:	4b0a      	ldr	r3, [pc, #40]	; (801bd34 <HAL_DMA2D_MspInit+0x48>)
 801bd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bd12:	60fb      	str	r3, [r7, #12]
 801bd14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801bd16:	2200      	movs	r2, #0
 801bd18:	2105      	movs	r1, #5
 801bd1a:	205a      	movs	r0, #90	; 0x5a
 801bd1c:	f7e7 fe5c 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801bd20:	205a      	movs	r0, #90	; 0x5a
 801bd22:	f7e7 fe75 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 801bd26:	bf00      	nop
 801bd28:	3710      	adds	r7, #16
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	bd80      	pop	{r7, pc}
 801bd2e:	bf00      	nop
 801bd30:	4002b000 	.word	0x4002b000
 801bd34:	40023800 	.word	0x40023800

0801bd38 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	4a07      	ldr	r2, [pc, #28]	; (801bd64 <HAL_DMA2D_MspDeInit+0x2c>)
 801bd46:	4293      	cmp	r3, r2
 801bd48:	d108      	bne.n	801bd5c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 801bd4a:	4b07      	ldr	r3, [pc, #28]	; (801bd68 <HAL_DMA2D_MspDeInit+0x30>)
 801bd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd4e:	4a06      	ldr	r2, [pc, #24]	; (801bd68 <HAL_DMA2D_MspDeInit+0x30>)
 801bd50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801bd54:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 801bd56:	205a      	movs	r0, #90	; 0x5a
 801bd58:	f7e7 fe68 	bl	8003a2c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 801bd5c:	bf00      	nop
 801bd5e:	3708      	adds	r7, #8
 801bd60:	46bd      	mov	sp, r7
 801bd62:	bd80      	pop	{r7, pc}
 801bd64:	4002b000 	.word	0x4002b000
 801bd68:	40023800 	.word	0x40023800

0801bd6c <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 801bd6c:	b480      	push	{r7}
 801bd6e:	b083      	sub	sp, #12
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
    {
 801bd74:	4a04      	ldr	r2, [pc, #16]	; (801bd88 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	601a      	str	r2, [r3, #0]
    }
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	370c      	adds	r7, #12
 801bd80:	46bd      	mov	sp, r7
 801bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd86:	4770      	bx	lr
 801bd88:	080255b0 	.word	0x080255b0

0801bd8c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801bd8c:	b580      	push	{r7, lr}
 801bd8e:	b082      	sub	sp, #8
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	6078      	str	r0, [r7, #4]
    }
 801bd94:	6878      	ldr	r0, [r7, #4]
 801bd96:	f7ff ffe9 	bl	801bd6c <_ZN8touchgfx9DMA_QueueD1Ev>
 801bd9a:	2104      	movs	r1, #4
 801bd9c:	6878      	ldr	r0, [r7, #4]
 801bd9e:	f006 fdda 	bl	8022956 <_ZdlPvj>
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	4618      	mov	r0, r3
 801bda6:	3708      	adds	r7, #8
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd80      	pop	{r7, pc}

0801bdac <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b082      	sub	sp, #8
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	3340      	adds	r3, #64	; 0x40
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	6878      	ldr	r0, [r7, #4]
 801bdbe:	4798      	blx	r3
    }
 801bdc0:	bf00      	nop
 801bdc2:	3708      	adds	r7, #8
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	bd80      	pop	{r7, pc}

0801bdc8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 801bdc8:	b480      	push	{r7}
 801bdca:	b083      	sub	sp, #12
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
    {
 801bdd0:	4a04      	ldr	r2, [pc, #16]	; (801bde4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	601a      	str	r2, [r3, #0]
    }
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	4618      	mov	r0, r3
 801bdda:	370c      	adds	r7, #12
 801bddc:	46bd      	mov	sp, r7
 801bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde2:	4770      	bx	lr
 801bde4:	08025de8 	.word	0x08025de8

0801bde8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b082      	sub	sp, #8
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
    }
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f7ff ffe9 	bl	801bdc8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801bdf6:	210c      	movs	r1, #12
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f006 fdac 	bl	8022956 <_ZdlPvj>
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	4618      	mov	r0, r3
 801be02:	3708      	adds	r7, #8
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}

0801be08 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801be08:	b480      	push	{r7}
 801be0a:	b083      	sub	sp, #12
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801be12:	4a09      	ldr	r2, [pc, #36]	; (801be38 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	601a      	str	r2, [r3, #0]
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	683a      	ldr	r2, [r7, #0]
 801be1c:	605a      	str	r2, [r3, #4]
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2200      	movs	r2, #0
 801be22:	721a      	strb	r2, [r3, #8]
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	2200      	movs	r2, #0
 801be28:	725a      	strb	r2, [r3, #9]
    {
    }
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	4618      	mov	r0, r3
 801be2e:	370c      	adds	r7, #12
 801be30:	46bd      	mov	sp, r7
 801be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be36:	4770      	bx	lr
 801be38:	08025de8 	.word	0x08025de8

0801be3c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801be3c:	b580      	push	{r7, lr}
 801be3e:	b082      	sub	sp, #8
 801be40:	af00      	add	r7, sp, #0
 801be42:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	685a      	ldr	r2, [r3, #4]
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	3314      	adds	r3, #20
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	4610      	mov	r0, r2
 801be54:	4798      	blx	r3
    }
 801be56:	bf00      	nop
 801be58:	3708      	adds	r7, #8
 801be5a:	46bd      	mov	sp, r7
 801be5c:	bd80      	pop	{r7, pc}

0801be5e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801be5e:	b580      	push	{r7, lr}
 801be60:	b082      	sub	sp, #8
 801be62:	af00      	add	r7, sp, #0
 801be64:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801be66:	687a      	ldr	r2, [r7, #4]
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	3324      	adds	r3, #36	; 0x24
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	4610      	mov	r0, r2
 801be72:	4798      	blx	r3
    }
 801be74:	bf00      	nop
 801be76:	3708      	adds	r7, #8
 801be78:	46bd      	mov	sp, r7
 801be7a:	bd80      	pop	{r7, pc}

0801be7c <__NVIC_EnableIRQ>:
{
 801be7c:	b480      	push	{r7}
 801be7e:	b083      	sub	sp, #12
 801be80:	af00      	add	r7, sp, #0
 801be82:	4603      	mov	r3, r0
 801be84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801be86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	db0d      	blt.n	801beaa <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801be8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be92:	b2db      	uxtb	r3, r3
 801be94:	f003 021f 	and.w	r2, r3, #31
 801be98:	4907      	ldr	r1, [pc, #28]	; (801beb8 <__NVIC_EnableIRQ+0x3c>)
 801be9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be9e:	095b      	lsrs	r3, r3, #5
 801bea0:	2001      	movs	r0, #1
 801bea2:	fa00 f202 	lsl.w	r2, r0, r2
 801bea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801beaa:	bf00      	nop
 801beac:	370c      	adds	r7, #12
 801beae:	46bd      	mov	sp, r7
 801beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb4:	4770      	bx	lr
 801beb6:	bf00      	nop
 801beb8:	e000e100 	.word	0xe000e100

0801bebc <__NVIC_DisableIRQ>:
{
 801bebc:	b480      	push	{r7}
 801bebe:	b083      	sub	sp, #12
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	4603      	mov	r3, r0
 801bec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801beca:	2b00      	cmp	r3, #0
 801becc:	db12      	blt.n	801bef4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bed2:	b2db      	uxtb	r3, r3
 801bed4:	f003 021f 	and.w	r2, r3, #31
 801bed8:	4909      	ldr	r1, [pc, #36]	; (801bf00 <__NVIC_DisableIRQ+0x44>)
 801beda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bede:	095b      	lsrs	r3, r3, #5
 801bee0:	2001      	movs	r0, #1
 801bee2:	fa00 f202 	lsl.w	r2, r0, r2
 801bee6:	3320      	adds	r3, #32
 801bee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801beec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801bef0:	f3bf 8f6f 	isb	sy
}
 801bef4:	bf00      	nop
 801bef6:	370c      	adds	r7, #12
 801bef8:	46bd      	mov	sp, r7
 801befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801befe:	4770      	bx	lr
 801bf00:	e000e100 	.word	0xe000e100

0801bf04 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 801bf04:	b480      	push	{r7}
 801bf06:	b085      	sub	sp, #20
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	60f8      	str	r0, [r7, #12]
 801bf0c:	60b9      	str	r1, [r7, #8]
 801bf0e:	607a      	str	r2, [r7, #4]
 801bf10:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801bf1c:	68ba      	ldr	r2, [r7, #8]
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	430a      	orrs	r2, r1
 801bf24:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf2c:	f023 0107 	bic.w	r1, r3, #7
 801bf30:	687a      	ldr	r2, [r7, #4]
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	430a      	orrs	r2, r1
 801bf38:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bf40:	4b06      	ldr	r3, [pc, #24]	; (801bf5c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801bf42:	4013      	ands	r3, r2
 801bf44:	6839      	ldr	r1, [r7, #0]
 801bf46:	68fa      	ldr	r2, [r7, #12]
 801bf48:	6812      	ldr	r2, [r2, #0]
 801bf4a:	430b      	orrs	r3, r1
 801bf4c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801bf4e:	2300      	movs	r3, #0
}
 801bf50:	4618      	mov	r0, r3
 801bf52:	3714      	adds	r7, #20
 801bf54:	46bd      	mov	sp, r7
 801bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5a:	4770      	bx	lr
 801bf5c:	ffffc000 	.word	0xffffc000

0801bf60 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b082      	sub	sp, #8
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 801bf68:	f7f6 fd10 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 801bf6c:	4603      	mov	r3, r0
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f7ff ff64 	bl	801be3c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801bf74:	bf00      	nop
 801bf76:	3708      	adds	r7, #8
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	bd80      	pop	{r7, pc}

0801bf7c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 801bf7c:	b480      	push	{r7}
 801bf7e:	b083      	sub	sp, #12
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 801bf84:	bf00      	nop
 801bf86:	370c      	adds	r7, #12
 801bf88:	46bd      	mov	sp, r7
 801bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8e:	4770      	bx	lr

0801bf90 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b082      	sub	sp, #8
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	6078      	str	r0, [r7, #4]
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	3314      	adds	r3, #20
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	f7f7 fbd9 	bl	8013754 <_ZN8touchgfx9colortypeC1Ev>
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	3708      	adds	r7, #8
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}

0801bfac <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 801bfac:	b5b0      	push	{r4, r5, r7, lr}
 801bfae:	b082      	sub	sp, #8
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801bfb4:	687a      	ldr	r2, [r7, #4]
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	330c      	adds	r3, #12
 801bfba:	4619      	mov	r1, r3
 801bfbc:	4610      	mov	r0, r2
 801bfbe:	f7ff ff23 	bl	801be08 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801bfc2:	4a0e      	ldr	r2, [pc, #56]	; (801bffc <_ZN10STM32F7DMAC1Ev+0x50>)
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	601a      	str	r2, [r3, #0]
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	f103 000c 	add.w	r0, r3, #12
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	3320      	adds	r3, #32
 801bfd2:	2260      	movs	r2, #96	; 0x60
 801bfd4:	4619      	mov	r1, r3
 801bfd6:	f002 f861 	bl	801e09c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	3320      	adds	r3, #32
 801bfde:	245f      	movs	r4, #95	; 0x5f
 801bfe0:	461d      	mov	r5, r3
 801bfe2:	2c00      	cmp	r4, #0
 801bfe4:	db05      	blt.n	801bff2 <_ZN10STM32F7DMAC1Ev+0x46>
 801bfe6:	4628      	mov	r0, r5
 801bfe8:	f7ff ffd2 	bl	801bf90 <_ZN8touchgfx6BlitOpC1Ev>
 801bfec:	351c      	adds	r5, #28
 801bfee:	3c01      	subs	r4, #1
 801bff0:	e7f7      	b.n	801bfe2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	4618      	mov	r0, r3
 801bff6:	3708      	adds	r7, #8
 801bff8:	46bd      	mov	sp, r7
 801bffa:	bdb0      	pop	{r4, r5, r7, pc}
 801bffc:	08025564 	.word	0x08025564

0801c000 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 801c000:	b580      	push	{r7, lr}
 801c002:	b082      	sub	sp, #8
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
 801c008:	4a0b      	ldr	r2, [pc, #44]	; (801c038 <_ZN10STM32F7DMAD1Ev+0x38>)
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801c00e:	480b      	ldr	r0, [pc, #44]	; (801c03c <_ZN10STM32F7DMAD1Ev+0x3c>)
 801c010:	f7e8 f84e 	bl	80040b0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801c014:	205a      	movs	r0, #90	; 0x5a
 801c016:	f7ff ff51 	bl	801bebc <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	330c      	adds	r3, #12
 801c01e:	4618      	mov	r0, r3
 801c020:	f000 fab6 	bl	801c590 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	4618      	mov	r0, r3
 801c028:	f7ff fece 	bl	801bdc8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	4618      	mov	r0, r3
 801c030:	3708      	adds	r7, #8
 801c032:	46bd      	mov	sp, r7
 801c034:	bd80      	pop	{r7, pc}
 801c036:	bf00      	nop
 801c038:	08025564 	.word	0x08025564
 801c03c:	2000a1b0 	.word	0x2000a1b0

0801c040 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 801c040:	b580      	push	{r7, lr}
 801c042:	b082      	sub	sp, #8
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
}
 801c048:	6878      	ldr	r0, [r7, #4]
 801c04a:	f7ff ffd9 	bl	801c000 <_ZN10STM32F7DMAD1Ev>
 801c04e:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 801c052:	6878      	ldr	r0, [r7, #4]
 801c054:	f006 fc7f 	bl	8022956 <_ZdlPvj>
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	4618      	mov	r0, r3
 801c05c:	3708      	adds	r7, #8
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
	...

0801c064 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b082      	sub	sp, #8
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801c06c:	4b09      	ldr	r3, [pc, #36]	; (801c094 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801c06e:	4a0a      	ldr	r2, [pc, #40]	; (801c098 <_ZN10STM32F7DMA10initializeEv+0x34>)
 801c070:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801c072:	4808      	ldr	r0, [pc, #32]	; (801c094 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801c074:	f7e7 ffd2 	bl	800401c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801c078:	4b06      	ldr	r3, [pc, #24]	; (801c094 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801c07a:	4a08      	ldr	r2, [pc, #32]	; (801c09c <_ZN10STM32F7DMA10initializeEv+0x38>)
 801c07c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801c07e:	4b05      	ldr	r3, [pc, #20]	; (801c094 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801c080:	4a07      	ldr	r2, [pc, #28]	; (801c0a0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801c082:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 801c084:	205a      	movs	r0, #90	; 0x5a
 801c086:	f7ff fef9 	bl	801be7c <__NVIC_EnableIRQ>
}
 801c08a:	bf00      	nop
 801c08c:	3708      	adds	r7, #8
 801c08e:	46bd      	mov	sp, r7
 801c090:	bd80      	pop	{r7, pc}
 801c092:	bf00      	nop
 801c094:	2000a1b0 	.word	0x2000a1b0
 801c098:	4002b000 	.word	0x4002b000
 801c09c:	0801bf61 	.word	0x0801bf61
 801c0a0:	0801bf7d 	.word	0x0801bf7d

0801c0a4 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 801c0a4:	b480      	push	{r7}
 801c0a6:	b083      	sub	sp, #12
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 801c0ac:	4b07      	ldr	r3, [pc, #28]	; (801c0cc <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 801c0ae:	781b      	ldrb	r3, [r3, #0]
 801c0b0:	b2db      	uxtb	r3, r3
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d001      	beq.n	801c0ba <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 801c0b6:	2300      	movs	r3, #0
 801c0b8:	e001      	b.n	801c0be <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 801c0ba:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 801c0be:	4618      	mov	r0, r3
 801c0c0:	370c      	adds	r7, #12
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c8:	4770      	bx	lr
 801c0ca:	bf00      	nop
 801c0cc:	2000a238 	.word	0x2000a238

0801c0d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801c0d0:	b590      	push	{r4, r7, lr}
 801c0d2:	b08d      	sub	sp, #52	; 0x34
 801c0d4:	af02      	add	r7, sp, #8
 801c0d6:	6078      	str	r0, [r7, #4]
 801c0d8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801c0da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801c0de:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801c0e4:	683b      	ldr	r3, [r7, #0]
 801c0e6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801c0e8:	2b20      	cmp	r3, #32
 801c0ea:	d007      	beq.n	801c0fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	2b40      	cmp	r3, #64	; 0x40
 801c0f2:	d003      	beq.n	801c0fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	2b04      	cmp	r3, #4
 801c0fa:	d101      	bne.n	801c100 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	e000      	b.n	801c102 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 801c100:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801c102:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801c104:	683b      	ldr	r3, [r7, #0]
 801c106:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 801c108:	2b80      	cmp	r3, #128	; 0x80
 801c10a:	d004      	beq.n	801c116 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 801c10c:	683b      	ldr	r3, [r7, #0]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c114:	d101      	bne.n	801c11a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801c116:	2301      	movs	r3, #1
 801c118:	e000      	b.n	801c11c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801c11a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801c11c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801c11e:	f7f7 fb27 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 801c122:	4602      	mov	r2, r0
 801c124:	6813      	ldr	r3, [r2, #0]
 801c126:	3320      	adds	r3, #32
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	4610      	mov	r0, r2
 801c12c:	4798      	blx	r3
 801c12e:	4603      	mov	r3, r0
 801c130:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 801c132:	683b      	ldr	r3, [r7, #0]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	2b40      	cmp	r3, #64	; 0x40
 801c138:	d01d      	beq.n	801c176 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801c13a:	2b40      	cmp	r3, #64	; 0x40
 801c13c:	d804      	bhi.n	801c148 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801c13e:	2b04      	cmp	r3, #4
 801c140:	d00e      	beq.n	801c160 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801c142:	2b20      	cmp	r3, #32
 801c144:	d017      	beq.n	801c176 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801c146:	e019      	b.n	801c17c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 801c148:	2b80      	cmp	r3, #128	; 0x80
 801c14a:	d003      	beq.n	801c154 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801c14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c150:	d003      	beq.n	801c15a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801c152:	e013      	b.n	801c17c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 801c154:	230a      	movs	r3, #10
 801c156:	623b      	str	r3, [r7, #32]
        break;
 801c158:	e01a      	b.n	801c190 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801c15a:	2309      	movs	r3, #9
 801c15c:	623b      	str	r3, [r7, #32]
        break;
 801c15e:	e017      	b.n	801c190 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801c160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801c164:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801c166:	7f7b      	ldrb	r3, [r7, #29]
 801c168:	2b10      	cmp	r3, #16
 801c16a:	d101      	bne.n	801c170 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801c16c:	2302      	movs	r3, #2
 801c16e:	e000      	b.n	801c172 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801c170:	2301      	movs	r3, #1
 801c172:	623b      	str	r3, [r7, #32]
        break;
 801c174:	e00c      	b.n	801c190 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801c176:	2300      	movs	r3, #0
 801c178:	623b      	str	r3, [r7, #32]
        break;
 801c17a:	e009      	b.n	801c190 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801c17c:	2300      	movs	r3, #0
 801c17e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801c180:	7f7b      	ldrb	r3, [r7, #29]
 801c182:	2b10      	cmp	r3, #16
 801c184:	d101      	bne.n	801c18a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801c186:	2302      	movs	r3, #2
 801c188:	e000      	b.n	801c18c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801c18a:	2301      	movs	r3, #1
 801c18c:	623b      	str	r3, [r7, #32]
        break;
 801c18e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801c190:	4a76      	ldr	r2, [pc, #472]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c194:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801c196:	7f7b      	ldrb	r3, [r7, #29]
 801c198:	2b10      	cmp	r3, #16
 801c19a:	d101      	bne.n	801c1a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801c19c:	2302      	movs	r3, #2
 801c19e:	e000      	b.n	801c1a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801c1a0:	2301      	movs	r3, #1
 801c1a2:	4a72      	ldr	r2, [pc, #456]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c1a4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	8a5b      	ldrh	r3, [r3, #18]
 801c1aa:	461a      	mov	r2, r3
 801c1ac:	683b      	ldr	r3, [r7, #0]
 801c1ae:	899b      	ldrh	r3, [r3, #12]
 801c1b0:	1ad3      	subs	r3, r2, r3
 801c1b2:	461a      	mov	r2, r3
 801c1b4:	4b6d      	ldr	r3, [pc, #436]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c1b6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801c1b8:	7f7b      	ldrb	r3, [r7, #29]
 801c1ba:	2b10      	cmp	r3, #16
 801c1bc:	d101      	bne.n	801c1c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801c1be:	2202      	movs	r2, #2
 801c1c0:	e000      	b.n	801c1c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801c1c2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801c1c4:	683b      	ldr	r3, [r7, #0]
 801c1c6:	8a5b      	ldrh	r3, [r3, #18]
 801c1c8:	4619      	mov	r1, r3
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	899b      	ldrh	r3, [r3, #12]
 801c1ce:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801c1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c1d2:	4866      	ldr	r0, [pc, #408]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c1d4:	f7ff fe96 	bl	801bf04 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801c1d8:	4a64      	ldr	r2, [pc, #400]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c1da:	6a3b      	ldr	r3, [r7, #32]
 801c1dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801c1de:	683b      	ldr	r3, [r7, #0]
 801c1e0:	8a1b      	ldrh	r3, [r3, #16]
 801c1e2:	461a      	mov	r2, r3
 801c1e4:	683b      	ldr	r3, [r7, #0]
 801c1e6:	899b      	ldrh	r3, [r3, #12]
 801c1e8:	1ad3      	subs	r3, r2, r3
 801c1ea:	461a      	mov	r2, r3
 801c1ec:	4b5f      	ldr	r3, [pc, #380]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c1ee:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801c1f0:	7ffb      	ldrb	r3, [r7, #31]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d103      	bne.n	801c1fe <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801c1f6:	7fbb      	ldrb	r3, [r7, #30]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	f000 8082 	beq.w	801c302 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 801c1fe:	683b      	ldr	r3, [r7, #0]
 801c200:	7e1b      	ldrb	r3, [r3, #24]
 801c202:	2bff      	cmp	r3, #255	; 0xff
 801c204:	d008      	beq.n	801c218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801c206:	4b59      	ldr	r3, [pc, #356]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c208:	2202      	movs	r2, #2
 801c20a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801c20c:	683b      	ldr	r3, [r7, #0]
 801c20e:	7e1b      	ldrb	r3, [r3, #24]
 801c210:	461a      	mov	r2, r3
 801c212:	4b56      	ldr	r3, [pc, #344]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c214:	635a      	str	r2, [r3, #52]	; 0x34
 801c216:	e002      	b.n	801c21e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801c218:	4b54      	ldr	r3, [pc, #336]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c21a:	2200      	movs	r2, #0
 801c21c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 801c21e:	7fbb      	ldrb	r3, [r7, #30]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d059      	beq.n	801c2d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 801c224:	7f7b      	ldrb	r3, [r7, #29]
 801c226:	2b10      	cmp	r3, #16
 801c228:	d14a      	bne.n	801c2c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	3314      	adds	r3, #20
 801c22e:	4618      	mov	r0, r3
 801c230:	f7f8 f992 	bl	8014558 <_ZNK8touchgfx9colortypecvtEv>
 801c234:	4603      	mov	r3, r0
 801c236:	12db      	asrs	r3, r3, #11
 801c238:	f003 021f 	and.w	r2, r3, #31
 801c23c:	4613      	mov	r3, r2
 801c23e:	021b      	lsls	r3, r3, #8
 801c240:	1a9b      	subs	r3, r3, r2
 801c242:	4a4b      	ldr	r2, [pc, #300]	; (801c370 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801c244:	fb82 1203 	smull	r1, r2, r2, r3
 801c248:	441a      	add	r2, r3
 801c24a:	1112      	asrs	r2, r2, #4
 801c24c:	17db      	asrs	r3, r3, #31
 801c24e:	1ad3      	subs	r3, r2, r3
 801c250:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	3314      	adds	r3, #20
 801c256:	4618      	mov	r0, r3
 801c258:	f7f8 f97e 	bl	8014558 <_ZNK8touchgfx9colortypecvtEv>
 801c25c:	4603      	mov	r3, r0
 801c25e:	115b      	asrs	r3, r3, #5
 801c260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c264:	4613      	mov	r3, r2
 801c266:	021b      	lsls	r3, r3, #8
 801c268:	1a9b      	subs	r3, r3, r2
 801c26a:	4a42      	ldr	r2, [pc, #264]	; (801c374 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801c26c:	fb82 1203 	smull	r1, r2, r2, r3
 801c270:	441a      	add	r2, r3
 801c272:	1152      	asrs	r2, r2, #5
 801c274:	17db      	asrs	r3, r3, #31
 801c276:	1ad3      	subs	r3, r2, r3
 801c278:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	3314      	adds	r3, #20
 801c27e:	4618      	mov	r0, r3
 801c280:	f7f8 f96a 	bl	8014558 <_ZNK8touchgfx9colortypecvtEv>
 801c284:	4603      	mov	r3, r0
 801c286:	f003 021f 	and.w	r2, r3, #31
 801c28a:	4613      	mov	r3, r2
 801c28c:	021b      	lsls	r3, r3, #8
 801c28e:	1a9b      	subs	r3, r3, r2
 801c290:	4a37      	ldr	r2, [pc, #220]	; (801c370 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801c292:	fb82 1203 	smull	r1, r2, r2, r3
 801c296:	441a      	add	r2, r3
 801c298:	1112      	asrs	r2, r2, #4
 801c29a:	17db      	asrs	r3, r3, #31
 801c29c:	1ad3      	subs	r3, r2, r3
 801c29e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801c2a0:	683b      	ldr	r3, [r7, #0]
 801c2a2:	7e1b      	ldrb	r3, [r3, #24]
 801c2a4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	061a      	lsls	r2, r3, #24
 801c2aa:	69bb      	ldr	r3, [r7, #24]
 801c2ac:	041b      	lsls	r3, r3, #16
 801c2ae:	431a      	orrs	r2, r3
 801c2b0:	697b      	ldr	r3, [r7, #20]
 801c2b2:	021b      	lsls	r3, r3, #8
 801c2b4:	431a      	orrs	r2, r3
 801c2b6:	693b      	ldr	r3, [r7, #16]
 801c2b8:	4313      	orrs	r3, r2
 801c2ba:	4a2c      	ldr	r2, [pc, #176]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c2bc:	6353      	str	r3, [r2, #52]	; 0x34
 801c2be:	e00b      	b.n	801c2d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801c2c0:	683b      	ldr	r3, [r7, #0]
 801c2c2:	3314      	adds	r3, #20
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	f7f8 f954 	bl	8014572 <_ZNK8touchgfx9colortype10getColor32Ev>
 801c2ca:	4602      	mov	r2, r0
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	7e1b      	ldrb	r3, [r3, #24]
 801c2d0:	061b      	lsls	r3, r3, #24
 801c2d2:	4313      	orrs	r3, r2
 801c2d4:	4a25      	ldr	r2, [pc, #148]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c2d6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801c2d8:	683b      	ldr	r3, [r7, #0]
 801c2da:	8a5b      	ldrh	r3, [r3, #18]
 801c2dc:	461a      	mov	r2, r3
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	899b      	ldrh	r3, [r3, #12]
 801c2e2:	1ad3      	subs	r3, r2, r3
 801c2e4:	461a      	mov	r2, r3
 801c2e6:	4b21      	ldr	r3, [pc, #132]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c2e8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801c2ea:	7f7b      	ldrb	r3, [r7, #29]
 801c2ec:	2b10      	cmp	r3, #16
 801c2ee:	d101      	bne.n	801c2f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801c2f0:	2302      	movs	r3, #2
 801c2f2:	e000      	b.n	801c2f6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 801c2f4:	2301      	movs	r3, #1
 801c2f6:	4a1d      	ldr	r2, [pc, #116]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c2f8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801c2fa:	2100      	movs	r1, #0
 801c2fc:	481b      	ldr	r0, [pc, #108]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c2fe:	f7e8 f957 	bl	80045b0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801c302:	2101      	movs	r1, #1
 801c304:	4819      	ldr	r0, [pc, #100]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c306:	f7e8 f953 	bl	80045b0 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 801c30a:	7ffb      	ldrb	r3, [r7, #31]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d102      	bne.n	801c316 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 801c310:	7fbb      	ldrb	r3, [r7, #30]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d015      	beq.n	801c342 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c31a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801c31c:	683b      	ldr	r3, [r7, #0]
 801c31e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c320:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801c322:	683b      	ldr	r3, [r7, #0]
 801c324:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c326:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801c328:	683b      	ldr	r3, [r7, #0]
 801c32a:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c32c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c332:	9301      	str	r3, [sp, #4]
 801c334:	9200      	str	r2, [sp, #0]
 801c336:	4623      	mov	r3, r4
 801c338:	4602      	mov	r2, r0
 801c33a:	480c      	ldr	r0, [pc, #48]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c33c:	f7e7 ff5b 	bl	80041f6 <HAL_DMA2D_BlendingStart_IT>
 801c340:	e00f      	b.n	801c362 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801c342:	683b      	ldr	r3, [r7, #0]
 801c344:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801c346:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 801c348:	683b      	ldr	r3, [r7, #0]
 801c34a:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 801c34c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801c34e:	683b      	ldr	r3, [r7, #0]
 801c350:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801c352:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 801c354:	683b      	ldr	r3, [r7, #0]
 801c356:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 801c358:	9300      	str	r3, [sp, #0]
 801c35a:	4603      	mov	r3, r0
 801c35c:	4803      	ldr	r0, [pc, #12]	; (801c36c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801c35e:	f7e7 ff17 	bl	8004190 <HAL_DMA2D_Start_IT>
    }
}
 801c362:	bf00      	nop
 801c364:	372c      	adds	r7, #44	; 0x2c
 801c366:	46bd      	mov	sp, r7
 801c368:	bd90      	pop	{r4, r7, pc}
 801c36a:	bf00      	nop
 801c36c:	2000a1b0 	.word	0x2000a1b0
 801c370:	84210843 	.word	0x84210843
 801c374:	82082083 	.word	0x82082083

0801c378 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 801c378:	b590      	push	{r4, r7, lr}
 801c37a:	b08d      	sub	sp, #52	; 0x34
 801c37c:	af02      	add	r7, sp, #8
 801c37e:	6078      	str	r0, [r7, #4]
 801c380:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801c382:	f7f7 f9f5 	bl	8013770 <_ZN8touchgfx3HAL3lcdEv>
 801c386:	4602      	mov	r2, r0
 801c388:	6813      	ldr	r3, [r2, #0]
 801c38a:	3320      	adds	r3, #32
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	4610      	mov	r0, r2
 801c390:	4798      	blx	r3
 801c392:	4603      	mov	r3, r0
 801c394:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801c396:	7ffb      	ldrb	r3, [r7, #31]
 801c398:	2b10      	cmp	r3, #16
 801c39a:	d101      	bne.n	801c3a0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801c39c:	2302      	movs	r3, #2
 801c39e:	e000      	b.n	801c3a2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 801c3a0:	2301      	movs	r3, #1
 801c3a2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 801c3a8:	7ffb      	ldrb	r3, [r7, #31]
 801c3aa:	2b10      	cmp	r3, #16
 801c3ac:	d149      	bne.n	801c442 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801c3ae:	683b      	ldr	r3, [r7, #0]
 801c3b0:	3314      	adds	r3, #20
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f7f8 f8d0 	bl	8014558 <_ZNK8touchgfx9colortypecvtEv>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	12db      	asrs	r3, r3, #11
 801c3bc:	f003 021f 	and.w	r2, r3, #31
 801c3c0:	4613      	mov	r3, r2
 801c3c2:	021b      	lsls	r3, r3, #8
 801c3c4:	1a9b      	subs	r3, r3, r2
 801c3c6:	4a69      	ldr	r2, [pc, #420]	; (801c56c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801c3c8:	fb82 1203 	smull	r1, r2, r2, r3
 801c3cc:	441a      	add	r2, r3
 801c3ce:	1112      	asrs	r2, r2, #4
 801c3d0:	17db      	asrs	r3, r3, #31
 801c3d2:	1ad3      	subs	r3, r2, r3
 801c3d4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	3314      	adds	r3, #20
 801c3da:	4618      	mov	r0, r3
 801c3dc:	f7f8 f8bc 	bl	8014558 <_ZNK8touchgfx9colortypecvtEv>
 801c3e0:	4603      	mov	r3, r0
 801c3e2:	115b      	asrs	r3, r3, #5
 801c3e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c3e8:	4613      	mov	r3, r2
 801c3ea:	021b      	lsls	r3, r3, #8
 801c3ec:	1a9b      	subs	r3, r3, r2
 801c3ee:	4a60      	ldr	r2, [pc, #384]	; (801c570 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801c3f0:	fb82 1203 	smull	r1, r2, r2, r3
 801c3f4:	441a      	add	r2, r3
 801c3f6:	1152      	asrs	r2, r2, #5
 801c3f8:	17db      	asrs	r3, r3, #31
 801c3fa:	1ad3      	subs	r3, r2, r3
 801c3fc:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801c3fe:	683b      	ldr	r3, [r7, #0]
 801c400:	3314      	adds	r3, #20
 801c402:	4618      	mov	r0, r3
 801c404:	f7f8 f8a8 	bl	8014558 <_ZNK8touchgfx9colortypecvtEv>
 801c408:	4603      	mov	r3, r0
 801c40a:	f003 021f 	and.w	r2, r3, #31
 801c40e:	4613      	mov	r3, r2
 801c410:	021b      	lsls	r3, r3, #8
 801c412:	1a9b      	subs	r3, r3, r2
 801c414:	4a55      	ldr	r2, [pc, #340]	; (801c56c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801c416:	fb82 1203 	smull	r1, r2, r2, r3
 801c41a:	441a      	add	r2, r3
 801c41c:	1112      	asrs	r2, r2, #4
 801c41e:	17db      	asrs	r3, r3, #31
 801c420:	1ad3      	subs	r3, r2, r3
 801c422:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 801c424:	683b      	ldr	r3, [r7, #0]
 801c426:	7e1b      	ldrb	r3, [r3, #24]
 801c428:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801c42a:	68bb      	ldr	r3, [r7, #8]
 801c42c:	061a      	lsls	r2, r3, #24
 801c42e:	697b      	ldr	r3, [r7, #20]
 801c430:	041b      	lsls	r3, r3, #16
 801c432:	431a      	orrs	r2, r3
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	021b      	lsls	r3, r3, #8
 801c438:	4313      	orrs	r3, r2
 801c43a:	68fa      	ldr	r2, [r7, #12]
 801c43c:	4313      	orrs	r3, r2
 801c43e:	623b      	str	r3, [r7, #32]
 801c440:	e00b      	b.n	801c45a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	7e1b      	ldrb	r3, [r3, #24]
 801c446:	061b      	lsls	r3, r3, #24
 801c448:	461c      	mov	r4, r3
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	3314      	adds	r3, #20
 801c44e:	4618      	mov	r0, r3
 801c450:	f7f8 f88f 	bl	8014572 <_ZNK8touchgfx9colortype10getColor32Ev>
 801c454:	4603      	mov	r3, r0
 801c456:	4323      	orrs	r3, r4
 801c458:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801c45a:	683b      	ldr	r3, [r7, #0]
 801c45c:	681b      	ldr	r3, [r3, #0]
 801c45e:	2b08      	cmp	r3, #8
 801c460:	d103      	bne.n	801c46a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801c462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801c466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c468:	e003      	b.n	801c472 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801c46a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801c46e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c470:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801c472:	4a40      	ldr	r2, [pc, #256]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c476:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801c478:	7ffb      	ldrb	r3, [r7, #31]
 801c47a:	2b10      	cmp	r3, #16
 801c47c:	d101      	bne.n	801c482 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801c47e:	2302      	movs	r3, #2
 801c480:	e000      	b.n	801c484 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 801c482:	2301      	movs	r3, #1
 801c484:	4a3b      	ldr	r2, [pc, #236]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c486:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801c488:	683b      	ldr	r3, [r7, #0]
 801c48a:	8a5b      	ldrh	r3, [r3, #18]
 801c48c:	461a      	mov	r2, r3
 801c48e:	683b      	ldr	r3, [r7, #0]
 801c490:	899b      	ldrh	r3, [r3, #12]
 801c492:	1ad3      	subs	r3, r2, r3
 801c494:	461a      	mov	r2, r3
 801c496:	4b37      	ldr	r3, [pc, #220]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c498:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801c49a:	7ffb      	ldrb	r3, [r7, #31]
 801c49c:	2b10      	cmp	r3, #16
 801c49e:	d101      	bne.n	801c4a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 801c4a0:	2202      	movs	r2, #2
 801c4a2:	e000      	b.n	801c4a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 801c4a4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801c4a6:	683b      	ldr	r3, [r7, #0]
 801c4a8:	8a5b      	ldrh	r3, [r3, #18]
 801c4aa:	4619      	mov	r1, r3
 801c4ac:	683b      	ldr	r3, [r7, #0]
 801c4ae:	899b      	ldrh	r3, [r3, #12]
 801c4b0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801c4b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4b4:	482f      	ldr	r0, [pc, #188]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4b6:	f7ff fd25 	bl	801bf04 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801c4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c4c0:	d11e      	bne.n	801c500 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801c4c2:	4b2c      	ldr	r3, [pc, #176]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4c4:	2201      	movs	r2, #1
 801c4c6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801c4c8:	4a2a      	ldr	r2, [pc, #168]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4ca:	6a3b      	ldr	r3, [r7, #32]
 801c4cc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801c4ce:	4b29      	ldr	r3, [pc, #164]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4d0:	2209      	movs	r2, #9
 801c4d2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	8a5b      	ldrh	r3, [r3, #18]
 801c4d8:	461a      	mov	r2, r3
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	899b      	ldrh	r3, [r3, #12]
 801c4de:	1ad3      	subs	r3, r2, r3
 801c4e0:	461a      	mov	r2, r3
 801c4e2:	4b24      	ldr	r3, [pc, #144]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4e4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801c4e6:	7ffb      	ldrb	r3, [r7, #31]
 801c4e8:	2b10      	cmp	r3, #16
 801c4ea:	d101      	bne.n	801c4f0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801c4ec:	2302      	movs	r3, #2
 801c4ee:	e000      	b.n	801c4f2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 801c4f0:	2301      	movs	r3, #1
 801c4f2:	4a20      	ldr	r2, [pc, #128]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4f4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801c4f6:	2100      	movs	r1, #0
 801c4f8:	481e      	ldr	r0, [pc, #120]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c4fa:	f7e8 f859 	bl	80045b0 <HAL_DMA2D_ConfigLayer>
 801c4fe:	e005      	b.n	801c50c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801c500:	4a1c      	ldr	r2, [pc, #112]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c502:	69bb      	ldr	r3, [r7, #24]
 801c504:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801c506:	4b1b      	ldr	r3, [pc, #108]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c508:	2200      	movs	r2, #0
 801c50a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801c50c:	2101      	movs	r1, #1
 801c50e:	4819      	ldr	r0, [pc, #100]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c510:	f7e8 f84e 	bl	80045b0 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c51a:	d115      	bne.n	801c548 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801c51c:	683b      	ldr	r3, [r7, #0]
 801c51e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c520:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801c522:	683b      	ldr	r3, [r7, #0]
 801c524:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c526:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801c528:	683b      	ldr	r3, [r7, #0]
 801c52a:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c52c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801c52e:	683b      	ldr	r3, [r7, #0]
 801c530:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c532:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801c534:	683b      	ldr	r3, [r7, #0]
 801c536:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801c538:	9301      	str	r3, [sp, #4]
 801c53a:	9200      	str	r2, [sp, #0]
 801c53c:	4623      	mov	r3, r4
 801c53e:	4602      	mov	r2, r0
 801c540:	480c      	ldr	r0, [pc, #48]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c542:	f7e7 fe58 	bl	80041f6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801c546:	e00d      	b.n	801c564 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	689b      	ldr	r3, [r3, #8]
 801c54c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801c54e:	683b      	ldr	r3, [r7, #0]
 801c550:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801c552:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 801c554:	683b      	ldr	r3, [r7, #0]
 801c556:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801c558:	9300      	str	r3, [sp, #0]
 801c55a:	460b      	mov	r3, r1
 801c55c:	6a39      	ldr	r1, [r7, #32]
 801c55e:	4805      	ldr	r0, [pc, #20]	; (801c574 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801c560:	f7e7 fe16 	bl	8004190 <HAL_DMA2D_Start_IT>
}
 801c564:	bf00      	nop
 801c566:	372c      	adds	r7, #44	; 0x2c
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd90      	pop	{r4, r7, pc}
 801c56c:	84210843 	.word	0x84210843
 801c570:	82082083 	.word	0x82082083
 801c574:	2000a1b0 	.word	0x2000a1b0

0801c578 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b082      	sub	sp, #8
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	4618      	mov	r0, r3
 801c584:	f001 fd78 	bl	801e078 <_ZN8touchgfx13DMA_Interface5startEv>
}
 801c588:	bf00      	nop
 801c58a:	3708      	adds	r7, #8
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd80      	pop	{r7, pc}

0801c590 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801c590:	b580      	push	{r7, lr}
 801c592:	b082      	sub	sp, #8
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
 801c598:	4a05      	ldr	r2, [pc, #20]	; (801c5b0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	601a      	str	r2, [r3, #0]
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	4618      	mov	r0, r3
 801c5a2:	f7ff fbe3 	bl	801bd6c <_ZN8touchgfx9DMA_QueueD1Ev>
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	3708      	adds	r7, #8
 801c5ac:	46bd      	mov	sp, r7
 801c5ae:	bd80      	pop	{r7, pc}
 801c5b0:	08025e34 	.word	0x08025e34

0801c5b4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	b082      	sub	sp, #8
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	6078      	str	r0, [r7, #4]
 801c5bc:	6878      	ldr	r0, [r7, #4]
 801c5be:	f7ff ffe7 	bl	801c590 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801c5c2:	2114      	movs	r1, #20
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f006 f9c6 	bl	8022956 <_ZdlPvj>
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	3708      	adds	r7, #8
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}

0801c5d4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801c5d4:	b480      	push	{r7}
 801c5d6:	b083      	sub	sp, #12
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
 801c5dc:	460b      	mov	r3, r1
 801c5de:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	78fa      	ldrb	r2, [r7, #3]
 801c5e4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	2201      	movs	r2, #1
 801c5ec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 801c5f0:	bf00      	nop
 801c5f2:	370c      	adds	r7, #12
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5fa:	4770      	bx	lr

0801c5fc <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b082      	sub	sp, #8
 801c600:	af00      	add	r7, sp, #0
 801c602:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	3318      	adds	r3, #24
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	6878      	ldr	r0, [r7, #4]
 801c60e:	4798      	blx	r3
    }
 801c610:	bf00      	nop
 801c612:	3708      	adds	r7, #8
 801c614:	46bd      	mov	sp, r7
 801c616:	bd80      	pop	{r7, pc}

0801c618 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801c618:	b580      	push	{r7, lr}
 801c61a:	b082      	sub	sp, #8
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	685a      	ldr	r2, [r3, #4]
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	685b      	ldr	r3, [r3, #4]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	4610      	mov	r0, r2
 801c62e:	4798      	blx	r3
 801c630:	4603      	mov	r3, r0
    };
 801c632:	4618      	mov	r0, r3
 801c634:	3708      	adds	r7, #8
 801c636:	46bd      	mov	sp, r7
 801c638:	bd80      	pop	{r7, pc}

0801c63a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801c63a:	b480      	push	{r7}
 801c63c:	b083      	sub	sp, #12
 801c63e:	af00      	add	r7, sp, #0
 801c640:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c648:	3301      	adds	r3, #1
 801c64a:	b2da      	uxtb	r2, r3
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 801c652:	bf00      	nop
 801c654:	370c      	adds	r7, #12
 801c656:	46bd      	mov	sp, r7
 801c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c65c:	4770      	bx	lr

0801c65e <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801c65e:	b580      	push	{r7, lr}
 801c660:	b082      	sub	sp, #8
 801c662:	af00      	add	r7, sp, #0
 801c664:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 801c666:	6878      	ldr	r0, [r7, #4]
 801c668:	f001 fbdc 	bl	801de24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	681b      	ldr	r3, [r3, #0]
 801c670:	3384      	adds	r3, #132	; 0x84
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	6878      	ldr	r0, [r7, #4]
 801c676:	4798      	blx	r3
    }
 801c678:	bf00      	nop
 801c67a:	3708      	adds	r7, #8
 801c67c:	46bd      	mov	sp, r7
 801c67e:	bd80      	pop	{r7, pc}

0801c680 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 801c680:	b480      	push	{r7}
 801c682:	b083      	sub	sp, #12
 801c684:	af00      	add	r7, sp, #0
 801c686:	6078      	str	r0, [r7, #4]
 801c688:	6039      	str	r1, [r7, #0]
        return false;
 801c68a:	2300      	movs	r3, #0
    }
 801c68c:	4618      	mov	r0, r3
 801c68e:	370c      	adds	r7, #12
 801c690:	46bd      	mov	sp, r7
 801c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c696:	4770      	bx	lr

0801c698 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801c698:	b580      	push	{r7, lr}
 801c69a:	b086      	sub	sp, #24
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	60f8      	str	r0, [r7, #12]
 801c6a0:	60b9      	str	r1, [r7, #8]
 801c6a2:	4611      	mov	r1, r2
 801c6a4:	461a      	mov	r2, r3
 801c6a6:	460b      	mov	r3, r1
 801c6a8:	80fb      	strh	r3, [r7, #6]
 801c6aa:	4613      	mov	r3, r2
 801c6ac:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 801c6ae:	2300      	movs	r3, #0
 801c6b0:	617b      	str	r3, [r7, #20]
        switch (depth)
 801c6b2:	88fb      	ldrh	r3, [r7, #6]
 801c6b4:	3b01      	subs	r3, #1
 801c6b6:	2b1f      	cmp	r3, #31
 801c6b8:	d862      	bhi.n	801c780 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 801c6ba:	a201      	add	r2, pc, #4	; (adr r2, 801c6c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 801c6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6c0:	0801c75d 	.word	0x0801c75d
 801c6c4:	0801c75d 	.word	0x0801c75d
 801c6c8:	0801c781 	.word	0x0801c781
 801c6cc:	0801c75d 	.word	0x0801c75d
 801c6d0:	0801c781 	.word	0x0801c781
 801c6d4:	0801c781 	.word	0x0801c781
 801c6d8:	0801c781 	.word	0x0801c781
 801c6dc:	0801c741 	.word	0x0801c741
 801c6e0:	0801c781 	.word	0x0801c781
 801c6e4:	0801c781 	.word	0x0801c781
 801c6e8:	0801c781 	.word	0x0801c781
 801c6ec:	0801c781 	.word	0x0801c781
 801c6f0:	0801c781 	.word	0x0801c781
 801c6f4:	0801c781 	.word	0x0801c781
 801c6f8:	0801c781 	.word	0x0801c781
 801c6fc:	0801c741 	.word	0x0801c741
 801c700:	0801c781 	.word	0x0801c781
 801c704:	0801c781 	.word	0x0801c781
 801c708:	0801c781 	.word	0x0801c781
 801c70c:	0801c781 	.word	0x0801c781
 801c710:	0801c781 	.word	0x0801c781
 801c714:	0801c781 	.word	0x0801c781
 801c718:	0801c781 	.word	0x0801c781
 801c71c:	0801c741 	.word	0x0801c741
 801c720:	0801c781 	.word	0x0801c781
 801c724:	0801c781 	.word	0x0801c781
 801c728:	0801c781 	.word	0x0801c781
 801c72c:	0801c781 	.word	0x0801c781
 801c730:	0801c781 	.word	0x0801c781
 801c734:	0801c781 	.word	0x0801c781
 801c738:	0801c781 	.word	0x0801c781
 801c73c:	0801c741 	.word	0x0801c741
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 801c740:	4b29      	ldr	r3, [pc, #164]	; (801c7e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801c742:	881b      	ldrh	r3, [r3, #0]
 801c744:	461a      	mov	r2, r3
 801c746:	4b29      	ldr	r3, [pc, #164]	; (801c7ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 801c748:	881b      	ldrh	r3, [r3, #0]
 801c74a:	fb03 f302 	mul.w	r3, r3, r2
 801c74e:	88fa      	ldrh	r2, [r7, #6]
 801c750:	08d2      	lsrs	r2, r2, #3
 801c752:	b292      	uxth	r2, r2
 801c754:	fb02 f303 	mul.w	r3, r2, r3
 801c758:	617b      	str	r3, [r7, #20]
            break;
 801c75a:	e018      	b.n	801c78e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801c75c:	4b22      	ldr	r3, [pc, #136]	; (801c7e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801c75e:	881b      	ldrh	r3, [r3, #0]
 801c760:	461a      	mov	r2, r3
 801c762:	88fb      	ldrh	r3, [r7, #6]
 801c764:	fb03 f302 	mul.w	r3, r3, r2
 801c768:	3307      	adds	r3, #7
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	da00      	bge.n	801c770 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 801c76e:	3307      	adds	r3, #7
 801c770:	10db      	asrs	r3, r3, #3
 801c772:	461a      	mov	r2, r3
 801c774:	4b1d      	ldr	r3, [pc, #116]	; (801c7ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 801c776:	881b      	ldrh	r3, [r3, #0]
 801c778:	fb03 f302 	mul.w	r3, r3, r2
 801c77c:	617b      	str	r3, [r7, #20]
            break;
 801c77e:	e006      	b.n	801c78e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 801c780:	4b1b      	ldr	r3, [pc, #108]	; (801c7f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 801c782:	4a1c      	ldr	r2, [pc, #112]	; (801c7f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 801c784:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 801c788:	481b      	ldr	r0, [pc, #108]	; (801c7f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 801c78a:	f006 f901 	bl	8022990 <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 801c78e:	68bb      	ldr	r3, [r7, #8]
 801c790:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	693a      	ldr	r2, [r7, #16]
 801c796:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 801c798:	797b      	ldrb	r3, [r7, #5]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d007      	beq.n	801c7ae <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 801c79e:	693a      	ldr	r2, [r7, #16]
 801c7a0:	697b      	ldr	r3, [r7, #20]
 801c7a2:	4413      	add	r3, r2
 801c7a4:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	693a      	ldr	r2, [r7, #16]
 801c7aa:	63da      	str	r2, [r3, #60]	; 0x3c
 801c7ac:	e002      	b.n	801c7b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 801c7b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d007      	beq.n	801c7cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 801c7bc:	693a      	ldr	r2, [r7, #16]
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	4413      	add	r3, r2
 801c7c2:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	693a      	ldr	r2, [r7, #16]
 801c7c8:	641a      	str	r2, [r3, #64]	; 0x40
 801c7ca:	e002      	b.n	801c7d2 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 801c7d2:	4a0a      	ldr	r2, [pc, #40]	; (801c7fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 801c7d4:	797b      	ldrb	r3, [r7, #5]
 801c7d6:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 801c7d8:	4a09      	ldr	r2, [pc, #36]	; (801c800 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 801c7da:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c7de:	7013      	strb	r3, [r2, #0]
    }
 801c7e0:	bf00      	nop
 801c7e2:	3718      	adds	r7, #24
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	2000a282 	.word	0x2000a282
 801c7ec:	2000a284 	.word	0x2000a284
 801c7f0:	08024570 	.word	0x08024570
 801c7f4:	080256c4 	.word	0x080256c4
 801c7f8:	08024590 	.word	0x08024590
 801c7fc:	2000a28c 	.word	0x2000a28c
 801c800:	2000a28d 	.word	0x2000a28d

0801c804 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801c804:	b580      	push	{r7, lr}
 801c806:	b084      	sub	sp, #16
 801c808:	af00      	add	r7, sp, #0
 801c80a:	60f8      	str	r0, [r7, #12]
 801c80c:	60b9      	str	r1, [r7, #8]
 801c80e:	607a      	str	r2, [r7, #4]
 801c810:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801c812:	68bb      	ldr	r3, [r7, #8]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d106      	bne.n	801c826 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801c818:	4b11      	ldr	r3, [pc, #68]	; (801c860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801c81a:	4a12      	ldr	r2, [pc, #72]	; (801c864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801c81c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801c820:	4811      	ldr	r0, [pc, #68]	; (801c868 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801c822:	f006 f8b5 	bl	8022990 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	68ba      	ldr	r2, [r7, #8]
 801c82a:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	687a      	ldr	r2, [r7, #4]
 801c830:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	683a      	ldr	r2, [r7, #0]
 801c836:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	bf14      	ite	ne
 801c83e:	2301      	movne	r3, #1
 801c840:	2300      	moveq	r3, #0
 801c842:	b2da      	uxtb	r2, r3
 801c844:	4b09      	ldr	r3, [pc, #36]	; (801c86c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801c846:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801c848:	683b      	ldr	r3, [r7, #0]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	bf14      	ite	ne
 801c84e:	2301      	movne	r3, #1
 801c850:	2300      	moveq	r3, #0
 801c852:	b2da      	uxtb	r2, r3
 801c854:	4b06      	ldr	r3, [pc, #24]	; (801c870 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801c856:	701a      	strb	r2, [r3, #0]
    }
 801c858:	bf00      	nop
 801c85a:	3710      	adds	r7, #16
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}
 801c860:	080245dc 	.word	0x080245dc
 801c864:	08025674 	.word	0x08025674
 801c868:	08024590 	.word	0x08024590
 801c86c:	2000a28c 	.word	0x2000a28c
 801c870:	2000a28d 	.word	0x2000a28d

0801c874 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 801c874:	b580      	push	{r7, lr}
 801c876:	b082      	sub	sp, #8
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
 801c87c:	460b      	mov	r3, r1
 801c87e:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c884:	2b00      	cmp	r3, #0
 801c886:	d004      	beq.n	801c892 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c88c:	887a      	ldrh	r2, [r7, #2]
 801c88e:	4610      	mov	r0, r2
 801c890:	4798      	blx	r3
        }
    }
 801c892:	bf00      	nop
 801c894:	3708      	adds	r7, #8
 801c896:	46bd      	mov	sp, r7
 801c898:	bd80      	pop	{r7, pc}
	...

0801c89c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801c89c:	b480      	push	{r7}
 801c89e:	b083      	sub	sp, #12
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c8b0:	429a      	cmp	r2, r3
 801c8b2:	d017      	beq.n	801c8e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801c8b4:	4b1a      	ldr	r3, [pc, #104]	; (801c920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c8b6:	781b      	ldrb	r3, [r3, #0]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d12a      	bne.n	801c912 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801c8bc:	4b19      	ldr	r3, [pc, #100]	; (801c924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c8be:	881a      	ldrh	r2, [r3, #0]
 801c8c0:	4b19      	ldr	r3, [pc, #100]	; (801c928 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c8c2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801c8c4:	4b19      	ldr	r3, [pc, #100]	; (801c92c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c8c6:	881a      	ldrh	r2, [r3, #0]
 801c8c8:	4b19      	ldr	r3, [pc, #100]	; (801c930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c8ca:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801c8cc:	4b16      	ldr	r3, [pc, #88]	; (801c928 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c8ce:	881a      	ldrh	r2, [r3, #0]
 801c8d0:	4b16      	ldr	r3, [pc, #88]	; (801c92c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c8d2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801c8d4:	4b16      	ldr	r3, [pc, #88]	; (801c930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c8d6:	881a      	ldrh	r2, [r3, #0]
 801c8d8:	4b12      	ldr	r3, [pc, #72]	; (801c924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c8da:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801c8dc:	4b10      	ldr	r3, [pc, #64]	; (801c920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c8de:	2201      	movs	r2, #1
 801c8e0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801c8e2:	e016      	b.n	801c912 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801c8e4:	4b0e      	ldr	r3, [pc, #56]	; (801c920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c8e6:	781b      	ldrb	r3, [r3, #0]
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	d012      	beq.n	801c912 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801c8ec:	4b0f      	ldr	r3, [pc, #60]	; (801c92c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c8ee:	881a      	ldrh	r2, [r3, #0]
 801c8f0:	4b0d      	ldr	r3, [pc, #52]	; (801c928 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c8f2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801c8f4:	4b0b      	ldr	r3, [pc, #44]	; (801c924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c8f6:	881a      	ldrh	r2, [r3, #0]
 801c8f8:	4b0d      	ldr	r3, [pc, #52]	; (801c930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c8fa:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801c8fc:	4b0c      	ldr	r3, [pc, #48]	; (801c930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801c8fe:	881a      	ldrh	r2, [r3, #0]
 801c900:	4b0a      	ldr	r3, [pc, #40]	; (801c92c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801c902:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801c904:	4b08      	ldr	r3, [pc, #32]	; (801c928 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801c906:	881a      	ldrh	r2, [r3, #0]
 801c908:	4b06      	ldr	r3, [pc, #24]	; (801c924 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801c90a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801c90c:	4b04      	ldr	r3, [pc, #16]	; (801c920 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801c90e:	2200      	movs	r2, #0
 801c910:	701a      	strb	r2, [r3, #0]
    }
 801c912:	bf00      	nop
 801c914:	370c      	adds	r7, #12
 801c916:	46bd      	mov	sp, r7
 801c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c91c:	4770      	bx	lr
 801c91e:	bf00      	nop
 801c920:	2000a286 	.word	0x2000a286
 801c924:	2000a282 	.word	0x2000a282
 801c928:	2000a288 	.word	0x2000a288
 801c92c:	2000a284 	.word	0x2000a284
 801c930:	2000a28a 	.word	0x2000a28a

0801c934 <__NVIC_EnableIRQ>:
{
 801c934:	b480      	push	{r7}
 801c936:	b083      	sub	sp, #12
 801c938:	af00      	add	r7, sp, #0
 801c93a:	4603      	mov	r3, r0
 801c93c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c942:	2b00      	cmp	r3, #0
 801c944:	db0d      	blt.n	801c962 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c94a:	b2db      	uxtb	r3, r3
 801c94c:	f003 021f 	and.w	r2, r3, #31
 801c950:	4907      	ldr	r1, [pc, #28]	; (801c970 <__NVIC_EnableIRQ+0x3c>)
 801c952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c956:	095b      	lsrs	r3, r3, #5
 801c958:	2001      	movs	r0, #1
 801c95a:	fa00 f202 	lsl.w	r2, r0, r2
 801c95e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801c962:	bf00      	nop
 801c964:	370c      	adds	r7, #12
 801c966:	46bd      	mov	sp, r7
 801c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c96c:	4770      	bx	lr
 801c96e:	bf00      	nop
 801c970:	e000e100 	.word	0xe000e100

0801c974 <__NVIC_DisableIRQ>:
{
 801c974:	b480      	push	{r7}
 801c976:	b083      	sub	sp, #12
 801c978:	af00      	add	r7, sp, #0
 801c97a:	4603      	mov	r3, r0
 801c97c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c97e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c982:	2b00      	cmp	r3, #0
 801c984:	db12      	blt.n	801c9ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c98a:	b2db      	uxtb	r3, r3
 801c98c:	f003 021f 	and.w	r2, r3, #31
 801c990:	4909      	ldr	r1, [pc, #36]	; (801c9b8 <__NVIC_DisableIRQ+0x44>)
 801c992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c996:	095b      	lsrs	r3, r3, #5
 801c998:	2001      	movs	r0, #1
 801c99a:	fa00 f202 	lsl.w	r2, r0, r2
 801c99e:	3320      	adds	r3, #32
 801c9a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801c9a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801c9a8:	f3bf 8f6f 	isb	sy
}
 801c9ac:	bf00      	nop
 801c9ae:	370c      	adds	r7, #12
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9b6:	4770      	bx	lr
 801c9b8:	e000e100 	.word	0xe000e100

0801c9bc <__NVIC_SetPriority>:
{
 801c9bc:	b480      	push	{r7}
 801c9be:	b083      	sub	sp, #12
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	6039      	str	r1, [r7, #0]
 801c9c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c9c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	db0c      	blt.n	801c9ea <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c9d0:	683b      	ldr	r3, [r7, #0]
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	4a0e      	ldr	r2, [pc, #56]	; (801ca10 <__NVIC_SetPriority+0x54>)
 801c9d6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c9da:	4608      	mov	r0, r1
 801c9dc:	011b      	lsls	r3, r3, #4
 801c9de:	b2d9      	uxtb	r1, r3
 801c9e0:	1813      	adds	r3, r2, r0
 801c9e2:	460a      	mov	r2, r1
 801c9e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801c9e8:	e00c      	b.n	801ca04 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c9ea:	683b      	ldr	r3, [r7, #0]
 801c9ec:	b2da      	uxtb	r2, r3
 801c9ee:	4909      	ldr	r1, [pc, #36]	; (801ca14 <__NVIC_SetPriority+0x58>)
 801c9f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9f4:	b2db      	uxtb	r3, r3
 801c9f6:	f003 030f 	and.w	r3, r3, #15
 801c9fa:	3b04      	subs	r3, #4
 801c9fc:	0112      	lsls	r2, r2, #4
 801c9fe:	b2d2      	uxtb	r2, r2
 801ca00:	440b      	add	r3, r1
 801ca02:	761a      	strb	r2, [r3, #24]
}
 801ca04:	bf00      	nop
 801ca06:	370c      	adds	r7, #12
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca0e:	4770      	bx	lr
 801ca10:	e000e100 	.word	0xe000e100
 801ca14:	e000ed00 	.word	0xe000ed00

0801ca18 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b082      	sub	sp, #8
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	4618      	mov	r0, r3
 801ca24:	f000 fe4b 	bl	801d6be <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801ca28:	bf00      	nop
 801ca2a:	3708      	adds	r7, #8
 801ca2c:	46bd      	mov	sp, r7
 801ca2e:	bd80      	pop	{r7, pc}

0801ca30 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 801ca30:	b480      	push	{r7}
 801ca32:	b083      	sub	sp, #12
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801ca38:	4b03      	ldr	r3, [pc, #12]	; (801ca48 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 801ca3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	370c      	adds	r7, #12
 801ca40:	46bd      	mov	sp, r7
 801ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca46:	4770      	bx	lr
 801ca48:	40016884 	.word	0x40016884

0801ca4c <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 801ca4c:	b480      	push	{r7}
 801ca4e:	b083      	sub	sp, #12
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]
 801ca54:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801ca56:	4a06      	ldr	r2, [pc, #24]	; (801ca70 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801ca5c:	4b05      	ldr	r3, [pc, #20]	; (801ca74 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 801ca5e:	2201      	movs	r2, #1
 801ca60:	625a      	str	r2, [r3, #36]	; 0x24
}
 801ca62:	bf00      	nop
 801ca64:	370c      	adds	r7, #12
 801ca66:	46bd      	mov	sp, r7
 801ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca6c:	4770      	bx	lr
 801ca6e:	bf00      	nop
 801ca70:	40016884 	.word	0x40016884
 801ca74:	40016800 	.word	0x40016800

0801ca78 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 801ca78:	b480      	push	{r7}
 801ca7a:	b085      	sub	sp, #20
 801ca7c:	af00      	add	r7, sp, #0
 801ca7e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801ca80:	4b0d      	ldr	r3, [pc, #52]	; (801cab8 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 801ca82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca84:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801ca86:	4b0c      	ldr	r3, [pc, #48]	; (801cab8 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 801ca88:	68db      	ldr	r3, [r3, #12]
 801ca8a:	b29b      	uxth	r3, r3
 801ca8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ca90:	b29b      	uxth	r3, r3
 801ca92:	3301      	adds	r3, #1
 801ca94:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801ca96:	89fa      	ldrh	r2, [r7, #14]
 801ca98:	89bb      	ldrh	r3, [r7, #12]
 801ca9a:	429a      	cmp	r2, r3
 801ca9c:	d201      	bcs.n	801caa2 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	e003      	b.n	801caaa <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801caa2:	89fa      	ldrh	r2, [r7, #14]
 801caa4:	89bb      	ldrh	r3, [r7, #12]
 801caa6:	1ad3      	subs	r3, r2, r3
 801caa8:	b29b      	uxth	r3, r3
    }
}
 801caaa:	4618      	mov	r0, r3
 801caac:	3714      	adds	r7, #20
 801caae:	46bd      	mov	sp, r7
 801cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab4:	4770      	bx	lr
 801cab6:	bf00      	nop
 801cab8:	40016800 	.word	0x40016800

0801cabc <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b082      	sub	sp, #8
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801cac4:	2109      	movs	r1, #9
 801cac6:	205a      	movs	r0, #90	; 0x5a
 801cac8:	f7ff ff78 	bl	801c9bc <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801cacc:	2109      	movs	r1, #9
 801cace:	2058      	movs	r0, #88	; 0x58
 801cad0:	f7ff ff74 	bl	801c9bc <__NVIC_SetPriority>
}
 801cad4:	bf00      	nop
 801cad6:	3708      	adds	r7, #8
 801cad8:	46bd      	mov	sp, r7
 801cada:	bd80      	pop	{r7, pc}

0801cadc <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 801cadc:	b580      	push	{r7, lr}
 801cade:	b082      	sub	sp, #8
 801cae0:	af00      	add	r7, sp, #0
 801cae2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801cae4:	4b12      	ldr	r3, [pc, #72]	; (801cb30 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 801cae6:	68db      	ldr	r3, [r3, #12]
 801cae8:	b29b      	uxth	r3, r3
 801caea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801caee:	b29b      	uxth	r3, r3
 801caf0:	3b01      	subs	r3, #1
 801caf2:	b29a      	uxth	r2, r3
 801caf4:	4b0f      	ldr	r3, [pc, #60]	; (801cb34 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 801caf6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801caf8:	4b0d      	ldr	r3, [pc, #52]	; (801cb30 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 801cafa:	691b      	ldr	r3, [r3, #16]
 801cafc:	b29b      	uxth	r3, r3
 801cafe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cb02:	b29b      	uxth	r3, r3
 801cb04:	3b01      	subs	r3, #1
 801cb06:	b29a      	uxth	r2, r3
 801cb08:	4b0b      	ldr	r3, [pc, #44]	; (801cb38 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 801cb0a:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 801cb0c:	4b09      	ldr	r3, [pc, #36]	; (801cb34 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 801cb0e:	881b      	ldrh	r3, [r3, #0]
 801cb10:	4619      	mov	r1, r3
 801cb12:	480a      	ldr	r0, [pc, #40]	; (801cb3c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801cb14:	f7ea fdea 	bl	80076ec <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 801cb18:	4b08      	ldr	r3, [pc, #32]	; (801cb3c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801cb1e:	4b07      	ldr	r3, [pc, #28]	; (801cb3c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	f042 0203 	orr.w	r2, r2, #3
 801cb26:	635a      	str	r2, [r3, #52]	; 0x34
}
 801cb28:	bf00      	nop
 801cb2a:	3708      	adds	r7, #8
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bd80      	pop	{r7, pc}
 801cb30:	40016800 	.word	0x40016800
 801cb34:	2000a23a 	.word	0x2000a23a
 801cb38:	2000a23c 	.word	0x2000a23c
 801cb3c:	2000a108 	.word	0x2000a108

0801cb40 <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b082      	sub	sp, #8
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 801cb48:	2058      	movs	r0, #88	; 0x58
 801cb4a:	f7ff ff13 	bl	801c974 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801cb4e:	205a      	movs	r0, #90	; 0x5a
 801cb50:	f7ff ff10 	bl	801c974 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 801cb54:	2059      	movs	r0, #89	; 0x59
 801cb56:	f7ff ff0d 	bl	801c974 <__NVIC_DisableIRQ>
}
 801cb5a:	bf00      	nop
 801cb5c:	3708      	adds	r7, #8
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	bd80      	pop	{r7, pc}

0801cb62 <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 801cb62:	b580      	push	{r7, lr}
 801cb64:	b082      	sub	sp, #8
 801cb66:	af00      	add	r7, sp, #0
 801cb68:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 801cb6a:	2058      	movs	r0, #88	; 0x58
 801cb6c:	f7ff fee2 	bl	801c934 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 801cb70:	205a      	movs	r0, #90	; 0x5a
 801cb72:	f7ff fedf 	bl	801c934 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 801cb76:	2059      	movs	r0, #89	; 0x59
 801cb78:	f7ff fedc 	bl	801c934 <__NVIC_EnableIRQ>
}
 801cb7c:	bf00      	nop
 801cb7e:	3708      	adds	r7, #8
 801cb80:	46bd      	mov	sp, r7
 801cb82:	bd80      	pop	{r7, pc}

0801cb84 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801cb84:	b580      	push	{r7, lr}
 801cb86:	b082      	sub	sp, #8
 801cb88:	af00      	add	r7, sp, #0
 801cb8a:	6078      	str	r0, [r7, #4]
 801cb8c:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	6839      	ldr	r1, [r7, #0]
 801cb92:	4618      	mov	r0, r3
 801cb94:	f000 fd99 	bl	801d6ca <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801cb98:	bf00      	nop
 801cb9a:	3708      	adds	r7, #8
 801cb9c:	46bd      	mov	sp, r7
 801cb9e:	bd80      	pop	{r7, pc}

0801cba0 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b082      	sub	sp, #8
 801cba4:	af00      	add	r7, sp, #0
 801cba6:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 801cba8:	4b1a      	ldr	r3, [pc, #104]	; (801cc14 <HAL_LTDC_LineEventCallback+0x74>)
 801cbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cbac:	4a1a      	ldr	r2, [pc, #104]	; (801cc18 <HAL_LTDC_LineEventCallback+0x78>)
 801cbae:	8812      	ldrh	r2, [r2, #0]
 801cbb0:	4293      	cmp	r3, r2
 801cbb2:	bf0c      	ite	eq
 801cbb4:	2301      	moveq	r3, #1
 801cbb6:	2300      	movne	r3, #0
 801cbb8:	b2db      	uxtb	r3, r3
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d017      	beq.n	801cbee <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801cbbe:	4b17      	ldr	r3, [pc, #92]	; (801cc1c <HAL_LTDC_LineEventCallback+0x7c>)
 801cbc0:	881b      	ldrh	r3, [r3, #0]
 801cbc2:	4619      	mov	r1, r3
 801cbc4:	6878      	ldr	r0, [r7, #4]
 801cbc6:	f7ea fd91 	bl	80076ec <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 801cbca:	f7f5 fedf 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	4618      	mov	r0, r3
 801cbd2:	f7ff fd32 	bl	801c63a <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 801cbd6:	f7f7 fd45 	bl	8014664 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 801cbda:	f7f5 fed7 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 801cbde:	4603      	mov	r3, r0
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	f001 f91f 	bl	801de24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 801cbe6:	2000      	movs	r0, #0
 801cbe8:	f000 f9bf 	bl	801cf6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 801cbec:	e00e      	b.n	801cc0c <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801cbee:	4b0a      	ldr	r3, [pc, #40]	; (801cc18 <HAL_LTDC_LineEventCallback+0x78>)
 801cbf0:	881b      	ldrh	r3, [r3, #0]
 801cbf2:	4619      	mov	r1, r3
 801cbf4:	6878      	ldr	r0, [r7, #4]
 801cbf6:	f7ea fd79 	bl	80076ec <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 801cbfa:	2000      	movs	r0, #0
 801cbfc:	f000 f9c0 	bl	801cf80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 801cc00:	f7f5 fec4 	bl	801298c <_ZN8touchgfx3HAL11getInstanceEv>
 801cc04:	4603      	mov	r3, r0
 801cc06:	4618      	mov	r0, r3
 801cc08:	f7ff fcf8 	bl	801c5fc <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 801cc0c:	bf00      	nop
 801cc0e:	3708      	adds	r7, #8
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	40016800 	.word	0x40016800
 801cc18:	2000a23a 	.word	0x2000a23a
 801cc1c:	2000a23c 	.word	0x2000a23c

0801cc20 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 801cc20:	b580      	push	{r7, lr}
 801cc22:	b0a4      	sub	sp, #144	; 0x90
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 801cc28:	2300      	movs	r3, #0
 801cc2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 801cc2e:	4b84      	ldr	r3, [pc, #528]	; (801ce40 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 801cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc32:	4a83      	ldr	r2, [pc, #524]	; (801ce40 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 801cc34:	f043 0301 	orr.w	r3, r3, #1
 801cc38:	6413      	str	r3, [r2, #64]	; 0x40
 801cc3a:	4b81      	ldr	r3, [pc, #516]	; (801ce40 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 801cc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc3e:	f003 0301 	and.w	r3, r3, #1
 801cc42:	60bb      	str	r3, [r7, #8]
 801cc44:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801cc46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	601a      	str	r2, [r3, #0]
 801cc4e:	605a      	str	r2, [r3, #4]
 801cc50:	609a      	str	r2, [r3, #8]
 801cc52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801cc54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cc58:	2200      	movs	r2, #0
 801cc5a:	601a      	str	r2, [r3, #0]
 801cc5c:	605a      	str	r2, [r3, #4]
 801cc5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801cc60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cc64:	2200      	movs	r2, #0
 801cc66:	601a      	str	r2, [r3, #0]
 801cc68:	605a      	str	r2, [r3, #4]
 801cc6a:	609a      	str	r2, [r3, #8]
 801cc6c:	60da      	str	r2, [r3, #12]
 801cc6e:	611a      	str	r2, [r3, #16]
 801cc70:	615a      	str	r2, [r3, #20]
 801cc72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801cc74:	f107 030c 	add.w	r3, r7, #12
 801cc78:	222c      	movs	r2, #44	; 0x2c
 801cc7a:	2100      	movs	r1, #0
 801cc7c:	4618      	mov	r0, r3
 801cc7e:	f005 ff1c 	bl	8022aba <memset>
  htim1.Instance = TIM1;
 801cc82:	4b70      	ldr	r3, [pc, #448]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cc84:	4a70      	ldr	r2, [pc, #448]	; (801ce48 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 801cc86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 801cc88:	4b6e      	ldr	r3, [pc, #440]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cc8a:	2200      	movs	r2, #0
 801cc8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801cc8e:	4b6d      	ldr	r3, [pc, #436]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cc90:	2200      	movs	r2, #0
 801cc92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 801cc94:	4b6b      	ldr	r3, [pc, #428]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cc96:	2200      	movs	r2, #0
 801cc98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801cc9a:	4b6a      	ldr	r3, [pc, #424]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cc9c:	2200      	movs	r2, #0
 801cc9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801cca0:	4b68      	ldr	r3, [pc, #416]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cca2:	2200      	movs	r2, #0
 801cca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801cca6:	4b67      	ldr	r3, [pc, #412]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cca8:	2200      	movs	r2, #0
 801ccaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801ccac:	4865      	ldr	r0, [pc, #404]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801ccae:	f7ee fdd5 	bl	800b85c <HAL_TIM_Base_Init>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	bf14      	ite	ne
 801ccb8:	2301      	movne	r3, #1
 801ccba:	2300      	moveq	r3, #0
 801ccbc:	b2db      	uxtb	r3, r3
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d001      	beq.n	801ccc6 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 801ccc2:	f7e5 facd 	bl	8002260 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801ccc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801ccca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801cccc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ccd0:	4619      	mov	r1, r3
 801ccd2:	485c      	ldr	r0, [pc, #368]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801ccd4:	f7ef f8a4 	bl	800be20 <HAL_TIM_ConfigClockSource>
 801ccd8:	4603      	mov	r3, r0
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	bf14      	ite	ne
 801ccde:	2301      	movne	r3, #1
 801cce0:	2300      	moveq	r3, #0
 801cce2:	b2db      	uxtb	r3, r3
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d001      	beq.n	801ccec <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 801cce8:	f7e5 faba 	bl	8002260 <Error_Handler>
  }

  htim1.Instance = TIM1;
 801ccec:	4b55      	ldr	r3, [pc, #340]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801ccee:	4a56      	ldr	r2, [pc, #344]	; (801ce48 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 801ccf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 801ccf2:	4b54      	ldr	r3, [pc, #336]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ccf8:	4b52      	ldr	r3, [pc, #328]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 801ccfe:	4b51      	ldr	r3, [pc, #324]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd00:	2200      	movs	r2, #0
 801cd02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801cd04:	4b4f      	ldr	r3, [pc, #316]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd06:	2200      	movs	r2, #0
 801cd08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801cd0a:	4b4e      	ldr	r3, [pc, #312]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801cd10:	4b4c      	ldr	r3, [pc, #304]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd12:	2200      	movs	r2, #0
 801cd14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801cd16:	484b      	ldr	r0, [pc, #300]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd18:	f7ee fe20 	bl	800b95c <HAL_TIM_PWM_Init>
 801cd1c:	4603      	mov	r3, r0
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	bf14      	ite	ne
 801cd22:	2301      	movne	r3, #1
 801cd24:	2300      	moveq	r3, #0
 801cd26:	b2db      	uxtb	r3, r3
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d001      	beq.n	801cd30 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 801cd2c:	f7e5 fa98 	bl	8002260 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801cd30:	2300      	movs	r3, #0
 801cd32:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801cd34:	2300      	movs	r3, #0
 801cd36:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801cd38:	2300      	movs	r3, #0
 801cd3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801cd3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801cd40:	4619      	mov	r1, r3
 801cd42:	4840      	ldr	r0, [pc, #256]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd44:	f7ef fce6 	bl	800c714 <HAL_TIMEx_MasterConfigSynchronization>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	bf14      	ite	ne
 801cd4e:	2301      	movne	r3, #1
 801cd50:	2300      	moveq	r3, #0
 801cd52:	b2db      	uxtb	r3, r3
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d001      	beq.n	801cd5c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 801cd58:	f7e5 fa82 	bl	8002260 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801cd5c:	2360      	movs	r3, #96	; 0x60
 801cd5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 801cd60:	2300      	movs	r3, #0
 801cd62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801cd64:	2300      	movs	r3, #0
 801cd66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801cd68:	2300      	movs	r3, #0
 801cd6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801cd70:	2300      	movs	r3, #0
 801cd72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801cd74:	2300      	movs	r3, #0
 801cd76:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801cd78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801cd7c:	2200      	movs	r2, #0
 801cd7e:	4619      	mov	r1, r3
 801cd80:	4830      	ldr	r0, [pc, #192]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cd82:	f7ee ff35 	bl	800bbf0 <HAL_TIM_PWM_ConfigChannel>
 801cd86:	4603      	mov	r3, r0
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	bf14      	ite	ne
 801cd8c:	2301      	movne	r3, #1
 801cd8e:	2300      	moveq	r3, #0
 801cd90:	b2db      	uxtb	r3, r3
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d001      	beq.n	801cd9a <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 801cd96:	f7e5 fa63 	bl	8002260 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801cd9e:	2300      	movs	r3, #0
 801cda0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801cda2:	2300      	movs	r3, #0
 801cda4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 801cda6:	2300      	movs	r3, #0
 801cda8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801cdaa:	2300      	movs	r3, #0
 801cdac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801cdae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801cdb2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801cdb8:	2300      	movs	r3, #0
 801cdba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801cdbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 801cdca:	f107 030c 	add.w	r3, r7, #12
 801cdce:	4619      	mov	r1, r3
 801cdd0:	481c      	ldr	r0, [pc, #112]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801cdd2:	f7ef fcfb 	bl	800c7cc <HAL_TIMEx_ConfigBreakDeadTime>
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	bf14      	ite	ne
 801cddc:	2301      	movne	r3, #1
 801cdde:	2300      	moveq	r3, #0
 801cde0:	b2db      	uxtb	r3, r3
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d001      	beq.n	801cdea <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 801cde6:	f7e5 fa3b 	bl	8002260 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801cdea:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801cdee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801cdf2:	4611      	mov	r1, r2
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	f7ec f845 	bl	8008e84 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801cdfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801cdfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801ce02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d104      	bne.n	801ce14 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 801ce0a:	f7ec f813 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 801ce0e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 801ce12:	e005      	b.n	801ce20 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 801ce14:	f7ec f80e 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	005b      	lsls	r3, r3, #1
 801ce1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 801ce20:	f7eb fffc 	bl	8008e1c <HAL_RCC_GetHCLKFreq>
 801ce24:	4602      	mov	r2, r0
 801ce26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ce2a:	fbb2 f2f3 	udiv	r2, r2, r3
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 801ce32:	4804      	ldr	r0, [pc, #16]	; (801ce44 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801ce34:	f7ee fd3e 	bl	800b8b4 <HAL_TIM_Base_Start>
}
 801ce38:	bf00      	nop
 801ce3a:	3790      	adds	r7, #144	; 0x90
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	bd80      	pop	{r7, pc}
 801ce40:	40023800 	.word	0x40023800
 801ce44:	2000a240 	.word	0x2000a240
 801ce48:	40010000 	.word	0x40010000

0801ce4c <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 801ce4c:	b480      	push	{r7}
 801ce4e:	b085      	sub	sp, #20
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	60f8      	str	r0, [r7, #12]
 801ce54:	60b9      	str	r1, [r7, #8]
 801ce56:	607a      	str	r2, [r7, #4]
 801ce58:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 801ce5a:	687a      	ldr	r2, [r7, #4]
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	1ad2      	subs	r2, r2, r3
 801ce60:	683b      	ldr	r3, [r7, #0]
 801ce62:	085b      	lsrs	r3, r3, #1
 801ce64:	441a      	add	r2, r3
 801ce66:	683b      	ldr	r3, [r7, #0]
 801ce68:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	3714      	adds	r7, #20
 801ce70:	46bd      	mov	sp, r7
 801ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce76:	4770      	bx	lr

0801ce78 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 801ce78:	b480      	push	{r7}
 801ce7a:	b083      	sub	sp, #12
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 801ce80:	4b06      	ldr	r3, [pc, #24]	; (801ce9c <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce86:	687a      	ldr	r2, [r7, #4]
 801ce88:	68d2      	ldr	r2, [r2, #12]
 801ce8a:	fb02 f303 	mul.w	r3, r2, r3
}
 801ce8e:	4618      	mov	r0, r3
 801ce90:	370c      	adds	r7, #12
 801ce92:	46bd      	mov	sp, r7
 801ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce98:	4770      	bx	lr
 801ce9a:	bf00      	nop
 801ce9c:	2000a240 	.word	0x2000a240

0801cea0 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b082      	sub	sp, #8
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	6078      	str	r0, [r7, #4]
 801cea8:	460b      	mov	r3, r1
 801ceaa:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 801ceac:	78fb      	ldrb	r3, [r7, #3]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d00f      	beq.n	801ced2 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	3310      	adds	r3, #16
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	6878      	ldr	r0, [r7, #4]
 801cebc:	4798      	blx	r3
 801cebe:	4602      	mov	r2, r0
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	689b      	ldr	r3, [r3, #8]
 801cec4:	1ad2      	subs	r2, r2, r3
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	685b      	ldr	r3, [r3, #4]
 801ceca:	441a      	add	r2, r3
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 801ced0:	e008      	b.n	801cee4 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	3310      	adds	r3, #16
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	4798      	blx	r3
 801cede:	4602      	mov	r2, r0
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	609a      	str	r2, [r3, #8]
}
 801cee4:	bf00      	nop
 801cee6:	3708      	adds	r7, #8
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bd80      	pop	{r7, pc}

0801ceec <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 801ceec:	b590      	push	{r4, r7, lr}
 801ceee:	b083      	sub	sp, #12
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 801cef4:	f7fe f8c6 	bl	801b084 <LCD_GetXSize>
 801cef8:	4603      	mov	r3, r0
 801cefa:	b29c      	uxth	r4, r3
 801cefc:	f7fe f8cb 	bl	801b096 <LCD_GetYSize>
 801cf00:	4603      	mov	r3, r0
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	4619      	mov	r1, r3
 801cf06:	4620      	mov	r0, r4
 801cf08:	f7fa ff04 	bl	8017d14 <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 801cf0c:	bf00      	nop
 801cf0e:	370c      	adds	r7, #12
 801cf10:	46bd      	mov	sp, r7
 801cf12:	bd90      	pop	{r4, r7, pc}

0801cf14 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b090      	sub	sp, #64	; 0x40
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	60f8      	str	r0, [r7, #12]
 801cf1c:	60b9      	str	r1, [r7, #8]
 801cf1e:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

  TS_StateTypeDef state = { 0 };
 801cf20:	f107 0314 	add.w	r3, r7, #20
 801cf24:	222c      	movs	r2, #44	; 0x2c
 801cf26:	2100      	movs	r1, #0
 801cf28:	4618      	mov	r0, r3
 801cf2a:	f005 fdc6 	bl	8022aba <memset>
    BSP_TS_GetState(&state);
 801cf2e:	f107 0314 	add.w	r3, r7, #20
 801cf32:	4618      	mov	r0, r3
 801cf34:	f7fa ff2e 	bl	8017d94 <BSP_TS_GetState>
    if (state.touchDetected)
 801cf38:	7d3b      	ldrb	r3, [r7, #20]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d009      	beq.n	801cf52 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 801cf3e:	8afb      	ldrh	r3, [r7, #22]
 801cf40:	461a      	mov	r2, r3
 801cf42:	68bb      	ldr	r3, [r7, #8]
 801cf44:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 801cf46:	8c3b      	ldrh	r3, [r7, #32]
 801cf48:	461a      	mov	r2, r3
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	601a      	str	r2, [r3, #0]

        return true;
 801cf4e:	2301      	movs	r3, #1
 801cf50:	e000      	b.n	801cf54 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false; 
 801cf52:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 801cf54:	4618      	mov	r0, r3
 801cf56:	3740      	adds	r7, #64	; 0x40
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	bd80      	pop	{r7, pc}

0801cf5c <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 801cf5c:	b480      	push	{r7}
 801cf5e:	af00      	add	r7, sp, #0
  
    /* USER CODE BEGIN GPIO::init */

    /* USER CODE END GPIO::init */
}
 801cf60:	bf00      	nop
 801cf62:	46bd      	mov	sp, r7
 801cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf68:	4770      	bx	lr

0801cf6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO::GPIO_ID id)
{
 801cf6a:	b480      	push	{r7}
 801cf6c:	b083      	sub	sp, #12
 801cf6e:	af00      	add	r7, sp, #0
 801cf70:	4603      	mov	r3, r0
 801cf72:	71fb      	strb	r3, [r7, #7]
  
    /* USER CODE BEGIN GPIO::set */

    /* USER CODE END GPIO::set */
}
 801cf74:	bf00      	nop
 801cf76:	370c      	adds	r7, #12
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf7e:	4770      	bx	lr

0801cf80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO::GPIO_ID id)
{
 801cf80:	b480      	push	{r7}
 801cf82:	b083      	sub	sp, #12
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	4603      	mov	r3, r0
 801cf88:	71fb      	strb	r3, [r7, #7]

    /* USER CODE BEGIN GPIO::clear */
    
    /* USER CODE END GPIO::clear */
}
 801cf8a:	bf00      	nop
 801cf8c:	370c      	adds	r7, #12
 801cf8e:	46bd      	mov	sp, r7
 801cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf94:	4770      	bx	lr

0801cf96 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO::GPIO_ID id)
{
 801cf96:	b480      	push	{r7}
 801cf98:	b083      	sub	sp, #12
 801cf9a:	af00      	add	r7, sp, #0
 801cf9c:	4603      	mov	r3, r0
 801cf9e:	71fb      	strb	r3, [r7, #7]
   
    /* USER CODE BEGIN GPIO::toggle */

    /* USER CODE END GPIO::toggle */
}
 801cfa0:	bf00      	nop
 801cfa2:	370c      	adds	r7, #12
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfaa:	4770      	bx	lr

0801cfac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801cfb0:	2201      	movs	r2, #1
 801cfb2:	490e      	ldr	r1, [pc, #56]	; (801cfec <MX_USB_HOST_Init+0x40>)
 801cfb4:	480e      	ldr	r0, [pc, #56]	; (801cff0 <MX_USB_HOST_Init+0x44>)
 801cfb6:	f7f3 f875 	bl	80100a4 <USBH_Init>
 801cfba:	4603      	mov	r3, r0
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d001      	beq.n	801cfc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801cfc0:	f7e5 f94e 	bl	8002260 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801cfc4:	490b      	ldr	r1, [pc, #44]	; (801cff4 <MX_USB_HOST_Init+0x48>)
 801cfc6:	480a      	ldr	r0, [pc, #40]	; (801cff0 <MX_USB_HOST_Init+0x44>)
 801cfc8:	f7f3 f907 	bl	80101da <USBH_RegisterClass>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d001      	beq.n	801cfd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801cfd2:	f7e5 f945 	bl	8002260 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801cfd6:	4806      	ldr	r0, [pc, #24]	; (801cff0 <MX_USB_HOST_Init+0x44>)
 801cfd8:	f7f3 f98c 	bl	80102f4 <USBH_Start>
 801cfdc:	4603      	mov	r3, r0
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d001      	beq.n	801cfe6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801cfe2:	f7e5 f93d 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801cfe6:	bf00      	nop
 801cfe8:	bd80      	pop	{r7, pc}
 801cfea:	bf00      	nop
 801cfec:	0801cff9 	.word	0x0801cff9
 801cff0:	2000a8c0 	.word	0x2000a8c0
 801cff4:	2000013c 	.word	0x2000013c

0801cff8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801cff8:	b480      	push	{r7}
 801cffa:	b083      	sub	sp, #12
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	460b      	mov	r3, r1
 801d002:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801d004:	78fb      	ldrb	r3, [r7, #3]
 801d006:	3b01      	subs	r3, #1
 801d008:	2b04      	cmp	r3, #4
 801d00a:	d819      	bhi.n	801d040 <USBH_UserProcess+0x48>
 801d00c:	a201      	add	r2, pc, #4	; (adr r2, 801d014 <USBH_UserProcess+0x1c>)
 801d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d012:	bf00      	nop
 801d014:	0801d041 	.word	0x0801d041
 801d018:	0801d031 	.word	0x0801d031
 801d01c:	0801d041 	.word	0x0801d041
 801d020:	0801d039 	.word	0x0801d039
 801d024:	0801d029 	.word	0x0801d029
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801d028:	4b09      	ldr	r3, [pc, #36]	; (801d050 <USBH_UserProcess+0x58>)
 801d02a:	2203      	movs	r2, #3
 801d02c:	701a      	strb	r2, [r3, #0]
  break;
 801d02e:	e008      	b.n	801d042 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801d030:	4b07      	ldr	r3, [pc, #28]	; (801d050 <USBH_UserProcess+0x58>)
 801d032:	2202      	movs	r2, #2
 801d034:	701a      	strb	r2, [r3, #0]
  break;
 801d036:	e004      	b.n	801d042 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801d038:	4b05      	ldr	r3, [pc, #20]	; (801d050 <USBH_UserProcess+0x58>)
 801d03a:	2201      	movs	r2, #1
 801d03c:	701a      	strb	r2, [r3, #0]
  break;
 801d03e:	e000      	b.n	801d042 <USBH_UserProcess+0x4a>

  default:
  break;
 801d040:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801d042:	bf00      	nop
 801d044:	370c      	adds	r7, #12
 801d046:	46bd      	mov	sp, r7
 801d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d04c:	4770      	bx	lr
 801d04e:	bf00      	nop
 801d050:	2000a280 	.word	0x2000a280

0801d054 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b08a      	sub	sp, #40	; 0x28
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d05c:	f107 0314 	add.w	r3, r7, #20
 801d060:	2200      	movs	r2, #0
 801d062:	601a      	str	r2, [r3, #0]
 801d064:	605a      	str	r2, [r3, #4]
 801d066:	609a      	str	r2, [r3, #8]
 801d068:	60da      	str	r2, [r3, #12]
 801d06a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d074:	d13c      	bne.n	801d0f0 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d076:	4b20      	ldr	r3, [pc, #128]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d07a:	4a1f      	ldr	r2, [pc, #124]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d07c:	f043 0301 	orr.w	r3, r3, #1
 801d080:	6313      	str	r3, [r2, #48]	; 0x30
 801d082:	4b1d      	ldr	r3, [pc, #116]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d086:	f003 0301 	and.w	r3, r3, #1
 801d08a:	613b      	str	r3, [r7, #16]
 801d08c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801d08e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801d092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d094:	2302      	movs	r3, #2
 801d096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d098:	2300      	movs	r3, #0
 801d09a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d09c:	2303      	movs	r3, #3
 801d09e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d0a0:	230a      	movs	r3, #10
 801d0a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d0a4:	f107 0314 	add.w	r3, r7, #20
 801d0a8:	4619      	mov	r1, r3
 801d0aa:	4814      	ldr	r0, [pc, #80]	; (801d0fc <HAL_HCD_MspInit+0xa8>)
 801d0ac:	f7e7 fbae 	bl	800480c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d0b0:	4b11      	ldr	r3, [pc, #68]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0b4:	4a10      	ldr	r2, [pc, #64]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d0ba:	6353      	str	r3, [r2, #52]	; 0x34
 801d0bc:	4b0e      	ldr	r3, [pc, #56]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d0c4:	60fb      	str	r3, [r7, #12]
 801d0c6:	68fb      	ldr	r3, [r7, #12]
 801d0c8:	4b0b      	ldr	r3, [pc, #44]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0cc:	4a0a      	ldr	r2, [pc, #40]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d0ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d0d2:	6453      	str	r3, [r2, #68]	; 0x44
 801d0d4:	4b08      	ldr	r3, [pc, #32]	; (801d0f8 <HAL_HCD_MspInit+0xa4>)
 801d0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d0dc:	60bb      	str	r3, [r7, #8]
 801d0de:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	2105      	movs	r1, #5
 801d0e4:	2043      	movs	r0, #67	; 0x43
 801d0e6:	f7e6 fc77 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d0ea:	2043      	movs	r0, #67	; 0x43
 801d0ec:	f7e6 fc90 	bl	8003a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d0f0:	bf00      	nop
 801d0f2:	3728      	adds	r7, #40	; 0x28
 801d0f4:	46bd      	mov	sp, r7
 801d0f6:	bd80      	pop	{r7, pc}
 801d0f8:	40023800 	.word	0x40023800
 801d0fc:	40020000 	.word	0x40020000

0801d100 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b082      	sub	sp, #8
 801d104:	af00      	add	r7, sp, #0
 801d106:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d10e:	4618      	mov	r0, r3
 801d110:	f7f3 fc43 	bl	801099a <USBH_LL_IncTimer>
}
 801d114:	bf00      	nop
 801d116:	3708      	adds	r7, #8
 801d118:	46bd      	mov	sp, r7
 801d11a:	bd80      	pop	{r7, pc}

0801d11c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801d11c:	b580      	push	{r7, lr}
 801d11e:	b082      	sub	sp, #8
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d12a:	4618      	mov	r0, r3
 801d12c:	f7f3 fc88 	bl	8010a40 <USBH_LL_Connect>
}
 801d130:	bf00      	nop
 801d132:	3708      	adds	r7, #8
 801d134:	46bd      	mov	sp, r7
 801d136:	bd80      	pop	{r7, pc}

0801d138 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801d138:	b580      	push	{r7, lr}
 801d13a:	b082      	sub	sp, #8
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d146:	4618      	mov	r0, r3
 801d148:	f7f3 fcae 	bl	8010aa8 <USBH_LL_Disconnect>
}
 801d14c:	bf00      	nop
 801d14e:	3708      	adds	r7, #8
 801d150:	46bd      	mov	sp, r7
 801d152:	bd80      	pop	{r7, pc}

0801d154 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801d154:	b580      	push	{r7, lr}
 801d156:	b082      	sub	sp, #8
 801d158:	af00      	add	r7, sp, #0
 801d15a:	6078      	str	r0, [r7, #4]
 801d15c:	460b      	mov	r3, r1
 801d15e:	70fb      	strb	r3, [r7, #3]
 801d160:	4613      	mov	r3, r2
 801d162:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d16a:	4618      	mov	r0, r3
 801d16c:	f7f3 fcec 	bl	8010b48 <USBH_LL_NotifyURBChange>
#endif
}
 801d170:	bf00      	nop
 801d172:	3708      	adds	r7, #8
 801d174:	46bd      	mov	sp, r7
 801d176:	bd80      	pop	{r7, pc}

0801d178 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801d178:	b580      	push	{r7, lr}
 801d17a:	b082      	sub	sp, #8
 801d17c:	af00      	add	r7, sp, #0
 801d17e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d186:	4618      	mov	r0, r3
 801d188:	f7f3 fc31 	bl	80109ee <USBH_LL_PortEnabled>
} 
 801d18c:	bf00      	nop
 801d18e:	3708      	adds	r7, #8
 801d190:	46bd      	mov	sp, r7
 801d192:	bd80      	pop	{r7, pc}

0801d194 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b082      	sub	sp, #8
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f7f3 fc31 	bl	8010a0a <USBH_LL_PortDisabled>
} 
 801d1a8:	bf00      	nop
 801d1aa:	3708      	adds	r7, #8
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}

0801d1b0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	b082      	sub	sp, #8
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801d1be:	2b01      	cmp	r3, #1
 801d1c0:	d12a      	bne.n	801d218 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801d1c2:	4a18      	ldr	r2, [pc, #96]	; (801d224 <USBH_LL_Init+0x74>)
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	4a15      	ldr	r2, [pc, #84]	; (801d224 <USBH_LL_Init+0x74>)
 801d1ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d1d2:	4b14      	ldr	r3, [pc, #80]	; (801d224 <USBH_LL_Init+0x74>)
 801d1d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801d1d8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801d1da:	4b12      	ldr	r3, [pc, #72]	; (801d224 <USBH_LL_Init+0x74>)
 801d1dc:	2208      	movs	r2, #8
 801d1de:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801d1e0:	4b10      	ldr	r3, [pc, #64]	; (801d224 <USBH_LL_Init+0x74>)
 801d1e2:	2203      	movs	r2, #3
 801d1e4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d1e6:	4b0f      	ldr	r3, [pc, #60]	; (801d224 <USBH_LL_Init+0x74>)
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801d1ec:	4b0d      	ldr	r3, [pc, #52]	; (801d224 <USBH_LL_Init+0x74>)
 801d1ee:	2202      	movs	r2, #2
 801d1f0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d1f2:	4b0c      	ldr	r3, [pc, #48]	; (801d224 <USBH_LL_Init+0x74>)
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801d1f8:	480a      	ldr	r0, [pc, #40]	; (801d224 <USBH_LL_Init+0x74>)
 801d1fa:	f7e7 fe07 	bl	8004e0c <HAL_HCD_Init>
 801d1fe:	4603      	mov	r3, r0
 801d200:	2b00      	cmp	r3, #0
 801d202:	d001      	beq.n	801d208 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801d204:	f7e5 f82c 	bl	8002260 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801d208:	4806      	ldr	r0, [pc, #24]	; (801d224 <USBH_LL_Init+0x74>)
 801d20a:	f7e8 f9f7 	bl	80055fc <HAL_HCD_GetCurrentFrame>
 801d20e:	4603      	mov	r3, r0
 801d210:	4619      	mov	r1, r3
 801d212:	6878      	ldr	r0, [r7, #4]
 801d214:	f7f3 fbb2 	bl	801097c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801d218:	2300      	movs	r3, #0
}
 801d21a:	4618      	mov	r0, r3
 801d21c:	3708      	adds	r7, #8
 801d21e:	46bd      	mov	sp, r7
 801d220:	bd80      	pop	{r7, pc}
 801d222:	bf00      	nop
 801d224:	2000ac98 	.word	0x2000ac98

0801d228 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801d228:	b580      	push	{r7, lr}
 801d22a:	b084      	sub	sp, #16
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d230:	2300      	movs	r3, #0
 801d232:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d234:	2300      	movs	r3, #0
 801d236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d23e:	4618      	mov	r0, r3
 801d240:	f7e8 f964 	bl	800550c <HAL_HCD_Start>
 801d244:	4603      	mov	r3, r0
 801d246:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d248:	7bfb      	ldrb	r3, [r7, #15]
 801d24a:	4618      	mov	r0, r3
 801d24c:	f000 f95c 	bl	801d508 <USBH_Get_USB_Status>
 801d250:	4603      	mov	r3, r0
 801d252:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d254:	7bbb      	ldrb	r3, [r7, #14]
}
 801d256:	4618      	mov	r0, r3
 801d258:	3710      	adds	r7, #16
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}

0801d25e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801d25e:	b580      	push	{r7, lr}
 801d260:	b084      	sub	sp, #16
 801d262:	af00      	add	r7, sp, #0
 801d264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d266:	2300      	movs	r3, #0
 801d268:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d26a:	2300      	movs	r3, #0
 801d26c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d274:	4618      	mov	r0, r3
 801d276:	f7e8 f96c 	bl	8005552 <HAL_HCD_Stop>
 801d27a:	4603      	mov	r3, r0
 801d27c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d27e:	7bfb      	ldrb	r3, [r7, #15]
 801d280:	4618      	mov	r0, r3
 801d282:	f000 f941 	bl	801d508 <USBH_Get_USB_Status>
 801d286:	4603      	mov	r3, r0
 801d288:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801d28a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d28c:	4618      	mov	r0, r3
 801d28e:	3710      	adds	r7, #16
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}

0801d294 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b084      	sub	sp, #16
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801d29c:	2301      	movs	r3, #1
 801d29e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	f7e8 f9b6 	bl	8005618 <HAL_HCD_GetCurrentSpeed>
 801d2ac:	4603      	mov	r3, r0
 801d2ae:	2b01      	cmp	r3, #1
 801d2b0:	d007      	beq.n	801d2c2 <USBH_LL_GetSpeed+0x2e>
 801d2b2:	2b01      	cmp	r3, #1
 801d2b4:	d302      	bcc.n	801d2bc <USBH_LL_GetSpeed+0x28>
 801d2b6:	2b02      	cmp	r3, #2
 801d2b8:	d006      	beq.n	801d2c8 <USBH_LL_GetSpeed+0x34>
 801d2ba:	e008      	b.n	801d2ce <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801d2bc:	2300      	movs	r3, #0
 801d2be:	73fb      	strb	r3, [r7, #15]
    break;
 801d2c0:	e008      	b.n	801d2d4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801d2c2:	2301      	movs	r3, #1
 801d2c4:	73fb      	strb	r3, [r7, #15]
    break;
 801d2c6:	e005      	b.n	801d2d4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801d2c8:	2302      	movs	r3, #2
 801d2ca:	73fb      	strb	r3, [r7, #15]
    break;
 801d2cc:	e002      	b.n	801d2d4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801d2ce:	2301      	movs	r3, #1
 801d2d0:	73fb      	strb	r3, [r7, #15]
    break;
 801d2d2:	bf00      	nop
  }
  return  speed;
 801d2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	3710      	adds	r7, #16
 801d2da:	46bd      	mov	sp, r7
 801d2dc:	bd80      	pop	{r7, pc}

0801d2de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801d2de:	b580      	push	{r7, lr}
 801d2e0:	b084      	sub	sp, #16
 801d2e2:	af00      	add	r7, sp, #0
 801d2e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d2f4:	4618      	mov	r0, r3
 801d2f6:	f7e8 f949 	bl	800558c <HAL_HCD_ResetPort>
 801d2fa:	4603      	mov	r3, r0
 801d2fc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801d2fe:	7bfb      	ldrb	r3, [r7, #15]
 801d300:	4618      	mov	r0, r3
 801d302:	f000 f901 	bl	801d508 <USBH_Get_USB_Status>
 801d306:	4603      	mov	r3, r0
 801d308:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d30a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d30c:	4618      	mov	r0, r3
 801d30e:	3710      	adds	r7, #16
 801d310:	46bd      	mov	sp, r7
 801d312:	bd80      	pop	{r7, pc}

0801d314 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d314:	b580      	push	{r7, lr}
 801d316:	b082      	sub	sp, #8
 801d318:	af00      	add	r7, sp, #0
 801d31a:	6078      	str	r0, [r7, #4]
 801d31c:	460b      	mov	r3, r1
 801d31e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d326:	78fa      	ldrb	r2, [r7, #3]
 801d328:	4611      	mov	r1, r2
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7e8 f951 	bl	80055d2 <HAL_HCD_HC_GetXferCount>
 801d330:	4603      	mov	r3, r0
}
 801d332:	4618      	mov	r0, r3
 801d334:	3708      	adds	r7, #8
 801d336:	46bd      	mov	sp, r7
 801d338:	bd80      	pop	{r7, pc}

0801d33a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801d33a:	b590      	push	{r4, r7, lr}
 801d33c:	b089      	sub	sp, #36	; 0x24
 801d33e:	af04      	add	r7, sp, #16
 801d340:	6078      	str	r0, [r7, #4]
 801d342:	4608      	mov	r0, r1
 801d344:	4611      	mov	r1, r2
 801d346:	461a      	mov	r2, r3
 801d348:	4603      	mov	r3, r0
 801d34a:	70fb      	strb	r3, [r7, #3]
 801d34c:	460b      	mov	r3, r1
 801d34e:	70bb      	strb	r3, [r7, #2]
 801d350:	4613      	mov	r3, r2
 801d352:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d354:	2300      	movs	r3, #0
 801d356:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d358:	2300      	movs	r3, #0
 801d35a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801d362:	787c      	ldrb	r4, [r7, #1]
 801d364:	78ba      	ldrb	r2, [r7, #2]
 801d366:	78f9      	ldrb	r1, [r7, #3]
 801d368:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d36a:	9302      	str	r3, [sp, #8]
 801d36c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d370:	9301      	str	r3, [sp, #4]
 801d372:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d376:	9300      	str	r3, [sp, #0]
 801d378:	4623      	mov	r3, r4
 801d37a:	f7e7 fd9d 	bl	8004eb8 <HAL_HCD_HC_Init>
 801d37e:	4603      	mov	r3, r0
 801d380:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801d382:	7bfb      	ldrb	r3, [r7, #15]
 801d384:	4618      	mov	r0, r3
 801d386:	f000 f8bf 	bl	801d508 <USBH_Get_USB_Status>
 801d38a:	4603      	mov	r3, r0
 801d38c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d38e:	7bbb      	ldrb	r3, [r7, #14]
}
 801d390:	4618      	mov	r0, r3
 801d392:	3714      	adds	r7, #20
 801d394:	46bd      	mov	sp, r7
 801d396:	bd90      	pop	{r4, r7, pc}

0801d398 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d398:	b580      	push	{r7, lr}
 801d39a:	b084      	sub	sp, #16
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
 801d3a0:	460b      	mov	r3, r1
 801d3a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d3b2:	78fa      	ldrb	r2, [r7, #3]
 801d3b4:	4611      	mov	r1, r2
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7e7 fe16 	bl	8004fe8 <HAL_HCD_HC_Halt>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d3c0:	7bfb      	ldrb	r3, [r7, #15]
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	f000 f8a0 	bl	801d508 <USBH_Get_USB_Status>
 801d3c8:	4603      	mov	r3, r0
 801d3ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	3710      	adds	r7, #16
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd80      	pop	{r7, pc}

0801d3d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801d3d6:	b590      	push	{r4, r7, lr}
 801d3d8:	b089      	sub	sp, #36	; 0x24
 801d3da:	af04      	add	r7, sp, #16
 801d3dc:	6078      	str	r0, [r7, #4]
 801d3de:	4608      	mov	r0, r1
 801d3e0:	4611      	mov	r1, r2
 801d3e2:	461a      	mov	r2, r3
 801d3e4:	4603      	mov	r3, r0
 801d3e6:	70fb      	strb	r3, [r7, #3]
 801d3e8:	460b      	mov	r3, r1
 801d3ea:	70bb      	strb	r3, [r7, #2]
 801d3ec:	4613      	mov	r3, r2
 801d3ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801d3fe:	787c      	ldrb	r4, [r7, #1]
 801d400:	78ba      	ldrb	r2, [r7, #2]
 801d402:	78f9      	ldrb	r1, [r7, #3]
 801d404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d408:	9303      	str	r3, [sp, #12]
 801d40a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d40c:	9302      	str	r3, [sp, #8]
 801d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d410:	9301      	str	r3, [sp, #4]
 801d412:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d416:	9300      	str	r3, [sp, #0]
 801d418:	4623      	mov	r3, r4
 801d41a:	f7e7 fe09 	bl	8005030 <HAL_HCD_HC_SubmitRequest>
 801d41e:	4603      	mov	r3, r0
 801d420:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801d422:	7bfb      	ldrb	r3, [r7, #15]
 801d424:	4618      	mov	r0, r3
 801d426:	f000 f86f 	bl	801d508 <USBH_Get_USB_Status>
 801d42a:	4603      	mov	r3, r0
 801d42c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d42e:	7bbb      	ldrb	r3, [r7, #14]
}
 801d430:	4618      	mov	r0, r3
 801d432:	3714      	adds	r7, #20
 801d434:	46bd      	mov	sp, r7
 801d436:	bd90      	pop	{r4, r7, pc}

0801d438 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b082      	sub	sp, #8
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
 801d440:	460b      	mov	r3, r1
 801d442:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d44a:	78fa      	ldrb	r2, [r7, #3]
 801d44c:	4611      	mov	r1, r2
 801d44e:	4618      	mov	r0, r3
 801d450:	f7e8 f8aa 	bl	80055a8 <HAL_HCD_HC_GetURBState>
 801d454:	4603      	mov	r3, r0
}
 801d456:	4618      	mov	r0, r3
 801d458:	3708      	adds	r7, #8
 801d45a:	46bd      	mov	sp, r7
 801d45c:	bd80      	pop	{r7, pc}

0801d45e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801d45e:	b580      	push	{r7, lr}
 801d460:	b082      	sub	sp, #8
 801d462:	af00      	add	r7, sp, #0
 801d464:	6078      	str	r0, [r7, #4]
 801d466:	460b      	mov	r3, r1
 801d468:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801d470:	2b01      	cmp	r3, #1
 801d472:	d103      	bne.n	801d47c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801d474:	78fb      	ldrb	r3, [r7, #3]
 801d476:	4618      	mov	r0, r3
 801d478:	f000 f872 	bl	801d560 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801d47c:	20c8      	movs	r0, #200	; 0xc8
 801d47e:	f7e5 ff3d 	bl	80032fc <HAL_Delay>
  return USBH_OK;
 801d482:	2300      	movs	r3, #0
}
 801d484:	4618      	mov	r0, r3
 801d486:	3708      	adds	r7, #8
 801d488:	46bd      	mov	sp, r7
 801d48a:	bd80      	pop	{r7, pc}

0801d48c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801d48c:	b480      	push	{r7}
 801d48e:	b085      	sub	sp, #20
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
 801d494:	460b      	mov	r3, r1
 801d496:	70fb      	strb	r3, [r7, #3]
 801d498:	4613      	mov	r3, r2
 801d49a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d4a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801d4a4:	78fa      	ldrb	r2, [r7, #3]
 801d4a6:	68f9      	ldr	r1, [r7, #12]
 801d4a8:	4613      	mov	r3, r2
 801d4aa:	009b      	lsls	r3, r3, #2
 801d4ac:	4413      	add	r3, r2
 801d4ae:	00db      	lsls	r3, r3, #3
 801d4b0:	440b      	add	r3, r1
 801d4b2:	333b      	adds	r3, #59	; 0x3b
 801d4b4:	781b      	ldrb	r3, [r3, #0]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d00a      	beq.n	801d4d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801d4ba:	78fa      	ldrb	r2, [r7, #3]
 801d4bc:	68f9      	ldr	r1, [r7, #12]
 801d4be:	4613      	mov	r3, r2
 801d4c0:	009b      	lsls	r3, r3, #2
 801d4c2:	4413      	add	r3, r2
 801d4c4:	00db      	lsls	r3, r3, #3
 801d4c6:	440b      	add	r3, r1
 801d4c8:	3350      	adds	r3, #80	; 0x50
 801d4ca:	78ba      	ldrb	r2, [r7, #2]
 801d4cc:	701a      	strb	r2, [r3, #0]
 801d4ce:	e009      	b.n	801d4e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801d4d0:	78fa      	ldrb	r2, [r7, #3]
 801d4d2:	68f9      	ldr	r1, [r7, #12]
 801d4d4:	4613      	mov	r3, r2
 801d4d6:	009b      	lsls	r3, r3, #2
 801d4d8:	4413      	add	r3, r2
 801d4da:	00db      	lsls	r3, r3, #3
 801d4dc:	440b      	add	r3, r1
 801d4de:	3351      	adds	r3, #81	; 0x51
 801d4e0:	78ba      	ldrb	r2, [r7, #2]
 801d4e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801d4e4:	2300      	movs	r3, #0
}
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	3714      	adds	r7, #20
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f0:	4770      	bx	lr

0801d4f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801d4f2:	b580      	push	{r7, lr}
 801d4f4:	b082      	sub	sp, #8
 801d4f6:	af00      	add	r7, sp, #0
 801d4f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801d4fa:	6878      	ldr	r0, [r7, #4]
 801d4fc:	f7e5 fefe 	bl	80032fc <HAL_Delay>
}
 801d500:	bf00      	nop
 801d502:	3708      	adds	r7, #8
 801d504:	46bd      	mov	sp, r7
 801d506:	bd80      	pop	{r7, pc}

0801d508 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d508:	b480      	push	{r7}
 801d50a:	b085      	sub	sp, #20
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	4603      	mov	r3, r0
 801d510:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d512:	2300      	movs	r3, #0
 801d514:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d516:	79fb      	ldrb	r3, [r7, #7]
 801d518:	2b03      	cmp	r3, #3
 801d51a:	d817      	bhi.n	801d54c <USBH_Get_USB_Status+0x44>
 801d51c:	a201      	add	r2, pc, #4	; (adr r2, 801d524 <USBH_Get_USB_Status+0x1c>)
 801d51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d522:	bf00      	nop
 801d524:	0801d535 	.word	0x0801d535
 801d528:	0801d53b 	.word	0x0801d53b
 801d52c:	0801d541 	.word	0x0801d541
 801d530:	0801d547 	.word	0x0801d547
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801d534:	2300      	movs	r3, #0
 801d536:	73fb      	strb	r3, [r7, #15]
    break;
 801d538:	e00b      	b.n	801d552 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801d53a:	2302      	movs	r3, #2
 801d53c:	73fb      	strb	r3, [r7, #15]
    break;
 801d53e:	e008      	b.n	801d552 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801d540:	2301      	movs	r3, #1
 801d542:	73fb      	strb	r3, [r7, #15]
    break;
 801d544:	e005      	b.n	801d552 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801d546:	2302      	movs	r3, #2
 801d548:	73fb      	strb	r3, [r7, #15]
    break;
 801d54a:	e002      	b.n	801d552 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801d54c:	2302      	movs	r3, #2
 801d54e:	73fb      	strb	r3, [r7, #15]
    break;
 801d550:	bf00      	nop
  }
  return usb_status;
 801d552:	7bfb      	ldrb	r3, [r7, #15]
}
 801d554:	4618      	mov	r0, r3
 801d556:	3714      	adds	r7, #20
 801d558:	46bd      	mov	sp, r7
 801d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d55e:	4770      	bx	lr

0801d560 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801d560:	b580      	push	{r7, lr}
 801d562:	b084      	sub	sp, #16
 801d564:	af00      	add	r7, sp, #0
 801d566:	4603      	mov	r3, r0
 801d568:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801d56a:	79fb      	ldrb	r3, [r7, #7]
 801d56c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801d56e:	79fb      	ldrb	r3, [r7, #7]
 801d570:	2b00      	cmp	r3, #0
 801d572:	d102      	bne.n	801d57a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801d574:	2301      	movs	r3, #1
 801d576:	73fb      	strb	r3, [r7, #15]
 801d578:	e001      	b.n	801d57e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801d57a:	2300      	movs	r3, #0
 801d57c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801d57e:	7bfb      	ldrb	r3, [r7, #15]
 801d580:	461a      	mov	r2, r3
 801d582:	2120      	movs	r1, #32
 801d584:	4803      	ldr	r0, [pc, #12]	; (801d594 <MX_DriverVbusFS+0x34>)
 801d586:	f7e7 fc0d 	bl	8004da4 <HAL_GPIO_WritePin>
}
 801d58a:	bf00      	nop
 801d58c:	3710      	adds	r7, #16
 801d58e:	46bd      	mov	sp, r7
 801d590:	bd80      	pop	{r7, pc}
 801d592:	bf00      	nop
 801d594:	40020c00 	.word	0x40020c00

0801d598 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801d598:	8880      	ldrh	r0, [r0, #4]
 801d59a:	4770      	bx	lr

0801d59c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801d59c:	2300      	movs	r3, #0
 801d59e:	8083      	strh	r3, [r0, #4]
 801d5a0:	4770      	bx	lr
	...

0801d5a4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5a6:	6803      	ldr	r3, [r0, #0]
 801d5a8:	460e      	mov	r6, r1
 801d5aa:	2100      	movs	r1, #0
 801d5ac:	4604      	mov	r4, r0
 801d5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5b0:	4798      	blx	r3
 801d5b2:	4605      	mov	r5, r0
 801d5b4:	6823      	ldr	r3, [r4, #0]
 801d5b6:	4620      	mov	r0, r4
 801d5b8:	1b75      	subs	r5, r6, r5
 801d5ba:	6a1b      	ldr	r3, [r3, #32]
 801d5bc:	b2ad      	uxth	r5, r5
 801d5be:	4798      	blx	r3
 801d5c0:	88a3      	ldrh	r3, [r4, #4]
 801d5c2:	fbb5 f0f0 	udiv	r0, r5, r0
 801d5c6:	4298      	cmp	r0, r3
 801d5c8:	b285      	uxth	r5, r0
 801d5ca:	db05      	blt.n	801d5d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801d5cc:	4b0e      	ldr	r3, [pc, #56]	; (801d608 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801d5ce:	211e      	movs	r1, #30
 801d5d0:	4a0e      	ldr	r2, [pc, #56]	; (801d60c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801d5d2:	480f      	ldr	r0, [pc, #60]	; (801d610 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801d5d4:	f005 f9dc 	bl	8022990 <__assert_func>
 801d5d8:	6823      	ldr	r3, [r4, #0]
 801d5da:	2100      	movs	r1, #0
 801d5dc:	4620      	mov	r0, r4
 801d5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5e0:	4798      	blx	r3
 801d5e2:	4607      	mov	r7, r0
 801d5e4:	6823      	ldr	r3, [r4, #0]
 801d5e6:	4620      	mov	r0, r4
 801d5e8:	1bf6      	subs	r6, r6, r7
 801d5ea:	6a1b      	ldr	r3, [r3, #32]
 801d5ec:	b2b6      	uxth	r6, r6
 801d5ee:	4798      	blx	r3
 801d5f0:	fbb6 f3f0 	udiv	r3, r6, r0
 801d5f4:	fb03 6610 	mls	r6, r3, r0, r6
 801d5f8:	b11e      	cbz	r6, 801d602 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801d5fa:	4b06      	ldr	r3, [pc, #24]	; (801d614 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801d5fc:	211f      	movs	r1, #31
 801d5fe:	4a03      	ldr	r2, [pc, #12]	; (801d60c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801d600:	e7e7      	b.n	801d5d2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801d602:	4628      	mov	r0, r5
 801d604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d606:	bf00      	nop
 801d608:	08025758 	.word	0x08025758
 801d60c:	080258c6 	.word	0x080258c6
 801d610:	0802576d 	.word	0x0802576d
 801d614:	0802579b 	.word	0x0802579b

0801d618 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801d618:	b538      	push	{r3, r4, r5, lr}
 801d61a:	6803      	ldr	r3, [r0, #0]
 801d61c:	460d      	mov	r5, r1
 801d61e:	4604      	mov	r4, r0
 801d620:	6a1b      	ldr	r3, [r3, #32]
 801d622:	4798      	blx	r3
 801d624:	4285      	cmp	r5, r0
 801d626:	d905      	bls.n	801d634 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801d628:	4b0c      	ldr	r3, [pc, #48]	; (801d65c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801d62a:	212f      	movs	r1, #47	; 0x2f
 801d62c:	4a0c      	ldr	r2, [pc, #48]	; (801d660 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801d62e:	480d      	ldr	r0, [pc, #52]	; (801d664 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801d630:	f005 f9ae 	bl	8022990 <__assert_func>
 801d634:	6823      	ldr	r3, [r4, #0]
 801d636:	4620      	mov	r0, r4
 801d638:	88a5      	ldrh	r5, [r4, #4]
 801d63a:	69db      	ldr	r3, [r3, #28]
 801d63c:	4798      	blx	r3
 801d63e:	4285      	cmp	r5, r0
 801d640:	db03      	blt.n	801d64a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801d642:	4b09      	ldr	r3, [pc, #36]	; (801d668 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801d644:	2130      	movs	r1, #48	; 0x30
 801d646:	4a06      	ldr	r2, [pc, #24]	; (801d660 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801d648:	e7f1      	b.n	801d62e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801d64a:	6823      	ldr	r3, [r4, #0]
 801d64c:	4620      	mov	r0, r4
 801d64e:	88a1      	ldrh	r1, [r4, #4]
 801d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d652:	4798      	blx	r3
 801d654:	88a3      	ldrh	r3, [r4, #4]
 801d656:	3301      	adds	r3, #1
 801d658:	80a3      	strh	r3, [r4, #4]
 801d65a:	bd38      	pop	{r3, r4, r5, pc}
 801d65c:	08025815 	.word	0x08025815
 801d660:	08025909 	.word	0x08025909
 801d664:	0802576d 	.word	0x0802576d
 801d668:	0802582c 	.word	0x0802582c

0801d66c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801d66c:	b570      	push	{r4, r5, r6, lr}
 801d66e:	6803      	ldr	r3, [r0, #0]
 801d670:	4616      	mov	r6, r2
 801d672:	4604      	mov	r4, r0
 801d674:	460d      	mov	r5, r1
 801d676:	6a1b      	ldr	r3, [r3, #32]
 801d678:	4798      	blx	r3
 801d67a:	4286      	cmp	r6, r0
 801d67c:	d905      	bls.n	801d68a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801d67e:	4b06      	ldr	r3, [pc, #24]	; (801d698 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801d680:	2139      	movs	r1, #57	; 0x39
 801d682:	4a06      	ldr	r2, [pc, #24]	; (801d69c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801d684:	4806      	ldr	r0, [pc, #24]	; (801d6a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801d686:	f005 f983 	bl	8022990 <__assert_func>
 801d68a:	6823      	ldr	r3, [r4, #0]
 801d68c:	4629      	mov	r1, r5
 801d68e:	4620      	mov	r0, r4
 801d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d696:	4718      	bx	r3
 801d698:	08025815 	.word	0x08025815
 801d69c:	0802587c 	.word	0x0802587c
 801d6a0:	0802576d 	.word	0x0802576d

0801d6a4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801d6a4:	4770      	bx	lr
	...

0801d6a8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801d6a8:	4a02      	ldr	r2, [pc, #8]	; (801d6b4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801d6aa:	6002      	str	r2, [r0, #0]
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	8082      	strh	r2, [r0, #4]
 801d6b0:	4770      	bx	lr
 801d6b2:	bf00      	nop
 801d6b4:	08025850 	.word	0x08025850

0801d6b8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801d6b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d6bc:	4770      	bx	lr

0801d6be <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801d6be:	2301      	movs	r3, #1
 801d6c0:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801d6c4:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801d6c8:	4770      	bx	lr

0801d6ca <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801d6ca:	2301      	movs	r3, #1
 801d6cc:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801d6d0:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801d6d4:	4770      	bx	lr

0801d6d6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801d6d6:	6843      	ldr	r3, [r0, #4]
 801d6d8:	2201      	movs	r2, #1
 801d6da:	725a      	strb	r2, [r3, #9]
 801d6dc:	6840      	ldr	r0, [r0, #4]
 801d6de:	6803      	ldr	r3, [r0, #0]
 801d6e0:	691b      	ldr	r3, [r3, #16]
 801d6e2:	4718      	bx	r3

0801d6e4 <_ZN8touchgfx3HAL8flushDMAEv>:
 801d6e4:	6840      	ldr	r0, [r0, #4]
 801d6e6:	6803      	ldr	r3, [r0, #0]
 801d6e8:	689b      	ldr	r3, [r3, #8]
 801d6ea:	4718      	bx	r3

0801d6ec <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801d6ec:	4770      	bx	lr

0801d6ee <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801d6ee:	4608      	mov	r0, r1
 801d6f0:	4770      	bx	lr

0801d6f2 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801d6f2:	4770      	bx	lr

0801d6f4 <_ZN8touchgfx3HAL10beginFrameEv>:
 801d6f4:	4b04      	ldr	r3, [pc, #16]	; (801d708 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801d6f6:	781b      	ldrb	r3, [r3, #0]
 801d6f8:	b123      	cbz	r3, 801d704 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801d6fa:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801d6fe:	f080 0001 	eor.w	r0, r0, #1
 801d702:	4770      	bx	lr
 801d704:	2001      	movs	r0, #1
 801d706:	4770      	bx	lr
 801d708:	2000a28c 	.word	0x2000a28c

0801d70c <_ZN8touchgfx3HAL8endFrameEv>:
 801d70c:	b510      	push	{r4, lr}
 801d70e:	4604      	mov	r4, r0
 801d710:	6840      	ldr	r0, [r0, #4]
 801d712:	6803      	ldr	r3, [r0, #0]
 801d714:	689b      	ldr	r3, [r3, #8]
 801d716:	4798      	blx	r3
 801d718:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801d71c:	b113      	cbz	r3, 801d724 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801d71e:	2301      	movs	r3, #1
 801d720:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801d724:	bd10      	pop	{r4, pc}

0801d726 <_ZN8touchgfx3HAL9taskEntryEv>:
 801d726:	b508      	push	{r3, lr}
 801d728:	6803      	ldr	r3, [r0, #0]
 801d72a:	4604      	mov	r4, r0
 801d72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d72e:	4798      	blx	r3
 801d730:	6823      	ldr	r3, [r4, #0]
 801d732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d734:	4620      	mov	r0, r4
 801d736:	4798      	blx	r3
 801d738:	f7f6 ffba 	bl	80146b0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801d73c:	6823      	ldr	r3, [r4, #0]
 801d73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d740:	e7f8      	b.n	801d734 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801d744 <_ZN8touchgfx3HAL4tickEv>:
 801d744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d746:	6803      	ldr	r3, [r0, #0]
 801d748:	4604      	mov	r4, r0
 801d74a:	4d5d      	ldr	r5, [pc, #372]	; (801d8c0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801d74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d750:	4798      	blx	r3
 801d752:	2800      	cmp	r0, #0
 801d754:	f000 8092 	beq.w	801d87c <_ZN8touchgfx3HAL4tickEv+0x138>
 801d758:	2001      	movs	r0, #1
 801d75a:	2600      	movs	r6, #0
 801d75c:	f7ff fc05 	bl	801cf6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801d760:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801d764:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801d768:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801d76c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801d770:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801d774:	b133      	cbz	r3, 801d784 <_ZN8touchgfx3HAL4tickEv+0x40>
 801d776:	6823      	ldr	r3, [r4, #0]
 801d778:	4620      	mov	r0, r4
 801d77a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d77e:	4798      	blx	r3
 801d780:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801d784:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801d788:	2601      	movs	r6, #1
 801d78a:	6862      	ldr	r2, [r4, #4]
 801d78c:	f083 0301 	eor.w	r3, r3, #1
 801d790:	702e      	strb	r6, [r5, #0]
 801d792:	7253      	strb	r3, [r2, #9]
 801d794:	f001 fb00 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801d798:	6803      	ldr	r3, [r0, #0]
 801d79a:	4631      	mov	r1, r6
 801d79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d79e:	4798      	blx	r3
 801d7a0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801d7a4:	b90b      	cbnz	r3, 801d7aa <_ZN8touchgfx3HAL4tickEv+0x66>
 801d7a6:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801d7aa:	f001 faf5 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801d7ae:	6803      	ldr	r3, [r0, #0]
 801d7b0:	695b      	ldr	r3, [r3, #20]
 801d7b2:	4798      	blx	r3
 801d7b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d7b6:	6803      	ldr	r3, [r0, #0]
 801d7b8:	691b      	ldr	r3, [r3, #16]
 801d7ba:	4798      	blx	r3
 801d7bc:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801d7c0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801d7c4:	3b01      	subs	r3, #1
 801d7c6:	b2db      	uxtb	r3, r3
 801d7c8:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801d7cc:	b10a      	cbz	r2, 801d7d2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d1eb      	bne.n	801d7aa <_ZN8touchgfx3HAL4tickEv+0x66>
 801d7d2:	4a3c      	ldr	r2, [pc, #240]	; (801d8c4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801d7d4:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801d7d8:	7813      	ldrb	r3, [r2, #0]
 801d7da:	3301      	adds	r3, #1
 801d7dc:	b25b      	sxtb	r3, r3
 801d7de:	4299      	cmp	r1, r3
 801d7e0:	7013      	strb	r3, [r2, #0]
 801d7e2:	dc10      	bgt.n	801d806 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801d7e4:	2300      	movs	r3, #0
 801d7e6:	68e0      	ldr	r0, [r4, #12]
 801d7e8:	a902      	add	r1, sp, #8
 801d7ea:	7013      	strb	r3, [r2, #0]
 801d7ec:	aa03      	add	r2, sp, #12
 801d7ee:	6803      	ldr	r3, [r0, #0]
 801d7f0:	68db      	ldr	r3, [r3, #12]
 801d7f2:	4798      	blx	r3
 801d7f4:	6823      	ldr	r3, [r4, #0]
 801d7f6:	2800      	cmp	r0, #0
 801d7f8:	d04c      	beq.n	801d894 <_ZN8touchgfx3HAL4tickEv+0x150>
 801d7fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d7fe:	4620      	mov	r0, r4
 801d800:	9a03      	ldr	r2, [sp, #12]
 801d802:	9902      	ldr	r1, [sp, #8]
 801d804:	4798      	blx	r3
 801d806:	2300      	movs	r3, #0
 801d808:	6960      	ldr	r0, [r4, #20]
 801d80a:	f88d 3007 	strb.w	r3, [sp, #7]
 801d80e:	b130      	cbz	r0, 801d81e <_ZN8touchgfx3HAL4tickEv+0xda>
 801d810:	6803      	ldr	r3, [r0, #0]
 801d812:	f10d 0107 	add.w	r1, sp, #7
 801d816:	68db      	ldr	r3, [r3, #12]
 801d818:	4798      	blx	r3
 801d81a:	2800      	cmp	r0, #0
 801d81c:	d149      	bne.n	801d8b2 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801d81e:	f104 0018 	add.w	r0, r4, #24
 801d822:	f004 ffeb 	bl	80227fc <_ZN8touchgfx8Gestures4tickEv>
 801d826:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801d82a:	b30b      	cbz	r3, 801d870 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801d82c:	6920      	ldr	r0, [r4, #16]
 801d82e:	6803      	ldr	r3, [r0, #0]
 801d830:	691b      	ldr	r3, [r3, #16]
 801d832:	4798      	blx	r3
 801d834:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d836:	4606      	mov	r6, r0
 801d838:	b903      	cbnz	r3, 801d83c <_ZN8touchgfx3HAL4tickEv+0xf8>
 801d83a:	6620      	str	r0, [r4, #96]	; 0x60
 801d83c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d83e:	4a22      	ldr	r2, [pc, #136]	; (801d8c8 <_ZN8touchgfx3HAL4tickEv+0x184>)
 801d840:	1af3      	subs	r3, r6, r3
 801d842:	4293      	cmp	r3, r2
 801d844:	d914      	bls.n	801d870 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801d846:	6920      	ldr	r0, [r4, #16]
 801d848:	6803      	ldr	r3, [r0, #0]
 801d84a:	699b      	ldr	r3, [r3, #24]
 801d84c:	4798      	blx	r3
 801d84e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d850:	2264      	movs	r2, #100	; 0x64
 801d852:	1af3      	subs	r3, r6, r3
 801d854:	fbb3 f3f2 	udiv	r3, r3, r2
 801d858:	fbb0 f0f3 	udiv	r0, r0, r3
 801d85c:	2800      	cmp	r0, #0
 801d85e:	dc1e      	bgt.n	801d89e <_ZN8touchgfx3HAL4tickEv+0x15a>
 801d860:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801d864:	6920      	ldr	r0, [r4, #16]
 801d866:	2100      	movs	r1, #0
 801d868:	6803      	ldr	r3, [r0, #0]
 801d86a:	69db      	ldr	r3, [r3, #28]
 801d86c:	4798      	blx	r3
 801d86e:	6626      	str	r6, [r4, #96]	; 0x60
 801d870:	f001 fa92 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801d874:	6803      	ldr	r3, [r0, #0]
 801d876:	2100      	movs	r1, #0
 801d878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d87a:	4798      	blx	r3
 801d87c:	6823      	ldr	r3, [r4, #0]
 801d87e:	4620      	mov	r0, r4
 801d880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d884:	4798      	blx	r3
 801d886:	2001      	movs	r0, #1
 801d888:	f7ff fb7a 	bl	801cf80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801d88c:	2300      	movs	r3, #0
 801d88e:	702b      	strb	r3, [r5, #0]
 801d890:	b004      	add	sp, #16
 801d892:	bd70      	pop	{r4, r5, r6, pc}
 801d894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d898:	4620      	mov	r0, r4
 801d89a:	4798      	blx	r3
 801d89c:	e7b3      	b.n	801d806 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801d89e:	2863      	cmp	r0, #99	; 0x63
 801d8a0:	bfcb      	itete	gt
 801d8a2:	2300      	movgt	r3, #0
 801d8a4:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801d8a8:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801d8ac:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801d8b0:	e7d8      	b.n	801d864 <_ZN8touchgfx3HAL4tickEv+0x120>
 801d8b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d8b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801d8b8:	6803      	ldr	r3, [r0, #0]
 801d8ba:	68db      	ldr	r3, [r3, #12]
 801d8bc:	4798      	blx	r3
 801d8be:	e7ae      	b.n	801d81e <_ZN8touchgfx3HAL4tickEv+0xda>
 801d8c0:	2000a294 	.word	0x2000a294
 801d8c4:	2000a295 	.word	0x2000a295
 801d8c8:	05f5e100 	.word	0x05f5e100

0801d8cc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801d8cc:	f7f6 be90 	b.w	80145f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d8d0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801d8d0:	6481      	str	r1, [r0, #72]	; 0x48
 801d8d2:	3018      	adds	r0, #24
 801d8d4:	f004 bf90 	b.w	80227f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801d8d8 <_ZN8touchgfx3HAL5touchEll>:
 801d8d8:	b530      	push	{r4, r5, lr}
 801d8da:	b085      	sub	sp, #20
 801d8dc:	4604      	mov	r4, r0
 801d8de:	a802      	add	r0, sp, #8
 801d8e0:	9102      	str	r1, [sp, #8]
 801d8e2:	9203      	str	r2, [sp, #12]
 801d8e4:	f001 f888 	bl	801e9f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801d8e8:	a903      	add	r1, sp, #12
 801d8ea:	a802      	add	r0, sp, #8
 801d8ec:	f001 f8d2 	bl	801ea94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801d8f0:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801d8f4:	9d02      	ldr	r5, [sp, #8]
 801d8f6:	f104 0018 	add.w	r0, r4, #24
 801d8fa:	9b03      	ldr	r3, [sp, #12]
 801d8fc:	b179      	cbz	r1, 801d91e <_ZN8touchgfx3HAL5touchEll+0x46>
 801d8fe:	b29b      	uxth	r3, r3
 801d900:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801d904:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801d908:	9300      	str	r3, [sp, #0]
 801d90a:	b2ab      	uxth	r3, r5
 801d90c:	f004 ff84 	bl	8022818 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801d910:	b118      	cbz	r0, 801d91a <_ZN8touchgfx3HAL5touchEll+0x42>
 801d912:	9b02      	ldr	r3, [sp, #8]
 801d914:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d916:	9b03      	ldr	r3, [sp, #12]
 801d918:	6523      	str	r3, [r4, #80]	; 0x50
 801d91a:	b005      	add	sp, #20
 801d91c:	bd30      	pop	{r4, r5, pc}
 801d91e:	b29b      	uxth	r3, r3
 801d920:	b2aa      	uxth	r2, r5
 801d922:	f004 ffbd 	bl	80228a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801d926:	2301      	movs	r3, #1
 801d928:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801d92c:	e7f1      	b.n	801d912 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801d92e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801d92e:	b530      	push	{r4, r5, lr}
 801d930:	2b00      	cmp	r3, #0
 801d932:	d04e      	beq.n	801d9d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d934:	ea81 0002 	eor.w	r0, r1, r2
 801d938:	07c0      	lsls	r0, r0, #31
 801d93a:	d508      	bpl.n	801d94e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801d93c:	3a01      	subs	r2, #1
 801d93e:	440b      	add	r3, r1
 801d940:	4299      	cmp	r1, r3
 801d942:	d046      	beq.n	801d9d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d944:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801d948:	f801 0b01 	strb.w	r0, [r1], #1
 801d94c:	e7f8      	b.n	801d940 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801d94e:	07d5      	lsls	r5, r2, #31
 801d950:	bf42      	ittt	mi
 801d952:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801d956:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801d95a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801d95e:	2b01      	cmp	r3, #1
 801d960:	d915      	bls.n	801d98e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801d962:	ea81 0002 	eor.w	r0, r1, r2
 801d966:	0784      	lsls	r4, r0, #30
 801d968:	d01f      	beq.n	801d9aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801d96a:	1e95      	subs	r5, r2, #2
 801d96c:	460c      	mov	r4, r1
 801d96e:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801d972:	f824 0b02 	strh.w	r0, [r4], #2
 801d976:	1b18      	subs	r0, r3, r4
 801d978:	4408      	add	r0, r1
 801d97a:	2801      	cmp	r0, #1
 801d97c:	d8f7      	bhi.n	801d96e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801d97e:	1e98      	subs	r0, r3, #2
 801d980:	f003 0301 	and.w	r3, r3, #1
 801d984:	f020 0001 	bic.w	r0, r0, #1
 801d988:	3002      	adds	r0, #2
 801d98a:	4401      	add	r1, r0
 801d98c:	4402      	add	r2, r0
 801d98e:	3a01      	subs	r2, #1
 801d990:	440b      	add	r3, r1
 801d992:	4299      	cmp	r1, r3
 801d994:	d01d      	beq.n	801d9d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d996:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801d99a:	f801 0b01 	strb.w	r0, [r1], #1
 801d99e:	e7f8      	b.n	801d992 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801d9a0:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801d9a4:	f840 4b04 	str.w	r4, [r0], #4
 801d9a8:	e008      	b.n	801d9bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801d9aa:	0790      	lsls	r0, r2, #30
 801d9ac:	d004      	beq.n	801d9b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801d9ae:	f832 0b02 	ldrh.w	r0, [r2], #2
 801d9b2:	3b02      	subs	r3, #2
 801d9b4:	f821 0b02 	strh.w	r0, [r1], #2
 801d9b8:	1f15      	subs	r5, r2, #4
 801d9ba:	4608      	mov	r0, r1
 801d9bc:	1a1c      	subs	r4, r3, r0
 801d9be:	440c      	add	r4, r1
 801d9c0:	2c03      	cmp	r4, #3
 801d9c2:	d8ed      	bhi.n	801d9a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801d9c4:	f023 0003 	bic.w	r0, r3, #3
 801d9c8:	f003 0303 	and.w	r3, r3, #3
 801d9cc:	4402      	add	r2, r0
 801d9ce:	4401      	add	r1, r0
 801d9d0:	e7dd      	b.n	801d98e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801d9d2:	2001      	movs	r0, #1
 801d9d4:	bd30      	pop	{r4, r5, pc}

0801d9d6 <_ZN8touchgfx3HAL7noTouchEv>:
 801d9d6:	b510      	push	{r4, lr}
 801d9d8:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801d9dc:	4604      	mov	r4, r0
 801d9de:	b153      	cbz	r3, 801d9f6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801d9e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801d9e4:	2101      	movs	r1, #1
 801d9e6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801d9ea:	3018      	adds	r0, #24
 801d9ec:	f004 ff58 	bl	80228a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801d9f0:	2300      	movs	r3, #0
 801d9f2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801d9f6:	bd10      	pop	{r4, pc}

0801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801d9f8:	4b07      	ldr	r3, [pc, #28]	; (801da18 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801d9fa:	b510      	push	{r4, lr}
 801d9fc:	781b      	ldrb	r3, [r3, #0]
 801d9fe:	4604      	mov	r4, r0
 801da00:	b12b      	cbz	r3, 801da0e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801da02:	6803      	ldr	r3, [r0, #0]
 801da04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da06:	4798      	blx	r3
 801da08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801da0a:	4283      	cmp	r3, r0
 801da0c:	d001      	beq.n	801da12 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801da0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801da10:	bd10      	pop	{r4, pc}
 801da12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801da14:	bd10      	pop	{r4, pc}
 801da16:	bf00      	nop
 801da18:	2000a28c 	.word	0x2000a28c

0801da1c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801da1c:	4b0a      	ldr	r3, [pc, #40]	; (801da48 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801da1e:	b510      	push	{r4, lr}
 801da20:	781b      	ldrb	r3, [r3, #0]
 801da22:	4604      	mov	r4, r0
 801da24:	b12b      	cbz	r3, 801da32 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801da26:	f7f6 fdd5 	bl	80145d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801da2a:	4620      	mov	r0, r4
 801da2c:	f7ff ffe4 	bl	801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801da30:	bd10      	pop	{r4, pc}
 801da32:	6840      	ldr	r0, [r0, #4]
 801da34:	f000 fb3e 	bl	801e0b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801da38:	2800      	cmp	r0, #0
 801da3a:	d0f4      	beq.n	801da26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801da3c:	6862      	ldr	r2, [r4, #4]
 801da3e:	7a53      	ldrb	r3, [r2, #9]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d0fc      	beq.n	801da3e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801da44:	e7ef      	b.n	801da26 <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801da46:	bf00      	nop
 801da48:	2000a28c 	.word	0x2000a28c

0801da4c <_ZN8touchgfx3HAL10initializeEv>:
 801da4c:	b510      	push	{r4, lr}
 801da4e:	4604      	mov	r4, r0
 801da50:	f7f6 fd9c 	bl	801458c <_ZN8touchgfx10OSWrappers10initializeEv>
 801da54:	6860      	ldr	r0, [r4, #4]
 801da56:	6803      	ldr	r3, [r0, #0]
 801da58:	68db      	ldr	r3, [r3, #12]
 801da5a:	4798      	blx	r3
 801da5c:	68e0      	ldr	r0, [r4, #12]
 801da5e:	6803      	ldr	r3, [r0, #0]
 801da60:	689b      	ldr	r3, [r3, #8]
 801da62:	4798      	blx	r3
 801da64:	6823      	ldr	r3, [r4, #0]
 801da66:	4620      	mov	r0, r4
 801da68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da6e:	4718      	bx	r3

0801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da72:	461d      	mov	r5, r3
 801da74:	4b0b      	ldr	r3, [pc, #44]	; (801daa4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801da76:	4617      	mov	r7, r2
 801da78:	460e      	mov	r6, r1
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	6898      	ldr	r0, [r3, #8]
 801da7e:	6803      	ldr	r3, [r0, #0]
 801da80:	6a1b      	ldr	r3, [r3, #32]
 801da82:	4798      	blx	r3
 801da84:	4b08      	ldr	r3, [pc, #32]	; (801daa8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801da86:	2810      	cmp	r0, #16
 801da88:	bf15      	itete	ne
 801da8a:	881c      	ldrhne	r4, [r3, #0]
 801da8c:	8818      	ldrheq	r0, [r3, #0]
 801da8e:	fb07 6204 	mlane	r2, r7, r4, r6
 801da92:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801da96:	bf16      	itet	ne
 801da98:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801da9c:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801daa0:	18a8      	addne	r0, r5, r2
 801daa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801daa4:	2000a290 	.word	0x2000a290
 801daa8:	2000a288 	.word	0x2000a288

0801daac <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dab0:	b088      	sub	sp, #32
 801dab2:	4698      	mov	r8, r3
 801dab4:	4617      	mov	r7, r2
 801dab6:	2200      	movs	r2, #0
 801dab8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801dabc:	4604      	mov	r4, r0
 801dabe:	9206      	str	r2, [sp, #24]
 801dac0:	2bff      	cmp	r3, #255	; 0xff
 801dac2:	f88d 301c 	strb.w	r3, [sp, #28]
 801dac6:	4b1d      	ldr	r3, [pc, #116]	; (801db3c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801dac8:	bf0c      	ite	eq
 801daca:	2201      	moveq	r2, #1
 801dacc:	2204      	movne	r2, #4
 801dace:	881b      	ldrh	r3, [r3, #0]
 801dad0:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801dad4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801dad8:	9201      	str	r2, [sp, #4]
 801dada:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801dade:	9102      	str	r1, [sp, #8]
 801dae0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801dae4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dae8:	f8ad 6010 	strh.w	r6, [sp, #16]
 801daec:	f8ad 5012 	strh.w	r5, [sp, #18]
 801daf0:	f7ff ff82 	bl	801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801daf4:	4642      	mov	r2, r8
 801daf6:	4603      	mov	r3, r0
 801daf8:	4639      	mov	r1, r7
 801dafa:	4620      	mov	r0, r4
 801dafc:	f7ff ffb8 	bl	801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801db00:	9003      	str	r0, [sp, #12]
 801db02:	b106      	cbz	r6, 801db06 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801db04:	b935      	cbnz	r5, 801db14 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801db06:	4b0e      	ldr	r3, [pc, #56]	; (801db40 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801db08:	f240 1143 	movw	r1, #323	; 0x143
 801db0c:	4a0d      	ldr	r2, [pc, #52]	; (801db44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801db0e:	480e      	ldr	r0, [pc, #56]	; (801db48 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801db10:	f004 ff3e 	bl	8022990 <__assert_func>
 801db14:	6823      	ldr	r3, [r4, #0]
 801db16:	4620      	mov	r0, r4
 801db18:	9d01      	ldr	r5, [sp, #4]
 801db1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db1c:	4798      	blx	r3
 801db1e:	4228      	tst	r0, r5
 801db20:	d104      	bne.n	801db2c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801db22:	4b0a      	ldr	r3, [pc, #40]	; (801db4c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801db24:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801db28:	4a06      	ldr	r2, [pc, #24]	; (801db44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801db2a:	e7f0      	b.n	801db0e <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801db2c:	6860      	ldr	r0, [r4, #4]
 801db2e:	a901      	add	r1, sp, #4
 801db30:	6803      	ldr	r3, [r0, #0]
 801db32:	685b      	ldr	r3, [r3, #4]
 801db34:	4798      	blx	r3
 801db36:	b008      	add	sp, #32
 801db38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db3c:	2000a288 	.word	0x2000a288
 801db40:	080259b5 	.word	0x080259b5
 801db44:	08025c63 	.word	0x08025c63
 801db48:	080259ed 	.word	0x080259ed
 801db4c:	08025a13 	.word	0x08025a13

0801db50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db54:	4698      	mov	r8, r3
 801db56:	b088      	sub	sp, #32
 801db58:	2300      	movs	r3, #0
 801db5a:	4617      	mov	r7, r2
 801db5c:	4604      	mov	r4, r0
 801db5e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801db62:	9306      	str	r3, [sp, #24]
 801db64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801db68:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801db6c:	9301      	str	r3, [sp, #4]
 801db6e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801db72:	9102      	str	r1, [sp, #8]
 801db74:	f8ad 3014 	strh.w	r3, [sp, #20]
 801db78:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801db7c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801db80:	f88d 301c 	strb.w	r3, [sp, #28]
 801db84:	f8ad 5012 	strh.w	r5, [sp, #18]
 801db88:	f7ff ff36 	bl	801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801db8c:	4642      	mov	r2, r8
 801db8e:	4603      	mov	r3, r0
 801db90:	4639      	mov	r1, r7
 801db92:	4620      	mov	r0, r4
 801db94:	f7ff ff6c 	bl	801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801db98:	4b11      	ldr	r3, [pc, #68]	; (801dbe0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801db9a:	9003      	str	r0, [sp, #12]
 801db9c:	881b      	ldrh	r3, [r3, #0]
 801db9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dba2:	b106      	cbz	r6, 801dba6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801dba4:	b935      	cbnz	r5, 801dbb4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801dba6:	4b0f      	ldr	r3, [pc, #60]	; (801dbe4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801dba8:	f240 1153 	movw	r1, #339	; 0x153
 801dbac:	4a0e      	ldr	r2, [pc, #56]	; (801dbe8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801dbae:	480f      	ldr	r0, [pc, #60]	; (801dbec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801dbb0:	f004 feee 	bl	8022990 <__assert_func>
 801dbb4:	6823      	ldr	r3, [r4, #0]
 801dbb6:	4620      	mov	r0, r4
 801dbb8:	9d01      	ldr	r5, [sp, #4]
 801dbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbbc:	4798      	blx	r3
 801dbbe:	4228      	tst	r0, r5
 801dbc0:	d104      	bne.n	801dbcc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801dbc2:	4b0b      	ldr	r3, [pc, #44]	; (801dbf0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801dbc4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801dbc8:	4a07      	ldr	r2, [pc, #28]	; (801dbe8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801dbca:	e7f0      	b.n	801dbae <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801dbcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dbce:	a901      	add	r1, sp, #4
 801dbd0:	6860      	ldr	r0, [r4, #4]
 801dbd2:	9306      	str	r3, [sp, #24]
 801dbd4:	6803      	ldr	r3, [r0, #0]
 801dbd6:	685b      	ldr	r3, [r3, #4]
 801dbd8:	4798      	blx	r3
 801dbda:	b008      	add	sp, #32
 801dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbe0:	2000a288 	.word	0x2000a288
 801dbe4:	080259b5 	.word	0x080259b5
 801dbe8:	08025b00 	.word	0x08025b00
 801dbec:	080259ed 	.word	0x080259ed
 801dbf0:	08025a13 	.word	0x08025a13

0801dbf4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbf8:	b088      	sub	sp, #32
 801dbfa:	4698      	mov	r8, r3
 801dbfc:	4617      	mov	r7, r2
 801dbfe:	2200      	movs	r2, #0
 801dc00:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801dc04:	4604      	mov	r4, r0
 801dc06:	9206      	str	r2, [sp, #24]
 801dc08:	2bff      	cmp	r3, #255	; 0xff
 801dc0a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801dc0e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801dc12:	bf0c      	ite	eq
 801dc14:	2220      	moveq	r2, #32
 801dc16:	2240      	movne	r2, #64	; 0x40
 801dc18:	9102      	str	r1, [sp, #8]
 801dc1a:	9201      	str	r2, [sp, #4]
 801dc1c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801dc20:	f88d 301c 	strb.w	r3, [sp, #28]
 801dc24:	f8ad 2014 	strh.w	r2, [sp, #20]
 801dc28:	f8ad 6010 	strh.w	r6, [sp, #16]
 801dc2c:	f8ad 5012 	strh.w	r5, [sp, #18]
 801dc30:	f7ff fee2 	bl	801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801dc34:	4642      	mov	r2, r8
 801dc36:	4603      	mov	r3, r0
 801dc38:	4639      	mov	r1, r7
 801dc3a:	4620      	mov	r0, r4
 801dc3c:	f7ff ff18 	bl	801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801dc40:	4b10      	ldr	r3, [pc, #64]	; (801dc84 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801dc42:	9003      	str	r0, [sp, #12]
 801dc44:	881b      	ldrh	r3, [r3, #0]
 801dc46:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dc4a:	b106      	cbz	r6, 801dc4e <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801dc4c:	b935      	cbnz	r5, 801dc5c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801dc4e:	4b0e      	ldr	r3, [pc, #56]	; (801dc88 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801dc50:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801dc54:	4a0d      	ldr	r2, [pc, #52]	; (801dc8c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801dc56:	480e      	ldr	r0, [pc, #56]	; (801dc90 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801dc58:	f004 fe9a 	bl	8022990 <__assert_func>
 801dc5c:	6823      	ldr	r3, [r4, #0]
 801dc5e:	4620      	mov	r0, r4
 801dc60:	9d01      	ldr	r5, [sp, #4]
 801dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc64:	4798      	blx	r3
 801dc66:	4228      	tst	r0, r5
 801dc68:	d104      	bne.n	801dc74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801dc6a:	4b0a      	ldr	r3, [pc, #40]	; (801dc94 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801dc6c:	f240 1167 	movw	r1, #359	; 0x167
 801dc70:	4a06      	ldr	r2, [pc, #24]	; (801dc8c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801dc72:	e7f0      	b.n	801dc56 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801dc74:	6860      	ldr	r0, [r4, #4]
 801dc76:	a901      	add	r1, sp, #4
 801dc78:	6803      	ldr	r3, [r0, #0]
 801dc7a:	685b      	ldr	r3, [r3, #4]
 801dc7c:	4798      	blx	r3
 801dc7e:	b008      	add	sp, #32
 801dc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc84:	2000a288 	.word	0x2000a288
 801dc88:	080259b5 	.word	0x080259b5
 801dc8c:	08025ba4 	.word	0x08025ba4
 801dc90:	080259ed 	.word	0x080259ed
 801dc94:	08025a13 	.word	0x08025a13

0801dc98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801dc98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc9c:	b089      	sub	sp, #36	; 0x24
 801dc9e:	4699      	mov	r9, r3
 801dca0:	4604      	mov	r4, r0
 801dca2:	2500      	movs	r5, #0
 801dca4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801dca8:	4690      	mov	r8, r2
 801dcaa:	460f      	mov	r7, r1
 801dcac:	9506      	str	r5, [sp, #24]
 801dcae:	2eff      	cmp	r6, #255	; 0xff
 801dcb0:	9502      	str	r5, [sp, #8]
 801dcb2:	bf0c      	ite	eq
 801dcb4:	2302      	moveq	r3, #2
 801dcb6:	2308      	movne	r3, #8
 801dcb8:	9301      	str	r3, [sp, #4]
 801dcba:	f7ff fe9d 	bl	801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801dcbe:	464a      	mov	r2, r9
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	4641      	mov	r1, r8
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	f7ff fed3 	bl	801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801dcca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801dcce:	f8ad 5014 	strh.w	r5, [sp, #20]
 801dcd2:	f8ad 3010 	strh.w	r3, [sp, #16]
 801dcd6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801dcda:	9d01      	ldr	r5, [sp, #4]
 801dcdc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dce0:	4b0e      	ldr	r3, [pc, #56]	; (801dd1c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801dce2:	9003      	str	r0, [sp, #12]
 801dce4:	4620      	mov	r0, r4
 801dce6:	881b      	ldrh	r3, [r3, #0]
 801dce8:	9706      	str	r7, [sp, #24]
 801dcea:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dcee:	6823      	ldr	r3, [r4, #0]
 801dcf0:	f88d 601c 	strb.w	r6, [sp, #28]
 801dcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcf6:	4798      	blx	r3
 801dcf8:	4228      	tst	r0, r5
 801dcfa:	d106      	bne.n	801dd0a <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801dcfc:	4b08      	ldr	r3, [pc, #32]	; (801dd20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801dcfe:	f240 1179 	movw	r1, #377	; 0x179
 801dd02:	4a08      	ldr	r2, [pc, #32]	; (801dd24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801dd04:	4808      	ldr	r0, [pc, #32]	; (801dd28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801dd06:	f004 fe43 	bl	8022990 <__assert_func>
 801dd0a:	6860      	ldr	r0, [r4, #4]
 801dd0c:	a901      	add	r1, sp, #4
 801dd0e:	6803      	ldr	r3, [r0, #0]
 801dd10:	685b      	ldr	r3, [r3, #4]
 801dd12:	4798      	blx	r3
 801dd14:	b009      	add	sp, #36	; 0x24
 801dd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd1a:	bf00      	nop
 801dd1c:	2000a288 	.word	0x2000a288
 801dd20:	08025a13 	.word	0x08025a13
 801dd24:	08025cda 	.word	0x08025cda
 801dd28:	080259ed 	.word	0x080259ed

0801dd2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801dd2c:	4b1d      	ldr	r3, [pc, #116]	; (801dda4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801dd2e:	b570      	push	{r4, r5, r6, lr}
 801dd30:	b08a      	sub	sp, #40	; 0x28
 801dd32:	781b      	ldrb	r3, [r3, #0]
 801dd34:	4604      	mov	r4, r0
 801dd36:	e88d 0006 	stmia.w	sp, {r1, r2}
 801dd3a:	b933      	cbnz	r3, 801dd4a <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801dd3c:	4b1a      	ldr	r3, [pc, #104]	; (801dda8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801dd3e:	f240 1185 	movw	r1, #389	; 0x185
 801dd42:	4a1a      	ldr	r2, [pc, #104]	; (801ddac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801dd44:	481a      	ldr	r0, [pc, #104]	; (801ddb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801dd46:	f004 fe23 	bl	8022990 <__assert_func>
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	f8bd 5000 	ldrh.w	r5, [sp]
 801dd50:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801dd54:	9308      	str	r3, [sp, #32]
 801dd56:	2301      	movs	r3, #1
 801dd58:	9303      	str	r3, [sp, #12]
 801dd5a:	6803      	ldr	r3, [r0, #0]
 801dd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd5e:	4798      	blx	r3
 801dd60:	4632      	mov	r2, r6
 801dd62:	4603      	mov	r3, r0
 801dd64:	4629      	mov	r1, r5
 801dd66:	4620      	mov	r0, r4
 801dd68:	f7ff fe82 	bl	801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801dd6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dd6e:	9004      	str	r0, [sp, #16]
 801dd70:	a903      	add	r1, sp, #12
 801dd72:	9305      	str	r3, [sp, #20]
 801dd74:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801dd78:	6860      	ldr	r0, [r4, #4]
 801dd7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801dd7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801dd82:	f8ad 301a 	strh.w	r3, [sp, #26]
 801dd86:	4b0b      	ldr	r3, [pc, #44]	; (801ddb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801dd88:	881b      	ldrh	r3, [r3, #0]
 801dd8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dd8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dd92:	23ff      	movs	r3, #255	; 0xff
 801dd94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801dd98:	6803      	ldr	r3, [r0, #0]
 801dd9a:	685b      	ldr	r3, [r3, #4]
 801dd9c:	4798      	blx	r3
 801dd9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801dda0:	b00a      	add	sp, #40	; 0x28
 801dda2:	bd70      	pop	{r4, r5, r6, pc}
 801dda4:	2000a28d 	.word	0x2000a28d
 801dda8:	08025947 	.word	0x08025947
 801ddac:	08025c1d 	.word	0x08025c1d
 801ddb0:	080259ed 	.word	0x080259ed
 801ddb4:	2000a288 	.word	0x2000a288

0801ddb8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801ddb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddba:	461d      	mov	r5, r3
 801ddbc:	b08b      	sub	sp, #44	; 0x2c
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	9308      	str	r3, [sp, #32]
 801ddc4:	2301      	movs	r3, #1
 801ddc6:	9303      	str	r3, [sp, #12]
 801ddc8:	6803      	ldr	r3, [r0, #0]
 801ddca:	e88d 0006 	stmia.w	sp, {r1, r2}
 801ddce:	f8bd 6000 	ldrh.w	r6, [sp]
 801ddd2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801ddd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddd8:	4798      	blx	r3
 801ddda:	463a      	mov	r2, r7
 801dddc:	4603      	mov	r3, r0
 801ddde:	4631      	mov	r1, r6
 801dde0:	4620      	mov	r0, r4
 801dde2:	f7ff fe45 	bl	801da70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801dde6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ddea:	9004      	str	r0, [sp, #16]
 801ddec:	a903      	add	r1, sp, #12
 801ddee:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ddf2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ddf6:	6860      	ldr	r0, [r4, #4]
 801ddf8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ddfc:	4b08      	ldr	r3, [pc, #32]	; (801de20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801ddfe:	9505      	str	r5, [sp, #20]
 801de00:	881b      	ldrh	r3, [r3, #0]
 801de02:	f8ad 301c 	strh.w	r3, [sp, #28]
 801de06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de08:	f8ad 301e 	strh.w	r3, [sp, #30]
 801de0c:	23ff      	movs	r3, #255	; 0xff
 801de0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801de12:	6803      	ldr	r3, [r0, #0]
 801de14:	685b      	ldr	r3, [r3, #4]
 801de16:	4798      	blx	r3
 801de18:	4628      	mov	r0, r5
 801de1a:	b00b      	add	sp, #44	; 0x2c
 801de1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de1e:	bf00      	nop
 801de20:	2000a288 	.word	0x2000a288

0801de24 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801de24:	b570      	push	{r4, r5, r6, lr}
 801de26:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801de2a:	4604      	mov	r4, r0
 801de2c:	b19b      	cbz	r3, 801de56 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801de2e:	2002      	movs	r0, #2
 801de30:	f7ff f8b1 	bl	801cf96 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801de34:	2300      	movs	r3, #0
 801de36:	4620      	mov	r0, r4
 801de38:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801de3c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801de40:	6823      	ldr	r3, [r4, #0]
 801de42:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801de46:	f7ff fdd7 	bl	801d9f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801de4a:	4601      	mov	r1, r0
 801de4c:	4620      	mov	r0, r4
 801de4e:	462b      	mov	r3, r5
 801de50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de54:	4718      	bx	r3
 801de56:	bd70      	pop	{r4, r5, r6, pc}

0801de58 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801de58:	b570      	push	{r4, r5, r6, lr}
 801de5a:	4605      	mov	r5, r0
 801de5c:	460c      	mov	r4, r1
 801de5e:	2003      	movs	r0, #3
 801de60:	b149      	cbz	r1, 801de76 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801de62:	f7ff f882 	bl	801cf6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801de66:	6928      	ldr	r0, [r5, #16]
 801de68:	b168      	cbz	r0, 801de86 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801de6a:	6803      	ldr	r3, [r0, #0]
 801de6c:	2101      	movs	r1, #1
 801de6e:	695b      	ldr	r3, [r3, #20]
 801de70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de74:	4718      	bx	r3
 801de76:	f7ff f883 	bl	801cf80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801de7a:	6928      	ldr	r0, [r5, #16]
 801de7c:	b118      	cbz	r0, 801de86 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801de7e:	6803      	ldr	r3, [r0, #0]
 801de80:	4621      	mov	r1, r4
 801de82:	695b      	ldr	r3, [r3, #20]
 801de84:	e7f4      	b.n	801de70 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801de86:	bd70      	pop	{r4, r5, r6, pc}

0801de88 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801de88:	4770      	bx	lr

0801de8a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801de8a:	68c2      	ldr	r2, [r0, #12]
 801de8c:	6900      	ldr	r0, [r0, #16]
 801de8e:	1a13      	subs	r3, r2, r0
 801de90:	4258      	negs	r0, r3
 801de92:	4158      	adcs	r0, r3
 801de94:	4770      	bx	lr

0801de96 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801de96:	68c2      	ldr	r2, [r0, #12]
 801de98:	6903      	ldr	r3, [r0, #16]
 801de9a:	1a9b      	subs	r3, r3, r2
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	bfdc      	itt	le
 801dea0:	6882      	ldrle	r2, [r0, #8]
 801dea2:	189b      	addle	r3, r3, r2
 801dea4:	2b01      	cmp	r3, #1
 801dea6:	bfcc      	ite	gt
 801dea8:	2000      	movgt	r0, #0
 801deaa:	2001      	movle	r0, #1
 801deac:	4770      	bx	lr

0801deae <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801deae:	6902      	ldr	r2, [r0, #16]
 801deb0:	6843      	ldr	r3, [r0, #4]
 801deb2:	201c      	movs	r0, #28
 801deb4:	fb00 3002 	mla	r0, r0, r2, r3
 801deb8:	4770      	bx	lr

0801deba <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801deba:	6803      	ldr	r3, [r0, #0]
 801debc:	691b      	ldr	r3, [r3, #16]
 801debe:	4718      	bx	r3

0801dec0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801dec0:	4770      	bx	lr

0801dec2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801dec2:	4770      	bx	lr

0801dec4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801dec4:	2301      	movs	r3, #1
 801dec6:	b570      	push	{r4, r5, r6, lr}
 801dec8:	7203      	strb	r3, [r0, #8]
 801deca:	4604      	mov	r4, r0
 801decc:	6840      	ldr	r0, [r0, #4]
 801dece:	6803      	ldr	r3, [r0, #0]
 801ded0:	699b      	ldr	r3, [r3, #24]
 801ded2:	4798      	blx	r3
 801ded4:	6803      	ldr	r3, [r0, #0]
 801ded6:	4605      	mov	r5, r0
 801ded8:	2b08      	cmp	r3, #8
 801deda:	d01e      	beq.n	801df1a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801dedc:	d80b      	bhi.n	801def6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801dede:	2b02      	cmp	r3, #2
 801dee0:	d027      	beq.n	801df32 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801dee2:	2b04      	cmp	r3, #4
 801dee4:	d011      	beq.n	801df0a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801dee6:	2b01      	cmp	r3, #1
 801dee8:	d028      	beq.n	801df3c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801deea:	4b17      	ldr	r3, [pc, #92]	; (801df48 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801deec:	218d      	movs	r1, #141	; 0x8d
 801deee:	4a17      	ldr	r2, [pc, #92]	; (801df4c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801def0:	4817      	ldr	r0, [pc, #92]	; (801df50 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801def2:	f004 fd4d 	bl	8022990 <__assert_func>
 801def6:	2b40      	cmp	r3, #64	; 0x40
 801def8:	d020      	beq.n	801df3c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801defa:	d801      	bhi.n	801df00 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801defc:	2b20      	cmp	r3, #32
 801defe:	e7f3      	b.n	801dee8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801df00:	2b80      	cmp	r3, #128	; 0x80
 801df02:	d01b      	beq.n	801df3c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801df04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801df08:	e7ee      	b.n	801dee8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801df0a:	6823      	ldr	r3, [r4, #0]
 801df0c:	7e01      	ldrb	r1, [r0, #24]
 801df0e:	4620      	mov	r0, r4
 801df10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df12:	4798      	blx	r3
 801df14:	6823      	ldr	r3, [r4, #0]
 801df16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df18:	e006      	b.n	801df28 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801df1a:	6823      	ldr	r3, [r4, #0]
 801df1c:	7e01      	ldrb	r1, [r0, #24]
 801df1e:	4620      	mov	r0, r4
 801df20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df22:	4798      	blx	r3
 801df24:	6823      	ldr	r3, [r4, #0]
 801df26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df28:	4629      	mov	r1, r5
 801df2a:	4620      	mov	r0, r4
 801df2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df30:	4718      	bx	r3
 801df32:	6823      	ldr	r3, [r4, #0]
 801df34:	4620      	mov	r0, r4
 801df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df38:	4798      	blx	r3
 801df3a:	e7f3      	b.n	801df24 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801df3c:	6823      	ldr	r3, [r4, #0]
 801df3e:	4620      	mov	r0, r4
 801df40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df42:	4798      	blx	r3
 801df44:	e7e6      	b.n	801df14 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801df46:	bf00      	nop
 801df48:	08025d45 	.word	0x08025d45
 801df4c:	08025e50 	.word	0x08025e50
 801df50:	08025d6a 	.word	0x08025d6a

0801df54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801df54:	b570      	push	{r4, r5, r6, lr}
 801df56:	4604      	mov	r4, r0
 801df58:	460e      	mov	r6, r1
 801df5a:	6860      	ldr	r0, [r4, #4]
 801df5c:	6803      	ldr	r3, [r0, #0]
 801df5e:	685b      	ldr	r3, [r3, #4]
 801df60:	4798      	blx	r3
 801df62:	2800      	cmp	r0, #0
 801df64:	d1f9      	bne.n	801df5a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801df66:	4d0b      	ldr	r5, [pc, #44]	; (801df94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801df68:	6828      	ldr	r0, [r5, #0]
 801df6a:	6803      	ldr	r3, [r0, #0]
 801df6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801df6e:	4798      	blx	r3
 801df70:	f7f6 fb4c 	bl	801460c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801df74:	6860      	ldr	r0, [r4, #4]
 801df76:	4631      	mov	r1, r6
 801df78:	6803      	ldr	r3, [r0, #0]
 801df7a:	689b      	ldr	r3, [r3, #8]
 801df7c:	4798      	blx	r3
 801df7e:	6823      	ldr	r3, [r4, #0]
 801df80:	4620      	mov	r0, r4
 801df82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df84:	4798      	blx	r3
 801df86:	6828      	ldr	r0, [r5, #0]
 801df88:	6803      	ldr	r3, [r0, #0]
 801df8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801df90:	4718      	bx	r3
 801df92:	bf00      	nop
 801df94:	2000a290 	.word	0x2000a290

0801df98 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801df98:	b508      	push	{r3, lr}
 801df9a:	f7f6 fb1b 	bl	80145d4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801df9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801dfa2:	f7f6 bb25 	b.w	80145f0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801dfa6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801dfa6:	b570      	push	{r4, r5, r6, lr}
 801dfa8:	4604      	mov	r4, r0
 801dfaa:	6840      	ldr	r0, [r0, #4]
 801dfac:	6803      	ldr	r3, [r0, #0]
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	4798      	blx	r3
 801dfb2:	4605      	mov	r5, r0
 801dfb4:	b908      	cbnz	r0, 801dfba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801dfb6:	7a23      	ldrb	r3, [r4, #8]
 801dfb8:	b973      	cbnz	r3, 801dfd8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801dfba:	6860      	ldr	r0, [r4, #4]
 801dfbc:	6803      	ldr	r3, [r0, #0]
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	4798      	blx	r3
 801dfc2:	b928      	cbnz	r0, 801dfd0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801dfc4:	6823      	ldr	r3, [r4, #0]
 801dfc6:	4620      	mov	r0, r4
 801dfc8:	6a1b      	ldr	r3, [r3, #32]
 801dfca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfce:	4718      	bx	r3
 801dfd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfd4:	f7f6 bb26 	b.w	8014624 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801dfd8:	6860      	ldr	r0, [r4, #4]
 801dfda:	6803      	ldr	r3, [r0, #0]
 801dfdc:	695b      	ldr	r3, [r3, #20]
 801dfde:	4798      	blx	r3
 801dfe0:	7225      	strb	r5, [r4, #8]
 801dfe2:	e7ea      	b.n	801dfba <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801dfe4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801dfe4:	b510      	push	{r4, lr}
 801dfe6:	68c3      	ldr	r3, [r0, #12]
 801dfe8:	6902      	ldr	r2, [r0, #16]
 801dfea:	1ad2      	subs	r2, r2, r3
 801dfec:	2a00      	cmp	r2, #0
 801dfee:	bfdc      	itt	le
 801dff0:	6884      	ldrle	r4, [r0, #8]
 801dff2:	1912      	addle	r2, r2, r4
 801dff4:	2a01      	cmp	r2, #1
 801dff6:	dd17      	ble.n	801e028 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801dff8:	6842      	ldr	r2, [r0, #4]
 801dffa:	241c      	movs	r4, #28
 801dffc:	fb04 2303 	mla	r3, r4, r3, r2
 801e000:	f101 0218 	add.w	r2, r1, #24
 801e004:	f851 4b04 	ldr.w	r4, [r1], #4
 801e008:	4291      	cmp	r1, r2
 801e00a:	f843 4b04 	str.w	r4, [r3], #4
 801e00e:	d1f9      	bne.n	801e004 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801e010:	780a      	ldrb	r2, [r1, #0]
 801e012:	701a      	strb	r2, [r3, #0]
 801e014:	68c3      	ldr	r3, [r0, #12]
 801e016:	6882      	ldr	r2, [r0, #8]
 801e018:	f3bf 8f5b 	dmb	ish
 801e01c:	3301      	adds	r3, #1
 801e01e:	4293      	cmp	r3, r2
 801e020:	bfa8      	it	ge
 801e022:	1a9b      	subge	r3, r3, r2
 801e024:	60c3      	str	r3, [r0, #12]
 801e026:	bd10      	pop	{r4, pc}
 801e028:	4b02      	ldr	r3, [pc, #8]	; (801e034 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801e02a:	213b      	movs	r1, #59	; 0x3b
 801e02c:	4a02      	ldr	r2, [pc, #8]	; (801e038 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801e02e:	4803      	ldr	r0, [pc, #12]	; (801e03c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801e030:	f004 fcae 	bl	8022990 <__assert_func>
 801e034:	08025d90 	.word	0x08025d90
 801e038:	08025e80 	.word	0x08025e80
 801e03c:	08025d6a 	.word	0x08025d6a

0801e040 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801e040:	b510      	push	{r4, lr}
 801e042:	6803      	ldr	r3, [r0, #0]
 801e044:	4604      	mov	r4, r0
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	4798      	blx	r3
 801e04a:	b128      	cbz	r0, 801e058 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801e04c:	4b07      	ldr	r3, [pc, #28]	; (801e06c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801e04e:	2141      	movs	r1, #65	; 0x41
 801e050:	4a07      	ldr	r2, [pc, #28]	; (801e070 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801e052:	4808      	ldr	r0, [pc, #32]	; (801e074 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801e054:	f004 fc9c 	bl	8022990 <__assert_func>
 801e058:	6923      	ldr	r3, [r4, #16]
 801e05a:	68a2      	ldr	r2, [r4, #8]
 801e05c:	f3bf 8f5b 	dmb	ish
 801e060:	3301      	adds	r3, #1
 801e062:	4293      	cmp	r3, r2
 801e064:	bfa8      	it	ge
 801e066:	1a9b      	subge	r3, r3, r2
 801e068:	6123      	str	r3, [r4, #16]
 801e06a:	bd10      	pop	{r4, pc}
 801e06c:	08025db3 	.word	0x08025db3
 801e070:	08025ece 	.word	0x08025ece
 801e074:	08025d6a 	.word	0x08025d6a

0801e078 <_ZN8touchgfx13DMA_Interface5startEv>:
 801e078:	b510      	push	{r4, lr}
 801e07a:	4604      	mov	r4, r0
 801e07c:	6840      	ldr	r0, [r0, #4]
 801e07e:	6803      	ldr	r3, [r0, #0]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	4798      	blx	r3
 801e084:	b948      	cbnz	r0, 801e09a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801e086:	7a63      	ldrb	r3, [r4, #9]
 801e088:	b13b      	cbz	r3, 801e09a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801e08a:	7a23      	ldrb	r3, [r4, #8]
 801e08c:	b92b      	cbnz	r3, 801e09a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801e08e:	6823      	ldr	r3, [r4, #0]
 801e090:	4620      	mov	r0, r4
 801e092:	6a1b      	ldr	r3, [r3, #32]
 801e094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e098:	4718      	bx	r3
 801e09a:	bd10      	pop	{r4, pc}

0801e09c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801e09c:	b510      	push	{r4, lr}
 801e09e:	6082      	str	r2, [r0, #8]
 801e0a0:	2200      	movs	r2, #0
 801e0a2:	4c03      	ldr	r4, [pc, #12]	; (801e0b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801e0a4:	6041      	str	r1, [r0, #4]
 801e0a6:	6004      	str	r4, [r0, #0]
 801e0a8:	60c2      	str	r2, [r0, #12]
 801e0aa:	6102      	str	r2, [r0, #16]
 801e0ac:	bd10      	pop	{r4, pc}
 801e0ae:	bf00      	nop
 801e0b0:	08025e34 	.word	0x08025e34

0801e0b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801e0b4:	6840      	ldr	r0, [r0, #4]
 801e0b6:	6803      	ldr	r3, [r0, #0]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	4718      	bx	r3

0801e0bc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801e0bc:	b538      	push	{r3, r4, r5, lr}
 801e0be:	4604      	mov	r4, r0
 801e0c0:	2500      	movs	r5, #0
 801e0c2:	9804      	ldr	r0, [sp, #16]
 801e0c4:	7223      	strb	r3, [r4, #8]
 801e0c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801e0ca:	8025      	strh	r5, [r4, #0]
 801e0cc:	60e5      	str	r5, [r4, #12]
 801e0ce:	82e5      	strh	r5, [r4, #22]
 801e0d0:	8325      	strh	r5, [r4, #24]
 801e0d2:	8365      	strh	r5, [r4, #26]
 801e0d4:	83a5      	strh	r5, [r4, #28]
 801e0d6:	83e5      	strh	r5, [r4, #30]
 801e0d8:	8425      	strh	r5, [r4, #32]
 801e0da:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801e0de:	6061      	str	r1, [r4, #4]
 801e0e0:	7263      	strb	r3, [r4, #9]
 801e0e2:	6120      	str	r0, [r4, #16]
 801e0e4:	82a2      	strh	r2, [r4, #20]
 801e0e6:	6803      	ldr	r3, [r0, #0]
 801e0e8:	695b      	ldr	r3, [r3, #20]
 801e0ea:	4798      	blx	r3
 801e0ec:	4605      	mov	r5, r0
 801e0ee:	b330      	cbz	r0, 801e13e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801e0f0:	6920      	ldr	r0, [r4, #16]
 801e0f2:	4629      	mov	r1, r5
 801e0f4:	6803      	ldr	r3, [r0, #0]
 801e0f6:	68db      	ldr	r3, [r3, #12]
 801e0f8:	4798      	blx	r3
 801e0fa:	60e0      	str	r0, [r4, #12]
 801e0fc:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801e100:	4602      	mov	r2, r0
 801e102:	7a81      	ldrb	r1, [r0, #10]
 801e104:	2b00      	cmp	r3, #0
 801e106:	bfb4      	ite	lt
 801e108:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801e10c:	2300      	movge	r3, #0
 801e10e:	430b      	orrs	r3, r1
 801e110:	8423      	strh	r3, [r4, #32]
 801e112:	7a63      	ldrb	r3, [r4, #9]
 801e114:	2b04      	cmp	r3, #4
 801e116:	d112      	bne.n	801e13e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801e118:	6920      	ldr	r0, [r4, #16]
 801e11a:	4629      	mov	r1, r5
 801e11c:	6803      	ldr	r3, [r0, #0]
 801e11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e120:	4798      	blx	r3
 801e122:	68e2      	ldr	r2, [r4, #12]
 801e124:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801e128:	7a91      	ldrb	r1, [r2, #10]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	bfb4      	ite	lt
 801e12e:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801e132:	2300      	movge	r3, #0
 801e134:	430b      	orrs	r3, r1
 801e136:	4418      	add	r0, r3
 801e138:	8c23      	ldrh	r3, [r4, #32]
 801e13a:	4418      	add	r0, r3
 801e13c:	8420      	strh	r0, [r4, #32]
 801e13e:	4620      	mov	r0, r4
 801e140:	bd38      	pop	{r3, r4, r5, pc}

0801e142 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801e142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e146:	2600      	movs	r6, #0
 801e148:	4682      	mov	sl, r0
 801e14a:	460f      	mov	r7, r1
 801e14c:	4693      	mov	fp, r2
 801e14e:	46b1      	mov	r9, r6
 801e150:	46b0      	mov	r8, r6
 801e152:	9301      	str	r3, [sp, #4]
 801e154:	455e      	cmp	r6, fp
 801e156:	da26      	bge.n	801e1a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801e158:	9901      	ldr	r1, [sp, #4]
 801e15a:	4650      	mov	r0, sl
 801e15c:	f001 feb4 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e160:	4605      	mov	r5, r0
 801e162:	b300      	cbz	r0, 801e1a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801e164:	280a      	cmp	r0, #10
 801e166:	d01e      	beq.n	801e1a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801e168:	683b      	ldr	r3, [r7, #0]
 801e16a:	4601      	mov	r1, r0
 801e16c:	4638      	mov	r0, r7
 801e16e:	68db      	ldr	r3, [r3, #12]
 801e170:	4798      	blx	r3
 801e172:	4602      	mov	r2, r0
 801e174:	b1a0      	cbz	r0, 801e1a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801e176:	7a83      	ldrb	r3, [r0, #10]
 801e178:	4649      	mov	r1, r9
 801e17a:	8885      	ldrh	r5, [r0, #4]
 801e17c:	9300      	str	r3, [sp, #0]
 801e17e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801e182:	4638      	mov	r0, r7
 801e184:	2b00      	cmp	r3, #0
 801e186:	683b      	ldr	r3, [r7, #0]
 801e188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e18a:	bfb4      	ite	lt
 801e18c:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801e190:	2400      	movge	r4, #0
 801e192:	4798      	blx	r3
 801e194:	9b00      	ldr	r3, [sp, #0]
 801e196:	431c      	orrs	r4, r3
 801e198:	4404      	add	r4, r0
 801e19a:	44a0      	add	r8, r4
 801e19c:	fa1f f888 	uxth.w	r8, r8
 801e1a0:	3601      	adds	r6, #1
 801e1a2:	46a9      	mov	r9, r5
 801e1a4:	e7d6      	b.n	801e154 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801e1a6:	4640      	mov	r0, r8
 801e1a8:	b003      	add	sp, #12
 801e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801e1ae:	2a02      	cmp	r2, #2
 801e1b0:	b530      	push	{r4, r5, lr}
 801e1b2:	d011      	beq.n	801e1d8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801e1b4:	2a03      	cmp	r2, #3
 801e1b6:	d01c      	beq.n	801e1f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801e1b8:	2a01      	cmp	r2, #1
 801e1ba:	d128      	bne.n	801e20e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801e1bc:	888b      	ldrh	r3, [r1, #4]
 801e1be:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801e1c2:	8801      	ldrh	r1, [r0, #0]
 801e1c4:	1a9b      	subs	r3, r3, r2
 801e1c6:	8844      	ldrh	r4, [r0, #2]
 801e1c8:	1a5b      	subs	r3, r3, r1
 801e1ca:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e1ce:	8004      	strh	r4, [r0, #0]
 801e1d0:	8043      	strh	r3, [r0, #2]
 801e1d2:	8081      	strh	r1, [r0, #4]
 801e1d4:	80c2      	strh	r2, [r0, #6]
 801e1d6:	bd30      	pop	{r4, r5, pc}
 801e1d8:	88cb      	ldrh	r3, [r1, #6]
 801e1da:	88c2      	ldrh	r2, [r0, #6]
 801e1dc:	1a9b      	subs	r3, r3, r2
 801e1de:	8842      	ldrh	r2, [r0, #2]
 801e1e0:	1a9b      	subs	r3, r3, r2
 801e1e2:	888a      	ldrh	r2, [r1, #4]
 801e1e4:	8881      	ldrh	r1, [r0, #4]
 801e1e6:	8043      	strh	r3, [r0, #2]
 801e1e8:	1a52      	subs	r2, r2, r1
 801e1ea:	8801      	ldrh	r1, [r0, #0]
 801e1ec:	1a52      	subs	r2, r2, r1
 801e1ee:	8002      	strh	r2, [r0, #0]
 801e1f0:	bd30      	pop	{r4, r5, pc}
 801e1f2:	88cb      	ldrh	r3, [r1, #6]
 801e1f4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801e1f8:	8841      	ldrh	r1, [r0, #2]
 801e1fa:	1a9b      	subs	r3, r3, r2
 801e1fc:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e200:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e204:	1a5b      	subs	r3, r3, r1
 801e206:	8045      	strh	r5, [r0, #2]
 801e208:	8082      	strh	r2, [r0, #4]
 801e20a:	8003      	strh	r3, [r0, #0]
 801e20c:	80c4      	strh	r4, [r0, #6]
 801e20e:	bd30      	pop	{r4, r5, pc}

0801e210 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 801e210:	b570      	push	{r4, r5, r6, lr}
 801e212:	b086      	sub	sp, #24
 801e214:	ad02      	add	r5, sp, #8
 801e216:	e885 0006 	stmia.w	r5, {r1, r2}
 801e21a:	461a      	mov	r2, r3
 801e21c:	ab0c      	add	r3, sp, #48	; 0x30
 801e21e:	9305      	str	r3, [sp, #20]
 801e220:	4b0a      	ldr	r3, [pc, #40]	; (801e24c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 801e222:	685c      	ldr	r4, [r3, #4]
 801e224:	f014 0f01 	tst.w	r4, #1
 801e228:	ea4f 0464 	mov.w	r4, r4, asr #1
 801e22c:	bf1c      	itt	ne
 801e22e:	681b      	ldrne	r3, [r3, #0]
 801e230:	5901      	ldrne	r1, [r0, r4]
 801e232:	4420      	add	r0, r4
 801e234:	bf0c      	ite	eq
 801e236:	681e      	ldreq	r6, [r3, #0]
 801e238:	58ce      	ldrne	r6, [r1, r3]
 801e23a:	4629      	mov	r1, r5
 801e23c:	9b05      	ldr	r3, [sp, #20]
 801e23e:	9301      	str	r3, [sp, #4]
 801e240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e242:	9300      	str	r3, [sp, #0]
 801e244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e246:	47b0      	blx	r6
 801e248:	b006      	add	sp, #24
 801e24a:	bd70      	pop	{r4, r5, r6, pc}
 801e24c:	2000016c 	.word	0x2000016c

0801e250 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e254:	b097      	sub	sp, #92	; 0x5c
 801e256:	9112      	str	r1, [sp, #72]	; 0x48
 801e258:	9313      	str	r3, [sp, #76]	; 0x4c
 801e25a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801e25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e25e:	8809      	ldrh	r1, [r1, #0]
 801e260:	889b      	ldrh	r3, [r3, #4]
 801e262:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801e264:	440b      	add	r3, r1
 801e266:	920f      	str	r2, [sp, #60]	; 0x3c
 801e268:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 801e26c:	b21b      	sxth	r3, r3
 801e26e:	900e      	str	r0, [sp, #56]	; 0x38
 801e270:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 801e274:	930d      	str	r3, [sp, #52]	; 0x34
 801e276:	683b      	ldr	r3, [r7, #0]
 801e278:	7a59      	ldrb	r1, [r3, #9]
 801e27a:	7a1b      	ldrb	r3, [r3, #8]
 801e27c:	9111      	str	r1, [sp, #68]	; 0x44
 801e27e:	9310      	str	r3, [sp, #64]	; 0x40
 801e280:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e282:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e286:	2a00      	cmp	r2, #0
 801e288:	d04b      	beq.n	801e322 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 801e28a:	7c3b      	ldrb	r3, [r7, #16]
 801e28c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e28e:	2b04      	cmp	r3, #4
 801e290:	bf0c      	ite	eq
 801e292:	2302      	moveq	r3, #2
 801e294:	2301      	movne	r3, #1
 801e296:	4413      	add	r3, r2
 801e298:	2500      	movs	r5, #0
 801e29a:	930c      	str	r3, [sp, #48]	; 0x30
 801e29c:	46a9      	mov	r9, r5
 801e29e:	462c      	mov	r4, r5
 801e2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2a2:	4599      	cmp	r9, r3
 801e2a4:	da6a      	bge.n	801e37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801e2a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e2a8:	4599      	cmp	r9, r3
 801e2aa:	db3c      	blt.n	801e326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801e2ac:	6838      	ldr	r0, [r7, #0]
 801e2ae:	6803      	ldr	r3, [r0, #0]
 801e2b0:	695b      	ldr	r3, [r3, #20]
 801e2b2:	4798      	blx	r3
 801e2b4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e2b8:	4680      	mov	r8, r0
 801e2ba:	4298      	cmp	r0, r3
 801e2bc:	d045      	beq.n	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e2be:	f242 030b 	movw	r3, #8203	; 0x200b
 801e2c2:	4298      	cmp	r0, r3
 801e2c4:	d041      	beq.n	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e2c6:	2800      	cmp	r0, #0
 801e2c8:	d057      	beq.n	801e37a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801e2ca:	280a      	cmp	r0, #10
 801e2cc:	d055      	beq.n	801e37a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801e2ce:	6838      	ldr	r0, [r7, #0]
 801e2d0:	aa15      	add	r2, sp, #84	; 0x54
 801e2d2:	4641      	mov	r1, r8
 801e2d4:	6803      	ldr	r3, [r0, #0]
 801e2d6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 801e2da:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 801e2de:	47d8      	blx	fp
 801e2e0:	4683      	mov	fp, r0
 801e2e2:	b328      	cbz	r0, 801e330 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 801e2e4:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801e2e8:	f1ba 0f00 	cmp.w	sl, #0
 801e2ec:	d031      	beq.n	801e352 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 801e2ee:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 801e2f2:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801e2f6:	2a00      	cmp	r2, #0
 801e2f8:	bfb4      	ite	lt
 801e2fa:	f44f 7580 	movlt.w	r5, #256	; 0x100
 801e2fe:	2500      	movge	r5, #0
 801e300:	f1ba 0f01 	cmp.w	sl, #1
 801e304:	ea45 0503 	orr.w	r5, r5, r3
 801e308:	d125      	bne.n	801e356 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 801e30a:	1b76      	subs	r6, r6, r5
 801e30c:	2c00      	cmp	r4, #0
 801e30e:	d147      	bne.n	801e3a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801e310:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e312:	19ab      	adds	r3, r5, r6
 801e314:	4413      	add	r3, r2
 801e316:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e318:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e31c:	4293      	cmp	r3, r2
 801e31e:	da4a      	bge.n	801e3b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801e320:	e02b      	b.n	801e37a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801e322:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e324:	e7b8      	b.n	801e298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801e326:	4651      	mov	r1, sl
 801e328:	9824      	ldr	r0, [sp, #144]	; 0x90
 801e32a:	f001 fdcd 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e32e:	e7c1      	b.n	801e2b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 801e330:	6838      	ldr	r0, [r7, #0]
 801e332:	6803      	ldr	r3, [r0, #0]
 801e334:	691b      	ldr	r3, [r3, #16]
 801e336:	4798      	blx	r3
 801e338:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e33c:	4298      	cmp	r0, r3
 801e33e:	d004      	beq.n	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e340:	f242 030b 	movw	r3, #8203	; 0x200b
 801e344:	4298      	cmp	r0, r3
 801e346:	bf18      	it	ne
 801e348:	2500      	movne	r5, #0
 801e34a:	f109 0901 	add.w	r9, r9, #1
 801e34e:	4644      	mov	r4, r8
 801e350:	e7a6      	b.n	801e2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801e352:	442e      	add	r6, r5
 801e354:	e7cb      	b.n	801e2ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 801e356:	2c00      	cmp	r4, #0
 801e358:	f000 80a6 	beq.w	801e4a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801e35c:	f1ba 0f00 	cmp.w	sl, #0
 801e360:	d11e      	bne.n	801e3a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801e362:	6838      	ldr	r0, [r7, #0]
 801e364:	465a      	mov	r2, fp
 801e366:	4621      	mov	r1, r4
 801e368:	6803      	ldr	r3, [r0, #0]
 801e36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e36c:	4798      	blx	r3
 801e36e:	4406      	add	r6, r0
 801e370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e374:	1af3      	subs	r3, r6, r3
 801e376:	4293      	cmp	r3, r2
 801e378:	dd1d      	ble.n	801e3b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801e37a:	4644      	mov	r4, r8
 801e37c:	2c00      	cmp	r4, #0
 801e37e:	f000 8091 	beq.w	801e4a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801e382:	2c0a      	cmp	r4, #10
 801e384:	f000 8087 	beq.w	801e496 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 801e388:	f109 0901 	add.w	r9, r9, #1
 801e38c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e38e:	4599      	cmp	r9, r3
 801e390:	f280 8082 	bge.w	801e498 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801e394:	4651      	mov	r1, sl
 801e396:	9824      	ldr	r0, [sp, #144]	; 0x90
 801e398:	f001 fd96 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e39c:	4604      	mov	r4, r0
 801e39e:	e7ed      	b.n	801e37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801e3a0:	6838      	ldr	r0, [r7, #0]
 801e3a2:	465a      	mov	r2, fp
 801e3a4:	4621      	mov	r1, r4
 801e3a6:	6803      	ldr	r3, [r0, #0]
 801e3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3aa:	4798      	blx	r3
 801e3ac:	f1ba 0f01 	cmp.w	sl, #1
 801e3b0:	eba6 0600 	sub.w	r6, r6, r0
 801e3b4:	d0ac      	beq.n	801e310 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 801e3b6:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801e3ba:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 801e3be:	f013 0f08 	tst.w	r3, #8
 801e3c2:	f89b 1006 	ldrb.w	r1, [fp, #6]
 801e3c6:	4432      	add	r2, r6
 801e3c8:	9821      	ldr	r0, [sp, #132]	; 0x84
 801e3ca:	bf14      	ite	ne
 801e3cc:	f44f 7380 	movne.w	r3, #256	; 0x100
 801e3d0:	2300      	moveq	r3, #0
 801e3d2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e3d6:	430b      	orrs	r3, r1
 801e3d8:	4413      	add	r3, r2
 801e3da:	42a3      	cmp	r3, r4
 801e3dc:	dbb5      	blt.n	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3e0:	429a      	cmp	r2, r3
 801e3e2:	dab2      	bge.n	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e3e4:	6838      	ldr	r0, [r7, #0]
 801e3e6:	42b4      	cmp	r4, r6
 801e3e8:	6803      	ldr	r3, [r0, #0]
 801e3ea:	bfcc      	ite	gt
 801e3ec:	1ba4      	subgt	r4, r4, r6
 801e3ee:	2400      	movle	r4, #0
 801e3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3f2:	bfc8      	it	gt
 801e3f4:	b2a4      	uxthgt	r4, r4
 801e3f6:	4798      	blx	r3
 801e3f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e3fa:	4a2e      	ldr	r2, [pc, #184]	; (801e4b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 801e3fc:	4418      	add	r0, r3
 801e3fe:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801e402:	f89b e008 	ldrb.w	lr, [fp, #8]
 801e406:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e40a:	bf14      	ite	ne
 801e40c:	4611      	movne	r1, r2
 801e40e:	2100      	moveq	r1, #0
 801e410:	f013 0f20 	tst.w	r3, #32
 801e414:	ea41 010e 	orr.w	r1, r1, lr
 801e418:	bf14      	ite	ne
 801e41a:	f44f 7280 	movne.w	r2, #256	; 0x100
 801e41e:	2200      	moveq	r2, #0
 801e420:	430a      	orrs	r2, r1
 801e422:	9921      	ldr	r1, [sp, #132]	; 0x84
 801e424:	1a80      	subs	r0, r0, r2
 801e426:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801e42a:	b280      	uxth	r0, r0
 801e42c:	b202      	sxth	r2, r0
 801e42e:	428a      	cmp	r2, r1
 801e430:	da2f      	bge.n	801e492 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 801e432:	f013 0f10 	tst.w	r3, #16
 801e436:	f89b e007 	ldrb.w	lr, [fp, #7]
 801e43a:	bf14      	ite	ne
 801e43c:	f44f 7380 	movne.w	r3, #256	; 0x100
 801e440:	2300      	moveq	r3, #0
 801e442:	ea43 030e 	orr.w	r3, r3, lr
 801e446:	441a      	add	r2, r3
 801e448:	4291      	cmp	r1, r2
 801e44a:	f73f af7e 	bgt.w	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e44e:	1a08      	subs	r0, r1, r0
 801e450:	460a      	mov	r2, r1
 801e452:	b280      	uxth	r0, r0
 801e454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e456:	6819      	ldr	r1, [r3, #0]
 801e458:	79bb      	ldrb	r3, [r7, #6]
 801e45a:	930a      	str	r3, [sp, #40]	; 0x28
 801e45c:	7bbb      	ldrb	r3, [r7, #14]
 801e45e:	9309      	str	r3, [sp, #36]	; 0x24
 801e460:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801e464:	9308      	str	r3, [sp, #32]
 801e466:	68bb      	ldr	r3, [r7, #8]
 801e468:	9402      	str	r4, [sp, #8]
 801e46a:	4434      	add	r4, r6
 801e46c:	9307      	str	r3, [sp, #28]
 801e46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e470:	b224      	sxth	r4, r4
 801e472:	9003      	str	r0, [sp, #12]
 801e474:	9306      	str	r3, [sp, #24]
 801e476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e478:	f8cd b014 	str.w	fp, [sp, #20]
 801e47c:	9304      	str	r3, [sp, #16]
 801e47e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e480:	9201      	str	r2, [sp, #4]
 801e482:	9400      	str	r4, [sp, #0]
 801e484:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e486:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e488:	681a      	ldr	r2, [r3, #0]
 801e48a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e48c:	685b      	ldr	r3, [r3, #4]
 801e48e:	47a0      	blx	r4
 801e490:	e75b      	b.n	801e34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e492:	2000      	movs	r0, #0
 801e494:	e7de      	b.n	801e454 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 801e496:	240a      	movs	r4, #10
 801e498:	fab4 f084 	clz	r0, r4
 801e49c:	0940      	lsrs	r0, r0, #5
 801e49e:	b017      	add	sp, #92	; 0x5c
 801e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4a4:	2400      	movs	r4, #0
 801e4a6:	e7f7      	b.n	801e498 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801e4a8:	f1ba 0f00 	cmp.w	sl, #0
 801e4ac:	f43f af60 	beq.w	801e370 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 801e4b0:	e781      	b.n	801e3b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801e4b2:	bf00      	nop
 801e4b4:	fffffe00 	.word	0xfffffe00

0801e4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801e4b8:	b530      	push	{r4, r5, lr}
 801e4ba:	8ac4      	ldrh	r4, [r0, #22]
 801e4bc:	8b45      	ldrh	r5, [r0, #26]
 801e4be:	8343      	strh	r3, [r0, #26]
 801e4c0:	442c      	add	r4, r5
 801e4c2:	1ae4      	subs	r4, r4, r3
 801e4c4:	8b83      	ldrh	r3, [r0, #28]
 801e4c6:	82c4      	strh	r4, [r0, #22]
 801e4c8:	8b04      	ldrh	r4, [r0, #24]
 801e4ca:	4422      	add	r2, r4
 801e4cc:	440c      	add	r4, r1
 801e4ce:	1a59      	subs	r1, r3, r1
 801e4d0:	83c2      	strh	r2, [r0, #30]
 801e4d2:	8304      	strh	r4, [r0, #24]
 801e4d4:	8381      	strh	r1, [r0, #28]
 801e4d6:	bd30      	pop	{r4, r5, pc}

0801e4d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4dc:	f890 b009 	ldrb.w	fp, [r0, #9]
 801e4e0:	b085      	sub	sp, #20
 801e4e2:	4604      	mov	r4, r0
 801e4e4:	460f      	mov	r7, r1
 801e4e6:	f1ab 0303 	sub.w	r3, fp, #3
 801e4ea:	b331      	cbz	r1, 801e53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 801e4ec:	2b01      	cmp	r3, #1
 801e4ee:	d922      	bls.n	801e536 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801e4f0:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e4f4:	f1d2 0a00 	rsbs	sl, r2, #0
 801e4f8:	eb4a 0a02 	adc.w	sl, sl, r2
 801e4fc:	f1ab 0302 	sub.w	r3, fp, #2
 801e500:	2500      	movs	r5, #0
 801e502:	f1d3 0b00 	rsbs	fp, r3, #0
 801e506:	9501      	str	r5, [sp, #4]
 801e508:	eb4b 0b03 	adc.w	fp, fp, r3
 801e50c:	2600      	movs	r6, #0
 801e50e:	82e6      	strh	r6, [r4, #22]
 801e510:	8326      	strh	r6, [r4, #24]
 801e512:	7a21      	ldrb	r1, [r4, #8]
 801e514:	6860      	ldr	r0, [r4, #4]
 801e516:	f8b4 9000 	ldrh.w	r9, [r4]
 801e51a:	f001 fcd5 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e51e:	4601      	mov	r1, r0
 801e520:	8020      	strh	r0, [r4, #0]
 801e522:	b9c8      	cbnz	r0, 801e558 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 801e524:	8ba2      	ldrh	r2, [r4, #28]
 801e526:	2300      	movs	r3, #0
 801e528:	4611      	mov	r1, r2
 801e52a:	4620      	mov	r0, r4
 801e52c:	b005      	add	sp, #20
 801e52e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e532:	f7ff bfc1 	b.w	801e4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e536:	468a      	mov	sl, r1
 801e538:	e7e0      	b.n	801e4fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801e53a:	2b01      	cmp	r3, #1
 801e53c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e540:	468a      	mov	sl, r1
 801e542:	bf8c      	ite	hi
 801e544:	2300      	movhi	r3, #0
 801e546:	2301      	movls	r3, #1
 801e548:	f1bb 0f01 	cmp.w	fp, #1
 801e54c:	468b      	mov	fp, r1
 801e54e:	9301      	str	r3, [sp, #4]
 801e550:	bf8c      	ite	hi
 801e552:	2500      	movhi	r5, #0
 801e554:	2501      	movls	r5, #1
 801e556:	e7d9      	b.n	801e50c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 801e558:	8b63      	ldrh	r3, [r4, #26]
 801e55a:	280a      	cmp	r0, #10
 801e55c:	f103 0301 	add.w	r3, r3, #1
 801e560:	8363      	strh	r3, [r4, #26]
 801e562:	d0df      	beq.n	801e524 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801e564:	6920      	ldr	r0, [r4, #16]
 801e566:	6803      	ldr	r3, [r0, #0]
 801e568:	68db      	ldr	r3, [r3, #12]
 801e56a:	4798      	blx	r3
 801e56c:	4602      	mov	r2, r0
 801e56e:	2800      	cmp	r0, #0
 801e570:	d0cf      	beq.n	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e572:	8883      	ldrh	r3, [r0, #4]
 801e574:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801e578:	2b20      	cmp	r3, #32
 801e57a:	8023      	strh	r3, [r4, #0]
 801e57c:	d103      	bne.n	801e586 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801e57e:	f1b9 0f20 	cmp.w	r9, #32
 801e582:	bf18      	it	ne
 801e584:	4646      	movne	r6, r8
 801e586:	7a93      	ldrb	r3, [r2, #10]
 801e588:	4649      	mov	r1, r9
 801e58a:	6920      	ldr	r0, [r4, #16]
 801e58c:	9302      	str	r3, [sp, #8]
 801e58e:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801e592:	2b00      	cmp	r3, #0
 801e594:	bfb4      	ite	lt
 801e596:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801e59a:	2300      	movge	r3, #0
 801e59c:	9303      	str	r3, [sp, #12]
 801e59e:	6803      	ldr	r3, [r0, #0]
 801e5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5a2:	4798      	blx	r3
 801e5a4:	9b03      	ldr	r3, [sp, #12]
 801e5a6:	9a02      	ldr	r2, [sp, #8]
 801e5a8:	8aa1      	ldrh	r1, [r4, #20]
 801e5aa:	431a      	orrs	r2, r3
 801e5ac:	8b23      	ldrh	r3, [r4, #24]
 801e5ae:	4402      	add	r2, r0
 801e5b0:	8ba0      	ldrh	r0, [r4, #28]
 801e5b2:	4402      	add	r2, r0
 801e5b4:	b292      	uxth	r2, r2
 801e5b6:	83a2      	strh	r2, [r4, #28]
 801e5b8:	4413      	add	r3, r2
 801e5ba:	b327      	cbz	r7, 801e606 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801e5bc:	f1ba 0f00 	cmp.w	sl, #0
 801e5c0:	d105      	bne.n	801e5ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 801e5c2:	f1bb 0f00 	cmp.w	fp, #0
 801e5c6:	d00f      	beq.n	801e5e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801e5c8:	8820      	ldrh	r0, [r4, #0]
 801e5ca:	2820      	cmp	r0, #32
 801e5cc:	d10c      	bne.n	801e5e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801e5ce:	8c20      	ldrh	r0, [r4, #32]
 801e5d0:	4418      	add	r0, r3
 801e5d2:	4281      	cmp	r1, r0
 801e5d4:	da02      	bge.n	801e5dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 801e5d6:	8ae0      	ldrh	r0, [r4, #22]
 801e5d8:	2800      	cmp	r0, #0
 801e5da:	d13a      	bne.n	801e652 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801e5dc:	2300      	movs	r3, #0
 801e5de:	4611      	mov	r1, r2
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f7ff ff69 	bl	801e4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e5e6:	e794      	b.n	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e5e8:	428b      	cmp	r3, r1
 801e5ea:	dd92      	ble.n	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e5ec:	8ae3      	ldrh	r3, [r4, #22]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d08f      	beq.n	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e5f2:	2301      	movs	r3, #1
 801e5f4:	8c22      	ldrh	r2, [r4, #32]
 801e5f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801e5fa:	8be3      	ldrh	r3, [r4, #30]
 801e5fc:	4413      	add	r3, r2
 801e5fe:	83e3      	strh	r3, [r4, #30]
 801e600:	b005      	add	sp, #20
 801e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e606:	428b      	cmp	r3, r1
 801e608:	dd17      	ble.n	801e63a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801e60a:	9b01      	ldr	r3, [sp, #4]
 801e60c:	b113      	cbz	r3, 801e614 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 801e60e:	2301      	movs	r3, #1
 801e610:	4642      	mov	r2, r8
 801e612:	e789      	b.n	801e528 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801e614:	2d00      	cmp	r5, #0
 801e616:	f43f af7c 	beq.w	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e61a:	8823      	ldrh	r3, [r4, #0]
 801e61c:	2b20      	cmp	r3, #32
 801e61e:	f43f af78 	beq.w	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e622:	f1b9 0f20 	cmp.w	r9, #32
 801e626:	d103      	bne.n	801e630 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 801e628:	2301      	movs	r3, #1
 801e62a:	4632      	mov	r2, r6
 801e62c:	4641      	mov	r1, r8
 801e62e:	e77c      	b.n	801e52a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801e630:	8ae3      	ldrh	r3, [r4, #22]
 801e632:	2b00      	cmp	r3, #0
 801e634:	f43f af6d 	beq.w	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e638:	e7e2      	b.n	801e600 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 801e63a:	8823      	ldrh	r3, [r4, #0]
 801e63c:	2b20      	cmp	r3, #32
 801e63e:	f43f af68 	beq.w	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e642:	f1b9 0f20 	cmp.w	r9, #32
 801e646:	f47f af64 	bne.w	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e64a:	2301      	movs	r3, #1
 801e64c:	4632      	mov	r2, r6
 801e64e:	4641      	mov	r1, r8
 801e650:	e7c6      	b.n	801e5e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 801e652:	428b      	cmp	r3, r1
 801e654:	f77f af5d 	ble.w	801e512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e658:	e7cb      	b.n	801e5f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0801e65a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e65a:	b570      	push	{r4, r5, r6, lr}
 801e65c:	4606      	mov	r6, r0
 801e65e:	b08c      	sub	sp, #48	; 0x30
 801e660:	4615      	mov	r5, r2
 801e662:	b191      	cbz	r1, 801e68a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801e664:	2401      	movs	r4, #1
 801e666:	9101      	str	r1, [sp, #4]
 801e668:	9300      	str	r3, [sp, #0]
 801e66a:	4601      	mov	r1, r0
 801e66c:	4613      	mov	r3, r2
 801e66e:	a803      	add	r0, sp, #12
 801e670:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e674:	f7ff fd22 	bl	801e0bc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e678:	2100      	movs	r1, #0
 801e67a:	a803      	add	r0, sp, #12
 801e67c:	f7ff ff2c 	bl	801e4d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e680:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e684:	b173      	cbz	r3, 801e6a4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801e686:	3401      	adds	r4, #1
 801e688:	e7f6      	b.n	801e678 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801e68a:	2401      	movs	r4, #1
 801e68c:	4611      	mov	r1, r2
 801e68e:	f001 fc1b 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e692:	280a      	cmp	r0, #10
 801e694:	4629      	mov	r1, r5
 801e696:	4630      	mov	r0, r6
 801e698:	bf08      	it	eq
 801e69a:	3401      	addeq	r4, #1
 801e69c:	f001 fc14 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e6a0:	2800      	cmp	r0, #0
 801e6a2:	d1f6      	bne.n	801e692 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801e6a4:	b2a0      	uxth	r0, r4
 801e6a6:	b00c      	add	sp, #48	; 0x30
 801e6a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e6ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6b0:	b0ab      	sub	sp, #172	; 0xac
 801e6b2:	4689      	mov	r9, r1
 801e6b4:	461c      	mov	r4, r3
 801e6b6:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 801e6ba:	9009      	str	r0, [sp, #36]	; 0x24
 801e6bc:	f1ba 0f00 	cmp.w	sl, #0
 801e6c0:	f000 80ac 	beq.w	801e81c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	f000 80a8 	beq.w	801e81c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e6cc:	7ba3      	ldrb	r3, [r4, #14]
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	f000 80a4 	beq.w	801e81c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e6d4:	6810      	ldr	r0, [r2, #0]
 801e6d6:	ab0b      	add	r3, sp, #44	; 0x2c
 801e6d8:	6851      	ldr	r1, [r2, #4]
 801e6da:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 801e6de:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801e6e2:	c303      	stmia	r3!, {r0, r1}
 801e6e4:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e6ee:	a80b      	add	r0, sp, #44	; 0x2c
 801e6f0:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 801e6f4:	a90d      	add	r1, sp, #52	; 0x34
 801e6f6:	79a2      	ldrb	r2, [r4, #6]
 801e6f8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801e6fc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e700:	f7ff fd55 	bl	801e1ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e704:	a90d      	add	r1, sp, #52	; 0x34
 801e706:	79a2      	ldrb	r2, [r4, #6]
 801e708:	4608      	mov	r0, r1
 801e70a:	f7ff fd50 	bl	801e1ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e70e:	4640      	mov	r0, r8
 801e710:	f001 fc20 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801e714:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e716:	4651      	mov	r1, sl
 801e718:	4640      	mov	r0, r8
 801e71a:	f001 fc24 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e71e:	a815      	add	r0, sp, #84	; 0x54
 801e720:	f001 fc18 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801e724:	7927      	ldrb	r7, [r4, #4]
 801e726:	b127      	cbz	r7, 801e732 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 801e728:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e72a:	4651      	mov	r1, sl
 801e72c:	a815      	add	r0, sp, #84	; 0x54
 801e72e:	f001 fc1a 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e732:	6820      	ldr	r0, [r4, #0]
 801e734:	89a5      	ldrh	r5, [r4, #12]
 801e736:	6803      	ldr	r3, [r0, #0]
 801e738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e73a:	4798      	blx	r3
 801e73c:	4405      	add	r5, r0
 801e73e:	a81b      	add	r0, sp, #108	; 0x6c
 801e740:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e744:	f001 fc06 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801e748:	7c23      	ldrb	r3, [r4, #16]
 801e74a:	fb96 f6f5 	sdiv	r6, r6, r5
 801e74e:	b123      	cbz	r3, 801e75a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 801e750:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e752:	4651      	mov	r1, sl
 801e754:	a81b      	add	r0, sp, #108	; 0x6c
 801e756:	f001 fc06 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e75a:	7c21      	ldrb	r1, [r4, #16]
 801e75c:	a821      	add	r0, sp, #132	; 0x84
 801e75e:	7963      	ldrb	r3, [r4, #5]
 801e760:	9101      	str	r1, [sp, #4]
 801e762:	6821      	ldr	r1, [r4, #0]
 801e764:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e768:	9100      	str	r1, [sp, #0]
 801e76a:	a91b      	add	r1, sp, #108	; 0x6c
 801e76c:	f7ff fca6 	bl	801e0bc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e770:	7c23      	ldrb	r3, [r4, #16]
 801e772:	bb03      	cbnz	r3, 801e7b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 801e774:	fa1f fa85 	uxth.w	sl, r5
 801e778:	2e00      	cmp	r6, #0
 801e77a:	dd52      	ble.n	801e822 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801e77c:	7961      	ldrb	r1, [r4, #5]
 801e77e:	4640      	mov	r0, r8
 801e780:	f001 fba2 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e784:	4683      	mov	fp, r0
 801e786:	b11f      	cbz	r7, 801e790 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 801e788:	7961      	ldrb	r1, [r4, #5]
 801e78a:	a815      	add	r0, sp, #84	; 0x54
 801e78c:	f001 fb9c 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e790:	f1bb 0f00 	cmp.w	fp, #0
 801e794:	d042      	beq.n	801e81c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e796:	f1bb 0f0a 	cmp.w	fp, #10
 801e79a:	d1ed      	bne.n	801e778 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801e79c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e7a0:	3e01      	subs	r6, #1
 801e7a2:	4453      	add	r3, sl
 801e7a4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e7a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e7ac:	eba3 030a 	sub.w	r3, r3, sl
 801e7b0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e7b4:	e7e0      	b.n	801e778 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801e7b6:	006b      	lsls	r3, r5, #1
 801e7b8:	fa1f fa85 	uxth.w	sl, r5
 801e7bc:	9308      	str	r3, [sp, #32]
 801e7be:	2e00      	cmp	r6, #0
 801e7c0:	dd2f      	ble.n	801e822 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801e7c2:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e7c6:	a821      	add	r0, sp, #132	; 0x84
 801e7c8:	9b08      	ldr	r3, [sp, #32]
 801e7ca:	428b      	cmp	r3, r1
 801e7cc:	bfd4      	ite	le
 801e7ce:	2100      	movle	r1, #0
 801e7d0:	2101      	movgt	r1, #1
 801e7d2:	f7ff fe81 	bl	801e4d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e7d6:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 801e7da:	f1bb 0f00 	cmp.w	fp, #0
 801e7de:	d00d      	beq.n	801e7fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 801e7e0:	7961      	ldrb	r1, [r4, #5]
 801e7e2:	4640      	mov	r0, r8
 801e7e4:	f001 fb70 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e7e8:	b11f      	cbz	r7, 801e7f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 801e7ea:	7961      	ldrb	r1, [r4, #5]
 801e7ec:	a815      	add	r0, sp, #84	; 0x54
 801e7ee:	f001 fb6b 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e7f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e7f6:	fa1f fb83 	uxth.w	fp, r3
 801e7fa:	e7ee      	b.n	801e7da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801e7fc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e800:	3e01      	subs	r6, #1
 801e802:	4453      	add	r3, sl
 801e804:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e808:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e80c:	eba3 030a 	sub.w	r3, r3, sl
 801e810:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e814:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d1d0      	bne.n	801e7be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 801e81c:	b02b      	add	sp, #172	; 0xac
 801e81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e822:	4b40      	ldr	r3, [pc, #256]	; (801e924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e824:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801e828:	f04f 0a02 	mov.w	sl, #2
 801e82c:	6818      	ldr	r0, [r3, #0]
 801e82e:	6803      	ldr	r3, [r0, #0]
 801e830:	6a1b      	ldr	r3, [r3, #32]
 801e832:	4798      	blx	r3
 801e834:	4606      	mov	r6, r0
 801e836:	7c23      	ldrb	r3, [r4, #16]
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d067      	beq.n	801e90c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801e83c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e840:	a821      	add	r0, sp, #132	; 0x84
 801e842:	458b      	cmp	fp, r1
 801e844:	bfd4      	ite	le
 801e846:	2100      	movle	r1, #0
 801e848:	2101      	movgt	r1, #1
 801e84a:	f7ff fe45 	bl	801e4d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e84e:	2f00      	cmp	r7, #0
 801e850:	d055      	beq.n	801e8fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e852:	7c23      	ldrb	r3, [r4, #16]
 801e854:	2b00      	cmp	r3, #0
 801e856:	d05b      	beq.n	801e910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801e858:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801e85c:	7922      	ldrb	r2, [r4, #4]
 801e85e:	2a01      	cmp	r2, #1
 801e860:	d145      	bne.n	801e8ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801e862:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801e866:	1ac0      	subs	r0, r0, r3
 801e868:	fb90 f0fa 	sdiv	r0, r0, sl
 801e86c:	b200      	sxth	r0, r0
 801e86e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e872:	4418      	add	r0, r3
 801e874:	7c23      	ldrb	r3, [r4, #16]
 801e876:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	d043      	beq.n	801e906 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801e87e:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801e882:	9205      	str	r2, [sp, #20]
 801e884:	2200      	movs	r2, #0
 801e886:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 801e88a:	9203      	str	r2, [sp, #12]
 801e88c:	aa0b      	add	r2, sp, #44	; 0x2c
 801e88e:	9106      	str	r1, [sp, #24]
 801e890:	4631      	mov	r1, r6
 801e892:	9201      	str	r2, [sp, #4]
 801e894:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801e898:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e89c:	9200      	str	r2, [sp, #0]
 801e89e:	464a      	mov	r2, r9
 801e8a0:	f8cd 8010 	str.w	r8, [sp, #16]
 801e8a4:	9402      	str	r4, [sp, #8]
 801e8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8a8:	f7ff fcd2 	bl	801e250 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e8ac:	b9c8      	cbnz	r0, 801e8e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e8ae:	b2aa      	uxth	r2, r5
 801e8b0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e8b4:	4611      	mov	r1, r2
 801e8b6:	4413      	add	r3, r2
 801e8b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e8bc:	b21b      	sxth	r3, r3
 801e8be:	1a52      	subs	r2, r2, r1
 801e8c0:	7c21      	ldrb	r1, [r4, #16]
 801e8c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e8c6:	b212      	sxth	r2, r2
 801e8c8:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e8cc:	b109      	cbz	r1, 801e8d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801e8ce:	4295      	cmp	r5, r2
 801e8d0:	dc07      	bgt.n	801e8e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e8d2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e8d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e8da:	440a      	add	r2, r1
 801e8dc:	b212      	sxth	r2, r2
 801e8de:	4293      	cmp	r3, r2
 801e8e0:	dda9      	ble.n	801e836 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801e8e2:	4b10      	ldr	r3, [pc, #64]	; (801e924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e8e4:	6818      	ldr	r0, [r3, #0]
 801e8e6:	6803      	ldr	r3, [r0, #0]
 801e8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8ea:	4798      	blx	r3
 801e8ec:	e796      	b.n	801e81c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e8ee:	2a02      	cmp	r2, #2
 801e8f0:	d107      	bne.n	801e902 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801e8f2:	7be2      	ldrb	r2, [r4, #15]
 801e8f4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801e8f8:	1a80      	subs	r0, r0, r2
 801e8fa:	1ac0      	subs	r0, r0, r3
 801e8fc:	e7b6      	b.n	801e86c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 801e8fe:	7be0      	ldrb	r0, [r4, #15]
 801e900:	e7b5      	b.n	801e86e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e902:	2000      	movs	r0, #0
 801e904:	e7b3      	b.n	801e86e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e906:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e90a:	e7ba      	b.n	801e882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801e90c:	2f00      	cmp	r7, #0
 801e90e:	d0f6      	beq.n	801e8fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e910:	2300      	movs	r3, #0
 801e912:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e916:	6821      	ldr	r1, [r4, #0]
 801e918:	a815      	add	r0, sp, #84	; 0x54
 801e91a:	f7ff fc12 	bl	801e142 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e91e:	b203      	sxth	r3, r0
 801e920:	e79c      	b.n	801e85c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 801e922:	bf00      	nop
 801e924:	2000a290 	.word	0x2000a290

0801e928 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e928:	2b02      	cmp	r3, #2
 801e92a:	d00e      	beq.n	801e94a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e92c:	2b03      	cmp	r3, #3
 801e92e:	d012      	beq.n	801e956 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801e930:	2b01      	cmp	r3, #1
 801e932:	d003      	beq.n	801e93c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e934:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e938:	1850      	adds	r0, r2, r1
 801e93a:	4770      	bx	lr
 801e93c:	8803      	ldrh	r3, [r0, #0]
 801e93e:	8880      	ldrh	r0, [r0, #4]
 801e940:	4418      	add	r0, r3
 801e942:	b200      	sxth	r0, r0
 801e944:	1a80      	subs	r0, r0, r2
 801e946:	3801      	subs	r0, #1
 801e948:	4770      	bx	lr
 801e94a:	8803      	ldrh	r3, [r0, #0]
 801e94c:	8880      	ldrh	r0, [r0, #4]
 801e94e:	4418      	add	r0, r3
 801e950:	b200      	sxth	r0, r0
 801e952:	1a40      	subs	r0, r0, r1
 801e954:	e7f7      	b.n	801e946 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e956:	f9b0 0000 	ldrsh.w	r0, [r0]
 801e95a:	4410      	add	r0, r2
 801e95c:	4770      	bx	lr

0801e95e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e95e:	2b02      	cmp	r3, #2
 801e960:	d008      	beq.n	801e974 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e962:	2b03      	cmp	r3, #3
 801e964:	d00d      	beq.n	801e982 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e966:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801e96a:	2b01      	cmp	r3, #1
 801e96c:	bf14      	ite	ne
 801e96e:	1880      	addne	r0, r0, r2
 801e970:	1840      	addeq	r0, r0, r1
 801e972:	4770      	bx	lr
 801e974:	8843      	ldrh	r3, [r0, #2]
 801e976:	88c0      	ldrh	r0, [r0, #6]
 801e978:	4418      	add	r0, r3
 801e97a:	b200      	sxth	r0, r0
 801e97c:	1a80      	subs	r0, r0, r2
 801e97e:	3801      	subs	r0, #1
 801e980:	4770      	bx	lr
 801e982:	8843      	ldrh	r3, [r0, #2]
 801e984:	88c0      	ldrh	r0, [r0, #6]
 801e986:	4418      	add	r0, r3
 801e988:	b200      	sxth	r0, r0
 801e98a:	1a40      	subs	r0, r0, r1
 801e98c:	e7f7      	b.n	801e97e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801e98e <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801e98e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e990:	f8dd c014 	ldr.w	ip, [sp, #20]
 801e994:	1e05      	subs	r5, r0, #0
 801e996:	f04f 0601 	mov.w	r6, #1
 801e99a:	9c06      	ldr	r4, [sp, #24]
 801e99c:	bfba      	itte	lt
 801e99e:	f04f 37ff 	movlt.w	r7, #4294967295
 801e9a2:	426d      	neglt	r5, r5
 801e9a4:	2701      	movge	r7, #1
 801e9a6:	f1bc 0f00 	cmp.w	ip, #0
 801e9aa:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801e9ae:	bfbc      	itt	lt
 801e9b0:	f1cc 0c00 	rsblt	ip, ip, #0
 801e9b4:	427f      	neglt	r7, r7
 801e9b6:	2c00      	cmp	r4, #0
 801e9b8:	fa4c f001 	asr.w	r0, ip, r1
 801e9bc:	fa06 f101 	lsl.w	r1, r6, r1
 801e9c0:	bfbc      	itt	lt
 801e9c2:	4264      	neglt	r4, r4
 801e9c4:	427f      	neglt	r7, r7
 801e9c6:	3901      	subs	r1, #1
 801e9c8:	ea01 010c 	and.w	r1, r1, ip
 801e9cc:	434d      	muls	r5, r1
 801e9ce:	f8de 1000 	ldr.w	r1, [lr]
 801e9d2:	fb03 1300 	mla	r3, r3, r0, r1
 801e9d6:	fb95 f1f4 	sdiv	r1, r5, r4
 801e9da:	fb04 5511 	mls	r5, r4, r1, r5
 801e9de:	441d      	add	r5, r3
 801e9e0:	fb95 f3f4 	sdiv	r3, r5, r4
 801e9e4:	4419      	add	r1, r3
 801e9e6:	fb04 5413 	mls	r4, r4, r3, r5
 801e9ea:	fb02 1000 	mla	r0, r2, r0, r1
 801e9ee:	f8ce 4000 	str.w	r4, [lr]
 801e9f2:	4378      	muls	r0, r7
 801e9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e9f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9fc:	4c24      	ldr	r4, [pc, #144]	; (801ea90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801e9fe:	b086      	sub	sp, #24
 801ea00:	4605      	mov	r5, r0
 801ea02:	6807      	ldr	r7, [r0, #0]
 801ea04:	69a3      	ldr	r3, [r4, #24]
 801ea06:	b92b      	cbnz	r3, 801ea14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801ea08:	6840      	ldr	r0, [r0, #4]
 801ea0a:	602f      	str	r7, [r5, #0]
 801ea0c:	6068      	str	r0, [r5, #4]
 801ea0e:	b006      	add	sp, #24
 801ea10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea14:	f04f 0802 	mov.w	r8, #2
 801ea18:	68a2      	ldr	r2, [r4, #8]
 801ea1a:	ae06      	add	r6, sp, #24
 801ea1c:	6820      	ldr	r0, [r4, #0]
 801ea1e:	fb93 f1f8 	sdiv	r1, r3, r8
 801ea22:	440a      	add	r2, r1
 801ea24:	69e1      	ldr	r1, [r4, #28]
 801ea26:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ea2a:	9301      	str	r3, [sp, #4]
 801ea2c:	9700      	str	r7, [sp, #0]
 801ea2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ea30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ea32:	9602      	str	r6, [sp, #8]
 801ea34:	f7ff ffab 	bl	801e98e <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ea38:	69a3      	ldr	r3, [r4, #24]
 801ea3a:	4607      	mov	r7, r0
 801ea3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ea3e:	9301      	str	r3, [sp, #4]
 801ea40:	686b      	ldr	r3, [r5, #4]
 801ea42:	6a21      	ldr	r1, [r4, #32]
 801ea44:	9300      	str	r3, [sp, #0]
 801ea46:	9602      	str	r6, [sp, #8]
 801ea48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea4a:	6860      	ldr	r0, [r4, #4]
 801ea4c:	f7ff ff9f 	bl	801e98e <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ea50:	69a2      	ldr	r2, [r4, #24]
 801ea52:	6963      	ldr	r3, [r4, #20]
 801ea54:	4407      	add	r7, r0
 801ea56:	9201      	str	r2, [sp, #4]
 801ea58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ea5a:	9602      	str	r6, [sp, #8]
 801ea5c:	68e0      	ldr	r0, [r4, #12]
 801ea5e:	fb92 f8f8 	sdiv	r8, r2, r8
 801ea62:	4443      	add	r3, r8
 801ea64:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ea66:	9305      	str	r3, [sp, #20]
 801ea68:	682b      	ldr	r3, [r5, #0]
 801ea6a:	9300      	str	r3, [sp, #0]
 801ea6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801ea6e:	f7ff ff8e 	bl	801e98e <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ea72:	69a3      	ldr	r3, [r4, #24]
 801ea74:	4680      	mov	r8, r0
 801ea76:	9602      	str	r6, [sp, #8]
 801ea78:	9301      	str	r3, [sp, #4]
 801ea7a:	686b      	ldr	r3, [r5, #4]
 801ea7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801ea7e:	9300      	str	r3, [sp, #0]
 801ea80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ea82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801ea84:	6920      	ldr	r0, [r4, #16]
 801ea86:	f7ff ff82 	bl	801e98e <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801ea8a:	4440      	add	r0, r8
 801ea8c:	e7bd      	b.n	801ea0a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801ea8e:	bf00      	nop
 801ea90:	2000a298 	.word	0x2000a298

0801ea94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ea94:	4b07      	ldr	r3, [pc, #28]	; (801eab4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ea96:	b510      	push	{r4, lr}
 801ea98:	781b      	ldrb	r3, [r3, #0]
 801ea9a:	2b01      	cmp	r3, #1
 801ea9c:	d108      	bne.n	801eab0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ea9e:	4b06      	ldr	r3, [pc, #24]	; (801eab8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801eaa0:	880c      	ldrh	r4, [r1, #0]
 801eaa2:	881b      	ldrh	r3, [r3, #0]
 801eaa4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801eaa8:	3b01      	subs	r3, #1
 801eaaa:	1b1b      	subs	r3, r3, r4
 801eaac:	8003      	strh	r3, [r0, #0]
 801eaae:	800a      	strh	r2, [r1, #0]
 801eab0:	bd10      	pop	{r4, pc}
 801eab2:	bf00      	nop
 801eab4:	2000a286 	.word	0x2000a286
 801eab8:	2000a28a 	.word	0x2000a28a

0801eabc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801eabc:	4b07      	ldr	r3, [pc, #28]	; (801eadc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801eabe:	b510      	push	{r4, lr}
 801eac0:	781b      	ldrb	r3, [r3, #0]
 801eac2:	2b01      	cmp	r3, #1
 801eac4:	d108      	bne.n	801ead8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801eac6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801eaca:	f9b0 4000 	ldrsh.w	r4, [r0]
 801eace:	8003      	strh	r3, [r0, #0]
 801ead0:	8893      	ldrh	r3, [r2, #4]
 801ead2:	3b01      	subs	r3, #1
 801ead4:	1b1b      	subs	r3, r3, r4
 801ead6:	800b      	strh	r3, [r1, #0]
 801ead8:	bd10      	pop	{r4, pc}
 801eada:	bf00      	nop
 801eadc:	2000a286 	.word	0x2000a286

0801eae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801eae0:	4b0a      	ldr	r3, [pc, #40]	; (801eb0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801eae2:	b513      	push	{r0, r1, r4, lr}
 801eae4:	f9b3 4000 	ldrsh.w	r4, [r3]
 801eae8:	4b09      	ldr	r3, [pc, #36]	; (801eb10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801eaea:	f8ad 4004 	strh.w	r4, [sp, #4]
 801eaee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eaf2:	2300      	movs	r3, #0
 801eaf4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801eaf8:	466a      	mov	r2, sp
 801eafa:	f8ad 3000 	strh.w	r3, [sp]
 801eafe:	f8ad 3002 	strh.w	r3, [sp, #2]
 801eb02:	f7ff ffdb 	bl	801eabc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801eb06:	b002      	add	sp, #8
 801eb08:	bd10      	pop	{r4, pc}
 801eb0a:	bf00      	nop
 801eb0c:	2000a282 	.word	0x2000a282
 801eb10:	2000a284 	.word	0x2000a284

0801eb14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801eb14:	4b0a      	ldr	r3, [pc, #40]	; (801eb40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801eb16:	460a      	mov	r2, r1
 801eb18:	b510      	push	{r4, lr}
 801eb1a:	781b      	ldrb	r3, [r3, #0]
 801eb1c:	2b01      	cmp	r3, #1
 801eb1e:	d10d      	bne.n	801eb3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801eb20:	8881      	ldrh	r1, [r0, #4]
 801eb22:	8803      	ldrh	r3, [r0, #0]
 801eb24:	440b      	add	r3, r1
 801eb26:	4601      	mov	r1, r0
 801eb28:	3b01      	subs	r3, #1
 801eb2a:	f821 3b02 	strh.w	r3, [r1], #2
 801eb2e:	f7ff ffc5 	bl	801eabc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801eb32:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801eb36:	88c2      	ldrh	r2, [r0, #6]
 801eb38:	80c3      	strh	r3, [r0, #6]
 801eb3a:	8082      	strh	r2, [r0, #4]
 801eb3c:	bd10      	pop	{r4, pc}
 801eb3e:	bf00      	nop
 801eb40:	2000a286 	.word	0x2000a286

0801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801eb44:	4b0a      	ldr	r3, [pc, #40]	; (801eb70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801eb46:	b507      	push	{r0, r1, r2, lr}
 801eb48:	f9b3 1000 	ldrsh.w	r1, [r3]
 801eb4c:	4b09      	ldr	r3, [pc, #36]	; (801eb74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801eb4e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801eb52:	4669      	mov	r1, sp
 801eb54:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eb58:	2300      	movs	r3, #0
 801eb5a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801eb5e:	f8ad 3000 	strh.w	r3, [sp]
 801eb62:	f8ad 3002 	strh.w	r3, [sp, #2]
 801eb66:	f7ff ffd5 	bl	801eb14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eb6a:	b003      	add	sp, #12
 801eb6c:	f85d fb04 	ldr.w	pc, [sp], #4
 801eb70:	2000a282 	.word	0x2000a282
 801eb74:	2000a284 	.word	0x2000a284

0801eb78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801eb78:	4b03      	ldr	r3, [pc, #12]	; (801eb88 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801eb7a:	6818      	ldr	r0, [r3, #0]
 801eb7c:	b110      	cbz	r0, 801eb84 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801eb7e:	6803      	ldr	r3, [r0, #0]
 801eb80:	699b      	ldr	r3, [r3, #24]
 801eb82:	4718      	bx	r3
 801eb84:	4770      	bx	lr
 801eb86:	bf00      	nop
 801eb88:	2000a2e4 	.word	0x2000a2e4

0801eb8c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801eb8c:	4770      	bx	lr
	...

0801eb90 <_ZN8touchgfx11Application4drawEv>:
 801eb90:	4b0b      	ldr	r3, [pc, #44]	; (801ebc0 <_ZN8touchgfx11Application4drawEv+0x30>)
 801eb92:	b507      	push	{r0, r1, r2, lr}
 801eb94:	f9b3 1000 	ldrsh.w	r1, [r3]
 801eb98:	4b0a      	ldr	r3, [pc, #40]	; (801ebc4 <_ZN8touchgfx11Application4drawEv+0x34>)
 801eb9a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801eb9e:	4669      	mov	r1, sp
 801eba0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eba4:	2300      	movs	r3, #0
 801eba6:	f8ad 3000 	strh.w	r3, [sp]
 801ebaa:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ebae:	6803      	ldr	r3, [r0, #0]
 801ebb0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ebb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebb6:	4798      	blx	r3
 801ebb8:	b003      	add	sp, #12
 801ebba:	f85d fb04 	ldr.w	pc, [sp], #4
 801ebbe:	bf00      	nop
 801ebc0:	2000a282 	.word	0x2000a282
 801ebc4:	2000a284 	.word	0x2000a284

0801ebc8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ebc8:	4b03      	ldr	r3, [pc, #12]	; (801ebd8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ebca:	6818      	ldr	r0, [r3, #0]
 801ebcc:	b110      	cbz	r0, 801ebd4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ebce:	6803      	ldr	r3, [r0, #0]
 801ebd0:	69db      	ldr	r3, [r3, #28]
 801ebd2:	4718      	bx	r3
 801ebd4:	4770      	bx	lr
 801ebd6:	bf00      	nop
 801ebd8:	2000a2e4 	.word	0x2000a2e4

0801ebdc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ebdc:	4b03      	ldr	r3, [pc, #12]	; (801ebec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ebde:	6818      	ldr	r0, [r3, #0]
 801ebe0:	b110      	cbz	r0, 801ebe8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ebe2:	6803      	ldr	r3, [r0, #0]
 801ebe4:	6a1b      	ldr	r3, [r3, #32]
 801ebe6:	4718      	bx	r3
 801ebe8:	4770      	bx	lr
 801ebea:	bf00      	nop
 801ebec:	2000a2e4 	.word	0x2000a2e4

0801ebf0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ebf0:	4b03      	ldr	r3, [pc, #12]	; (801ec00 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ebf2:	6818      	ldr	r0, [r3, #0]
 801ebf4:	b110      	cbz	r0, 801ebfc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ebf6:	6803      	ldr	r3, [r0, #0]
 801ebf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebfa:	4718      	bx	r3
 801ebfc:	4770      	bx	lr
 801ebfe:	bf00      	nop
 801ec00:	2000a2e4 	.word	0x2000a2e4

0801ec04 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec08:	4d3d      	ldr	r5, [pc, #244]	; (801ed00 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801ec0a:	4604      	mov	r4, r0
 801ec0c:	6828      	ldr	r0, [r5, #0]
 801ec0e:	2800      	cmp	r0, #0
 801ec10:	d047      	beq.n	801eca2 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801ec12:	7a03      	ldrb	r3, [r0, #8]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d144      	bne.n	801eca2 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801ec18:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801ec1c:	6803      	ldr	r3, [r0, #0]
 801ec1e:	689b      	ldr	r3, [r3, #8]
 801ec20:	e03c      	b.n	801ec9c <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801ec22:	3b01      	subs	r3, #1
 801ec24:	f04f 0c00 	mov.w	ip, #0
 801ec28:	1c5a      	adds	r2, r3, #1
 801ec2a:	d031      	beq.n	801ec90 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801ec2c:	18e2      	adds	r2, r4, r3
 801ec2e:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801ec32:	bb59      	cbnz	r1, 801ec8c <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801ec34:	b298      	uxth	r0, r3
 801ec36:	1d25      	adds	r5, r4, #4
 801ec38:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801ec3c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801ec40:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801ec44:	428a      	cmp	r2, r1
 801ec46:	dd14      	ble.n	801ec72 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801ec48:	682e      	ldr	r6, [r5, #0]
 801ec4a:	45b0      	cmp	r8, r6
 801ec4c:	d106      	bne.n	801ec5c <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801ec4e:	46ae      	mov	lr, r5
 801ec50:	460e      	mov	r6, r1
 801ec52:	2e1e      	cmp	r6, #30
 801ec54:	dd05      	ble.n	801ec62 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801ec56:	3a01      	subs	r2, #1
 801ec58:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801ec5c:	3101      	adds	r1, #1
 801ec5e:	3504      	adds	r5, #4
 801ec60:	e7ee      	b.n	801ec40 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801ec62:	3601      	adds	r6, #1
 801ec64:	f8de 7004 	ldr.w	r7, [lr, #4]
 801ec68:	42b2      	cmp	r2, r6
 801ec6a:	f84e 7b04 	str.w	r7, [lr], #4
 801ec6e:	dcf0      	bgt.n	801ec52 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801ec70:	e7f1      	b.n	801ec56 <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801ec72:	4290      	cmp	r0, r2
 801ec74:	da07      	bge.n	801ec86 <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801ec76:	1821      	adds	r1, r4, r0
 801ec78:	3001      	adds	r0, #1
 801ec7a:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801ec7e:	b280      	uxth	r0, r0
 801ec80:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801ec84:	e7f5      	b.n	801ec72 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801ec86:	4422      	add	r2, r4
 801ec88:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801ec8c:	3b01      	subs	r3, #1
 801ec8e:	e7cb      	b.n	801ec28 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801ec90:	4b1c      	ldr	r3, [pc, #112]	; (801ed04 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801ec92:	6818      	ldr	r0, [r3, #0]
 801ec94:	2800      	cmp	r0, #0
 801ec96:	d031      	beq.n	801ecfc <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801ec98:	6803      	ldr	r3, [r0, #0]
 801ec9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eca0:	4718      	bx	r3
 801eca2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801eca6:	b913      	cbnz	r3, 801ecae <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801eca8:	b108      	cbz	r0, 801ecae <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801ecaa:	7a03      	ldrb	r3, [r0, #8]
 801ecac:	b9a3      	cbnz	r3, 801ecd8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801ecae:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801ecb2:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801ecb6:	2600      	movs	r6, #0
 801ecb8:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801ecbc:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801ecc0:	429e      	cmp	r6, r3
 801ecc2:	daae      	bge.n	801ec22 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801ecc4:	f817 3b01 	ldrb.w	r3, [r7], #1
 801ecc8:	b123      	cbz	r3, 801ecd4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801ecca:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801ecce:	6803      	ldr	r3, [r0, #0]
 801ecd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ecd2:	4798      	blx	r3
 801ecd4:	3601      	adds	r6, #1
 801ecd6:	e7f1      	b.n	801ecbc <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801ecd8:	4b0a      	ldr	r3, [pc, #40]	; (801ed04 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801ecda:	6818      	ldr	r0, [r3, #0]
 801ecdc:	b110      	cbz	r0, 801ece4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801ecde:	6803      	ldr	r3, [r0, #0]
 801ece0:	691b      	ldr	r3, [r3, #16]
 801ece2:	4798      	blx	r3
 801ece4:	6828      	ldr	r0, [r5, #0]
 801ece6:	6803      	ldr	r3, [r0, #0]
 801ece8:	68db      	ldr	r3, [r3, #12]
 801ecea:	4798      	blx	r3
 801ecec:	6823      	ldr	r3, [r4, #0]
 801ecee:	4620      	mov	r0, r4
 801ecf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecf2:	4798      	blx	r3
 801ecf4:	2301      	movs	r3, #1
 801ecf6:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801ecfa:	e7d8      	b.n	801ecae <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed00:	2000a2e8 	.word	0x2000a2e8
 801ed04:	2000a2e4 	.word	0x2000a2e4

0801ed08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ed08:	b570      	push	{r4, r5, r6, lr}
 801ed0a:	4606      	mov	r6, r0
 801ed0c:	460c      	mov	r4, r1
 801ed0e:	b929      	cbnz	r1, 801ed1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ed10:	4b0c      	ldr	r3, [pc, #48]	; (801ed44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ed12:	2161      	movs	r1, #97	; 0x61
 801ed14:	4a0c      	ldr	r2, [pc, #48]	; (801ed48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ed16:	480d      	ldr	r0, [pc, #52]	; (801ed4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ed18:	f003 fe3a 	bl	8022990 <__assert_func>
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	4d0c      	ldr	r5, [pc, #48]	; (801ed50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ed20:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ed24:	6828      	ldr	r0, [r5, #0]
 801ed26:	b110      	cbz	r0, 801ed2e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ed28:	6803      	ldr	r3, [r0, #0]
 801ed2a:	695b      	ldr	r3, [r3, #20]
 801ed2c:	4798      	blx	r3
 801ed2e:	602c      	str	r4, [r5, #0]
 801ed30:	4620      	mov	r0, r4
 801ed32:	6823      	ldr	r3, [r4, #0]
 801ed34:	68db      	ldr	r3, [r3, #12]
 801ed36:	4798      	blx	r3
 801ed38:	6833      	ldr	r3, [r6, #0]
 801ed3a:	4630      	mov	r0, r6
 801ed3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed42:	4718      	bx	r3
 801ed44:	08025efe 	.word	0x08025efe
 801ed48:	08025fc8 	.word	0x08025fc8
 801ed4c:	08025f08 	.word	0x08025f08
 801ed50:	2000a2e4 	.word	0x2000a2e4

0801ed54 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801ed54:	b570      	push	{r4, r5, r6, lr}
 801ed56:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ed5a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ed5e:	42ac      	cmp	r4, r5
 801ed60:	db18      	blt.n	801ed94 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ed62:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801ed66:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ed6a:	429a      	cmp	r2, r3
 801ed6c:	db12      	blt.n	801ed94 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ed6e:	8886      	ldrh	r6, [r0, #4]
 801ed70:	4435      	add	r5, r6
 801ed72:	888e      	ldrh	r6, [r1, #4]
 801ed74:	4434      	add	r4, r6
 801ed76:	b22d      	sxth	r5, r5
 801ed78:	b224      	sxth	r4, r4
 801ed7a:	42a5      	cmp	r5, r4
 801ed7c:	db0a      	blt.n	801ed94 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ed7e:	88c0      	ldrh	r0, [r0, #6]
 801ed80:	4418      	add	r0, r3
 801ed82:	88cb      	ldrh	r3, [r1, #6]
 801ed84:	441a      	add	r2, r3
 801ed86:	b200      	sxth	r0, r0
 801ed88:	b212      	sxth	r2, r2
 801ed8a:	4290      	cmp	r0, r2
 801ed8c:	bfb4      	ite	lt
 801ed8e:	2000      	movlt	r0, #0
 801ed90:	2001      	movge	r0, #1
 801ed92:	bd70      	pop	{r4, r5, r6, pc}
 801ed94:	2000      	movs	r0, #0
 801ed96:	bd70      	pop	{r4, r5, r6, pc}

0801ed98 <_ZN8touchgfx11Application11getInstanceEv>:
 801ed98:	4b01      	ldr	r3, [pc, #4]	; (801eda0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801ed9a:	6818      	ldr	r0, [r3, #0]
 801ed9c:	4770      	bx	lr
 801ed9e:	bf00      	nop
 801eda0:	2000a2ec 	.word	0x2000a2ec

0801eda4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801eda4:	2300      	movs	r3, #0
 801eda6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801edaa:	30a8      	adds	r0, #168	; 0xa8
 801edac:	f820 3c24 	strh.w	r3, [r0, #-36]
 801edb0:	f802 3b01 	strb.w	r3, [r2], #1
 801edb4:	4282      	cmp	r2, r0
 801edb6:	d1fb      	bne.n	801edb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801edb8:	4770      	bx	lr

0801edba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801edba:	4603      	mov	r3, r0
 801edbc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801edc0:	2200      	movs	r2, #0
 801edc2:	801a      	strh	r2, [r3, #0]
 801edc4:	3308      	adds	r3, #8
 801edc6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801edca:	f823 2c04 	strh.w	r2, [r3, #-4]
 801edce:	f823 2c02 	strh.w	r2, [r3, #-2]
 801edd2:	428b      	cmp	r3, r1
 801edd4:	d1f5      	bne.n	801edc2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801edd6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801edda:	4770      	bx	lr

0801eddc <_ZN8touchgfx11ApplicationC1Ev>:
 801eddc:	b570      	push	{r4, r5, r6, lr}
 801edde:	4b16      	ldr	r3, [pc, #88]	; (801ee38 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801ede0:	2500      	movs	r5, #0
 801ede2:	4604      	mov	r4, r0
 801ede4:	30a8      	adds	r0, #168	; 0xa8
 801ede6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801edea:	f820 5c24 	strh.w	r5, [r0, #-36]
 801edee:	f7ff ffe4 	bl	801edba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801edf2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801edf6:	f7ff ffe0 	bl	801edba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801edfa:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801edfe:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801ee02:	490e      	ldr	r1, [pc, #56]	; (801ee3c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801ee04:	480e      	ldr	r0, [pc, #56]	; (801ee40 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801ee06:	f003 fcc1 	bl	802278c <CRC_Lock>
 801ee0a:	4e0e      	ldr	r6, [pc, #56]	; (801ee44 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801ee0c:	4b0e      	ldr	r3, [pc, #56]	; (801ee48 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ee0e:	b158      	cbz	r0, 801ee28 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801ee10:	801d      	strh	r5, [r3, #0]
 801ee12:	2300      	movs	r3, #0
 801ee14:	4a0d      	ldr	r2, [pc, #52]	; (801ee4c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ee16:	4620      	mov	r0, r4
 801ee18:	6013      	str	r3, [r2, #0]
 801ee1a:	4a0d      	ldr	r2, [pc, #52]	; (801ee50 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ee1c:	6033      	str	r3, [r6, #0]
 801ee1e:	6013      	str	r3, [r2, #0]
 801ee20:	f7ff ffc0 	bl	801eda4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ee24:	4620      	mov	r0, r4
 801ee26:	bd70      	pop	{r4, r5, r6, pc}
 801ee28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ee2c:	2002      	movs	r0, #2
 801ee2e:	801a      	strh	r2, [r3, #0]
 801ee30:	6030      	str	r0, [r6, #0]
 801ee32:	f000 fe7d 	bl	801fb30 <_ZN8touchgfx6Screen4drawEv>
 801ee36:	e7ec      	b.n	801ee12 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801ee38:	08025f94 	.word	0x08025f94
 801ee3c:	b5e8b5cd 	.word	0xb5e8b5cd
 801ee40:	f407a5c2 	.word	0xf407a5c2
 801ee44:	2000a2e4 	.word	0x2000a2e4
 801ee48:	20000192 	.word	0x20000192
 801ee4c:	2000a2ec 	.word	0x2000a2ec
 801ee50:	2000a2e8 	.word	0x2000a2e8

0801ee54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ee54:	2300      	movs	r3, #0
 801ee56:	8003      	strh	r3, [r0, #0]
 801ee58:	8043      	strh	r3, [r0, #2]
 801ee5a:	8083      	strh	r3, [r0, #4]
 801ee5c:	80c3      	strh	r3, [r0, #6]
 801ee5e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801ee62:	429a      	cmp	r2, r3
 801ee64:	b530      	push	{r4, r5, lr}
 801ee66:	da12      	bge.n	801ee8e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ee68:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801ee6c:	3b01      	subs	r3, #1
 801ee6e:	6825      	ldr	r5, [r4, #0]
 801ee70:	b29b      	uxth	r3, r3
 801ee72:	6005      	str	r5, [r0, #0]
 801ee74:	429a      	cmp	r2, r3
 801ee76:	6865      	ldr	r5, [r4, #4]
 801ee78:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801ee7c:	6045      	str	r5, [r0, #4]
 801ee7e:	da06      	bge.n	801ee8e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ee80:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801ee84:	681d      	ldr	r5, [r3, #0]
 801ee86:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801ee8a:	685d      	ldr	r5, [r3, #4]
 801ee8c:	6065      	str	r5, [r4, #4]
 801ee8e:	bd30      	pop	{r4, r5, pc}

0801ee90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ee90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ee92:	e88d 0006 	stmia.w	sp, {r1, r2}
 801ee96:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ee9a:	4604      	mov	r4, r0
 801ee9c:	466b      	mov	r3, sp
 801ee9e:	2a07      	cmp	r2, #7
 801eea0:	dd06      	ble.n	801eeb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801eea2:	4b09      	ldr	r3, [pc, #36]	; (801eec8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801eea4:	f240 11f9 	movw	r1, #505	; 0x1f9
 801eea8:	4a08      	ldr	r2, [pc, #32]	; (801eecc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801eeaa:	4809      	ldr	r0, [pc, #36]	; (801eed0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801eeac:	f003 fd70 	bl	8022990 <__assert_func>
 801eeb0:	1c51      	adds	r1, r2, #1
 801eeb2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801eeb6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801eeba:	cb03      	ldmia	r3!, {r0, r1}
 801eebc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801eec0:	6069      	str	r1, [r5, #4]
 801eec2:	b003      	add	sp, #12
 801eec4:	bd30      	pop	{r4, r5, pc}
 801eec6:	bf00      	nop
 801eec8:	08025f32 	.word	0x08025f32
 801eecc:	0802600c 	.word	0x0802600c
 801eed0:	08025f61 	.word	0x08025f61

0801eed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801eed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eed8:	b089      	sub	sp, #36	; 0x24
 801eeda:	4606      	mov	r6, r0
 801eedc:	4668      	mov	r0, sp
 801eede:	466c      	mov	r4, sp
 801eee0:	e88d 0006 	stmia.w	sp, {r1, r2}
 801eee4:	f7f2 fee8 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eee8:	bbb0      	cbnz	r0, 801ef58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801eeea:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801eeee:	b1fd      	cbz	r5, 801ef30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801eef0:	3d01      	subs	r5, #1
 801eef2:	af04      	add	r7, sp, #16
 801eef4:	f04f 090a 	mov.w	r9, #10
 801eef8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801eefc:	ab02      	add	r3, sp, #8
 801eefe:	fa1f f885 	uxth.w	r8, r5
 801ef02:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ef06:	6851      	ldr	r1, [r2, #4]
 801ef08:	c303      	stmia	r3!, {r0, r1}
 801ef0a:	4621      	mov	r1, r4
 801ef0c:	a802      	add	r0, sp, #8
 801ef0e:	f7ff ff21 	bl	801ed54 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ef12:	bb08      	cbnz	r0, 801ef58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801ef14:	a902      	add	r1, sp, #8
 801ef16:	4620      	mov	r0, r4
 801ef18:	f7ff ff1c 	bl	801ed54 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ef1c:	b1f8      	cbz	r0, 801ef5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801ef1e:	4642      	mov	r2, r8
 801ef20:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ef24:	a806      	add	r0, sp, #24
 801ef26:	f7ff ff95 	bl	801ee54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ef2a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801ef2e:	d2e3      	bcs.n	801eef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801ef30:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801ef34:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801ef38:	2b08      	cmp	r3, #8
 801ef3a:	d108      	bne.n	801ef4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ef3c:	4629      	mov	r1, r5
 801ef3e:	a806      	add	r0, sp, #24
 801ef40:	2207      	movs	r2, #7
 801ef42:	f7ff ff87 	bl	801ee54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ef46:	a906      	add	r1, sp, #24
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f7f2 fe29 	bl	8011ba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ef4e:	4628      	mov	r0, r5
 801ef50:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ef54:	f7ff ff9c 	bl	801ee90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ef58:	b009      	add	sp, #36	; 0x24
 801ef5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef5e:	4621      	mov	r1, r4
 801ef60:	a802      	add	r0, sp, #8
 801ef62:	f7f2 fd5a 	bl	8011a1a <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ef66:	b150      	cbz	r0, 801ef7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801ef68:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ef6c:	a806      	add	r0, sp, #24
 801ef6e:	4642      	mov	r2, r8
 801ef70:	f7ff ff70 	bl	801ee54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ef74:	a902      	add	r1, sp, #8
 801ef76:	4620      	mov	r0, r4
 801ef78:	f7f2 fe12 	bl	8011ba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ef7c:	e7d5      	b.n	801ef2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ef7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ef82:	e887 0003 	stmia.w	r7, {r0, r1}
 801ef86:	a902      	add	r1, sp, #8
 801ef88:	4638      	mov	r0, r7
 801ef8a:	f7f2 fe09 	bl	8011ba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ef8e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ef92:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ef96:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ef9a:	fb13 f302 	smulbb	r3, r3, r2
 801ef9e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801efa2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801efa6:	fb11 f102 	smulbb	r1, r1, r2
 801efaa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801efae:	fb09 f303 	mul.w	r3, r9, r3
 801efb2:	fb12 1100 	smlabb	r1, r2, r0, r1
 801efb6:	220b      	movs	r2, #11
 801efb8:	434a      	muls	r2, r1
 801efba:	4293      	cmp	r3, r2
 801efbc:	dab5      	bge.n	801ef2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801efbe:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801efc2:	a806      	add	r0, sp, #24
 801efc4:	4642      	mov	r2, r8
 801efc6:	f7ff ff45 	bl	801ee54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801efca:	e897 0003 	ldmia.w	r7, {r0, r1}
 801efce:	e884 0003 	stmia.w	r4, {r0, r1}
 801efd2:	e7aa      	b.n	801ef2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801efd4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801efd4:	4b1b      	ldr	r3, [pc, #108]	; (801f044 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801efd6:	b530      	push	{r4, r5, lr}
 801efd8:	460c      	mov	r4, r1
 801efda:	f9b3 1000 	ldrsh.w	r1, [r3]
 801efde:	4b1a      	ldr	r3, [pc, #104]	; (801f048 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801efe0:	b085      	sub	sp, #20
 801efe2:	4605      	mov	r5, r0
 801efe4:	6820      	ldr	r0, [r4, #0]
 801efe6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801efea:	2300      	movs	r3, #0
 801efec:	f8ad 1004 	strh.w	r1, [sp, #4]
 801eff0:	f8ad 3000 	strh.w	r3, [sp]
 801eff4:	6861      	ldr	r1, [r4, #4]
 801eff6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801effa:	ab02      	add	r3, sp, #8
 801effc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f000:	c303      	stmia	r3!, {r0, r1}
 801f002:	4669      	mov	r1, sp
 801f004:	a802      	add	r0, sp, #8
 801f006:	f7f2 fd4f 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801f00a:	ab02      	add	r3, sp, #8
 801f00c:	cb03      	ldmia	r3!, {r0, r1}
 801f00e:	4b0f      	ldr	r3, [pc, #60]	; (801f04c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801f010:	6020      	str	r0, [r4, #0]
 801f012:	6818      	ldr	r0, [r3, #0]
 801f014:	6061      	str	r1, [r4, #4]
 801f016:	b138      	cbz	r0, 801f028 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801f018:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801f01c:	b133      	cbz	r3, 801f02c <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801f01e:	6821      	ldr	r1, [r4, #0]
 801f020:	4628      	mov	r0, r5
 801f022:	6862      	ldr	r2, [r4, #4]
 801f024:	f7ff ff56 	bl	801eed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f028:	b005      	add	sp, #20
 801f02a:	bd30      	pop	{r4, r5, pc}
 801f02c:	6803      	ldr	r3, [r0, #0]
 801f02e:	4621      	mov	r1, r4
 801f030:	689b      	ldr	r3, [r3, #8]
 801f032:	4798      	blx	r3
 801f034:	4b06      	ldr	r3, [pc, #24]	; (801f050 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801f036:	4621      	mov	r1, r4
 801f038:	6818      	ldr	r0, [r3, #0]
 801f03a:	6803      	ldr	r3, [r0, #0]
 801f03c:	695b      	ldr	r3, [r3, #20]
 801f03e:	4798      	blx	r3
 801f040:	e7f2      	b.n	801f028 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801f042:	bf00      	nop
 801f044:	2000a282 	.word	0x2000a282
 801f048:	2000a284 	.word	0x2000a284
 801f04c:	2000a2e4 	.word	0x2000a2e4
 801f050:	2000a290 	.word	0x2000a290

0801f054 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801f054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f058:	4604      	mov	r4, r0
 801f05a:	b096      	sub	sp, #88	; 0x58
 801f05c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801f060:	b129      	cbz	r1, 801f06e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801f062:	2300      	movs	r3, #0
 801f064:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801f068:	b016      	add	sp, #88	; 0x58
 801f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f06e:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801f072:	2b00      	cmp	r3, #0
 801f074:	d0f8      	beq.n	801f068 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f076:	4f6e      	ldr	r7, [pc, #440]	; (801f230 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801f078:	a805      	add	r0, sp, #20
 801f07a:	f7ff fe9e 	bl	801edba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f07e:	883d      	ldrh	r5, [r7, #0]
 801f080:	462e      	mov	r6, r5
 801f082:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f086:	429e      	cmp	r6, r3
 801f088:	db10      	blt.n	801f0ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801f08a:	462e      	mov	r6, r5
 801f08c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801f090:	429e      	cmp	r6, r3
 801f092:	da17      	bge.n	801f0c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f094:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f098:	3601      	adds	r6, #1
 801f09a:	4620      	mov	r0, r4
 801f09c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801f0a0:	b2b6      	uxth	r6, r6
 801f0a2:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801f0a6:	f7ff ff15 	bl	801eed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f0aa:	e7ef      	b.n	801f08c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801f0ac:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f0b0:	3601      	adds	r6, #1
 801f0b2:	a805      	add	r0, sp, #20
 801f0b4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801f0b8:	b2b6      	uxth	r6, r6
 801f0ba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801f0be:	f7ff fee7 	bl	801ee90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f0c2:	e7de      	b.n	801f082 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801f0c4:	4e5b      	ldr	r6, [pc, #364]	; (801f234 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801f0c6:	6833      	ldr	r3, [r6, #0]
 801f0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f0cc:	2b01      	cmp	r3, #1
 801f0ce:	f040 8094 	bne.w	801f1fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801f0d2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801f0d6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801f0da:	f04f 0900 	mov.w	r9, #0
 801f0de:	33aa      	adds	r3, #170	; 0xaa
 801f0e0:	42a8      	cmp	r0, r5
 801f0e2:	f103 0308 	add.w	r3, r3, #8
 801f0e6:	dd0a      	ble.n	801f0fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801f0e8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801f0ec:	3501      	adds	r5, #1
 801f0ee:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801f0f2:	440a      	add	r2, r1
 801f0f4:	b212      	sxth	r2, r2
 801f0f6:	4591      	cmp	r9, r2
 801f0f8:	bfb8      	it	lt
 801f0fa:	4691      	movlt	r9, r2
 801f0fc:	e7f0      	b.n	801f0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801f0fe:	4b4e      	ldr	r3, [pc, #312]	; (801f238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801f100:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801f240 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801f104:	881d      	ldrh	r5, [r3, #0]
 801f106:	2300      	movs	r3, #0
 801f108:	08ed      	lsrs	r5, r5, #3
 801f10a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801f10e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f112:	2d01      	cmp	r5, #1
 801f114:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f118:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f11c:	bfb8      	it	lt
 801f11e:	2501      	movlt	r5, #1
 801f120:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801f124:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f128:	6830      	ldr	r0, [r6, #0]
 801f12a:	4413      	add	r3, r2
 801f12c:	b21b      	sxth	r3, r3
 801f12e:	4599      	cmp	r9, r3
 801f130:	6803      	ldr	r3, [r0, #0]
 801f132:	dd45      	ble.n	801f1c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801f134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f138:	4798      	blx	r3
 801f13a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f13e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801f142:	4413      	add	r3, r2
 801f144:	b21b      	sxth	r3, r3
 801f146:	18ea      	adds	r2, r5, r3
 801f148:	4290      	cmp	r0, r2
 801f14a:	da6d      	bge.n	801f228 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801f14c:	4581      	cmp	r9, r0
 801f14e:	dd6b      	ble.n	801f228 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801f150:	4298      	cmp	r0, r3
 801f152:	da01      	bge.n	801f158 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801f154:	2b00      	cmp	r3, #0
 801f156:	dc69      	bgt.n	801f22c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801f158:	6830      	ldr	r0, [r6, #0]
 801f15a:	2101      	movs	r1, #1
 801f15c:	6803      	ldr	r3, [r0, #0]
 801f15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f160:	4798      	blx	r3
 801f162:	e7dd      	b.n	801f120 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801f164:	4548      	cmp	r0, r9
 801f166:	bfa8      	it	ge
 801f168:	4648      	movge	r0, r9
 801f16a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801f16e:	2100      	movs	r1, #0
 801f170:	1ac0      	subs	r0, r0, r3
 801f172:	f8b7 a000 	ldrh.w	sl, [r7]
 801f176:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f17a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f17e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f182:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f186:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f18a:	459a      	cmp	sl, r3
 801f18c:	dac8      	bge.n	801f120 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801f18e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801f192:	ab03      	add	r3, sp, #12
 801f194:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f198:	6851      	ldr	r1, [r2, #4]
 801f19a:	c303      	stmia	r3!, {r0, r1}
 801f19c:	a803      	add	r0, sp, #12
 801f19e:	a901      	add	r1, sp, #4
 801f1a0:	f7f2 fc82 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801f1a4:	a803      	add	r0, sp, #12
 801f1a6:	f7f2 fd87 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f1aa:	b920      	cbnz	r0, 801f1b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801f1ac:	6823      	ldr	r3, [r4, #0]
 801f1ae:	a903      	add	r1, sp, #12
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1b4:	4798      	blx	r3
 801f1b6:	f10a 0a01 	add.w	sl, sl, #1
 801f1ba:	fa1f fa8a 	uxth.w	sl, sl
 801f1be:	e7e2      	b.n	801f186 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801f1c0:	69db      	ldr	r3, [r3, #28]
 801f1c2:	4798      	blx	r3
 801f1c4:	4b1d      	ldr	r3, [pc, #116]	; (801f23c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801f1c6:	781b      	ldrb	r3, [r3, #0]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	f43f af4d 	beq.w	801f068 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f1ce:	2300      	movs	r3, #0
 801f1d0:	883d      	ldrh	r5, [r7, #0]
 801f1d2:	34ea      	adds	r4, #234	; 0xea
 801f1d4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801f1d8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801f1dc:	429d      	cmp	r5, r3
 801f1de:	f6bf af43 	bge.w	801f068 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f1e2:	ab16      	add	r3, sp, #88	; 0x58
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f1ea:	3501      	adds	r5, #1
 801f1ec:	3b44      	subs	r3, #68	; 0x44
 801f1ee:	b2ad      	uxth	r5, r5
 801f1f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f1f4:	f7ff fe4c 	bl	801ee90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f1f8:	e7ee      	b.n	801f1d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801f1fa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f1fe:	429d      	cmp	r5, r3
 801f200:	dae0      	bge.n	801f1c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801f202:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f206:	ab03      	add	r3, sp, #12
 801f208:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f20c:	6851      	ldr	r1, [r2, #4]
 801f20e:	c303      	stmia	r3!, {r0, r1}
 801f210:	a803      	add	r0, sp, #12
 801f212:	f7f2 fd51 	bl	8011cb8 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f216:	b920      	cbnz	r0, 801f222 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801f218:	6823      	ldr	r3, [r4, #0]
 801f21a:	a903      	add	r1, sp, #12
 801f21c:	4620      	mov	r0, r4
 801f21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f220:	4798      	blx	r3
 801f222:	3501      	adds	r5, #1
 801f224:	b2ad      	uxth	r5, r5
 801f226:	e7e8      	b.n	801f1fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801f228:	4298      	cmp	r0, r3
 801f22a:	da9b      	bge.n	801f164 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801f22c:	4648      	mov	r0, r9
 801f22e:	e79c      	b.n	801f16a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801f230:	20000192 	.word	0x20000192
 801f234:	2000a290 	.word	0x2000a290
 801f238:	2000a284 	.word	0x2000a284
 801f23c:	2000a28c 	.word	0x2000a28c
 801f240:	2000a282 	.word	0x2000a282

0801f244 <_ZNK8touchgfx4Font8getGlyphEt>:
 801f244:	b513      	push	{r0, r1, r4, lr}
 801f246:	2200      	movs	r2, #0
 801f248:	ab02      	add	r3, sp, #8
 801f24a:	9201      	str	r2, [sp, #4]
 801f24c:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801f250:	6802      	ldr	r2, [r0, #0]
 801f252:	6894      	ldr	r4, [r2, #8]
 801f254:	aa01      	add	r2, sp, #4
 801f256:	47a0      	blx	r4
 801f258:	b002      	add	sp, #8
 801f25a:	bd10      	pop	{r4, pc}

0801f25c <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801f25c:	8940      	ldrh	r0, [r0, #10]
 801f25e:	4770      	bx	lr

0801f260 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801f260:	8980      	ldrh	r0, [r0, #12]
 801f262:	4770      	bx	lr

0801f264 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801f264:	8880      	ldrh	r0, [r0, #4]
 801f266:	4770      	bx	lr

0801f268 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801f268:	7983      	ldrb	r3, [r0, #6]
 801f26a:	8880      	ldrh	r0, [r0, #4]
 801f26c:	4418      	add	r0, r3
 801f26e:	b280      	uxth	r0, r0
 801f270:	4770      	bx	lr

0801f272 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801f272:	79c0      	ldrb	r0, [r0, #7]
 801f274:	4770      	bx	lr

0801f276 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801f276:	2000      	movs	r0, #0
 801f278:	4770      	bx	lr

0801f27a <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f27a:	b508      	push	{r3, lr}
 801f27c:	6803      	ldr	r3, [r0, #0]
 801f27e:	68db      	ldr	r3, [r3, #12]
 801f280:	4798      	blx	r3
 801f282:	b140      	cbz	r0, 801f296 <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801f284:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801f288:	7a83      	ldrb	r3, [r0, #10]
 801f28a:	2a00      	cmp	r2, #0
 801f28c:	bfb4      	ite	lt
 801f28e:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801f292:	2000      	movge	r0, #0
 801f294:	4318      	orrs	r0, r3
 801f296:	bd08      	pop	{r3, pc}

0801f298 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801f298:	b40e      	push	{r1, r2, r3}
 801f29a:	b533      	push	{r0, r1, r4, r5, lr}
 801f29c:	ab05      	add	r3, sp, #20
 801f29e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2a2:	9301      	str	r3, [sp, #4]
 801f2a4:	4b0a      	ldr	r3, [pc, #40]	; (801f2d0 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801f2a6:	685c      	ldr	r4, [r3, #4]
 801f2a8:	f014 0f01 	tst.w	r4, #1
 801f2ac:	ea4f 0464 	mov.w	r4, r4, asr #1
 801f2b0:	bf1c      	itt	ne
 801f2b2:	681b      	ldrne	r3, [r3, #0]
 801f2b4:	5901      	ldrne	r1, [r0, r4]
 801f2b6:	4420      	add	r0, r4
 801f2b8:	bf0c      	ite	eq
 801f2ba:	681d      	ldreq	r5, [r3, #0]
 801f2bc:	58cd      	ldrne	r5, [r1, r3]
 801f2be:	2100      	movs	r1, #0
 801f2c0:	9b01      	ldr	r3, [sp, #4]
 801f2c2:	47a8      	blx	r5
 801f2c4:	b002      	add	sp, #8
 801f2c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f2ca:	b003      	add	sp, #12
 801f2cc:	4770      	bx	lr
 801f2ce:	bf00      	nop
 801f2d0:	20000164 	.word	0x20000164

0801f2d4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801f2d4:	b40c      	push	{r2, r3}
 801f2d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f2d8:	ab06      	add	r3, sp, #24
 801f2da:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2de:	9301      	str	r3, [sp, #4]
 801f2e0:	4b09      	ldr	r3, [pc, #36]	; (801f308 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801f2e2:	685c      	ldr	r4, [r3, #4]
 801f2e4:	f014 0f01 	tst.w	r4, #1
 801f2e8:	ea4f 0464 	mov.w	r4, r4, asr #1
 801f2ec:	bf1c      	itt	ne
 801f2ee:	681b      	ldrne	r3, [r3, #0]
 801f2f0:	5905      	ldrne	r5, [r0, r4]
 801f2f2:	4420      	add	r0, r4
 801f2f4:	bf0c      	ite	eq
 801f2f6:	681d      	ldreq	r5, [r3, #0]
 801f2f8:	58ed      	ldrne	r5, [r5, r3]
 801f2fa:	9b01      	ldr	r3, [sp, #4]
 801f2fc:	47a8      	blx	r5
 801f2fe:	b003      	add	sp, #12
 801f300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f304:	b002      	add	sp, #8
 801f306:	4770      	bx	lr
 801f308:	20000164 	.word	0x20000164

0801f30c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f30c:	b40e      	push	{r1, r2, r3}
 801f30e:	b510      	push	{r4, lr}
 801f310:	b089      	sub	sp, #36	; 0x24
 801f312:	ab0b      	add	r3, sp, #44	; 0x2c
 801f314:	a802      	add	r0, sp, #8
 801f316:	f853 4b04 	ldr.w	r4, [r3], #4
 801f31a:	9301      	str	r3, [sp, #4]
 801f31c:	f000 fe1a 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801f320:	4621      	mov	r1, r4
 801f322:	9a01      	ldr	r2, [sp, #4]
 801f324:	a802      	add	r0, sp, #8
 801f326:	2401      	movs	r4, #1
 801f328:	f000 fe1d 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f32c:	a802      	add	r0, sp, #8
 801f32e:	f000 fdc1 	bl	801feb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f332:	b138      	cbz	r0, 801f344 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801f334:	280a      	cmp	r0, #10
 801f336:	a802      	add	r0, sp, #8
 801f338:	bf04      	itt	eq
 801f33a:	3401      	addeq	r4, #1
 801f33c:	b224      	sxtheq	r4, r4
 801f33e:	f000 fdb9 	bl	801feb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f342:	e7f6      	b.n	801f332 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801f344:	b2a0      	uxth	r0, r4
 801f346:	b009      	add	sp, #36	; 0x24
 801f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f34c:	b003      	add	sp, #12
 801f34e:	4770      	bx	lr

0801f350 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f350:	b40e      	push	{r1, r2, r3}
 801f352:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f354:	b088      	sub	sp, #32
 801f356:	4604      	mov	r4, r0
 801f358:	2600      	movs	r6, #0
 801f35a:	ab0d      	add	r3, sp, #52	; 0x34
 801f35c:	a802      	add	r0, sp, #8
 801f35e:	f853 5b04 	ldr.w	r5, [r3], #4
 801f362:	9301      	str	r3, [sp, #4]
 801f364:	f000 fdf6 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801f368:	4629      	mov	r1, r5
 801f36a:	9a01      	ldr	r2, [sp, #4]
 801f36c:	a802      	add	r0, sp, #8
 801f36e:	4d1f      	ldr	r5, [pc, #124]	; (801f3ec <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801f370:	f000 fdf9 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f374:	2100      	movs	r1, #0
 801f376:	a802      	add	r0, sp, #8
 801f378:	f000 fda6 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f37c:	b378      	cbz	r0, 801f3de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801f37e:	280a      	cmp	r0, #10
 801f380:	d028      	beq.n	801f3d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801f382:	6823      	ldr	r3, [r4, #0]
 801f384:	4601      	mov	r1, r0
 801f386:	4620      	mov	r0, r4
 801f388:	68db      	ldr	r3, [r3, #12]
 801f38a:	4798      	blx	r3
 801f38c:	b310      	cbz	r0, 801f3d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801f38e:	7b41      	ldrb	r1, [r0, #13]
 801f390:	f890 e008 	ldrb.w	lr, [r0, #8]
 801f394:	f011 0f40 	tst.w	r1, #64	; 0x40
 801f398:	88a3      	ldrh	r3, [r4, #4]
 801f39a:	79c0      	ldrb	r0, [r0, #7]
 801f39c:	bf14      	ite	ne
 801f39e:	462f      	movne	r7, r5
 801f3a0:	2700      	moveq	r7, #0
 801f3a2:	f011 0f20 	tst.w	r1, #32
 801f3a6:	ea47 070e 	orr.w	r7, r7, lr
 801f3aa:	bf14      	ite	ne
 801f3ac:	f44f 7280 	movne.w	r2, #256	; 0x100
 801f3b0:	2200      	moveq	r2, #0
 801f3b2:	f011 0f10 	tst.w	r1, #16
 801f3b6:	ea42 0207 	orr.w	r2, r2, r7
 801f3ba:	eba3 0302 	sub.w	r3, r3, r2
 801f3be:	bf14      	ite	ne
 801f3c0:	f44f 7280 	movne.w	r2, #256	; 0x100
 801f3c4:	2200      	moveq	r2, #0
 801f3c6:	4302      	orrs	r2, r0
 801f3c8:	fa12 f383 	uxtah	r3, r2, r3
 801f3cc:	b29b      	uxth	r3, r3
 801f3ce:	42b3      	cmp	r3, r6
 801f3d0:	bfc8      	it	gt
 801f3d2:	b21e      	sxthgt	r6, r3
 801f3d4:	2100      	movs	r1, #0
 801f3d6:	a802      	add	r0, sp, #8
 801f3d8:	f000 fd76 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f3dc:	e7ce      	b.n	801f37c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801f3de:	b2b0      	uxth	r0, r6
 801f3e0:	b008      	add	sp, #32
 801f3e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f3e6:	b003      	add	sp, #12
 801f3e8:	4770      	bx	lr
 801f3ea:	bf00      	nop
 801f3ec:	fffffe00 	.word	0xfffffe00

0801f3f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f3f0:	b40e      	push	{r1, r2, r3}
 801f3f2:	b530      	push	{r4, r5, lr}
 801f3f4:	b088      	sub	sp, #32
 801f3f6:	4605      	mov	r5, r0
 801f3f8:	ab0b      	add	r3, sp, #44	; 0x2c
 801f3fa:	a802      	add	r0, sp, #8
 801f3fc:	f853 4b04 	ldr.w	r4, [r3], #4
 801f400:	9301      	str	r3, [sp, #4]
 801f402:	f000 fda7 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801f406:	4621      	mov	r1, r4
 801f408:	9a01      	ldr	r2, [sp, #4]
 801f40a:	a802      	add	r0, sp, #8
 801f40c:	24ff      	movs	r4, #255	; 0xff
 801f40e:	f000 fdaa 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f412:	2100      	movs	r1, #0
 801f414:	a802      	add	r0, sp, #8
 801f416:	f000 fd57 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f41a:	b1a0      	cbz	r0, 801f446 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801f41c:	280a      	cmp	r0, #10
 801f41e:	d00d      	beq.n	801f43c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801f420:	682b      	ldr	r3, [r5, #0]
 801f422:	4601      	mov	r1, r0
 801f424:	4628      	mov	r0, r5
 801f426:	68db      	ldr	r3, [r3, #12]
 801f428:	4798      	blx	r3
 801f42a:	b138      	cbz	r0, 801f43c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801f42c:	792b      	ldrb	r3, [r5, #4]
 801f42e:	7a02      	ldrb	r2, [r0, #8]
 801f430:	1a9b      	subs	r3, r3, r2
 801f432:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801f436:	429c      	cmp	r4, r3
 801f438:	bfa8      	it	ge
 801f43a:	461c      	movge	r4, r3
 801f43c:	2100      	movs	r1, #0
 801f43e:	a802      	add	r0, sp, #8
 801f440:	f000 fd42 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f444:	e7e9      	b.n	801f41a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801f446:	4620      	mov	r0, r4
 801f448:	b008      	add	sp, #32
 801f44a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f44e:	b003      	add	sp, #12
 801f450:	4770      	bx	lr

0801f452 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f456:	f04f 0a00 	mov.w	sl, #0
 801f45a:	b087      	sub	sp, #28
 801f45c:	4614      	mov	r4, r2
 801f45e:	461d      	mov	r5, r3
 801f460:	4606      	mov	r6, r0
 801f462:	4657      	mov	r7, sl
 801f464:	4668      	mov	r0, sp
 801f466:	46d1      	mov	r9, sl
 801f468:	4688      	mov	r8, r1
 801f46a:	f000 fd73 	bl	801ff54 <_ZN8touchgfx12TextProviderC1Ev>
 801f46e:	462a      	mov	r2, r5
 801f470:	4621      	mov	r1, r4
 801f472:	4668      	mov	r0, sp
 801f474:	f000 fd77 	bl	801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f478:	4641      	mov	r1, r8
 801f47a:	4668      	mov	r0, sp
 801f47c:	f000 fd24 	bl	801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f480:	4605      	mov	r5, r0
 801f482:	b108      	cbz	r0, 801f488 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801f484:	280a      	cmp	r0, #10
 801f486:	d107      	bne.n	801f498 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801f488:	45b9      	cmp	r9, r7
 801f48a:	dd00      	ble.n	801f48e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801f48c:	464f      	mov	r7, r9
 801f48e:	f04f 0900 	mov.w	r9, #0
 801f492:	e01e      	b.n	801f4d2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801f494:	46aa      	mov	sl, r5
 801f496:	e7ef      	b.n	801f478 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801f498:	6833      	ldr	r3, [r6, #0]
 801f49a:	4601      	mov	r1, r0
 801f49c:	4630      	mov	r0, r6
 801f49e:	68db      	ldr	r3, [r3, #12]
 801f4a0:	4798      	blx	r3
 801f4a2:	4602      	mov	r2, r0
 801f4a4:	2800      	cmp	r0, #0
 801f4a6:	d0f5      	beq.n	801f494 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801f4a8:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801f4ac:	4651      	mov	r1, sl
 801f4ae:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	6833      	ldr	r3, [r6, #0]
 801f4b6:	8885      	ldrh	r5, [r0, #4]
 801f4b8:	4630      	mov	r0, r6
 801f4ba:	bfb4      	ite	lt
 801f4bc:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801f4c0:	2400      	movge	r4, #0
 801f4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4c4:	ea44 040b 	orr.w	r4, r4, fp
 801f4c8:	4798      	blx	r3
 801f4ca:	4404      	add	r4, r0
 801f4cc:	444c      	add	r4, r9
 801f4ce:	fa1f f984 	uxth.w	r9, r4
 801f4d2:	2d00      	cmp	r5, #0
 801f4d4:	d1de      	bne.n	801f494 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801f4d6:	4638      	mov	r0, r7
 801f4d8:	b007      	add	sp, #28
 801f4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4de <_ZNK8touchgfx8Drawable7getTypeEv>:
 801f4de:	2000      	movs	r0, #0
 801f4e0:	4770      	bx	lr

0801f4e2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f4e2:	b513      	push	{r0, r1, r4, lr}
 801f4e4:	1d01      	adds	r1, r0, #4
 801f4e6:	4603      	mov	r3, r0
 801f4e8:	c903      	ldmia	r1, {r0, r1}
 801f4ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f4ee:	2100      	movs	r1, #0
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	f8ad 1000 	strh.w	r1, [sp]
 801f4f6:	f8ad 1002 	strh.w	r1, [sp, #2]
 801f4fa:	6819      	ldr	r1, [r3, #0]
 801f4fc:	690c      	ldr	r4, [r1, #16]
 801f4fe:	4669      	mov	r1, sp
 801f500:	47a0      	blx	r4
 801f502:	b002      	add	sp, #8
 801f504:	bd10      	pop	{r4, pc}

0801f506 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f506:	b538      	push	{r3, r4, r5, lr}
 801f508:	680b      	ldr	r3, [r1, #0]
 801f50a:	460c      	mov	r4, r1
 801f50c:	4605      	mov	r5, r0
 801f50e:	68db      	ldr	r3, [r3, #12]
 801f510:	4798      	blx	r3
 801f512:	6823      	ldr	r3, [r4, #0]
 801f514:	4620      	mov	r0, r4
 801f516:	4629      	mov	r1, r5
 801f518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f51a:	4798      	blx	r3
 801f51c:	4628      	mov	r0, r5
 801f51e:	bd38      	pop	{r3, r4, r5, pc}

0801f520 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f520:	b410      	push	{r4}
 801f522:	880a      	ldrh	r2, [r1, #0]
 801f524:	8884      	ldrh	r4, [r0, #4]
 801f526:	4422      	add	r2, r4
 801f528:	800a      	strh	r2, [r1, #0]
 801f52a:	884a      	ldrh	r2, [r1, #2]
 801f52c:	88c4      	ldrh	r4, [r0, #6]
 801f52e:	4422      	add	r2, r4
 801f530:	804a      	strh	r2, [r1, #2]
 801f532:	6940      	ldr	r0, [r0, #20]
 801f534:	b120      	cbz	r0, 801f540 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f536:	6803      	ldr	r3, [r0, #0]
 801f538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f53e:	4718      	bx	r3
 801f540:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f544:	4770      	bx	lr

0801f546 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f546:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f548:	460b      	mov	r3, r1
 801f54a:	b085      	sub	sp, #20
 801f54c:	4604      	mov	r4, r0
 801f54e:	b901      	cbnz	r1, 801f552 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f550:	b1f2      	cbz	r2, 801f590 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801f552:	1d27      	adds	r7, r4, #4
 801f554:	ad02      	add	r5, sp, #8
 801f556:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f55a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f55e:	88e1      	ldrh	r1, [r4, #6]
 801f560:	4620      	mov	r0, r4
 801f562:	440a      	add	r2, r1
 801f564:	88a1      	ldrh	r1, [r4, #4]
 801f566:	4419      	add	r1, r3
 801f568:	6823      	ldr	r3, [r4, #0]
 801f56a:	b212      	sxth	r2, r2
 801f56c:	b209      	sxth	r1, r1
 801f56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f570:	4798      	blx	r3
 801f572:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f576:	e885 0003 	stmia.w	r5, {r0, r1}
 801f57a:	6960      	ldr	r0, [r4, #20]
 801f57c:	b150      	cbz	r0, 801f594 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801f57e:	6803      	ldr	r3, [r0, #0]
 801f580:	4669      	mov	r1, sp
 801f582:	691b      	ldr	r3, [r3, #16]
 801f584:	4798      	blx	r3
 801f586:	6960      	ldr	r0, [r4, #20]
 801f588:	6803      	ldr	r3, [r0, #0]
 801f58a:	691b      	ldr	r3, [r3, #16]
 801f58c:	4629      	mov	r1, r5
 801f58e:	4798      	blx	r3
 801f590:	b005      	add	sp, #20
 801f592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f594:	f7ff fc00 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801f598:	6803      	ldr	r3, [r0, #0]
 801f59a:	4669      	mov	r1, sp
 801f59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f59e:	4798      	blx	r3
 801f5a0:	f7ff fbfa 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801f5a4:	6803      	ldr	r3, [r0, #0]
 801f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5a8:	e7f0      	b.n	801f58c <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801f5aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f5aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f5ac:	8882      	ldrh	r2, [r0, #4]
 801f5ae:	4605      	mov	r5, r0
 801f5b0:	880b      	ldrh	r3, [r1, #0]
 801f5b2:	460c      	mov	r4, r1
 801f5b4:	4413      	add	r3, r2
 801f5b6:	800b      	strh	r3, [r1, #0]
 801f5b8:	884b      	ldrh	r3, [r1, #2]
 801f5ba:	88c2      	ldrh	r2, [r0, #6]
 801f5bc:	4413      	add	r3, r2
 801f5be:	4602      	mov	r2, r0
 801f5c0:	804b      	strh	r3, [r1, #2]
 801f5c2:	466b      	mov	r3, sp
 801f5c4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801f5c8:	6851      	ldr	r1, [r2, #4]
 801f5ca:	c303      	stmia	r3!, {r0, r1}
 801f5cc:	4621      	mov	r1, r4
 801f5ce:	4668      	mov	r0, sp
 801f5d0:	f7f2 fa6a 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801f5d4:	466b      	mov	r3, sp
 801f5d6:	cb03      	ldmia	r3!, {r0, r1}
 801f5d8:	6020      	str	r0, [r4, #0]
 801f5da:	6061      	str	r1, [r4, #4]
 801f5dc:	6968      	ldr	r0, [r5, #20]
 801f5de:	b128      	cbz	r0, 801f5ec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801f5e0:	6803      	ldr	r3, [r0, #0]
 801f5e2:	691b      	ldr	r3, [r3, #16]
 801f5e4:	4621      	mov	r1, r4
 801f5e6:	4798      	blx	r3
 801f5e8:	b003      	add	sp, #12
 801f5ea:	bd30      	pop	{r4, r5, pc}
 801f5ec:	f7ff fbd4 	bl	801ed98 <_ZN8touchgfx11Application11getInstanceEv>
 801f5f0:	6803      	ldr	r3, [r0, #0]
 801f5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5f4:	e7f6      	b.n	801f5e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801f5f6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f5f6:	b570      	push	{r4, r5, r6, lr}
 801f5f8:	8882      	ldrh	r2, [r0, #4]
 801f5fa:	460c      	mov	r4, r1
 801f5fc:	880b      	ldrh	r3, [r1, #0]
 801f5fe:	4605      	mov	r5, r0
 801f600:	4413      	add	r3, r2
 801f602:	800b      	strh	r3, [r1, #0]
 801f604:	884b      	ldrh	r3, [r1, #2]
 801f606:	88c2      	ldrh	r2, [r0, #6]
 801f608:	4413      	add	r3, r2
 801f60a:	804b      	strh	r3, [r1, #2]
 801f60c:	1d01      	adds	r1, r0, #4
 801f60e:	4620      	mov	r0, r4
 801f610:	f7f2 fa4a 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801f614:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f618:	b163      	cbz	r3, 801f634 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f61a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f61e:	b933      	cbnz	r3, 801f62e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801f620:	bd70      	pop	{r4, r5, r6, pc}
 801f622:	6803      	ldr	r3, [r0, #0]
 801f624:	4621      	mov	r1, r4
 801f626:	6a1b      	ldr	r3, [r3, #32]
 801f628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f62c:	4718      	bx	r3
 801f62e:	6968      	ldr	r0, [r5, #20]
 801f630:	2800      	cmp	r0, #0
 801f632:	d1f6      	bne.n	801f622 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801f634:	bd70      	pop	{r4, r5, r6, pc}

0801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f636:	b510      	push	{r4, lr}
 801f638:	2300      	movs	r3, #0
 801f63a:	4604      	mov	r4, r0
 801f63c:	4608      	mov	r0, r1
 801f63e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f642:	8023      	strh	r3, [r4, #0]
 801f644:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f648:	8063      	strh	r3, [r4, #2]
 801f64a:	6803      	ldr	r3, [r0, #0]
 801f64c:	80a1      	strh	r1, [r4, #4]
 801f64e:	4621      	mov	r1, r4
 801f650:	80e2      	strh	r2, [r4, #6]
 801f652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f654:	4798      	blx	r3
 801f656:	4620      	mov	r0, r4
 801f658:	bd10      	pop	{r4, pc}
	...

0801f65c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801f65c:	b510      	push	{r4, lr}
 801f65e:	8083      	strh	r3, [r0, #4]
 801f660:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801f664:	6101      	str	r1, [r0, #16]
 801f666:	7183      	strb	r3, [r0, #6]
 801f668:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f66c:	8282      	strh	r2, [r0, #20]
 801f66e:	71c3      	strb	r3, [r0, #7]
 801f670:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f674:	7203      	strb	r3, [r0, #8]
 801f676:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f67a:	7243      	strb	r3, [r0, #9]
 801f67c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f680:	8143      	strh	r3, [r0, #10]
 801f682:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f686:	8183      	strh	r3, [r0, #12]
 801f688:	4b01      	ldr	r3, [pc, #4]	; (801f690 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801f68a:	6003      	str	r3, [r0, #0]
 801f68c:	bd10      	pop	{r4, pc}
 801f68e:	bf00      	nop
 801f690:	08026130 	.word	0x08026130

0801f694 <_ZNK8touchgfx9ConstFont4findEt>:
 801f694:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f696:	8a84      	ldrh	r4, [r0, #20]
 801f698:	2500      	movs	r5, #0
 801f69a:	260e      	movs	r6, #14
 801f69c:	3c01      	subs	r4, #1
 801f69e:	42a5      	cmp	r5, r4
 801f6a0:	dc0c      	bgt.n	801f6bc <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801f6a2:	192a      	adds	r2, r5, r4
 801f6a4:	6903      	ldr	r3, [r0, #16]
 801f6a6:	1052      	asrs	r2, r2, #1
 801f6a8:	fb06 3302 	mla	r3, r6, r2, r3
 801f6ac:	889f      	ldrh	r7, [r3, #4]
 801f6ae:	42b9      	cmp	r1, r7
 801f6b0:	da01      	bge.n	801f6b6 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801f6b2:	1e54      	subs	r4, r2, #1
 801f6b4:	e7f3      	b.n	801f69e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f6b6:	dd02      	ble.n	801f6be <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801f6b8:	1c55      	adds	r5, r2, #1
 801f6ba:	e7f0      	b.n	801f69e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f6bc:	2300      	movs	r3, #0
 801f6be:	4618      	mov	r0, r3
 801f6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f6c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6c4:	4605      	mov	r5, r0
 801f6c6:	4617      	mov	r7, r2
 801f6c8:	461e      	mov	r6, r3
 801f6ca:	f7ff ffe3 	bl	801f694 <_ZNK8touchgfx9ConstFont4findEt>
 801f6ce:	b9e0      	cbnz	r0, 801f70a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801f6d0:	b911      	cbnz	r1, 801f6d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801f6d2:	2400      	movs	r4, #0
 801f6d4:	4620      	mov	r0, r4
 801f6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6d8:	290a      	cmp	r1, #10
 801f6da:	d0fa      	beq.n	801f6d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f6dc:	682b      	ldr	r3, [r5, #0]
 801f6de:	4628      	mov	r0, r5
 801f6e0:	691b      	ldr	r3, [r3, #16]
 801f6e2:	4798      	blx	r3
 801f6e4:	4601      	mov	r1, r0
 801f6e6:	4628      	mov	r0, r5
 801f6e8:	f7ff ffd4 	bl	801f694 <_ZNK8touchgfx9ConstFont4findEt>
 801f6ec:	4604      	mov	r4, r0
 801f6ee:	2800      	cmp	r0, #0
 801f6f0:	d0ef      	beq.n	801f6d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f6f2:	682b      	ldr	r3, [r5, #0]
 801f6f4:	4621      	mov	r1, r4
 801f6f6:	4628      	mov	r0, r5
 801f6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6fa:	4798      	blx	r3
 801f6fc:	6038      	str	r0, [r7, #0]
 801f6fe:	682b      	ldr	r3, [r5, #0]
 801f700:	4628      	mov	r0, r5
 801f702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f704:	4798      	blx	r3
 801f706:	7030      	strb	r0, [r6, #0]
 801f708:	e7e4      	b.n	801f6d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801f70a:	4604      	mov	r4, r0
 801f70c:	e7f1      	b.n	801f6f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801f70e <_ZN8touchgfx6memsetEPvhm>:
 801f70e:	4402      	add	r2, r0
 801f710:	4290      	cmp	r0, r2
 801f712:	d002      	beq.n	801f71a <_ZN8touchgfx6memsetEPvhm+0xc>
 801f714:	f800 1b01 	strb.w	r1, [r0], #1
 801f718:	e7fa      	b.n	801f710 <_ZN8touchgfx6memsetEPvhm+0x2>
 801f71a:	4770      	bx	lr

0801f71c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801f71c:	2002      	movs	r0, #2
 801f71e:	4770      	bx	lr

0801f720 <_ZN8touchgfx12GestureEventD1Ev>:
 801f720:	4770      	bx	lr

0801f722 <_ZN8touchgfx12GestureEventD0Ev>:
 801f722:	b510      	push	{r4, lr}
 801f724:	4604      	mov	r4, r0
 801f726:	210c      	movs	r1, #12
 801f728:	f003 f915 	bl	8022956 <_ZdlPvj>
 801f72c:	4620      	mov	r0, r4
 801f72e:	bd10      	pop	{r4, pc}

0801f730 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f730:	b530      	push	{r4, r5, lr}
 801f732:	460d      	mov	r5, r1
 801f734:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f736:	b087      	sub	sp, #28
 801f738:	4604      	mov	r4, r0
 801f73a:	b301      	cbz	r1, 801f77e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f73c:	a801      	add	r0, sp, #4
 801f73e:	f7ff ff7a 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f742:	892a      	ldrh	r2, [r5, #8]
 801f744:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f748:	7928      	ldrb	r0, [r5, #4]
 801f74a:	1ad2      	subs	r2, r2, r3
 801f74c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f74e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f752:	441a      	add	r2, r3
 801f754:	896b      	ldrh	r3, [r5, #10]
 801f756:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f75a:	f88d 0010 	strb.w	r0, [sp, #16]
 801f75e:	1b5b      	subs	r3, r3, r5
 801f760:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f762:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f764:	442b      	add	r3, r5
 801f766:	4d07      	ldr	r5, [pc, #28]	; (801f784 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f768:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f76c:	a903      	add	r1, sp, #12
 801f76e:	9503      	str	r5, [sp, #12]
 801f770:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f774:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f778:	6803      	ldr	r3, [r0, #0]
 801f77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f77c:	4798      	blx	r3
 801f77e:	b007      	add	sp, #28
 801f780:	bd30      	pop	{r4, r5, pc}
 801f782:	bf00      	nop
 801f784:	0802617c 	.word	0x0802617c

0801f788 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f78a:	460c      	mov	r4, r1
 801f78c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f78e:	b089      	sub	sp, #36	; 0x24
 801f790:	4605      	mov	r5, r0
 801f792:	2900      	cmp	r1, #0
 801f794:	d053      	beq.n	801f83e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801f796:	4668      	mov	r0, sp
 801f798:	f7ff ff4d 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f79c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801f79e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801f7a0:	4668      	mov	r0, sp
 801f7a2:	8922      	ldrh	r2, [r4, #8]
 801f7a4:	88e1      	ldrh	r1, [r4, #6]
 801f7a6:	443a      	add	r2, r7
 801f7a8:	4431      	add	r1, r6
 801f7aa:	b212      	sxth	r2, r2
 801f7ac:	b209      	sxth	r1, r1
 801f7ae:	f7f2 f905 	bl	80119bc <_ZNK8touchgfx4Rect9intersectEss>
 801f7b2:	b1c8      	cbz	r0, 801f7e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f7b4:	89a2      	ldrh	r2, [r4, #12]
 801f7b6:	4668      	mov	r0, sp
 801f7b8:	8961      	ldrh	r1, [r4, #10]
 801f7ba:	443a      	add	r2, r7
 801f7bc:	4431      	add	r1, r6
 801f7be:	b212      	sxth	r2, r2
 801f7c0:	b209      	sxth	r1, r1
 801f7c2:	f7f2 f8fb 	bl	80119bc <_ZNK8touchgfx4Rect9intersectEss>
 801f7c6:	b978      	cbnz	r0, 801f7e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f7c8:	4b1e      	ldr	r3, [pc, #120]	; (801f844 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801f7ca:	a904      	add	r1, sp, #16
 801f7cc:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f7d0:	9304      	str	r3, [sp, #16]
 801f7d2:	2302      	movs	r3, #2
 801f7d4:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f7d8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f7dc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f7de:	f88d 3014 	strb.w	r3, [sp, #20]
 801f7e2:	6803      	ldr	r3, [r0, #0]
 801f7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7e6:	4798      	blx	r3
 801f7e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801f7ea:	a802      	add	r0, sp, #8
 801f7ec:	f7ff ff23 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f7f0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f7f4:	88e0      	ldrh	r0, [r4, #6]
 801f7f6:	8961      	ldrh	r1, [r4, #10]
 801f7f8:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801f7fc:	1a80      	subs	r0, r0, r2
 801f7fe:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801f802:	1a89      	subs	r1, r1, r2
 801f804:	8923      	ldrh	r3, [r4, #8]
 801f806:	4470      	add	r0, lr
 801f808:	89a2      	ldrh	r2, [r4, #12]
 801f80a:	4471      	add	r1, lr
 801f80c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f80e:	eba3 030c 	sub.w	r3, r3, ip
 801f812:	eba2 020c 	sub.w	r2, r2, ip
 801f816:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f81a:	7927      	ldrb	r7, [r4, #4]
 801f81c:	4433      	add	r3, r6
 801f81e:	4432      	add	r2, r6
 801f820:	4c09      	ldr	r4, [pc, #36]	; (801f848 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801f822:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f824:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f828:	a904      	add	r1, sp, #16
 801f82a:	9404      	str	r4, [sp, #16]
 801f82c:	f88d 7014 	strb.w	r7, [sp, #20]
 801f830:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f834:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f838:	6803      	ldr	r3, [r0, #0]
 801f83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f83c:	4798      	blx	r3
 801f83e:	b009      	add	sp, #36	; 0x24
 801f840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f842:	bf00      	nop
 801f844:	080247f4 	.word	0x080247f4
 801f848:	080247e0 	.word	0x080247e0

0801f84c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f850:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801f852:	b0a1      	sub	sp, #132	; 0x84
 801f854:	4604      	mov	r4, r0
 801f856:	460d      	mov	r5, r1
 801f858:	790b      	ldrb	r3, [r1, #4]
 801f85a:	b16a      	cbz	r2, 801f878 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f85c:	b963      	cbnz	r3, 801f878 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f85e:	b021      	add	sp, #132	; 0x84
 801f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f864:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f868:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f86c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f870:	1d20      	adds	r0, r4, #4
 801f872:	f7f2 fcf7 	bl	8012264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f876:	e0a2      	b.n	801f9be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f878:	2b00      	cmp	r3, #0
 801f87a:	f040 80a0 	bne.w	801f9be <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f87e:	4a66      	ldr	r2, [pc, #408]	; (801fa18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801f880:	6812      	ldr	r2, [r2, #0]
 801f882:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801f886:	86a3      	strh	r3, [r4, #52]	; 0x34
 801f888:	f1bb 0f03 	cmp.w	fp, #3
 801f88c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801f88e:	dde9      	ble.n	801f864 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801f890:	f1bb 0f0c 	cmp.w	fp, #12
 801f894:	6323      	str	r3, [r4, #48]	; 0x30
 801f896:	f04f 0303 	mov.w	r3, #3
 801f89a:	f04f 0600 	mov.w	r6, #0
 801f89e:	bfd8      	it	le
 801f8a0:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801f8a4:	495d      	ldr	r1, [pc, #372]	; (801fa1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801f8a6:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801f8aa:	f04f 0a01 	mov.w	sl, #1
 801f8ae:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801f8b2:	bfd8      	it	le
 801f8b4:	fb92 f3f3 	sdivle	r3, r2, r3
 801f8b8:	9300      	str	r3, [sp, #0]
 801f8ba:	4b59      	ldr	r3, [pc, #356]	; (801fa20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801f8bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f8c0:	4b58      	ldr	r3, [pc, #352]	; (801fa24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801f8c2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f8c6:	2248      	movs	r2, #72	; 0x48
 801f8c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f8cc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f8d0:	ab0e      	add	r3, sp, #56	; 0x38
 801f8d2:	4618      	mov	r0, r3
 801f8d4:	f003 f8e6 	bl	8022aa4 <memcpy>
 801f8d8:	f04f 32ff 	mov.w	r2, #4294967295
 801f8dc:	f8cd b008 	str.w	fp, [sp, #8]
 801f8e0:	9206      	str	r2, [sp, #24]
 801f8e2:	9007      	str	r0, [sp, #28]
 801f8e4:	9a00      	ldr	r2, [sp, #0]
 801f8e6:	9b02      	ldr	r3, [sp, #8]
 801f8e8:	fb93 f3f2 	sdiv	r3, r3, r2
 801f8ec:	f10a 32ff 	add.w	r2, sl, #4294967295
 801f8f0:	b29b      	uxth	r3, r3
 801f8f2:	9201      	str	r2, [sp, #4]
 801f8f4:	9a07      	ldr	r2, [sp, #28]
 801f8f6:	9303      	str	r3, [sp, #12]
 801f8f8:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801f8fc:	3f04      	subs	r7, #4
 801f8fe:	2300      	movs	r3, #0
 801f900:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f904:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801f908:	a80a      	add	r0, sp, #40	; 0x28
 801f90a:	9309      	str	r3, [sp, #36]	; 0x24
 801f90c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801f910:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801f914:	fb13 f302 	smulbb	r3, r3, r2
 801f918:	b29b      	uxth	r3, r3
 801f91a:	9304      	str	r3, [sp, #16]
 801f91c:	683b      	ldr	r3, [r7, #0]
 801f91e:	fb13 f302 	smulbb	r3, r3, r2
 801f922:	b29b      	uxth	r3, r3
 801f924:	9305      	str	r3, [sp, #20]
 801f926:	9b04      	ldr	r3, [sp, #16]
 801f928:	4498      	add	r8, r3
 801f92a:	9b05      	ldr	r3, [sp, #20]
 801f92c:	4499      	add	r9, r3
 801f92e:	fa0f f888 	sxth.w	r8, r8
 801f932:	fa0f f989 	sxth.w	r9, r9
 801f936:	4641      	mov	r1, r8
 801f938:	464a      	mov	r2, r9
 801f93a:	f7f2 f83f 	bl	80119bc <_ZNK8touchgfx4Rect9intersectEss>
 801f93e:	b380      	cbz	r0, 801f9a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f940:	4641      	mov	r1, r8
 801f942:	ab09      	add	r3, sp, #36	; 0x24
 801f944:	464a      	mov	r2, r9
 801f946:	1d20      	adds	r0, r4, #4
 801f948:	f7f2 fc8c 	bl	8012264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f94c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f94e:	b341      	cbz	r1, 801f9a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f950:	42b1      	cmp	r1, r6
 801f952:	d026      	beq.n	801f9a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f954:	a80c      	add	r0, sp, #48	; 0x30
 801f956:	f7ff fe6e 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f95a:	2002      	movs	r0, #2
 801f95c:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f960:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f964:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f968:	fb92 f2f0 	sdiv	r2, r2, r0
 801f96c:	440a      	add	r2, r1
 801f96e:	1a99      	subs	r1, r3, r2
 801f970:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f974:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f978:	fb93 f3f0 	sdiv	r3, r3, r0
 801f97c:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801f980:	4403      	add	r3, r0
 801f982:	1ad3      	subs	r3, r2, r3
 801f984:	9a06      	ldr	r2, [sp, #24]
 801f986:	435b      	muls	r3, r3
 801f988:	fb01 3301 	mla	r3, r1, r1, r3
 801f98c:	4293      	cmp	r3, r2
 801f98e:	d208      	bcs.n	801f9a2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f990:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f994:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f996:	86a2      	strh	r2, [r4, #52]	; 0x34
 801f998:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f99c:	6326      	str	r6, [r4, #48]	; 0x30
 801f99e:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f9a0:	9306      	str	r3, [sp, #24]
 801f9a2:	9b01      	ldr	r3, [sp, #4]
 801f9a4:	3710      	adds	r7, #16
 801f9a6:	3302      	adds	r3, #2
 801f9a8:	2b08      	cmp	r3, #8
 801f9aa:	9301      	str	r3, [sp, #4]
 801f9ac:	dda7      	ble.n	801f8fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801f9ae:	9b02      	ldr	r3, [sp, #8]
 801f9b0:	f10a 0a01 	add.w	sl, sl, #1
 801f9b4:	445b      	add	r3, fp
 801f9b6:	9302      	str	r3, [sp, #8]
 801f9b8:	9b00      	ldr	r3, [sp, #0]
 801f9ba:	4553      	cmp	r3, sl
 801f9bc:	da92      	bge.n	801f8e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801f9be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f9c0:	2900      	cmp	r1, #0
 801f9c2:	f43f af4c 	beq.w	801f85e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f9c6:	a80c      	add	r0, sp, #48	; 0x30
 801f9c8:	2600      	movs	r6, #0
 801f9ca:	f7ff fe34 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f9ce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f9d2:	88ea      	ldrh	r2, [r5, #6]
 801f9d4:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801f9d8:	1ad2      	subs	r2, r2, r3
 801f9da:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f9dc:	7929      	ldrb	r1, [r5, #4]
 801f9de:	441a      	add	r2, r3
 801f9e0:	892b      	ldrh	r3, [r5, #8]
 801f9e2:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801f9e6:	a90e      	add	r1, sp, #56	; 0x38
 801f9e8:	1a1b      	subs	r3, r3, r0
 801f9ea:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801f9ec:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801f9f0:	4403      	add	r3, r0
 801f9f2:	480d      	ldr	r0, [pc, #52]	; (801fa28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801f9f4:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801f9f8:	900e      	str	r0, [sp, #56]	; 0x38
 801f9fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f9fc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801fa00:	6803      	ldr	r3, [r0, #0]
 801fa02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa04:	4798      	blx	r3
 801fa06:	792b      	ldrb	r3, [r5, #4]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	f43f af28 	beq.w	801f85e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801fa0e:	6326      	str	r6, [r4, #48]	; 0x30
 801fa10:	86a6      	strh	r6, [r4, #52]	; 0x34
 801fa12:	86e6      	strh	r6, [r4, #54]	; 0x36
 801fa14:	e723      	b.n	801f85e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801fa16:	bf00      	nop
 801fa18:	2000a290 	.word	0x2000a290
 801fa1c:	08024614 	.word	0x08024614
 801fa20:	2000a282 	.word	0x2000a282
 801fa24:	2000a284 	.word	0x2000a284
 801fa28:	080247f4 	.word	0x080247f4

0801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801fa2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fa2e:	4604      	mov	r4, r0
 801fa30:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801fa34:	3201      	adds	r2, #1
 801fa36:	d114      	bne.n	801fa62 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801fa38:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801fa3c:	2200      	movs	r2, #0
 801fa3e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801fa42:	6803      	ldr	r3, [r0, #0]
 801fa44:	f8ad 1006 	strh.w	r1, [sp, #6]
 801fa48:	4669      	mov	r1, sp
 801fa4a:	f8ad 2000 	strh.w	r2, [sp]
 801fa4e:	f8ad 2002 	strh.w	r2, [sp, #2]
 801fa52:	f8ad 5004 	strh.w	r5, [sp, #4]
 801fa56:	6a1b      	ldr	r3, [r3, #32]
 801fa58:	4798      	blx	r3
 801fa5a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801fa5e:	e884 0003 	stmia.w	r4, {r0, r1}
 801fa62:	4620      	mov	r0, r4
 801fa64:	b003      	add	sp, #12
 801fa66:	bd30      	pop	{r4, r5, pc}

0801fa68 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801fa68:	b513      	push	{r0, r1, r4, lr}
 801fa6a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801fa6e:	4604      	mov	r4, r0
 801fa70:	3301      	adds	r3, #1
 801fa72:	d109      	bne.n	801fa88 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801fa74:	4601      	mov	r1, r0
 801fa76:	4668      	mov	r0, sp
 801fa78:	f7ff fddd 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fa7c:	f8bd 3000 	ldrh.w	r3, [sp]
 801fa80:	8423      	strh	r3, [r4, #32]
 801fa82:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fa86:	8463      	strh	r3, [r4, #34]	; 0x22
 801fa88:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801fa8c:	b002      	add	sp, #8
 801fa8e:	bd10      	pop	{r4, pc}

0801fa90 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801fa90:	b513      	push	{r0, r1, r4, lr}
 801fa92:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801fa96:	4604      	mov	r4, r0
 801fa98:	3301      	adds	r3, #1
 801fa9a:	d109      	bne.n	801fab0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801fa9c:	4601      	mov	r1, r0
 801fa9e:	4668      	mov	r0, sp
 801faa0:	f7ff fdc9 	bl	801f636 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801faa4:	f8bd 3000 	ldrh.w	r3, [sp]
 801faa8:	8423      	strh	r3, [r4, #32]
 801faaa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801faae:	8463      	strh	r3, [r4, #34]	; 0x22
 801fab0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801fab4:	b002      	add	sp, #8
 801fab6:	bd10      	pop	{r4, pc}

0801fab8 <_ZN8touchgfx6ScreenC1Ev>:
 801fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801faba:	4605      	mov	r5, r0
 801fabc:	4b18      	ldr	r3, [pc, #96]	; (801fb20 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801fabe:	2200      	movs	r2, #0
 801fac0:	4918      	ldr	r1, [pc, #96]	; (801fb24 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801fac2:	f845 3b04 	str.w	r3, [r5], #4
 801fac6:	2301      	movs	r3, #1
 801fac8:	8102      	strh	r2, [r0, #8]
 801faca:	4604      	mov	r4, r0
 801facc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801fad0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801fad4:	4b14      	ldr	r3, [pc, #80]	; (801fb28 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801fad6:	8142      	strh	r2, [r0, #10]
 801fad8:	f9b3 7000 	ldrsh.w	r7, [r3]
 801fadc:	4b13      	ldr	r3, [pc, #76]	; (801fb2c <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801fade:	8182      	strh	r2, [r0, #12]
 801fae0:	81c2      	strh	r2, [r0, #14]
 801fae2:	8202      	strh	r2, [r0, #16]
 801fae4:	8242      	strh	r2, [r0, #18]
 801fae6:	8282      	strh	r2, [r0, #20]
 801fae8:	82c2      	strh	r2, [r0, #22]
 801faea:	6182      	str	r2, [r0, #24]
 801faec:	61c2      	str	r2, [r0, #28]
 801faee:	6202      	str	r2, [r0, #32]
 801faf0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801faf4:	62c2      	str	r2, [r0, #44]	; 0x2c
 801faf6:	6302      	str	r2, [r0, #48]	; 0x30
 801faf8:	8682      	strh	r2, [r0, #52]	; 0x34
 801fafa:	86c2      	strh	r2, [r0, #54]	; 0x36
 801fafc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fb00:	6041      	str	r1, [r0, #4]
 801fb02:	4611      	mov	r1, r2
 801fb04:	4628      	mov	r0, r5
 801fb06:	f7f2 f980 	bl	8011e0a <_ZN8touchgfx8Drawable5setXYEss>
 801fb0a:	4639      	mov	r1, r7
 801fb0c:	4628      	mov	r0, r5
 801fb0e:	f7f2 f99a 	bl	8011e46 <_ZN8touchgfx8Drawable8setWidthEs>
 801fb12:	4628      	mov	r0, r5
 801fb14:	4631      	mov	r1, r6
 801fb16:	f7f2 f9a5 	bl	8011e64 <_ZN8touchgfx8Drawable9setHeightEs>
 801fb1a:	4620      	mov	r0, r4
 801fb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb1e:	bf00      	nop
 801fb20:	08026190 	.word	0x08026190
 801fb24:	080246a8 	.word	0x080246a8
 801fb28:	2000a282 	.word	0x2000a282
 801fb2c:	2000a284 	.word	0x2000a284

0801fb30 <_ZN8touchgfx6Screen4drawEv>:
 801fb30:	4b0b      	ldr	r3, [pc, #44]	; (801fb60 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801fb32:	b507      	push	{r0, r1, r2, lr}
 801fb34:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fb38:	4b0a      	ldr	r3, [pc, #40]	; (801fb64 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801fb3a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801fb3e:	4669      	mov	r1, sp
 801fb40:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fb44:	2300      	movs	r3, #0
 801fb46:	f8ad 3000 	strh.w	r3, [sp]
 801fb4a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801fb4e:	6803      	ldr	r3, [r0, #0]
 801fb50:	f8ad 2006 	strh.w	r2, [sp, #6]
 801fb54:	689b      	ldr	r3, [r3, #8]
 801fb56:	4798      	blx	r3
 801fb58:	b003      	add	sp, #12
 801fb5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb5e:	bf00      	nop
 801fb60:	2000a282 	.word	0x2000a282
 801fb64:	2000a284 	.word	0x2000a284

0801fb68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fb70:	b087      	sub	sp, #28
 801fb72:	4681      	mov	r9, r0
 801fb74:	460c      	mov	r4, r1
 801fb76:	4615      	mov	r5, r2
 801fb78:	b16b      	cbz	r3, 801fb96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fb7a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fb7e:	b153      	cbz	r3, 801fb96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fb80:	4628      	mov	r0, r5
 801fb82:	f7ff ff53 	bl	801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fb86:	4621      	mov	r1, r4
 801fb88:	f7f1 ff47 	bl	8011a1a <_ZNK8touchgfx4Rect9intersectERKS0_>
 801fb8c:	69eb      	ldr	r3, [r5, #28]
 801fb8e:	b928      	cbnz	r0, 801fb9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801fb90:	461d      	mov	r5, r3
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d1f4      	bne.n	801fb80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801fb96:	b007      	add	sp, #28
 801fb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb9c:	ae02      	add	r6, sp, #8
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	d04a      	beq.n	801fc38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801fba2:	682b      	ldr	r3, [r5, #0]
 801fba4:	4629      	mov	r1, r5
 801fba6:	4668      	mov	r0, sp
 801fba8:	68db      	ldr	r3, [r3, #12]
 801fbaa:	4798      	blx	r3
 801fbac:	4628      	mov	r0, r5
 801fbae:	f7ff ff5b 	bl	801fa68 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fbb2:	f8bd 7000 	ldrh.w	r7, [sp]
 801fbb6:	4407      	add	r7, r0
 801fbb8:	4628      	mov	r0, r5
 801fbba:	f7ff ff69 	bl	801fa90 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fbbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fbc2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801fbc6:	b23f      	sxth	r7, r7
 801fbc8:	4418      	add	r0, r3
 801fbca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fbce:	4621      	mov	r1, r4
 801fbd0:	f8ad 200c 	strh.w	r2, [sp, #12]
 801fbd4:	f8ad 000a 	strh.w	r0, [sp, #10]
 801fbd8:	4630      	mov	r0, r6
 801fbda:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fbde:	f8ad 7008 	strh.w	r7, [sp, #8]
 801fbe2:	f7f1 ff61 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801fbe6:	4628      	mov	r0, r5
 801fbe8:	f7ff ff20 	bl	801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fbec:	ab04      	add	r3, sp, #16
 801fbee:	4602      	mov	r2, r0
 801fbf0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801fbf4:	e883 0003 	stmia.w	r3, {r0, r1}
 801fbf8:	4611      	mov	r1, r2
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	f7f1 ff54 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801fc00:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801fc04:	f9b4 2000 	ldrsh.w	r2, [r4]
 801fc08:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801fc0c:	455a      	cmp	r2, fp
 801fc0e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801fc12:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801fc16:	f040 8096 	bne.w	801fd46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801fc1a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801fc1e:	4553      	cmp	r3, sl
 801fc20:	f040 8091 	bne.w	801fd46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801fc24:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801fc28:	4543      	cmp	r3, r8
 801fc2a:	f040 808c 	bne.w	801fd46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801fc2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801fc32:	42bb      	cmp	r3, r7
 801fc34:	f040 8087 	bne.w	801fd46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801fc38:	4628      	mov	r0, r5
 801fc3a:	f7ff fef7 	bl	801fa2c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fc3e:	6861      	ldr	r1, [r4, #4]
 801fc40:	4602      	mov	r2, r0
 801fc42:	4633      	mov	r3, r6
 801fc44:	6820      	ldr	r0, [r4, #0]
 801fc46:	c303      	stmia	r3!, {r0, r1}
 801fc48:	4611      	mov	r1, r2
 801fc4a:	4630      	mov	r0, r6
 801fc4c:	f7f1 ff2c 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801fc50:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d09e      	beq.n	801fb96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fc58:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d09a      	beq.n	801fb96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fc60:	4628      	mov	r0, r5
 801fc62:	f7ff ff01 	bl	801fa68 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fc66:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fc6a:	1a18      	subs	r0, r3, r0
 801fc6c:	f8ad 0008 	strh.w	r0, [sp, #8]
 801fc70:	4628      	mov	r0, r5
 801fc72:	f7ff ff0d 	bl	801fa90 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fc76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fc7a:	4631      	mov	r1, r6
 801fc7c:	1a18      	subs	r0, r3, r0
 801fc7e:	f8ad 000a 	strh.w	r0, [sp, #10]
 801fc82:	4628      	mov	r0, r5
 801fc84:	682b      	ldr	r3, [r5, #0]
 801fc86:	689b      	ldr	r3, [r3, #8]
 801fc88:	4798      	blx	r3
 801fc8a:	e784      	b.n	801fb96 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801fc8c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801fc90:	4553      	cmp	r3, sl
 801fc92:	da10      	bge.n	801fcb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801fc94:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fc98:	4648      	mov	r0, r9
 801fc9a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fc9e:	ebaa 0303 	sub.w	r3, sl, r3
 801fca2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801fca6:	4631      	mov	r1, r6
 801fca8:	f8ad 2008 	strh.w	r2, [sp, #8]
 801fcac:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fcb0:	69ea      	ldr	r2, [r5, #28]
 801fcb2:	f7ff ff59 	bl	801fb68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fcb6:	f9b4 3000 	ldrsh.w	r3, [r4]
 801fcba:	455b      	cmp	r3, fp
 801fcbc:	da0e      	bge.n	801fcdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801fcbe:	f8ad 3008 	strh.w	r3, [sp, #8]
 801fcc2:	ebab 0303 	sub.w	r3, fp, r3
 801fcc6:	f8ad a00a 	strh.w	sl, [sp, #10]
 801fcca:	4631      	mov	r1, r6
 801fccc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fcd0:	4648      	mov	r0, r9
 801fcd2:	f8ad 700e 	strh.w	r7, [sp, #14]
 801fcd6:	69ea      	ldr	r2, [r5, #28]
 801fcd8:	f7ff ff46 	bl	801fb68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fcdc:	8822      	ldrh	r2, [r4, #0]
 801fcde:	44d8      	add	r8, fp
 801fce0:	88a3      	ldrh	r3, [r4, #4]
 801fce2:	fa1f f888 	uxth.w	r8, r8
 801fce6:	4413      	add	r3, r2
 801fce8:	fa0f f288 	sxth.w	r2, r8
 801fcec:	b29b      	uxth	r3, r3
 801fcee:	b219      	sxth	r1, r3
 801fcf0:	4291      	cmp	r1, r2
 801fcf2:	dd0e      	ble.n	801fd12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fcf4:	eba3 0308 	sub.w	r3, r3, r8
 801fcf8:	f8ad 2008 	strh.w	r2, [sp, #8]
 801fcfc:	f8ad a00a 	strh.w	sl, [sp, #10]
 801fd00:	4631      	mov	r1, r6
 801fd02:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fd06:	4648      	mov	r0, r9
 801fd08:	f8ad 700e 	strh.w	r7, [sp, #14]
 801fd0c:	69ea      	ldr	r2, [r5, #28]
 801fd0e:	f7ff ff2b 	bl	801fb68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fd12:	88e2      	ldrh	r2, [r4, #6]
 801fd14:	4457      	add	r7, sl
 801fd16:	8863      	ldrh	r3, [r4, #2]
 801fd18:	b2bf      	uxth	r7, r7
 801fd1a:	4413      	add	r3, r2
 801fd1c:	b23a      	sxth	r2, r7
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	b219      	sxth	r1, r3
 801fd22:	428a      	cmp	r2, r1
 801fd24:	da88      	bge.n	801fc38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801fd26:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fd2a:	1bdb      	subs	r3, r3, r7
 801fd2c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801fd30:	f8ad 100c 	strh.w	r1, [sp, #12]
 801fd34:	4631      	mov	r1, r6
 801fd36:	f8ad 0008 	strh.w	r0, [sp, #8]
 801fd3a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801fd3e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fd42:	69ea      	ldr	r2, [r5, #28]
 801fd44:	e006      	b.n	801fd54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801fd46:	f1b8 0f00 	cmp.w	r8, #0
 801fd4a:	d001      	beq.n	801fd50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801fd4c:	2f00      	cmp	r7, #0
 801fd4e:	d19d      	bne.n	801fc8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801fd50:	69ea      	ldr	r2, [r5, #28]
 801fd52:	4621      	mov	r1, r4
 801fd54:	4648      	mov	r0, r9
 801fd56:	f7ff ff07 	bl	801fb68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fd5a:	e76d      	b.n	801fc38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801fd5c <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801fd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd5e:	2300      	movs	r3, #0
 801fd60:	aa02      	add	r2, sp, #8
 801fd62:	4604      	mov	r4, r0
 801fd64:	3004      	adds	r0, #4
 801fd66:	f842 3d04 	str.w	r3, [r2, #-4]!
 801fd6a:	460d      	mov	r5, r1
 801fd6c:	f7f2 fb7b 	bl	8012466 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801fd70:	9a01      	ldr	r2, [sp, #4]
 801fd72:	b11a      	cbz	r2, 801fd7c <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801fd74:	4629      	mov	r1, r5
 801fd76:	4620      	mov	r0, r4
 801fd78:	f7ff fef6 	bl	801fb68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fd7c:	b003      	add	sp, #12
 801fd7e:	bd30      	pop	{r4, r5, pc}

0801fd80 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801fd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fd82:	4602      	mov	r2, r0
 801fd84:	4604      	mov	r4, r0
 801fd86:	460d      	mov	r5, r1
 801fd88:	466b      	mov	r3, sp
 801fd8a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801fd8e:	6851      	ldr	r1, [r2, #4]
 801fd90:	c303      	stmia	r3!, {r0, r1}
 801fd92:	4629      	mov	r1, r5
 801fd94:	4668      	mov	r0, sp
 801fd96:	f7f1 fe87 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 801fd9a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801fd9e:	4669      	mov	r1, sp
 801fda0:	b123      	cbz	r3, 801fdac <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801fda2:	4620      	mov	r0, r4
 801fda4:	f7ff ffda 	bl	801fd5c <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801fda8:	b003      	add	sp, #12
 801fdaa:	bd30      	pop	{r4, r5, pc}
 801fdac:	1d20      	adds	r0, r4, #4
 801fdae:	f7f2 f9ee 	bl	801218e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801fdb2:	e7f9      	b.n	801fda8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801fdb4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801fdb4:	460b      	mov	r3, r1
 801fdb6:	680a      	ldr	r2, [r1, #0]
 801fdb8:	1d01      	adds	r1, r0, #4
 801fdba:	6952      	ldr	r2, [r2, #20]
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	4710      	bx	r2

0801fdc0 <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801fdc0:	680b      	ldr	r3, [r1, #0]
 801fdc2:	6980      	ldr	r0, [r0, #24]
 801fdc4:	4418      	add	r0, r3
 801fdc6:	4770      	bx	lr

0801fdc8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801fdc8:	b530      	push	{r4, r5, lr}
 801fdca:	b19a      	cbz	r2, 801fdf4 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fdcc:	7b13      	ldrb	r3, [r2, #12]
 801fdce:	b18b      	cbz	r3, 801fdf4 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fdd0:	7ad2      	ldrb	r2, [r2, #11]
 801fdd2:	b294      	uxth	r4, r2
 801fdd4:	4413      	add	r3, r2
 801fdd6:	429c      	cmp	r4, r3
 801fdd8:	da0c      	bge.n	801fdf4 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fdda:	69c2      	ldr	r2, [r0, #28]
 801fddc:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801fde0:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801fde4:	428a      	cmp	r2, r1
 801fde6:	d102      	bne.n	801fdee <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801fde8:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801fdec:	bd30      	pop	{r4, r5, pc}
 801fdee:	3401      	adds	r4, #1
 801fdf0:	b2a4      	uxth	r4, r4
 801fdf2:	e7f0      	b.n	801fdd6 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801fdf4:	2000      	movs	r0, #0
 801fdf6:	bd30      	pop	{r4, r5, pc}

0801fdf8 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801fdf8:	b530      	push	{r4, r5, lr}
 801fdfa:	b087      	sub	sp, #28
 801fdfc:	4604      	mov	r4, r0
 801fdfe:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801fe02:	9505      	str	r5, [sp, #20]
 801fe04:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801fe08:	9504      	str	r5, [sp, #16]
 801fe0a:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801fe0e:	9503      	str	r5, [sp, #12]
 801fe10:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801fe14:	9502      	str	r5, [sp, #8]
 801fe16:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801fe1a:	9501      	str	r5, [sp, #4]
 801fe1c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801fe20:	9500      	str	r5, [sp, #0]
 801fe22:	f7ff fc1b 	bl	801f65c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801fe26:	4b04      	ldr	r3, [pc, #16]	; (801fe38 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801fe28:	4620      	mov	r0, r4
 801fe2a:	6023      	str	r3, [r4, #0]
 801fe2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe2e:	61a3      	str	r3, [r4, #24]
 801fe30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe32:	61e3      	str	r3, [r4, #28]
 801fe34:	b007      	add	sp, #28
 801fe36:	bd30      	pop	{r4, r5, pc}
 801fe38:	080261c4 	.word	0x080261c4

0801fe3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fe3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe3e:	4604      	mov	r4, r0
 801fe40:	4d1b      	ldr	r5, [pc, #108]	; (801feb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801fe42:	2700      	movs	r7, #0
 801fe44:	2601      	movs	r6, #1
 801fe46:	6863      	ldr	r3, [r4, #4]
 801fe48:	b93b      	cbnz	r3, 801fe5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801fe4a:	6821      	ldr	r1, [r4, #0]
 801fe4c:	2900      	cmp	r1, #0
 801fe4e:	d02c      	beq.n	801feaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801fe50:	6828      	ldr	r0, [r5, #0]
 801fe52:	6803      	ldr	r3, [r0, #0]
 801fe54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fe56:	4798      	blx	r3
 801fe58:	6060      	str	r0, [r4, #4]
 801fe5a:	7c23      	ldrb	r3, [r4, #16]
 801fe5c:	b16b      	cbz	r3, 801fe7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801fe5e:	68e3      	ldr	r3, [r4, #12]
 801fe60:	b12b      	cbz	r3, 801fe6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801fe62:	881a      	ldrh	r2, [r3, #0]
 801fe64:	b11a      	cbz	r2, 801fe6e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801fe66:	1c9a      	adds	r2, r3, #2
 801fe68:	60e2      	str	r2, [r4, #12]
 801fe6a:	8818      	ldrh	r0, [r3, #0]
 801fe6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe6e:	6828      	ldr	r0, [r5, #0]
 801fe70:	7427      	strb	r7, [r4, #16]
 801fe72:	6803      	ldr	r3, [r0, #0]
 801fe74:	6821      	ldr	r1, [r4, #0]
 801fe76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fe78:	4798      	blx	r3
 801fe7a:	6863      	ldr	r3, [r4, #4]
 801fe7c:	881a      	ldrh	r2, [r3, #0]
 801fe7e:	b1a2      	cbz	r2, 801feaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801fe80:	2a02      	cmp	r2, #2
 801fe82:	f103 0202 	add.w	r2, r3, #2
 801fe86:	6062      	str	r2, [r4, #4]
 801fe88:	d1ef      	bne.n	801fe6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801fe8a:	6828      	ldr	r0, [r5, #0]
 801fe8c:	6803      	ldr	r3, [r0, #0]
 801fe8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fe90:	68a3      	ldr	r3, [r4, #8]
 801fe92:	1d19      	adds	r1, r3, #4
 801fe94:	60a1      	str	r1, [r4, #8]
 801fe96:	6819      	ldr	r1, [r3, #0]
 801fe98:	4790      	blx	r2
 801fe9a:	60e0      	str	r0, [r4, #12]
 801fe9c:	2800      	cmp	r0, #0
 801fe9e:	d0d2      	beq.n	801fe46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fea0:	8803      	ldrh	r3, [r0, #0]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d0cf      	beq.n	801fe46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fea6:	7426      	strb	r6, [r4, #16]
 801fea8:	e7cd      	b.n	801fe46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801feaa:	2000      	movs	r0, #0
 801feac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801feae:	bf00      	nop
 801feb0:	2000a290 	.word	0x2000a290

0801feb4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801feb4:	b538      	push	{r3, r4, r5, lr}
 801feb6:	8a83      	ldrh	r3, [r0, #20]
 801feb8:	4604      	mov	r4, r0
 801feba:	8a45      	ldrh	r5, [r0, #18]
 801febc:	8243      	strh	r3, [r0, #18]
 801febe:	f7ff ffbd 	bl	801fe3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fec2:	82a0      	strh	r0, [r4, #20]
 801fec4:	4628      	mov	r0, r5
 801fec6:	bd38      	pop	{r3, r4, r5, pc}

0801fec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801fec8:	b570      	push	{r4, r5, r6, lr}
 801feca:	460e      	mov	r6, r1
 801fecc:	4605      	mov	r5, r0
 801fece:	f7ff fff1 	bl	801feb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801fed2:	4a0d      	ldr	r2, [pc, #52]	; (801ff08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801fed4:	4601      	mov	r1, r0
 801fed6:	6814      	ldr	r4, [r2, #0]
 801fed8:	4613      	mov	r3, r2
 801feda:	b914      	cbnz	r4, 801fee2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801fedc:	6852      	ldr	r2, [r2, #4]
 801fede:	07d2      	lsls	r2, r2, #31
 801fee0:	d510      	bpl.n	801ff04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801fee2:	6858      	ldr	r0, [r3, #4]
 801fee4:	f105 0212 	add.w	r2, r5, #18
 801fee8:	f010 0f01 	tst.w	r0, #1
 801feec:	ea4f 0060 	mov.w	r0, r0, asr #1
 801fef0:	bf18      	it	ne
 801fef2:	582b      	ldrne	r3, [r5, r0]
 801fef4:	4428      	add	r0, r5
 801fef6:	bf18      	it	ne
 801fef8:	591c      	ldrne	r4, [r3, r4]
 801fefa:	4633      	mov	r3, r6
 801fefc:	46a4      	mov	ip, r4
 801fefe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ff02:	4760      	bx	ip
 801ff04:	bd70      	pop	{r4, r5, r6, pc}
 801ff06:	bf00      	nop
 801ff08:	20008f38 	.word	0x20008f38

0801ff0c <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801ff0c:	2300      	movs	r3, #0
 801ff0e:	b510      	push	{r4, lr}
 801ff10:	4604      	mov	r4, r0
 801ff12:	6043      	str	r3, [r0, #4]
 801ff14:	60c3      	str	r3, [r0, #12]
 801ff16:	7403      	strb	r3, [r0, #16]
 801ff18:	f7ff ff90 	bl	801fe3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ff1c:	8260      	strh	r0, [r4, #18]
 801ff1e:	4620      	mov	r0, r4
 801ff20:	f7ff ff8c 	bl	801fe3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ff24:	4a0a      	ldr	r2, [pc, #40]	; (801ff50 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801ff26:	82a0      	strh	r0, [r4, #20]
 801ff28:	6813      	ldr	r3, [r2, #0]
 801ff2a:	4611      	mov	r1, r2
 801ff2c:	b913      	cbnz	r3, 801ff34 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801ff2e:	6852      	ldr	r2, [r2, #4]
 801ff30:	07d2      	lsls	r2, r2, #31
 801ff32:	d50c      	bpl.n	801ff4e <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801ff34:	6848      	ldr	r0, [r1, #4]
 801ff36:	f010 0f01 	tst.w	r0, #1
 801ff3a:	ea4f 0060 	mov.w	r0, r0, asr #1
 801ff3e:	bf18      	it	ne
 801ff40:	5822      	ldrne	r2, [r4, r0]
 801ff42:	4420      	add	r0, r4
 801ff44:	bf18      	it	ne
 801ff46:	58d3      	ldrne	r3, [r2, r3]
 801ff48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff4c:	4718      	bx	r3
 801ff4e:	bd10      	pop	{r4, pc}
 801ff50:	20008f30 	.word	0x20008f30

0801ff54 <_ZN8touchgfx12TextProviderC1Ev>:
 801ff54:	2300      	movs	r3, #0
 801ff56:	b510      	push	{r4, lr}
 801ff58:	4604      	mov	r4, r0
 801ff5a:	6003      	str	r3, [r0, #0]
 801ff5c:	6043      	str	r3, [r0, #4]
 801ff5e:	f7ff ffd5 	bl	801ff0c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ff62:	4620      	mov	r0, r4
 801ff64:	bd10      	pop	{r4, pc}

0801ff66 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801ff66:	6082      	str	r2, [r0, #8]
 801ff68:	6001      	str	r1, [r0, #0]
 801ff6a:	f7ff bfcf 	b.w	801ff0c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ff6e <_ZN8touchgfx7Unicode6strlenEPKt>:
 801ff6e:	4602      	mov	r2, r0
 801ff70:	b148      	cbz	r0, 801ff86 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801ff72:	2300      	movs	r3, #0
 801ff74:	b298      	uxth	r0, r3
 801ff76:	3301      	adds	r3, #1
 801ff78:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ff7c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801ff80:	2900      	cmp	r1, #0
 801ff82:	d1f7      	bne.n	801ff74 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801ff84:	4770      	bx	lr
 801ff86:	4770      	bx	lr

0801ff88 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801ff88:	b140      	cbz	r0, 801ff9c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801ff8a:	4602      	mov	r2, r0
 801ff8c:	1a13      	subs	r3, r2, r0
 801ff8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 801ff92:	b29b      	uxth	r3, r3
 801ff94:	2900      	cmp	r1, #0
 801ff96:	d1f9      	bne.n	801ff8c <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801ff98:	4618      	mov	r0, r3
 801ff9a:	4770      	bx	lr
 801ff9c:	4603      	mov	r3, r0
 801ff9e:	e7fb      	b.n	801ff98 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801ffa0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801ffa0:	b530      	push	{r4, r5, lr}
 801ffa2:	b169      	cbz	r1, 801ffc0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801ffa4:	b168      	cbz	r0, 801ffc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801ffa6:	1e85      	subs	r5, r0, #2
 801ffa8:	460b      	mov	r3, r1
 801ffaa:	1a58      	subs	r0, r3, r1
 801ffac:	b280      	uxth	r0, r0
 801ffae:	4290      	cmp	r0, r2
 801ffb0:	da07      	bge.n	801ffc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801ffb2:	f813 4b01 	ldrb.w	r4, [r3], #1
 801ffb6:	f825 4f02 	strh.w	r4, [r5, #2]!
 801ffba:	2c00      	cmp	r4, #0
 801ffbc:	d1f5      	bne.n	801ffaa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801ffbe:	bd30      	pop	{r4, r5, pc}
 801ffc0:	4608      	mov	r0, r1
 801ffc2:	bd30      	pop	{r4, r5, pc}

0801ffc4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801ffc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffc6:	460f      	mov	r7, r1
 801ffc8:	b08b      	sub	sp, #44	; 0x2c
 801ffca:	2100      	movs	r1, #0
 801ffcc:	ad01      	add	r5, sp, #4
 801ffce:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ffd2:	211f      	movs	r1, #31
 801ffd4:	fbb0 f6f3 	udiv	r6, r0, r3
 801ffd8:	fb03 0416 	mls	r4, r3, r6, r0
 801ffdc:	4630      	mov	r0, r6
 801ffde:	2c09      	cmp	r4, #9
 801ffe0:	bfd4      	ite	le
 801ffe2:	3430      	addle	r4, #48	; 0x30
 801ffe4:	3457      	addgt	r4, #87	; 0x57
 801ffe6:	b2e4      	uxtb	r4, r4
 801ffe8:	554c      	strb	r4, [r1, r5]
 801ffea:	1e4c      	subs	r4, r1, #1
 801ffec:	b92e      	cbnz	r6, 801fffa <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801ffee:	4429      	add	r1, r5
 801fff0:	4638      	mov	r0, r7
 801fff2:	f7ff ffd5 	bl	801ffa0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fff6:	b00b      	add	sp, #44	; 0x2c
 801fff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fffa:	4621      	mov	r1, r4
 801fffc:	e7ea      	b.n	801ffd4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801fffe <_ZN8touchgfx7Unicode4itoaElPtti>:
 801fffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020000:	4606      	mov	r6, r0
 8020002:	b08b      	sub	sp, #44	; 0x2c
 8020004:	4608      	mov	r0, r1
 8020006:	b341      	cbz	r1, 802005a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020008:	1e99      	subs	r1, r3, #2
 802000a:	290e      	cmp	r1, #14
 802000c:	d825      	bhi.n	802005a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 802000e:	2100      	movs	r1, #0
 8020010:	4634      	mov	r4, r6
 8020012:	251f      	movs	r5, #31
 8020014:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020018:	1e69      	subs	r1, r5, #1
 802001a:	f10d 0e04 	add.w	lr, sp, #4
 802001e:	fb94 f7f3 	sdiv	r7, r4, r3
 8020022:	fb03 4417 	mls	r4, r3, r7, r4
 8020026:	448e      	add	lr, r1
 8020028:	2c00      	cmp	r4, #0
 802002a:	bfb8      	it	lt
 802002c:	4264      	neglt	r4, r4
 802002e:	2c09      	cmp	r4, #9
 8020030:	bfd4      	ite	le
 8020032:	3430      	addle	r4, #48	; 0x30
 8020034:	3457      	addgt	r4, #87	; 0x57
 8020036:	b2e4      	uxtb	r4, r4
 8020038:	f88e 4001 	strb.w	r4, [lr, #1]
 802003c:	463c      	mov	r4, r7
 802003e:	b977      	cbnz	r7, 802005e <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8020040:	2e00      	cmp	r6, #0
 8020042:	da05      	bge.n	8020050 <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 8020044:	ab0a      	add	r3, sp, #40	; 0x28
 8020046:	4419      	add	r1, r3
 8020048:	232d      	movs	r3, #45	; 0x2d
 802004a:	f801 3c24 	strb.w	r3, [r1, #-36]
 802004e:	1ea9      	subs	r1, r5, #2
 8020050:	3101      	adds	r1, #1
 8020052:	ab01      	add	r3, sp, #4
 8020054:	4419      	add	r1, r3
 8020056:	f7ff ffa3 	bl	801ffa0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802005a:	b00b      	add	sp, #44	; 0x2c
 802005c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802005e:	460d      	mov	r5, r1
 8020060:	e7da      	b.n	8020018 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

08020062 <_ZN8touchgfx7Unicode4atoiEPKt>:
 8020062:	b510      	push	{r4, lr}
 8020064:	b158      	cbz	r0, 802007e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8020066:	1e82      	subs	r2, r0, #2
 8020068:	210a      	movs	r1, #10
 802006a:	2000      	movs	r0, #0
 802006c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8020070:	3b30      	subs	r3, #48	; 0x30
 8020072:	b29c      	uxth	r4, r3
 8020074:	2c09      	cmp	r4, #9
 8020076:	d802      	bhi.n	802007e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8020078:	fb01 3000 	mla	r0, r1, r0, r3
 802007c:	e7f6      	b.n	802006c <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 802007e:	bd10      	pop	{r4, pc}

08020080 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8020080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020084:	b085      	sub	sp, #20
 8020086:	f8d0 8000 	ldr.w	r8, [r0]
 802008a:	468a      	mov	sl, r1
 802008c:	461c      	mov	r4, r3
 802008e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8020092:	4681      	mov	r9, r0
 8020094:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8020098:	4640      	mov	r0, r8
 802009a:	9203      	str	r2, [sp, #12]
 802009c:	9301      	str	r3, [sp, #4]
 802009e:	9102      	str	r1, [sp, #8]
 80200a0:	f7ff ff65 	bl	801ff6e <_ZN8touchgfx7Unicode6strlenEPKt>
 80200a4:	9a03      	ldr	r2, [sp, #12]
 80200a6:	f1ba 0f00 	cmp.w	sl, #0
 80200aa:	bf0c      	ite	eq
 80200ac:	4603      	moveq	r3, r0
 80200ae:	1c43      	addne	r3, r0, #1
 80200b0:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80200b4:	8812      	ldrh	r2, [r2, #0]
 80200b6:	b29b      	uxth	r3, r3
 80200b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80200ba:	2a69      	cmp	r2, #105	; 0x69
 80200bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80200be:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80200c0:	9902      	ldr	r1, [sp, #8]
 80200c2:	d004      	beq.n	80200ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 80200c4:	d852      	bhi.n	802016c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80200c6:	2a58      	cmp	r2, #88	; 0x58
 80200c8:	d001      	beq.n	80200ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 80200ca:	2a64      	cmp	r2, #100	; 0x64
 80200cc:	d159      	bne.n	8020182 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 80200ce:	b19c      	cbz	r4, 80200f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 80200d0:	b956      	cbnz	r6, 80200e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 80200d2:	2801      	cmp	r0, #1
 80200d4:	d108      	bne.n	80200e8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 80200d6:	f8b8 2000 	ldrh.w	r2, [r8]
 80200da:	2a30      	cmp	r2, #48	; 0x30
 80200dc:	bf02      	ittt	eq
 80200de:	f108 0202 	addeq.w	r2, r8, #2
 80200e2:	4630      	moveq	r0, r6
 80200e4:	f8c9 2000 	streq.w	r2, [r9]
 80200e8:	429e      	cmp	r6, r3
 80200ea:	dd4c      	ble.n	8020186 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 80200ec:	b2b6      	uxth	r6, r6
 80200ee:	1af4      	subs	r4, r6, r3
 80200f0:	4633      	mov	r3, r6
 80200f2:	b2a4      	uxth	r4, r4
 80200f4:	f04f 0b00 	mov.w	fp, #0
 80200f8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80200fc:	9a01      	ldr	r2, [sp, #4]
 80200fe:	3e01      	subs	r6, #1
 8020100:	b162      	cbz	r2, 802011c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 8020102:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020104:	4293      	cmp	r3, r2
 8020106:	da09      	bge.n	802011c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 8020108:	1ad2      	subs	r2, r2, r3
 802010a:	b292      	uxth	r2, r2
 802010c:	b939      	cbnz	r1, 802011e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 802010e:	f1bb 0f00 	cmp.w	fp, #0
 8020112:	d050      	beq.n	80201b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 8020114:	2800      	cmp	r0, #0
 8020116:	d04e      	beq.n	80201b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 8020118:	4414      	add	r4, r2
 802011a:	b2a4      	uxth	r4, r4
 802011c:	2200      	movs	r2, #0
 802011e:	682b      	ldr	r3, [r5, #0]
 8020120:	42b3      	cmp	r3, r6
 8020122:	da07      	bge.n	8020134 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 8020124:	f1ba 0f00 	cmp.w	sl, #0
 8020128:	d004      	beq.n	8020134 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 802012a:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 802012e:	682b      	ldr	r3, [r5, #0]
 8020130:	3301      	adds	r3, #1
 8020132:	602b      	str	r3, [r5, #0]
 8020134:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8020138:	b124      	cbz	r4, 8020144 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 802013a:	6829      	ldr	r1, [r5, #0]
 802013c:	3c01      	subs	r4, #1
 802013e:	428e      	cmp	r6, r1
 8020140:	b2a4      	uxth	r4, r4
 8020142:	dc22      	bgt.n	802018a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 8020144:	b140      	cbz	r0, 8020158 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 8020146:	f8d9 3000 	ldr.w	r3, [r9]
 802014a:	8819      	ldrh	r1, [r3, #0]
 802014c:	b121      	cbz	r1, 8020158 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 802014e:	6829      	ldr	r1, [r5, #0]
 8020150:	3801      	subs	r0, #1
 8020152:	428e      	cmp	r6, r1
 8020154:	b280      	uxth	r0, r0
 8020156:	dc1e      	bgt.n	8020196 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020158:	2020      	movs	r0, #32
 802015a:	b122      	cbz	r2, 8020166 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 802015c:	6829      	ldr	r1, [r5, #0]
 802015e:	3a01      	subs	r2, #1
 8020160:	428e      	cmp	r6, r1
 8020162:	b292      	uxth	r2, r2
 8020164:	dc21      	bgt.n	80201aa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 8020166:	b005      	add	sp, #20
 8020168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802016c:	2a73      	cmp	r2, #115	; 0x73
 802016e:	d003      	beq.n	8020178 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 8020170:	2a78      	cmp	r2, #120	; 0x78
 8020172:	d0ac      	beq.n	80200ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 8020174:	2a6f      	cmp	r2, #111	; 0x6f
 8020176:	e7a9      	b.n	80200cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 8020178:	2c00      	cmp	r4, #0
 802017a:	d0bd      	beq.n	80200f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 802017c:	4286      	cmp	r6, r0
 802017e:	da00      	bge.n	8020182 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 8020180:	b2b0      	uxth	r0, r6
 8020182:	2400      	movs	r4, #0
 8020184:	e7b8      	b.n	80200f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 8020186:	2400      	movs	r4, #0
 8020188:	e7b4      	b.n	80200f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 802018a:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 802018e:	682b      	ldr	r3, [r5, #0]
 8020190:	3301      	adds	r3, #1
 8020192:	602b      	str	r3, [r5, #0]
 8020194:	e7d0      	b.n	8020138 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 8020196:	1c9c      	adds	r4, r3, #2
 8020198:	f8c9 4000 	str.w	r4, [r9]
 802019c:	881b      	ldrh	r3, [r3, #0]
 802019e:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 80201a2:	682b      	ldr	r3, [r5, #0]
 80201a4:	3301      	adds	r3, #1
 80201a6:	602b      	str	r3, [r5, #0]
 80201a8:	e7cc      	b.n	8020144 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 80201aa:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 80201ae:	682b      	ldr	r3, [r5, #0]
 80201b0:	3301      	adds	r3, #1
 80201b2:	602b      	str	r3, [r5, #0]
 80201b4:	e7d1      	b.n	802015a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 80201b6:	2a00      	cmp	r2, #0
 80201b8:	d0b1      	beq.n	802011e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 80201ba:	f04f 0e20 	mov.w	lr, #32
 80201be:	6829      	ldr	r1, [r5, #0]
 80201c0:	3a01      	subs	r2, #1
 80201c2:	42b1      	cmp	r1, r6
 80201c4:	b292      	uxth	r2, r2
 80201c6:	daa9      	bge.n	802011c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 80201c8:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 80201cc:	682b      	ldr	r3, [r5, #0]
 80201ce:	3301      	adds	r3, #1
 80201d0:	602b      	str	r3, [r5, #0]
 80201d2:	2a00      	cmp	r2, #0
 80201d4:	d1f3      	bne.n	80201be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 80201d6:	e7a2      	b.n	802011e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

080201d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 80201d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201dc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80201e0:	4604      	mov	r4, r0
 80201e2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80201e6:	2000      	movs	r0, #0
 80201e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80201ea:	f04f 0801 	mov.w	r8, #1
 80201ee:	9f08      	ldr	r7, [sp, #32]
 80201f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80201f2:	8008      	strh	r0, [r1, #0]
 80201f4:	7010      	strb	r0, [r2, #0]
 80201f6:	7018      	strb	r0, [r3, #0]
 80201f8:	f88e 0000 	strb.w	r0, [lr]
 80201fc:	f88c 0000 	strb.w	r0, [ip]
 8020200:	7030      	strb	r0, [r6, #0]
 8020202:	6820      	ldr	r0, [r4, #0]
 8020204:	8800      	ldrh	r0, [r0, #0]
 8020206:	b190      	cbz	r0, 802022e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 8020208:	282b      	cmp	r0, #43	; 0x2b
 802020a:	d001      	beq.n	8020210 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 802020c:	2820      	cmp	r0, #32
 802020e:	d104      	bne.n	802021a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 8020210:	8008      	strh	r0, [r1, #0]
 8020212:	6820      	ldr	r0, [r4, #0]
 8020214:	3002      	adds	r0, #2
 8020216:	6020      	str	r0, [r4, #0]
 8020218:	e7f3      	b.n	8020202 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 802021a:	282d      	cmp	r0, #45	; 0x2d
 802021c:	d102      	bne.n	8020224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 802021e:	f882 8000 	strb.w	r8, [r2]
 8020222:	e7f6      	b.n	8020212 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 8020224:	2823      	cmp	r0, #35	; 0x23
 8020226:	d102      	bne.n	802022e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 8020228:	f883 8000 	strb.w	r8, [r3]
 802022c:	e7f1      	b.n	8020212 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 802022e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020232:	2b09      	cmp	r3, #9
 8020234:	d901      	bls.n	802023a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 8020236:	282a      	cmp	r0, #42	; 0x2a
 8020238:	d114      	bne.n	8020264 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 802023a:	2201      	movs	r2, #1
 802023c:	f88c 2000 	strb.w	r2, [ip]
 8020240:	6823      	ldr	r3, [r4, #0]
 8020242:	8819      	ldrh	r1, [r3, #0]
 8020244:	2930      	cmp	r1, #48	; 0x30
 8020246:	bf02      	ittt	eq
 8020248:	3302      	addeq	r3, #2
 802024a:	6023      	streq	r3, [r4, #0]
 802024c:	f88e 2000 	strbeq.w	r2, [lr]
 8020250:	6820      	ldr	r0, [r4, #0]
 8020252:	8803      	ldrh	r3, [r0, #0]
 8020254:	2b2a      	cmp	r3, #42	; 0x2a
 8020256:	d11e      	bne.n	8020296 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 8020258:	f04f 33ff 	mov.w	r3, #4294967295
 802025c:	603b      	str	r3, [r7, #0]
 802025e:	6823      	ldr	r3, [r4, #0]
 8020260:	3302      	adds	r3, #2
 8020262:	6023      	str	r3, [r4, #0]
 8020264:	6823      	ldr	r3, [r4, #0]
 8020266:	881b      	ldrh	r3, [r3, #0]
 8020268:	2b2e      	cmp	r3, #46	; 0x2e
 802026a:	d112      	bne.n	8020292 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 802026c:	2301      	movs	r3, #1
 802026e:	7033      	strb	r3, [r6, #0]
 8020270:	6823      	ldr	r3, [r4, #0]
 8020272:	1c98      	adds	r0, r3, #2
 8020274:	6020      	str	r0, [r4, #0]
 8020276:	885b      	ldrh	r3, [r3, #2]
 8020278:	2b2a      	cmp	r3, #42	; 0x2a
 802027a:	d118      	bne.n	80202ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 802027c:	f04f 33ff 	mov.w	r3, #4294967295
 8020280:	602b      	str	r3, [r5, #0]
 8020282:	6823      	ldr	r3, [r4, #0]
 8020284:	3302      	adds	r3, #2
 8020286:	6023      	str	r3, [r4, #0]
 8020288:	682b      	ldr	r3, [r5, #0]
 802028a:	2b06      	cmp	r3, #6
 802028c:	bfa8      	it	ge
 802028e:	2306      	movge	r3, #6
 8020290:	602b      	str	r3, [r5, #0]
 8020292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020296:	f7ff fee4 	bl	8020062 <_ZN8touchgfx7Unicode4atoiEPKt>
 802029a:	6038      	str	r0, [r7, #0]
 802029c:	6822      	ldr	r2, [r4, #0]
 802029e:	8813      	ldrh	r3, [r2, #0]
 80202a0:	3b30      	subs	r3, #48	; 0x30
 80202a2:	b29b      	uxth	r3, r3
 80202a4:	2b09      	cmp	r3, #9
 80202a6:	d8dd      	bhi.n	8020264 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 80202a8:	3202      	adds	r2, #2
 80202aa:	6022      	str	r2, [r4, #0]
 80202ac:	e7f6      	b.n	802029c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 80202ae:	f7ff fed8 	bl	8020062 <_ZN8touchgfx7Unicode4atoiEPKt>
 80202b2:	6028      	str	r0, [r5, #0]
 80202b4:	6822      	ldr	r2, [r4, #0]
 80202b6:	8813      	ldrh	r3, [r2, #0]
 80202b8:	3b30      	subs	r3, #48	; 0x30
 80202ba:	b29b      	uxth	r3, r3
 80202bc:	2b09      	cmp	r3, #9
 80202be:	d8e3      	bhi.n	8020288 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 80202c0:	3202      	adds	r2, #2
 80202c2:	6022      	str	r2, [r4, #0]
 80202c4:	e7f6      	b.n	80202b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>
	...

080202c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80202c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202cc:	b0a3      	sub	sp, #140	; 0x8c
 80202ce:	2500      	movs	r5, #0
 80202d0:	4606      	mov	r6, r0
 80202d2:	4689      	mov	r9, r1
 80202d4:	af11      	add	r7, sp, #68	; 0x44
 80202d6:	9209      	str	r2, [sp, #36]	; 0x24
 80202d8:	4629      	mov	r1, r5
 80202da:	2242      	movs	r2, #66	; 0x42
 80202dc:	4638      	mov	r0, r7
 80202de:	461c      	mov	r4, r3
 80202e0:	950d      	str	r5, [sp, #52]	; 0x34
 80202e2:	f7ff fa14 	bl	801f70e <_ZN8touchgfx6memsetEPvhm>
 80202e6:	b116      	cbz	r6, 80202ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 80202e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80202ea:	b921      	cbnz	r1, 80202f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 80202ec:	8031      	strh	r1, [r6, #0]
 80202ee:	4630      	mov	r0, r6
 80202f0:	b023      	add	sp, #140	; 0x8c
 80202f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202f6:	f8df a250 	ldr.w	sl, [pc, #592]	; 8020548 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 80202fa:	f109 3bff 	add.w	fp, r9, #4294967295
 80202fe:	f8da 0000 	ldr.w	r0, [sl]
 8020302:	6803      	ldr	r3, [r0, #0]
 8020304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020306:	4798      	blx	r3
 8020308:	9009      	str	r0, [sp, #36]	; 0x24
 802030a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802030c:	881a      	ldrh	r2, [r3, #0]
 802030e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020310:	2a00      	cmp	r2, #0
 8020312:	f000 80c2 	beq.w	802049a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 8020316:	459b      	cmp	fp, r3
 8020318:	f340 80bf 	ble.w	802049a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 802031c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8020320:	f8b8 2000 	ldrh.w	r2, [r8]
 8020324:	2a00      	cmp	r2, #0
 8020326:	d0f0      	beq.n	802030a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8020328:	2a25      	cmp	r2, #37	; 0x25
 802032a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802032c:	f000 80b9 	beq.w	80204a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 8020330:	459b      	cmp	fp, r3
 8020332:	f340 80b6 	ble.w	80204a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 8020336:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 802033a:	f108 0202 	add.w	r2, r8, #2
 802033e:	3301      	adds	r3, #1
 8020340:	9209      	str	r2, [sp, #36]	; 0x24
 8020342:	930d      	str	r3, [sp, #52]	; 0x34
 8020344:	e7ea      	b.n	802031c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 8020346:	3b63      	subs	r3, #99	; 0x63
 8020348:	2b01      	cmp	r3, #1
 802034a:	f200 80f2 	bhi.w	8020532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 802034e:	9710      	str	r7, [sp, #64]	; 0x40
 8020350:	8813      	ldrh	r3, [r2, #0]
 8020352:	2b69      	cmp	r3, #105	; 0x69
 8020354:	d068      	beq.n	8020428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 8020356:	d81c      	bhi.n	8020392 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 8020358:	2b63      	cmp	r3, #99	; 0x63
 802035a:	d031      	beq.n	80203c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 802035c:	2b64      	cmp	r3, #100	; 0x64
 802035e:	d063      	beq.n	8020428 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 8020360:	2b58      	cmp	r3, #88	; 0x58
 8020362:	f000 8082 	beq.w	802046a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 8020366:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 802036a:	46a0      	mov	r8, r4
 802036c:	e02f      	b.n	80203ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 802036e:	2b73      	cmp	r3, #115	; 0x73
 8020370:	d0ed      	beq.n	802034e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020372:	d803      	bhi.n	802037c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 8020374:	2b6f      	cmp	r3, #111	; 0x6f
 8020376:	f040 80dc 	bne.w	8020532 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 802037a:	e7e8      	b.n	802034e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 802037c:	2b75      	cmp	r3, #117	; 0x75
 802037e:	d0e6      	beq.n	802034e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020380:	2b78      	cmp	r3, #120	; 0x78
 8020382:	e7f8      	b.n	8020376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 8020384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020386:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 802038a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802038c:	3302      	adds	r3, #2
 802038e:	9309      	str	r3, [sp, #36]	; 0x24
 8020390:	e7bb      	b.n	802030a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8020392:	2b73      	cmp	r3, #115	; 0x73
 8020394:	d037      	beq.n	8020406 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 8020396:	d808      	bhi.n	80203aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 8020398:	2b6f      	cmp	r3, #111	; 0x6f
 802039a:	d1e4      	bne.n	8020366 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 802039c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802039e:	f104 0804 	add.w	r8, r4, #4
 80203a2:	2308      	movs	r3, #8
 80203a4:	eba9 0202 	sub.w	r2, r9, r2
 80203a8:	e059      	b.n	802045e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 80203aa:	2b75      	cmp	r3, #117	; 0x75
 80203ac:	d051      	beq.n	8020452 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 80203ae:	2b78      	cmp	r3, #120	; 0x78
 80203b0:	d1d9      	bne.n	8020366 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 80203b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80203b4:	f104 0804 	add.w	r8, r4, #4
 80203b8:	2310      	movs	r3, #16
 80203ba:	eba9 0202 	sub.w	r2, r9, r2
 80203be:	e04e      	b.n	802045e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 80203c0:	7823      	ldrb	r3, [r4, #0]
 80203c2:	f104 0804 	add.w	r8, r4, #4
 80203c6:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80203ca:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80203ce:	aa0d      	add	r2, sp, #52	; 0x34
 80203d0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80203d4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80203d8:	a810      	add	r0, sp, #64	; 0x40
 80203da:	9205      	str	r2, [sp, #20]
 80203dc:	4644      	mov	r4, r8
 80203de:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80203e2:	9607      	str	r6, [sp, #28]
 80203e4:	9204      	str	r2, [sp, #16]
 80203e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80203e8:	f8cd 9018 	str.w	r9, [sp, #24]
 80203ec:	9203      	str	r2, [sp, #12]
 80203ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80203f2:	9202      	str	r2, [sp, #8]
 80203f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80203f6:	9201      	str	r2, [sp, #4]
 80203f8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80203fc:	9200      	str	r2, [sp, #0]
 80203fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020400:	f7ff fe3e 	bl	8020080 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8020404:	e7c1      	b.n	802038a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8020406:	f8da 0000 	ldr.w	r0, [sl]
 802040a:	f104 0804 	add.w	r8, r4, #4
 802040e:	6821      	ldr	r1, [r4, #0]
 8020410:	6803      	ldr	r3, [r0, #0]
 8020412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020414:	4798      	blx	r3
 8020416:	9010      	str	r0, [sp, #64]	; 0x40
 8020418:	f8da 0000 	ldr.w	r0, [sl]
 802041c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802041e:	6803      	ldr	r3, [r0, #0]
 8020420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020422:	4798      	blx	r3
 8020424:	9009      	str	r0, [sp, #36]	; 0x24
 8020426:	e7d2      	b.n	80203ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802042a:	230a      	movs	r3, #10
 802042c:	4639      	mov	r1, r7
 802042e:	6820      	ldr	r0, [r4, #0]
 8020430:	eba9 0202 	sub.w	r2, r9, r2
 8020434:	f104 0804 	add.w	r8, r4, #4
 8020438:	b292      	uxth	r2, r2
 802043a:	f7ff fde0 	bl	801fffe <_ZN8touchgfx7Unicode4itoaElPtti>
 802043e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8020442:	2b2d      	cmp	r3, #45	; 0x2d
 8020444:	d1c3      	bne.n	80203ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020446:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802044a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802044c:	3302      	adds	r3, #2
 802044e:	9310      	str	r3, [sp, #64]	; 0x40
 8020450:	e7bd      	b.n	80203ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020452:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020454:	f104 0804 	add.w	r8, r4, #4
 8020458:	230a      	movs	r3, #10
 802045a:	eba9 0202 	sub.w	r2, r9, r2
 802045e:	b292      	uxth	r2, r2
 8020460:	4639      	mov	r1, r7
 8020462:	6820      	ldr	r0, [r4, #0]
 8020464:	f7ff fdae 	bl	801ffc4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 8020468:	e7b1      	b.n	80203ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 802046a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802046c:	2310      	movs	r3, #16
 802046e:	4639      	mov	r1, r7
 8020470:	6820      	ldr	r0, [r4, #0]
 8020472:	eba9 0202 	sub.w	r2, r9, r2
 8020476:	f104 0804 	add.w	r8, r4, #4
 802047a:	b292      	uxth	r2, r2
 802047c:	f7ff fda2 	bl	801ffc4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 8020480:	463a      	mov	r2, r7
 8020482:	8813      	ldrh	r3, [r2, #0]
 8020484:	2b00      	cmp	r3, #0
 8020486:	d0a2      	beq.n	80203ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020488:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 802048c:	3202      	adds	r2, #2
 802048e:	2919      	cmp	r1, #25
 8020490:	bf9c      	itt	ls
 8020492:	3b20      	subls	r3, #32
 8020494:	f822 3c02 	strhls.w	r3, [r2, #-2]
 8020498:	e7f3      	b.n	8020482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 802049a:	2200      	movs	r2, #0
 802049c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80204a0:	e725      	b.n	80202ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 80204a2:	459b      	cmp	fp, r3
 80204a4:	f77f af31 	ble.w	802030a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 80204a8:	f108 0302 	add.w	r3, r8, #2
 80204ac:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 80204b0:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 80204b4:	a809      	add	r0, sp, #36	; 0x24
 80204b6:	9309      	str	r3, [sp, #36]	; 0x24
 80204b8:	ab0f      	add	r3, sp, #60	; 0x3c
 80204ba:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 80204be:	9304      	str	r3, [sp, #16]
 80204c0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80204c4:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 80204c8:	9303      	str	r3, [sp, #12]
 80204ca:	ab0e      	add	r3, sp, #56	; 0x38
 80204cc:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 80204d0:	9302      	str	r3, [sp, #8]
 80204d2:	ab0c      	add	r3, sp, #48	; 0x30
 80204d4:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 80204d8:	9301      	str	r3, [sp, #4]
 80204da:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80204de:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80204e2:	9300      	str	r3, [sp, #0]
 80204e4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80204e8:	950e      	str	r5, [sp, #56]	; 0x38
 80204ea:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80204ee:	950f      	str	r5, [sp, #60]	; 0x3c
 80204f0:	f7ff fe72 	bl	80201d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80204f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	bfbf      	itttt	lt
 80204fc:	6823      	ldrlt	r3, [r4, #0]
 80204fe:	3404      	addlt	r4, #4
 8020500:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020504:	930e      	strlt	r3, [sp, #56]	; 0x38
 8020506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020508:	2b00      	cmp	r3, #0
 802050a:	bfbf      	itttt	lt
 802050c:	6823      	ldrlt	r3, [r4, #0]
 802050e:	3404      	addlt	r4, #4
 8020510:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020514:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8020516:	8813      	ldrh	r3, [r2, #0]
 8020518:	2b69      	cmp	r3, #105	; 0x69
 802051a:	f43f af18 	beq.w	802034e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 802051e:	f63f af26 	bhi.w	802036e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 8020522:	2b58      	cmp	r3, #88	; 0x58
 8020524:	f43f af13 	beq.w	802034e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020528:	f63f af0d 	bhi.w	8020346 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 802052c:	2b25      	cmp	r3, #37	; 0x25
 802052e:	f43f af29 	beq.w	8020384 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 8020532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020534:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8020538:	f8b8 2000 	ldrh.w	r2, [r8]
 802053c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020540:	3301      	adds	r3, #1
 8020542:	930d      	str	r3, [sp, #52]	; 0x34
 8020544:	e721      	b.n	802038a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8020546:	bf00      	nop
 8020548:	2000a290 	.word	0x2000a290

0802054c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 802054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802054e:	4605      	mov	r5, r0
 8020550:	b0a1      	sub	sp, #132	; 0x84
 8020552:	4610      	mov	r0, r2
 8020554:	460e      	mov	r6, r1
 8020556:	4614      	mov	r4, r2
 8020558:	461f      	mov	r7, r3
 802055a:	f7ff fd15 	bl	801ff88 <_ZN8touchgfx7Unicode6strlenEPKc>
 802055e:	283f      	cmp	r0, #63	; 0x3f
 8020560:	dd06      	ble.n	8020570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8020562:	4b0a      	ldr	r3, [pc, #40]	; (802058c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8020564:	f240 11b9 	movw	r1, #441	; 0x1b9
 8020568:	4a09      	ldr	r2, [pc, #36]	; (8020590 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 802056a:	480a      	ldr	r0, [pc, #40]	; (8020594 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 802056c:	f002 fa10 	bl	8022990 <__assert_func>
 8020570:	4621      	mov	r1, r4
 8020572:	2240      	movs	r2, #64	; 0x40
 8020574:	4668      	mov	r0, sp
 8020576:	f7ff fd13 	bl	801ffa0 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802057a:	463b      	mov	r3, r7
 802057c:	466a      	mov	r2, sp
 802057e:	4631      	mov	r1, r6
 8020580:	4628      	mov	r0, r5
 8020582:	f7ff fea1 	bl	80202c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8020586:	b021      	add	sp, #132	; 0x84
 8020588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802058a:	bf00      	nop
 802058c:	08026208 	.word	0x08026208
 8020590:	0802624b 	.word	0x0802624b
 8020594:	08026225 	.word	0x08026225

08020598 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8020598:	b40c      	push	{r2, r3}
 802059a:	b507      	push	{r0, r1, r2, lr}
 802059c:	ab04      	add	r3, sp, #16
 802059e:	f853 2b04 	ldr.w	r2, [r3], #4
 80205a2:	9301      	str	r3, [sp, #4]
 80205a4:	f7ff ffd2 	bl	802054c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80205a8:	b003      	add	sp, #12
 80205aa:	f85d eb04 	ldr.w	lr, [sp], #4
 80205ae:	b002      	add	sp, #8
 80205b0:	4770      	bx	lr
	...

080205b4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 80205b4:	4b26      	ldr	r3, [pc, #152]	; (8020650 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 80205b6:	b570      	push	{r4, r5, r6, lr}
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	4605      	mov	r5, r0
 80205bc:	460c      	mov	r4, r1
 80205be:	4616      	mov	r6, r2
 80205c0:	b92b      	cbnz	r3, 80205ce <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 80205c2:	4b24      	ldr	r3, [pc, #144]	; (8020654 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 80205c4:	2116      	movs	r1, #22
 80205c6:	4a24      	ldr	r2, [pc, #144]	; (8020658 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 80205c8:	4824      	ldr	r0, [pc, #144]	; (802065c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 80205ca:	f002 f9e1 	bl	8022990 <__assert_func>
 80205ce:	6898      	ldr	r0, [r3, #8]
 80205d0:	6803      	ldr	r3, [r0, #0]
 80205d2:	6a1b      	ldr	r3, [r3, #32]
 80205d4:	4798      	blx	r3
 80205d6:	2810      	cmp	r0, #16
 80205d8:	d109      	bne.n	80205ee <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 80205da:	00e0      	lsls	r0, r4, #3
 80205dc:	022c      	lsls	r4, r5, #8
 80205de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80205e2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80205e6:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 80205ea:	4320      	orrs	r0, r4
 80205ec:	bd70      	pop	{r4, r5, r6, pc}
 80205ee:	2818      	cmp	r0, #24
 80205f0:	d104      	bne.n	80205fc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 80205f2:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 80205f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80205fa:	bd70      	pop	{r4, r5, r6, pc}
 80205fc:	2804      	cmp	r0, #4
 80205fe:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 8020602:	d109      	bne.n	8020618 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 8020604:	fb14 f401 	smulbb	r4, r4, r1
 8020608:	2036      	movs	r0, #54	; 0x36
 802060a:	fb10 4405 	smlabb	r4, r0, r5, r4
 802060e:	2013      	movs	r0, #19
 8020610:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020614:	1300      	asrs	r0, r0, #12
 8020616:	bd70      	pop	{r4, r5, r6, pc}
 8020618:	2802      	cmp	r0, #2
 802061a:	d109      	bne.n	8020630 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 802061c:	fb14 f401 	smulbb	r4, r4, r1
 8020620:	2036      	movs	r0, #54	; 0x36
 8020622:	fb10 4405 	smlabb	r4, r0, r5, r4
 8020626:	2013      	movs	r0, #19
 8020628:	fb10 4006 	smlabb	r0, r0, r6, r4
 802062c:	1380      	asrs	r0, r0, #14
 802062e:	bd70      	pop	{r4, r5, r6, pc}
 8020630:	2801      	cmp	r0, #1
 8020632:	d109      	bne.n	8020648 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 8020634:	fb14 f401 	smulbb	r4, r4, r1
 8020638:	2036      	movs	r0, #54	; 0x36
 802063a:	fb10 4405 	smlabb	r4, r0, r5, r4
 802063e:	2013      	movs	r0, #19
 8020640:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020644:	13c0      	asrs	r0, r0, #15
 8020646:	bd70      	pop	{r4, r5, r6, pc}
 8020648:	4b05      	ldr	r3, [pc, #20]	; (8020660 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 802064a:	212f      	movs	r1, #47	; 0x2f
 802064c:	4a02      	ldr	r2, [pc, #8]	; (8020658 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 802064e:	e7bb      	b.n	80205c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 8020650:	2000a290 	.word	0x2000a290
 8020654:	080262d0 	.word	0x080262d0
 8020658:	08026353 	.word	0x08026353
 802065c:	08026313 	.word	0x08026313
 8020660:	08026337 	.word	0x08026337

08020664 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020664:	4b01      	ldr	r3, [pc, #4]	; (802066c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020666:	6018      	str	r0, [r3, #0]
 8020668:	4770      	bx	lr
 802066a:	bf00      	nop
 802066c:	2000a300 	.word	0x2000a300

08020670 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020674:	4f24      	ldr	r7, [pc, #144]	; (8020708 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8020676:	683b      	ldr	r3, [r7, #0]
 8020678:	2b00      	cmp	r3, #0
 802067a:	d042      	beq.n	8020702 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 802067c:	4923      	ldr	r1, [pc, #140]	; (802070c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 802067e:	4d24      	ldr	r5, [pc, #144]	; (8020710 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020680:	8808      	ldrh	r0, [r1, #0]
 8020682:	882a      	ldrh	r2, [r5, #0]
 8020684:	4e23      	ldr	r6, [pc, #140]	; (8020714 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020686:	4410      	add	r0, r2
 8020688:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 802068c:	4c22      	ldr	r4, [pc, #136]	; (8020718 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 802068e:	1c41      	adds	r1, r0, #1
 8020690:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8020694:	f021 0101 	bic.w	r1, r1, #1
 8020698:	eb03 0208 	add.w	r2, r3, r8
 802069c:	0409      	lsls	r1, r1, #16
 802069e:	6032      	str	r2, [r6, #0]
 80206a0:	0c09      	lsrs	r1, r1, #16
 80206a2:	0049      	lsls	r1, r1, #1
 80206a4:	eb08 0c01 	add.w	ip, r8, r1
 80206a8:	eb03 020c 	add.w	r2, r3, ip
 80206ac:	44f4      	add	ip, lr
 80206ae:	6022      	str	r2, [r4, #0]
 80206b0:	4463      	add	r3, ip
 80206b2:	4a1a      	ldr	r2, [pc, #104]	; (802071c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80206b4:	6013      	str	r3, [r2, #0]
 80206b6:	2300      	movs	r3, #0
 80206b8:	4a19      	ldr	r2, [pc, #100]	; (8020720 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80206ba:	8013      	strh	r3, [r2, #0]
 80206bc:	4a19      	ldr	r2, [pc, #100]	; (8020724 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80206be:	6812      	ldr	r2, [r2, #0]
 80206c0:	eba2 0208 	sub.w	r2, r2, r8
 80206c4:	1a52      	subs	r2, r2, r1
 80206c6:	4918      	ldr	r1, [pc, #96]	; (8020728 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80206c8:	eba2 020e 	sub.w	r2, r2, lr
 80206cc:	469e      	mov	lr, r3
 80206ce:	600a      	str	r2, [r1, #0]
 80206d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80206d4:	4a15      	ldr	r2, [pc, #84]	; (802072c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80206d6:	8013      	strh	r3, [r2, #0]
 80206d8:	4283      	cmp	r3, r0
 80206da:	d007      	beq.n	80206ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 80206dc:	683a      	ldr	r2, [r7, #0]
 80206de:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 80206e2:	6832      	ldr	r2, [r6, #0]
 80206e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80206e8:	3301      	adds	r3, #1
 80206ea:	e7f5      	b.n	80206d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 80206ec:	2300      	movs	r3, #0
 80206ee:	882d      	ldrh	r5, [r5, #0]
 80206f0:	6820      	ldr	r0, [r4, #0]
 80206f2:	4619      	mov	r1, r3
 80206f4:	42ab      	cmp	r3, r5
 80206f6:	d204      	bcs.n	8020702 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80206f8:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 80206fc:	3301      	adds	r3, #1
 80206fe:	7391      	strb	r1, [r2, #14]
 8020700:	e7f8      	b.n	80206f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 8020702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020706:	bf00      	nop
 8020708:	2000a304 	.word	0x2000a304
 802070c:	2000a320 	.word	0x2000a320
 8020710:	2000a324 	.word	0x2000a324
 8020714:	2000a318 	.word	0x2000a318
 8020718:	2000a308 	.word	0x2000a308
 802071c:	2000a310 	.word	0x2000a310
 8020720:	2000a322 	.word	0x2000a322
 8020724:	2000a30c 	.word	0x2000a30c
 8020728:	2000a31c 	.word	0x2000a31c
 802072c:	2000a314 	.word	0x2000a314

08020730 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8020730:	4b0f      	ldr	r3, [pc, #60]	; (8020770 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 8020732:	b510      	push	{r4, lr}
 8020734:	681b      	ldr	r3, [r3, #0]
 8020736:	b9d3      	cbnz	r3, 802076e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020738:	b1c9      	cbz	r1, 802076e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 802073a:	4b0e      	ldr	r3, [pc, #56]	; (8020774 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 802073c:	2406      	movs	r4, #6
 802073e:	801a      	strh	r2, [r3, #0]
 8020740:	b292      	uxth	r2, r2
 8020742:	4b0d      	ldr	r3, [pc, #52]	; (8020778 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8020744:	881b      	ldrh	r3, [r3, #0]
 8020746:	4413      	add	r3, r2
 8020748:	0112      	lsls	r2, r2, #4
 802074a:	fb04 2203 	mla	r2, r4, r3, r2
 802074e:	4291      	cmp	r1, r2
 8020750:	d805      	bhi.n	802075e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 8020752:	4b0a      	ldr	r3, [pc, #40]	; (802077c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8020754:	2138      	movs	r1, #56	; 0x38
 8020756:	4a0a      	ldr	r2, [pc, #40]	; (8020780 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8020758:	480a      	ldr	r0, [pc, #40]	; (8020784 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 802075a:	f002 f919 	bl	8022990 <__assert_func>
 802075e:	4b0a      	ldr	r3, [pc, #40]	; (8020788 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8020760:	6019      	str	r1, [r3, #0]
 8020762:	4b0a      	ldr	r3, [pc, #40]	; (802078c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8020764:	6018      	str	r0, [r3, #0]
 8020766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802076a:	f7ff bf81 	b.w	8020670 <_ZN8touchgfx6Bitmap10clearCacheEv>
 802076e:	bd10      	pop	{r4, pc}
 8020770:	2000a310 	.word	0x2000a310
 8020774:	2000a324 	.word	0x2000a324
 8020778:	2000a320 	.word	0x2000a320
 802077c:	08026413 	.word	0x08026413
 8020780:	080264a8 	.word	0x080264a8
 8020784:	080263ee 	.word	0x080263ee
 8020788:	2000a30c 	.word	0x2000a30c
 802078c:	2000a304 	.word	0x2000a304

08020790 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8020790:	b470      	push	{r4, r5, r6}
 8020792:	4c07      	ldr	r4, [pc, #28]	; (80207b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8020794:	4605      	mov	r5, r0
 8020796:	4610      	mov	r0, r2
 8020798:	9a03      	ldr	r2, [sp, #12]
 802079a:	6826      	ldr	r6, [r4, #0]
 802079c:	b936      	cbnz	r6, 80207ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 802079e:	6025      	str	r5, [r4, #0]
 80207a0:	4c04      	ldr	r4, [pc, #16]	; (80207b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80207a2:	8021      	strh	r1, [r4, #0]
 80207a4:	4619      	mov	r1, r3
 80207a6:	bc70      	pop	{r4, r5, r6}
 80207a8:	f7ff bfc2 	b.w	8020730 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80207ac:	bc70      	pop	{r4, r5, r6}
 80207ae:	4770      	bx	lr
 80207b0:	2000a328 	.word	0x2000a328
 80207b4:	2000a320 	.word	0x2000a320

080207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80207b8:	b508      	push	{r3, lr}
 80207ba:	4b13      	ldr	r3, [pc, #76]	; (8020808 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80207bc:	6819      	ldr	r1, [r3, #0]
 80207be:	b931      	cbnz	r1, 80207ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80207c0:	4b12      	ldr	r3, [pc, #72]	; (802080c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80207c2:	f44f 710d 	mov.w	r1, #564	; 0x234
 80207c6:	4a12      	ldr	r2, [pc, #72]	; (8020810 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80207c8:	4812      	ldr	r0, [pc, #72]	; (8020814 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80207ca:	f002 f8e1 	bl	8022990 <__assert_func>
 80207ce:	4a12      	ldr	r2, [pc, #72]	; (8020818 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80207d0:	8803      	ldrh	r3, [r0, #0]
 80207d2:	8812      	ldrh	r2, [r2, #0]
 80207d4:	4293      	cmp	r3, r2
 80207d6:	da04      	bge.n	80207e2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80207d8:	2214      	movs	r2, #20
 80207da:	fb02 1303 	mla	r3, r2, r3, r1
 80207de:	8918      	ldrh	r0, [r3, #8]
 80207e0:	bd08      	pop	{r3, pc}
 80207e2:	490e      	ldr	r1, [pc, #56]	; (802081c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80207e4:	8809      	ldrh	r1, [r1, #0]
 80207e6:	4411      	add	r1, r2
 80207e8:	428b      	cmp	r3, r1
 80207ea:	da05      	bge.n	80207f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 80207ec:	1a9b      	subs	r3, r3, r2
 80207ee:	4a0c      	ldr	r2, [pc, #48]	; (8020820 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80207f0:	6812      	ldr	r2, [r2, #0]
 80207f2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80207f6:	e7f2      	b.n	80207de <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80207f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80207fc:	4293      	cmp	r3, r2
 80207fe:	bf06      	itte	eq
 8020800:	4b08      	ldreq	r3, [pc, #32]	; (8020824 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8020802:	8818      	ldrheq	r0, [r3, #0]
 8020804:	2000      	movne	r0, #0
 8020806:	bd08      	pop	{r3, pc}
 8020808:	2000a328 	.word	0x2000a328
 802080c:	0802646c 	.word	0x0802646c
 8020810:	08026555 	.word	0x08026555
 8020814:	080263ee 	.word	0x080263ee
 8020818:	2000a320 	.word	0x2000a320
 802081c:	2000a324 	.word	0x2000a324
 8020820:	2000a308 	.word	0x2000a308
 8020824:	2000a282 	.word	0x2000a282

08020828 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020828:	b508      	push	{r3, lr}
 802082a:	4b13      	ldr	r3, [pc, #76]	; (8020878 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 802082c:	6819      	ldr	r1, [r3, #0]
 802082e:	b931      	cbnz	r1, 802083e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8020830:	4b12      	ldr	r3, [pc, #72]	; (802087c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8020832:	f44f 7112 	mov.w	r1, #584	; 0x248
 8020836:	4a12      	ldr	r2, [pc, #72]	; (8020880 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020838:	4812      	ldr	r0, [pc, #72]	; (8020884 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 802083a:	f002 f8a9 	bl	8022990 <__assert_func>
 802083e:	4a12      	ldr	r2, [pc, #72]	; (8020888 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8020840:	8803      	ldrh	r3, [r0, #0]
 8020842:	8812      	ldrh	r2, [r2, #0]
 8020844:	4293      	cmp	r3, r2
 8020846:	da04      	bge.n	8020852 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8020848:	2214      	movs	r2, #20
 802084a:	fb02 1303 	mla	r3, r2, r3, r1
 802084e:	8958      	ldrh	r0, [r3, #10]
 8020850:	bd08      	pop	{r3, pc}
 8020852:	490e      	ldr	r1, [pc, #56]	; (802088c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8020854:	8809      	ldrh	r1, [r1, #0]
 8020856:	4411      	add	r1, r2
 8020858:	428b      	cmp	r3, r1
 802085a:	da05      	bge.n	8020868 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 802085c:	1a9b      	subs	r3, r3, r2
 802085e:	4a0c      	ldr	r2, [pc, #48]	; (8020890 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8020860:	6812      	ldr	r2, [r2, #0]
 8020862:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8020866:	e7f2      	b.n	802084e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8020868:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802086c:	4293      	cmp	r3, r2
 802086e:	bf06      	itte	eq
 8020870:	4b08      	ldreq	r3, [pc, #32]	; (8020894 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8020872:	8818      	ldrheq	r0, [r3, #0]
 8020874:	2000      	movne	r0, #0
 8020876:	bd08      	pop	{r3, pc}
 8020878:	2000a328 	.word	0x2000a328
 802087c:	0802646c 	.word	0x0802646c
 8020880:	08026581 	.word	0x08026581
 8020884:	080263ee 	.word	0x080263ee
 8020888:	2000a320 	.word	0x2000a320
 802088c:	2000a324 	.word	0x2000a324
 8020890:	2000a308 	.word	0x2000a308
 8020894:	2000a284 	.word	0x2000a284

08020898 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8020898:	4b22      	ldr	r3, [pc, #136]	; (8020924 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 802089a:	b510      	push	{r4, lr}
 802089c:	681c      	ldr	r4, [r3, #0]
 802089e:	b934      	cbnz	r4, 80208ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80208a0:	4b21      	ldr	r3, [pc, #132]	; (8020928 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80208a2:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80208a6:	4a21      	ldr	r2, [pc, #132]	; (802092c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80208a8:	4821      	ldr	r0, [pc, #132]	; (8020930 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80208aa:	f002 f871 	bl	8022990 <__assert_func>
 80208ae:	4a21      	ldr	r2, [pc, #132]	; (8020934 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80208b0:	880b      	ldrh	r3, [r1, #0]
 80208b2:	8812      	ldrh	r2, [r2, #0]
 80208b4:	4293      	cmp	r3, r2
 80208b6:	da10      	bge.n	80208da <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 80208b8:	2214      	movs	r2, #20
 80208ba:	fb02 4303 	mla	r3, r2, r3, r4
 80208be:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80208c2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80208c6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80208ca:	8a5b      	ldrh	r3, [r3, #18]
 80208cc:	8004      	strh	r4, [r0, #0]
 80208ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80208d2:	8041      	strh	r1, [r0, #2]
 80208d4:	8082      	strh	r2, [r0, #4]
 80208d6:	80c3      	strh	r3, [r0, #6]
 80208d8:	bd10      	pop	{r4, pc}
 80208da:	4917      	ldr	r1, [pc, #92]	; (8020938 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80208dc:	8809      	ldrh	r1, [r1, #0]
 80208de:	4411      	add	r1, r2
 80208e0:	428b      	cmp	r3, r1
 80208e2:	da09      	bge.n	80208f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80208e4:	1a9b      	subs	r3, r3, r2
 80208e6:	4a15      	ldr	r2, [pc, #84]	; (802093c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80208e8:	6812      	ldr	r2, [r2, #0]
 80208ea:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80208ee:	681a      	ldr	r2, [r3, #0]
 80208f0:	6002      	str	r2, [r0, #0]
 80208f2:	685a      	ldr	r2, [r3, #4]
 80208f4:	6042      	str	r2, [r0, #4]
 80208f6:	bd10      	pop	{r4, pc}
 80208f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80208fc:	4293      	cmp	r3, r2
 80208fe:	d10b      	bne.n	8020918 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8020900:	4b0f      	ldr	r3, [pc, #60]	; (8020940 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8020902:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020906:	4b0f      	ldr	r3, [pc, #60]	; (8020944 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8020908:	8081      	strh	r1, [r0, #4]
 802090a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802090e:	2300      	movs	r3, #0
 8020910:	80c2      	strh	r2, [r0, #6]
 8020912:	8003      	strh	r3, [r0, #0]
 8020914:	8043      	strh	r3, [r0, #2]
 8020916:	bd10      	pop	{r4, pc}
 8020918:	2300      	movs	r3, #0
 802091a:	8003      	strh	r3, [r0, #0]
 802091c:	8043      	strh	r3, [r0, #2]
 802091e:	8083      	strh	r3, [r0, #4]
 8020920:	e7d9      	b.n	80208d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 8020922:	bf00      	nop
 8020924:	2000a328 	.word	0x2000a328
 8020928:	0802646c 	.word	0x0802646c
 802092c:	080264ee 	.word	0x080264ee
 8020930:	080263ee 	.word	0x080263ee
 8020934:	2000a320 	.word	0x2000a320
 8020938:	2000a324 	.word	0x2000a324
 802093c:	2000a308 	.word	0x2000a308
 8020940:	2000a282 	.word	0x2000a282
 8020944:	2000a284 	.word	0x2000a284

08020948 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020948:	4b16      	ldr	r3, [pc, #88]	; (80209a4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	b333      	cbz	r3, 802099c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 802094e:	4a16      	ldr	r2, [pc, #88]	; (80209a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8020950:	8800      	ldrh	r0, [r0, #0]
 8020952:	8812      	ldrh	r2, [r2, #0]
 8020954:	4290      	cmp	r0, r2
 8020956:	da0f      	bge.n	8020978 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 8020958:	2214      	movs	r2, #20
 802095a:	fb02 3300 	mla	r3, r2, r0, r3
 802095e:	8a19      	ldrh	r1, [r3, #16]
 8020960:	891a      	ldrh	r2, [r3, #8]
 8020962:	4291      	cmp	r1, r2
 8020964:	db1c      	blt.n	80209a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020966:	8a58      	ldrh	r0, [r3, #18]
 8020968:	f3c0 000c 	ubfx	r0, r0, #0, #13
 802096c:	895b      	ldrh	r3, [r3, #10]
 802096e:	4298      	cmp	r0, r3
 8020970:	bfac      	ite	ge
 8020972:	2000      	movge	r0, #0
 8020974:	2001      	movlt	r0, #1
 8020976:	4770      	bx	lr
 8020978:	4b0c      	ldr	r3, [pc, #48]	; (80209ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 802097a:	881b      	ldrh	r3, [r3, #0]
 802097c:	4413      	add	r3, r2
 802097e:	4298      	cmp	r0, r3
 8020980:	da0c      	bge.n	802099c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 8020982:	4b0b      	ldr	r3, [pc, #44]	; (80209b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8020984:	1a80      	subs	r0, r0, r2
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 802098c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8020990:	891a      	ldrh	r2, [r3, #8]
 8020992:	4291      	cmp	r1, r2
 8020994:	db04      	blt.n	80209a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020996:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 802099a:	e7e7      	b.n	802096c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 802099c:	2000      	movs	r0, #0
 802099e:	4770      	bx	lr
 80209a0:	2001      	movs	r0, #1
 80209a2:	4770      	bx	lr
 80209a4:	2000a328 	.word	0x2000a328
 80209a8:	2000a320 	.word	0x2000a320
 80209ac:	2000a324 	.word	0x2000a324
 80209b0:	2000a308 	.word	0x2000a308

080209b4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80209b4:	b508      	push	{r3, lr}
 80209b6:	4b11      	ldr	r3, [pc, #68]	; (80209fc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 80209b8:	6819      	ldr	r1, [r3, #0]
 80209ba:	b931      	cbnz	r1, 80209ca <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80209bc:	4b10      	ldr	r3, [pc, #64]	; (8020a00 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80209be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80209c2:	4a10      	ldr	r2, [pc, #64]	; (8020a04 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80209c4:	4810      	ldr	r0, [pc, #64]	; (8020a08 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80209c6:	f001 ffe3 	bl	8022990 <__assert_func>
 80209ca:	8803      	ldrh	r3, [r0, #0]
 80209cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80209d0:	4293      	cmp	r3, r2
 80209d2:	d011      	beq.n	80209f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 80209d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80209d8:	4293      	cmp	r3, r2
 80209da:	d103      	bne.n	80209e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80209dc:	4b0b      	ldr	r3, [pc, #44]	; (8020a0c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80209e2:	bd08      	pop	{r3, pc}
 80209e4:	4a0a      	ldr	r2, [pc, #40]	; (8020a10 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80209e6:	6812      	ldr	r2, [r2, #0]
 80209e8:	b112      	cbz	r2, 80209f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 80209ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80209ee:	b920      	cbnz	r0, 80209fa <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80209f0:	2214      	movs	r2, #20
 80209f2:	4353      	muls	r3, r2
 80209f4:	58c8      	ldr	r0, [r1, r3]
 80209f6:	bd08      	pop	{r3, pc}
 80209f8:	2000      	movs	r0, #0
 80209fa:	bd08      	pop	{r3, pc}
 80209fc:	2000a328 	.word	0x2000a328
 8020a00:	0802646c 	.word	0x0802646c
 8020a04:	08026524 	.word	0x08026524
 8020a08:	080263ee 	.word	0x080263ee
 8020a0c:	2000a290 	.word	0x2000a290
 8020a10:	2000a304 	.word	0x2000a304

08020a14 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 8020a14:	8802      	ldrh	r2, [r0, #0]
 8020a16:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020a1a:	429a      	cmp	r2, r3
 8020a1c:	dc19      	bgt.n	8020a52 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 8020a1e:	4b0e      	ldr	r3, [pc, #56]	; (8020a58 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 8020a20:	881b      	ldrh	r3, [r3, #0]
 8020a22:	429a      	cmp	r2, r3
 8020a24:	da15      	bge.n	8020a52 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 8020a26:	4b0d      	ldr	r3, [pc, #52]	; (8020a5c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 8020a28:	6819      	ldr	r1, [r3, #0]
 8020a2a:	2314      	movs	r3, #20
 8020a2c:	fb03 1302 	mla	r3, r3, r2, r1
 8020a30:	6858      	ldr	r0, [r3, #4]
 8020a32:	b178      	cbz	r0, 8020a54 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020a34:	490a      	ldr	r1, [pc, #40]	; (8020a60 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 8020a36:	6809      	ldr	r1, [r1, #0]
 8020a38:	b161      	cbz	r1, 8020a54 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020a3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8020a3e:	b14a      	cbz	r2, 8020a54 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020a40:	8919      	ldrh	r1, [r3, #8]
 8020a42:	8958      	ldrh	r0, [r3, #10]
 8020a44:	4348      	muls	r0, r1
 8020a46:	0040      	lsls	r0, r0, #1
 8020a48:	3003      	adds	r0, #3
 8020a4a:	f020 0003 	bic.w	r0, r0, #3
 8020a4e:	4410      	add	r0, r2
 8020a50:	4770      	bx	lr
 8020a52:	2000      	movs	r0, #0
 8020a54:	4770      	bx	lr
 8020a56:	bf00      	nop
 8020a58:	2000a320 	.word	0x2000a320
 8020a5c:	2000a328 	.word	0x2000a328
 8020a60:	2000a304 	.word	0x2000a304

08020a64 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8020a64:	b508      	push	{r3, lr}
 8020a66:	4b1c      	ldr	r3, [pc, #112]	; (8020ad8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8020a68:	6819      	ldr	r1, [r3, #0]
 8020a6a:	8803      	ldrh	r3, [r0, #0]
 8020a6c:	b1a9      	cbz	r1, 8020a9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 8020a6e:	4a1b      	ldr	r2, [pc, #108]	; (8020adc <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8020a70:	8812      	ldrh	r2, [r2, #0]
 8020a72:	4293      	cmp	r3, r2
 8020a74:	da05      	bge.n	8020a82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 8020a76:	2214      	movs	r2, #20
 8020a78:	fb02 1303 	mla	r3, r2, r3, r1
 8020a7c:	7cd8      	ldrb	r0, [r3, #19]
 8020a7e:	0940      	lsrs	r0, r0, #5
 8020a80:	bd08      	pop	{r3, pc}
 8020a82:	4917      	ldr	r1, [pc, #92]	; (8020ae0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 8020a84:	8809      	ldrh	r1, [r1, #0]
 8020a86:	4411      	add	r1, r2
 8020a88:	428b      	cmp	r3, r1
 8020a8a:	da06      	bge.n	8020a9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 8020a8c:	1a9b      	subs	r3, r3, r2
 8020a8e:	4a15      	ldr	r2, [pc, #84]	; (8020ae4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8020a90:	6812      	ldr	r2, [r2, #0]
 8020a92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8020a96:	7b18      	ldrb	r0, [r3, #12]
 8020a98:	bd08      	pop	{r3, pc}
 8020a9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020a9e:	4293      	cmp	r3, r2
 8020aa0:	d10c      	bne.n	8020abc <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020aa2:	4b11      	ldr	r3, [pc, #68]	; (8020ae8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	6898      	ldr	r0, [r3, #8]
 8020aa8:	6803      	ldr	r3, [r0, #0]
 8020aaa:	6a1b      	ldr	r3, [r3, #32]
 8020aac:	4798      	blx	r3
 8020aae:	2804      	cmp	r0, #4
 8020ab0:	d00e      	beq.n	8020ad0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 8020ab2:	d805      	bhi.n	8020ac0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8020ab4:	2801      	cmp	r0, #1
 8020ab6:	d00d      	beq.n	8020ad4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 8020ab8:	2802      	cmp	r0, #2
 8020aba:	d007      	beq.n	8020acc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 8020abc:	2000      	movs	r0, #0
 8020abe:	bd08      	pop	{r3, pc}
 8020ac0:	2810      	cmp	r0, #16
 8020ac2:	d0fb      	beq.n	8020abc <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020ac4:	2818      	cmp	r0, #24
 8020ac6:	d1f9      	bne.n	8020abc <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020ac8:	2001      	movs	r0, #1
 8020aca:	bd08      	pop	{r3, pc}
 8020acc:	2005      	movs	r0, #5
 8020ace:	bd08      	pop	{r3, pc}
 8020ad0:	2006      	movs	r0, #6
 8020ad2:	bd08      	pop	{r3, pc}
 8020ad4:	2003      	movs	r0, #3
 8020ad6:	bd08      	pop	{r3, pc}
 8020ad8:	2000a328 	.word	0x2000a328
 8020adc:	2000a320 	.word	0x2000a320
 8020ae0:	2000a324 	.word	0x2000a324
 8020ae4:	2000a308 	.word	0x2000a308
 8020ae8:	2000a290 	.word	0x2000a290

08020aec <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8020aec:	2010      	movs	r0, #16
 8020aee:	4770      	bx	lr

08020af0 <_ZN8touchgfx8LCD16bpp4initEv>:
 8020af0:	4770      	bx	lr
	...

08020af4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 8020af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020af8:	b086      	sub	sp, #24
 8020afa:	6808      	ldr	r0, [r1, #0]
 8020afc:	6849      	ldr	r1, [r1, #4]
 8020afe:	4617      	mov	r7, r2
 8020b00:	ab04      	add	r3, sp, #16
 8020b02:	ac04      	add	r4, sp, #16
 8020b04:	c303      	stmia	r3!, {r0, r1}
 8020b06:	4620      	mov	r0, r4
 8020b08:	f7fe f81c 	bl	801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b0c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020b10:	429f      	cmp	r7, r3
 8020b12:	d109      	bne.n	8020b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 8020b14:	4b33      	ldr	r3, [pc, #204]	; (8020be4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 8020b16:	781b      	ldrb	r3, [r3, #0]
 8020b18:	b933      	cbnz	r3, 8020b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 8020b1a:	4b33      	ldr	r3, [pc, #204]	; (8020be8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 8020b1c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8020b20:	4a32      	ldr	r2, [pc, #200]	; (8020bec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 8020b22:	4833      	ldr	r0, [pc, #204]	; (8020bf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 8020b24:	f001 ff34 	bl	8022990 <__assert_func>
 8020b28:	4e32      	ldr	r6, [pc, #200]	; (8020bf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 8020b2a:	6830      	ldr	r0, [r6, #0]
 8020b2c:	46b0      	mov	r8, r6
 8020b2e:	6803      	ldr	r3, [r0, #0]
 8020b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b32:	4798      	blx	r3
 8020b34:	f010 0a01 	ands.w	sl, r0, #1
 8020b38:	d020      	beq.n	8020b7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 8020b3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020b3e:	429f      	cmp	r7, r3
 8020b40:	d108      	bne.n	8020b54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 8020b42:	6830      	ldr	r0, [r6, #0]
 8020b44:	6803      	ldr	r3, [r0, #0]
 8020b46:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020b4c:	4798      	blx	r3
 8020b4e:	b006      	add	sp, #24
 8020b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b54:	ad06      	add	r5, sp, #24
 8020b56:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020b5a:	4628      	mov	r0, r5
 8020b5c:	f7ff ff2a 	bl	80209b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020b60:	6836      	ldr	r6, [r6, #0]
 8020b62:	4680      	mov	r8, r0
 8020b64:	4628      	mov	r0, r5
 8020b66:	6833      	ldr	r3, [r6, #0]
 8020b68:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8020b6a:	f7ff fe25 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020b6e:	4643      	mov	r3, r8
 8020b70:	9000      	str	r0, [sp, #0]
 8020b72:	4630      	mov	r0, r6
 8020b74:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020b78:	47b8      	blx	r7
 8020b7a:	e7e8      	b.n	8020b4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 8020b7c:	6830      	ldr	r0, [r6, #0]
 8020b7e:	ad06      	add	r5, sp, #24
 8020b80:	4e1d      	ldr	r6, [pc, #116]	; (8020bf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 8020b82:	6803      	ldr	r3, [r0, #0]
 8020b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b86:	4798      	blx	r3
 8020b88:	8834      	ldrh	r4, [r6, #0]
 8020b8a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8020b8e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020b92:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020b96:	4657      	mov	r7, sl
 8020b98:	fb02 3404 	mla	r4, r2, r4, r3
 8020b9c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020ba0:	4628      	mov	r0, r5
 8020ba2:	f7ff ff07 	bl	80209b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020ba6:	4681      	mov	r9, r0
 8020ba8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020bac:	429f      	cmp	r7, r3
 8020bae:	da14      	bge.n	8020bda <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 8020bb0:	f8d8 0000 	ldr.w	r0, [r8]
 8020bb4:	4649      	mov	r1, r9
 8020bb6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020bba:	3701      	adds	r7, #1
 8020bbc:	6802      	ldr	r2, [r0, #0]
 8020bbe:	005b      	lsls	r3, r3, #1
 8020bc0:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020bc4:	4622      	mov	r2, r4
 8020bc6:	47d0      	blx	sl
 8020bc8:	8833      	ldrh	r3, [r6, #0]
 8020bca:	4628      	mov	r0, r5
 8020bcc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020bd0:	f7ff fdf2 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020bd4:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 8020bd8:	e7e6      	b.n	8020ba8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 8020bda:	4628      	mov	r0, r5
 8020bdc:	f7ff feea 	bl	80209b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020be0:	e7b5      	b.n	8020b4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 8020be2:	bf00      	nop
 8020be4:	2000a28d 	.word	0x2000a28d
 8020be8:	08026603 	.word	0x08026603
 8020bec:	08026760 	.word	0x08026760
 8020bf0:	0802663e 	.word	0x0802663e
 8020bf4:	2000a290 	.word	0x2000a290
 8020bf8:	2000a288 	.word	0x2000a288

08020bfc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c00:	b08d      	sub	sp, #52	; 0x34
 8020c02:	4688      	mov	r8, r1
 8020c04:	4614      	mov	r4, r2
 8020c06:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020c0a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8020c0e:	2f00      	cmp	r7, #0
 8020c10:	d047      	beq.n	8020ca2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020c12:	6810      	ldr	r0, [r2, #0]
 8020c14:	ae08      	add	r6, sp, #32
 8020c16:	6851      	ldr	r1, [r2, #4]
 8020c18:	c603      	stmia	r6!, {r0, r1}
 8020c1a:	6818      	ldr	r0, [r3, #0]
 8020c1c:	ae0a      	add	r6, sp, #40	; 0x28
 8020c1e:	6859      	ldr	r1, [r3, #4]
 8020c20:	c603      	stmia	r6!, {r0, r1}
 8020c22:	a808      	add	r0, sp, #32
 8020c24:	f7fd ff8e 	bl	801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c28:	4621      	mov	r1, r4
 8020c2a:	a80a      	add	r0, sp, #40	; 0x28
 8020c2c:	f7fd ff72 	bl	801eb14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c30:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020c34:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020c38:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020c3c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020c40:	fb14 2103 	smlabb	r1, r4, r3, r2
 8020c44:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 8020c48:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020c4c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8020e68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 8020c50:	440a      	add	r2, r1
 8020c52:	f8d8 0000 	ldr.w	r0, [r8]
 8020c56:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020c5a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020c5e:	4413      	add	r3, r2
 8020c60:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020c64:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020c68:	9306      	str	r3, [sp, #24]
 8020c6a:	6803      	ldr	r3, [r0, #0]
 8020c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c6e:	4798      	blx	r3
 8020c70:	2fff      	cmp	r7, #255	; 0xff
 8020c72:	d019      	beq.n	8020ca8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020c74:	f010 0f04 	tst.w	r0, #4
 8020c78:	d01a      	beq.n	8020cb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020c7a:	f8d8 0000 	ldr.w	r0, [r8]
 8020c7e:	b2b6      	uxth	r6, r6
 8020c80:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020c84:	6801      	ldr	r1, [r0, #0]
 8020c86:	9504      	str	r5, [sp, #16]
 8020c88:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020c8c:	9703      	str	r7, [sp, #12]
 8020c8e:	9502      	str	r5, [sp, #8]
 8020c90:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8020c94:	9600      	str	r6, [sp, #0]
 8020c96:	9501      	str	r5, [sp, #4]
 8020c98:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020c9c:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 8020c9e:	4621      	mov	r1, r4
 8020ca0:	47a8      	blx	r5
 8020ca2:	b00d      	add	sp, #52	; 0x34
 8020ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ca8:	b915      	cbnz	r5, 8020cb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020caa:	f010 0f01 	tst.w	r0, #1
 8020cae:	e7e3      	b.n	8020c78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020cb0:	f8d8 0000 	ldr.w	r0, [r8]
 8020cb4:	6803      	ldr	r3, [r0, #0]
 8020cb6:	6a1b      	ldr	r3, [r3, #32]
 8020cb8:	4798      	blx	r3
 8020cba:	4b69      	ldr	r3, [pc, #420]	; (8020e60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8020cbc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8020cc0:	2fff      	cmp	r7, #255	; 0xff
 8020cc2:	881d      	ldrh	r5, [r3, #0]
 8020cc4:	4699      	mov	r9, r3
 8020cc6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020cca:	fb01 2505 	mla	r5, r1, r5, r2
 8020cce:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020cd2:	f000 80a6 	beq.w	8020e22 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 8020cd6:	ea44 0205 	orr.w	r2, r4, r5
 8020cda:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 8020cde:	f012 0f03 	tst.w	r2, #3
 8020ce2:	d154      	bne.n	8020d8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020ce4:	07f2      	lsls	r2, r6, #31
 8020ce6:	d452      	bmi.n	8020d8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020ce8:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 8020cec:	f01e 0e01 	ands.w	lr, lr, #1
 8020cf0:	d14d      	bne.n	8020d8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020cf2:	2202      	movs	r2, #2
 8020cf4:	9307      	str	r3, [sp, #28]
 8020cf6:	fb96 f8f2 	sdiv	r8, r6, r2
 8020cfa:	4693      	mov	fp, r2
 8020cfc:	f1c8 0800 	rsb	r8, r8, #0
 8020d00:	9b06      	ldr	r3, [sp, #24]
 8020d02:	459e      	cmp	lr, r3
 8020d04:	f280 80a5 	bge.w	8020e52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020d08:	f04f 0900 	mov.w	r9, #0
 8020d0c:	45b1      	cmp	r9, r6
 8020d0e:	da2e      	bge.n	8020d6e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 8020d10:	6829      	ldr	r1, [r5, #0]
 8020d12:	f109 0902 	add.w	r9, r9, #2
 8020d16:	f854 2b04 	ldr.w	r2, [r4], #4
 8020d1a:	0a0b      	lsrs	r3, r1, #8
 8020d1c:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 8020d20:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020d24:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 8020d28:	fb00 fa0a 	mul.w	sl, r0, sl
 8020d2c:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 8020d30:	0949      	lsrs	r1, r1, #5
 8020d32:	4343      	muls	r3, r0
 8020d34:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 8020d38:	fb07 3c0c 	mla	ip, r7, ip, r3
 8020d3c:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 8020d40:	0952      	lsrs	r2, r2, #5
 8020d42:	4341      	muls	r1, r0
 8020d44:	fb07 a303 	mla	r3, r7, r3, sl
 8020d48:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 8020d4c:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 8020d50:	0a1b      	lsrs	r3, r3, #8
 8020d52:	fb07 1202 	mla	r2, r7, r2, r1
 8020d56:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 8020d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8020d5e:	4b41      	ldr	r3, [pc, #260]	; (8020e64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 8020d60:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 8020d64:	ea4c 0202 	orr.w	r2, ip, r2
 8020d68:	f845 2b04 	str.w	r2, [r5], #4
 8020d6c:	e7ce      	b.n	8020d0c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 8020d6e:	9b07      	ldr	r3, [sp, #28]
 8020d70:	f10e 0e01 	add.w	lr, lr, #1
 8020d74:	881b      	ldrh	r3, [r3, #0]
 8020d76:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 8020d7a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8020d7e:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020d82:	fb93 f3fb 	sdiv	r3, r3, fp
 8020d86:	4443      	add	r3, r8
 8020d88:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020d8c:	e7b8      	b.n	8020d00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 8020d8e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8020d92:	f04f 0800 	mov.w	r8, #0
 8020d96:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020e6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 8020d9a:	005b      	lsls	r3, r3, #1
 8020d9c:	9307      	str	r3, [sp, #28]
 8020d9e:	9b06      	ldr	r3, [sp, #24]
 8020da0:	4598      	cmp	r8, r3
 8020da2:	da56      	bge.n	8020e52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020da4:	46aa      	mov	sl, r5
 8020da6:	f04f 0c00 	mov.w	ip, #0
 8020daa:	45b4      	cmp	ip, r6
 8020dac:	da29      	bge.n	8020e02 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 8020dae:	f8ba 1000 	ldrh.w	r1, [sl]
 8020db2:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8020db6:	f10c 0c01 	add.w	ip, ip, #1
 8020dba:	ea01 0309 	and.w	r3, r1, r9
 8020dbe:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 8020dc2:	ea02 0e09 	and.w	lr, r2, r9
 8020dc6:	f001 011f 	and.w	r1, r1, #31
 8020dca:	4343      	muls	r3, r0
 8020dcc:	fb00 fb0b 	mul.w	fp, r0, fp
 8020dd0:	fb07 3e0e 	mla	lr, r7, lr, r3
 8020dd4:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8020dd8:	4341      	muls	r1, r0
 8020dda:	f002 021f 	and.w	r2, r2, #31
 8020dde:	fb07 b303 	mla	r3, r7, r3, fp
 8020de2:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 8020de6:	fb07 1202 	mla	r2, r7, r2, r1
 8020dea:	121b      	asrs	r3, r3, #8
 8020dec:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8020df0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020df4:	ea4e 0e03 	orr.w	lr, lr, r3
 8020df8:	ea4e 0e02 	orr.w	lr, lr, r2
 8020dfc:	f82a eb02 	strh.w	lr, [sl], #2
 8020e00:	e7d3      	b.n	8020daa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 8020e02:	4b17      	ldr	r3, [pc, #92]	; (8020e60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8020e04:	f108 0801 	add.w	r8, r8, #1
 8020e08:	9a07      	ldr	r2, [sp, #28]
 8020e0a:	881b      	ldrh	r3, [r3, #0]
 8020e0c:	1b9b      	subs	r3, r3, r6
 8020e0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020e12:	441d      	add	r5, r3
 8020e14:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020e18:	1b9b      	subs	r3, r3, r6
 8020e1a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020e1e:	441c      	add	r4, r3
 8020e20:	e7bd      	b.n	8020d9e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 8020e22:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8020e26:	2700      	movs	r7, #0
 8020e28:	9b06      	ldr	r3, [sp, #24]
 8020e2a:	429f      	cmp	r7, r3
 8020e2c:	da11      	bge.n	8020e52 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020e2e:	f8d8 0000 	ldr.w	r0, [r8]
 8020e32:	4622      	mov	r2, r4
 8020e34:	4629      	mov	r1, r5
 8020e36:	3701      	adds	r7, #1
 8020e38:	6803      	ldr	r3, [r0, #0]
 8020e3a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020e3c:	4653      	mov	r3, sl
 8020e3e:	47b0      	blx	r6
 8020e40:	f8b9 3000 	ldrh.w	r3, [r9]
 8020e44:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020e48:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020e4c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020e50:	e7ea      	b.n	8020e28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 8020e52:	4b05      	ldr	r3, [pc, #20]	; (8020e68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 8020e54:	6818      	ldr	r0, [r3, #0]
 8020e56:	6803      	ldr	r3, [r0, #0]
 8020e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e5a:	4798      	blx	r3
 8020e5c:	e721      	b.n	8020ca2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020e5e:	bf00      	nop
 8020e60:	2000a288 	.word	0x2000a288
 8020e64:	07e007e0 	.word	0x07e007e0
 8020e68:	2000a290 	.word	0x2000a290
 8020e6c:	fffff800 	.word	0xfffff800

08020e70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e74:	4615      	mov	r5, r2
 8020e76:	b08b      	sub	sp, #44	; 0x2c
 8020e78:	4699      	mov	r9, r3
 8020e7a:	b13b      	cbz	r3, 8020e8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020e7c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020e80:	b123      	cbz	r3, 8020e8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020e82:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	f040 808c 	bne.w	8020fa4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8020e8c:	b00b      	add	sp, #44	; 0x2c
 8020e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e92:	f010 0f08 	tst.w	r0, #8
 8020e96:	d011      	beq.n	8020ebc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 8020e98:	6818      	ldr	r0, [r3, #0]
 8020e9a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8020e9e:	6801      	ldr	r1, [r0, #0]
 8020ea0:	9401      	str	r4, [sp, #4]
 8020ea2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020ea6:	f8cd 9008 	str.w	r9, [sp, #8]
 8020eaa:	9400      	str	r4, [sp, #0]
 8020eac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020eb0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8020eb2:	4629      	mov	r1, r5
 8020eb4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020eb8:	47a0      	blx	r4
 8020eba:	e7e7      	b.n	8020e8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020ebc:	6818      	ldr	r0, [r3, #0]
 8020ebe:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8020ec2:	6803      	ldr	r3, [r0, #0]
 8020ec4:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 8020ec8:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8020ecc:	6a1b      	ldr	r3, [r3, #32]
 8020ece:	4798      	blx	r3
 8020ed0:	4a3e      	ldr	r2, [pc, #248]	; (8020fcc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 8020ed2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020ed6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020eda:	8816      	ldrh	r6, [r2, #0]
 8020edc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020ee0:	fb06 1303 	mla	r3, r6, r3, r1
 8020ee4:	4616      	mov	r6, r2
 8020ee6:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 8020eea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020eee:	d041      	beq.n	8020f74 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 8020ef0:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 8020ef4:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 8020ef8:	f005 051f 	and.w	r5, r5, #31
 8020efc:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 8020f00:	fb09 fe0e 	mul.w	lr, r9, lr
 8020f04:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8020fd4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8020f08:	fb09 f305 	mul.w	r3, r9, r5
 8020f0c:	2500      	movs	r5, #0
 8020f0e:	fb09 f707 	mul.w	r7, r9, r7
 8020f12:	9306      	str	r3, [sp, #24]
 8020f14:	004b      	lsls	r3, r1, #1
 8020f16:	9207      	str	r2, [sp, #28]
 8020f18:	9305      	str	r3, [sp, #20]
 8020f1a:	4545      	cmp	r5, r8
 8020f1c:	da3c      	bge.n	8020f98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8020f1e:	4681      	mov	r9, r0
 8020f20:	f04f 0c00 	mov.w	ip, #0
 8020f24:	45a4      	cmp	ip, r4
 8020f26:	da1c      	bge.n	8020f62 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 8020f28:	f8b9 2000 	ldrh.w	r2, [r9]
 8020f2c:	f10c 0c01 	add.w	ip, ip, #1
 8020f30:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8020f34:	ea02 010b 	and.w	r1, r2, fp
 8020f38:	fb06 7303 	mla	r3, r6, r3, r7
 8020f3c:	fb06 e101 	mla	r1, r6, r1, lr
 8020f40:	0a1b      	lsrs	r3, r3, #8
 8020f42:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 8020f46:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f4a:	430b      	orrs	r3, r1
 8020f4c:	f002 011f 	and.w	r1, r2, #31
 8020f50:	9a06      	ldr	r2, [sp, #24]
 8020f52:	fb06 2101 	mla	r1, r6, r1, r2
 8020f56:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8020f5a:	430b      	orrs	r3, r1
 8020f5c:	f829 3b02 	strh.w	r3, [r9], #2
 8020f60:	e7e0      	b.n	8020f24 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 8020f62:	9b07      	ldr	r3, [sp, #28]
 8020f64:	3501      	adds	r5, #1
 8020f66:	9a05      	ldr	r2, [sp, #20]
 8020f68:	881b      	ldrh	r3, [r3, #0]
 8020f6a:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8020f6e:	4413      	add	r3, r2
 8020f70:	4418      	add	r0, r3
 8020f72:	e7d2      	b.n	8020f1a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8020f74:	0049      	lsls	r1, r1, #1
 8020f76:	2200      	movs	r2, #0
 8020f78:	4542      	cmp	r2, r8
 8020f7a:	da0d      	bge.n	8020f98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8020f7c:	2300      	movs	r3, #0
 8020f7e:	42a3      	cmp	r3, r4
 8020f80:	da03      	bge.n	8020f8a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 8020f82:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8020f86:	3301      	adds	r3, #1
 8020f88:	e7f9      	b.n	8020f7e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 8020f8a:	8833      	ldrh	r3, [r6, #0]
 8020f8c:	3201      	adds	r2, #1
 8020f8e:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8020f92:	440b      	add	r3, r1
 8020f94:	4418      	add	r0, r3
 8020f96:	e7ef      	b.n	8020f78 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 8020f98:	4b0d      	ldr	r3, [pc, #52]	; (8020fd0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8020f9a:	6818      	ldr	r0, [r3, #0]
 8020f9c:	6803      	ldr	r3, [r0, #0]
 8020f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020fa0:	4798      	blx	r3
 8020fa2:	e773      	b.n	8020e8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020fa4:	6808      	ldr	r0, [r1, #0]
 8020fa6:	ab08      	add	r3, sp, #32
 8020fa8:	6849      	ldr	r1, [r1, #4]
 8020faa:	4c09      	ldr	r4, [pc, #36]	; (8020fd0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8020fac:	c303      	stmia	r3!, {r0, r1}
 8020fae:	a808      	add	r0, sp, #32
 8020fb0:	f7fd fdc8 	bl	801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020fb4:	6820      	ldr	r0, [r4, #0]
 8020fb6:	6803      	ldr	r3, [r0, #0]
 8020fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020fba:	4798      	blx	r3
 8020fbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020fc0:	4623      	mov	r3, r4
 8020fc2:	f47f af66 	bne.w	8020e92 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 8020fc6:	f010 0f02 	tst.w	r0, #2
 8020fca:	e764      	b.n	8020e96 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 8020fcc:	2000a288 	.word	0x2000a288
 8020fd0:	2000a290 	.word	0x2000a290
 8020fd4:	fffff800 	.word	0xfffff800

08020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 8020fd8:	ee07 0a90 	vmov	s15, r0
 8020fdc:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8020fe0:	ee71 1ac1 	vsub.f32	s3, s3, s2
 8020fe4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8021008 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 8020fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020fec:	eea0 0a82 	vfma.f32	s0, s1, s4
 8020ff0:	eea1 1a82 	vfma.f32	s2, s3, s4
 8020ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020ff8:	ee31 1a40 	vsub.f32	s2, s2, s0
 8020ffc:	eea2 0a81 	vfma.f32	s0, s5, s2
 8021000:	ee20 0a27 	vmul.f32	s0, s0, s15
 8021004:	4770      	bx	lr
 8021006:	bf00      	nop
 8021008:	437f0000 	.word	0x437f0000

0802100c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 802100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021010:	ed2d 8b0e 	vpush	{d8-d14}
 8021014:	b095      	sub	sp, #84	; 0x54
 8021016:	461e      	mov	r6, r3
 8021018:	2700      	movs	r7, #0
 802101a:	4690      	mov	r8, r2
 802101c:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 8021020:	a812      	add	r0, sp, #72	; 0x48
 8021022:	468a      	mov	sl, r1
 8021024:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8021026:	9311      	str	r3, [sp, #68]	; 0x44
 8021028:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802102c:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 8021030:	9301      	str	r3, [sp, #4]
 8021032:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021034:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8021038:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802103c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8021040:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 8021044:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8021048:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 802104c:	f7fd fd7a 	bl	801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021050:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021052:	6835      	ldr	r5, [r6, #0]
 8021054:	6818      	ldr	r0, [r3, #0]
 8021056:	f9b4 3000 	ldrsh.w	r3, [r4]
 802105a:	f9b9 e000 	ldrsh.w	lr, [r9]
 802105e:	1b40      	subs	r0, r0, r5
 8021060:	18e9      	adds	r1, r5, r3
 8021062:	ebae 0c01 	sub.w	ip, lr, r1
 8021066:	4560      	cmp	r0, ip
 8021068:	f340 86a2 	ble.w	8021db0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 802106c:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 8021070:	44f1      	add	r9, lr
 8021072:	fa0f f989 	sxth.w	r9, r9
 8021076:	4549      	cmp	r1, r9
 8021078:	f300 869a 	bgt.w	8021db0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 802107c:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8021080:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8021084:	6972      	ldr	r2, [r6, #20]
 8021086:	ed96 6a07 	vldr	s12, [r6, #28]
 802108a:	4422      	add	r2, r4
 802108c:	f8da 4004 	ldr.w	r4, [sl, #4]
 8021090:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 8021094:	fb04 5402 	mla	r4, r4, r2, r5
 8021098:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 802109c:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 80210a0:	4282      	cmp	r2, r0
 80210a2:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 80210a6:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 80210aa:	441c      	add	r4, r3
 80210ac:	bfa8      	it	ge
 80210ae:	4602      	movge	r2, r0
 80210b0:	f8da b000 	ldr.w	fp, [sl]
 80210b4:	458e      	cmp	lr, r1
 80210b6:	ee06 2a90 	vmov	s13, r2
 80210ba:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 80210be:	9208      	str	r2, [sp, #32]
 80210c0:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 80210c4:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 80210c8:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80210cc:	ee69 ba2b 	vmul.f32	s23, s18, s23
 80210d0:	ee29 9a26 	vmul.f32	s18, s18, s13
 80210d4:	eecc 6a06 	vdiv.f32	s13, s24, s12
 80210d8:	ee37 aaab 	vadd.f32	s20, s15, s23
 80210dc:	ee77 aa09 	vadd.f32	s21, s14, s18
 80210e0:	ee76 9a0b 	vadd.f32	s19, s12, s22
 80210e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80210e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80210ec:	dc01      	bgt.n	80210f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 80210ee:	970a      	str	r7, [sp, #40]	; 0x28
 80210f0:	e029      	b.n	8021146 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 80210f2:	9a08      	ldr	r2, [sp, #32]
 80210f4:	fb9c f1f2 	sdiv	r1, ip, r2
 80210f8:	ee06 1a90 	vmov	s13, r1
 80210fc:	434a      	muls	r2, r1
 80210fe:	2900      	cmp	r1, #0
 8021100:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8021104:	ebac 0602 	sub.w	r6, ip, r2
 8021108:	960a      	str	r6, [sp, #40]	; 0x28
 802110a:	eeeb 9a26 	vfma.f32	s19, s22, s13
 802110e:	eeab aaa6 	vfma.f32	s20, s23, s13
 8021112:	eee9 aa26 	vfma.f32	s21, s18, s13
 8021116:	dd12      	ble.n	802113e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 8021118:	ee79 7acb 	vsub.f32	s15, s19, s22
 802111c:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8021120:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021128:	bf14      	ite	ne
 802112a:	eecc 6a27 	vdivne.f32	s13, s24, s15
 802112e:	eef0 6a4c 	vmoveq.f32	s13, s24
 8021132:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 8021136:	ee27 7a26 	vmul.f32	s14, s14, s13
 802113a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802113e:	1a80      	subs	r0, r0, r2
 8021140:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8021144:	4415      	add	r5, r2
 8021146:	18ea      	adds	r2, r5, r3
 8021148:	4402      	add	r2, r0
 802114a:	4591      	cmp	r9, r2
 802114c:	bfbc      	itt	lt
 802114e:	eba9 0003 	sublt.w	r0, r9, r3
 8021152:	1b40      	sublt	r0, r0, r5
 8021154:	2800      	cmp	r0, #0
 8021156:	f340 862b 	ble.w	8021db0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 802115a:	9b08      	ldr	r3, [sp, #32]
 802115c:	9a08      	ldr	r2, [sp, #32]
 802115e:	fb90 f3f3 	sdiv	r3, r0, r3
 8021162:	9309      	str	r3, [sp, #36]	; 0x24
 8021164:	fb02 0313 	mls	r3, r2, r3, r0
 8021168:	930c      	str	r3, [sp, #48]	; 0x30
 802116a:	b91b      	cbnz	r3, 8021174 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 802116c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802116e:	920c      	str	r2, [sp, #48]	; 0x30
 8021170:	3b01      	subs	r3, #1
 8021172:	9309      	str	r3, [sp, #36]	; 0x24
 8021174:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021176:	eddf ca40 	vldr	s25, [pc, #256]	; 8021278 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	9304      	str	r3, [sp, #16]
 802117e:	9b01      	ldr	r3, [sp, #4]
 8021180:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8021184:	9305      	str	r3, [sp, #20]
 8021186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021188:	2b00      	cmp	r3, #0
 802118a:	dc03      	bgt.n	8021194 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 802118c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802118e:	2b00      	cmp	r3, #0
 8021190:	f340 860e 	ble.w	8021db0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8021194:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 8021198:	9b08      	ldr	r3, [sp, #32]
 802119a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802119c:	eef0 6a67 	vmov.f32	s13, s15
 80211a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211a4:	ee16 ba90 	vmov	fp, s13
 80211a8:	eef0 6a47 	vmov.f32	s13, s14
 80211ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211b0:	ee6a 8a08 	vmul.f32	s17, s20, s16
 80211b4:	ee2a 8a88 	vmul.f32	s16, s21, s16
 80211b8:	ee16 5a90 	vmov	r5, s13
 80211bc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80211c0:	ee38 7a47 	vsub.f32	s14, s16, s14
 80211c4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80211c8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80211cc:	ee17 2a90 	vmov	r2, s15
 80211d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80211d4:	ee17 2a10 	vmov	r2, s14
 80211d8:	9306      	str	r3, [sp, #24]
 80211da:	9b08      	ldr	r3, [sp, #32]
 80211dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80211e0:	9a08      	ldr	r2, [sp, #32]
 80211e2:	9307      	str	r3, [sp, #28]
 80211e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80211e6:	2900      	cmp	r1, #0
 80211e8:	bfc8      	it	gt
 80211ea:	4613      	movgt	r3, r2
 80211ec:	9302      	str	r3, [sp, #8]
 80211ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	dd0d      	ble.n	8021210 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 80211f4:	9a06      	ldr	r2, [sp, #24]
 80211f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80211fa:	fb02 bb03 	mla	fp, r2, r3, fp
 80211fe:	9a07      	ldr	r2, [sp, #28]
 8021200:	fb02 5503 	mla	r5, r2, r3, r5
 8021204:	9b02      	ldr	r3, [sp, #8]
 8021206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021208:	1a9b      	subs	r3, r3, r2
 802120a:	9302      	str	r3, [sp, #8]
 802120c:	2300      	movs	r3, #0
 802120e:	930a      	str	r3, [sp, #40]	; 0x28
 8021210:	ea5f 432b 	movs.w	r3, fp, asr #16
 8021214:	d42e      	bmi.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021216:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 802121a:	4283      	cmp	r3, r0
 802121c:	da2a      	bge.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 802121e:	142b      	asrs	r3, r5, #16
 8021220:	d428      	bmi.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021222:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021226:	428b      	cmp	r3, r1
 8021228:	da24      	bge.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 802122a:	9b02      	ldr	r3, [sp, #8]
 802122c:	9a06      	ldr	r2, [sp, #24]
 802122e:	3b01      	subs	r3, #1
 8021230:	fb03 b202 	mla	r2, r3, r2, fp
 8021234:	1412      	asrs	r2, r2, #16
 8021236:	d41d      	bmi.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021238:	4282      	cmp	r2, r0
 802123a:	da1b      	bge.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 802123c:	9a07      	ldr	r2, [sp, #28]
 802123e:	fb03 5302 	mla	r3, r3, r2, r5
 8021242:	141b      	asrs	r3, r3, #16
 8021244:	d416      	bmi.n	8021274 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021246:	428b      	cmp	r3, r1
 8021248:	bfb4      	ite	lt
 802124a:	2300      	movlt	r3, #0
 802124c:	2301      	movge	r3, #1
 802124e:	9303      	str	r3, [sp, #12]
 8021250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021252:	2b0b      	cmp	r3, #11
 8021254:	f200 82d7 	bhi.w	8021806 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 8021258:	e8df f013 	tbh	[pc, r3, lsl #1]
 802125c:	03430531 	.word	0x03430531
 8021260:	02ca02e8 	.word	0x02ca02e8
 8021264:	02d502d5 	.word	0x02d502d5
 8021268:	02d502d5 	.word	0x02d502d5
 802126c:	01c5026b 	.word	0x01c5026b
 8021270:	00100160 	.word	0x00100160
 8021274:	2301      	movs	r3, #1
 8021276:	e7ea      	b.n	802124e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 8021278:	3d800000 	.word	0x3d800000
 802127c:	f04f 0a00 	mov.w	sl, #0
 8021280:	9b02      	ldr	r3, [sp, #8]
 8021282:	4553      	cmp	r3, sl
 8021284:	f340 82bb 	ble.w	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021288:	9a03      	ldr	r2, [sp, #12]
 802128a:	ea4f 412b 	mov.w	r1, fp, asr #16
 802128e:	142b      	asrs	r3, r5, #16
 8021290:	b17a      	cbz	r2, 80212b2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 8021292:	2900      	cmp	r1, #0
 8021294:	f2c0 813b 	blt.w	802150e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8021298:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802129c:	4291      	cmp	r1, r2
 802129e:	f280 8136 	bge.w	802150e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	f2c0 8133 	blt.w	802150e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 80212a8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 80212ac:	4293      	cmp	r3, r2
 80212ae:	f280 812e 	bge.w	802150e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 80212b2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80212b6:	9804      	ldr	r0, [sp, #16]
 80212b8:	fb03 1102 	mla	r1, r3, r2, r1
 80212bc:	9b04      	ldr	r3, [sp, #16]
 80212be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80212c2:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 80212c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80212ca:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 80212ce:	6859      	ldr	r1, [r3, #4]
 80212d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80212d4:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80212d8:	685a      	ldr	r2, [r3, #4]
 80212da:	0e3b      	lsrs	r3, r7, #24
 80212dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80212e0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80212e4:	435e      	muls	r6, r3
 80212e6:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80212ea:	435f      	muls	r7, r3
 80212ec:	ee06 ea90 	vmov	s13, lr
 80212f0:	0a36      	lsrs	r6, r6, #8
 80212f2:	ee07 3a90 	vmov	s15, r3
 80212f6:	0a3f      	lsrs	r7, r7, #8
 80212f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80212fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021304:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021308:	433e      	orrs	r6, r7
 802130a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 802130e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021312:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8021316:	fb0e f707 	mul.w	r7, lr, r7
 802131a:	fb0e f101 	mul.w	r1, lr, r1
 802131e:	0a3f      	lsrs	r7, r7, #8
 8021320:	960b      	str	r6, [sp, #44]	; 0x2c
 8021322:	0a09      	lsrs	r1, r1, #8
 8021324:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021328:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802132c:	430f      	orrs	r7, r1
 802132e:	0e01      	lsrs	r1, r0, #24
 8021330:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021334:	fb01 f808 	mul.w	r8, r1, r8
 8021338:	ee07 1a10 	vmov	s14, r1
 802133c:	4348      	muls	r0, r1
 802133e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021342:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021346:	0a00      	lsrs	r0, r0, #8
 8021348:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802134c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021350:	ea48 0800 	orr.w	r8, r8, r0
 8021354:	0e10      	lsrs	r0, r2, #24
 8021356:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802135a:	fb00 f909 	mul.w	r9, r0, r9
 802135e:	4342      	muls	r2, r0
 8021360:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021364:	0a12      	lsrs	r2, r2, #8
 8021366:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 802136a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802136e:	ea49 0902 	orr.w	r9, r9, r2
 8021372:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021376:	ee0d 2a10 	vmov	s26, r2
 802137a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802137e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8021382:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8021386:	ee0d 2a90 	vmov	s27, r2
 802138a:	ee01 3a90 	vmov	s3, r3
 802138e:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8021392:	eef8 daed 	vcvt.f32.s32	s27, s27
 8021396:	ee2d da2c 	vmul.f32	s26, s26, s25
 802139a:	ee01 3a10 	vmov	s2, r3
 802139e:	0c3b      	lsrs	r3, r7, #16
 80213a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80213a4:	ee6d daac 	vmul.f32	s27, s27, s25
 80213a8:	eeed 7a26 	vfma.f32	s15, s26, s13
 80213ac:	ee06 0a90 	vmov	s13, r0
 80213b0:	ee00 3a90 	vmov	s1, r3
 80213b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80213ba:	0c1b      	lsrs	r3, r3, #16
 80213bc:	eef0 2a6d 	vmov.f32	s5, s27
 80213c0:	eeb0 2a4d 	vmov.f32	s4, s26
 80213c4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80213c8:	ee00 3a10 	vmov	s0, r3
 80213cc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80213d0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80213d4:	eead 7a26 	vfma.f32	s14, s26, s13
 80213d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80213dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80213e0:	eeed 7a87 	vfma.f32	s15, s27, s14
 80213e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80213e8:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80213ec:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80213f0:	4630      	mov	r0, r6
 80213f2:	f7ff fdf1 	bl	8020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 80213f6:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80213fa:	eeb0 ea40 	vmov.f32	s28, s0
 80213fe:	4630      	mov	r0, r6
 8021400:	ee01 3a90 	vmov	s3, r3
 8021404:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8021408:	eef0 2a6d 	vmov.f32	s5, s27
 802140c:	ee01 3a10 	vmov	s2, r3
 8021410:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021414:	eeb0 2a4d 	vmov.f32	s4, s26
 8021418:	ee00 3a90 	vmov	s1, r3
 802141c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802141e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021422:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021426:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 802142a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 802142e:	ee00 3a10 	vmov	s0, r3
 8021432:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021436:	f7ff fdcf 	bl	8020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 802143a:	eef0 ea40 	vmov.f32	s29, s0
 802143e:	fa5f f389 	uxtb.w	r3, r9
 8021442:	4630      	mov	r0, r6
 8021444:	eef0 2a6d 	vmov.f32	s5, s27
 8021448:	ee01 3a90 	vmov	s3, r3
 802144c:	fa5f f388 	uxtb.w	r3, r8
 8021450:	eeb0 2a4d 	vmov.f32	s4, s26
 8021454:	ee01 3a10 	vmov	s2, r3
 8021458:	b2fb      	uxtb	r3, r7
 802145a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802145e:	ee00 3a90 	vmov	s1, r3
 8021462:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8021466:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 802146a:	ee00 3a10 	vmov	s0, r3
 802146e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021472:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021476:	f7ff fdaf 	bl	8020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 802147a:	2e00      	cmp	r6, #0
 802147c:	d047      	beq.n	802150e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 802147e:	eefc 7aee 	vcvt.u32.f32	s15, s29
 8021482:	2eff      	cmp	r6, #255	; 0xff
 8021484:	ee17 2a90 	vmov	r2, s15
 8021488:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 802148c:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8021490:	ee17 3a90 	vmov	r3, s15
 8021494:	eefc 7ace 	vcvt.u32.f32	s15, s28
 8021498:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802149c:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 80214a0:	ee17 3a90 	vmov	r3, s15
 80214a4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80214a8:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 80214ac:	d102      	bne.n	80214b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 80214ae:	9a01      	ldr	r2, [sp, #4]
 80214b0:	2aff      	cmp	r2, #255	; 0xff
 80214b2:	d02a      	beq.n	802150a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 80214b4:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 80214b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80214bc:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 80214c0:	fb12 fe06 	smulbb	lr, r2, r6
 80214c4:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 80214c8:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 80214cc:	f000 001f 	and.w	r0, r0, #31
 80214d0:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 80214d4:	f022 0207 	bic.w	r2, r2, #7
 80214d8:	f026 0607 	bic.w	r6, r6, #7
 80214dc:	434a      	muls	r2, r1
 80214de:	434f      	muls	r7, r1
 80214e0:	fb0e 2606 	mla	r6, lr, r6, r2
 80214e4:	4ad0      	ldr	r2, [pc, #832]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80214e6:	4348      	muls	r0, r1
 80214e8:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 80214ec:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80214f0:	f003 031f 	and.w	r3, r3, #31
 80214f4:	fb0e 7202 	mla	r2, lr, r2, r7
 80214f8:	fb0e 0303 	mla	r3, lr, r3, r0
 80214fc:	0c12      	lsrs	r2, r2, #16
 80214fe:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021502:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021506:	4316      	orrs	r6, r2
 8021508:	4333      	orrs	r3, r6
 802150a:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 802150e:	9b06      	ldr	r3, [sp, #24]
 8021510:	f10a 0a01 	add.w	sl, sl, #1
 8021514:	449b      	add	fp, r3
 8021516:	9b07      	ldr	r3, [sp, #28]
 8021518:	441d      	add	r5, r3
 802151a:	e6b1      	b.n	8021280 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 802151c:	2000      	movs	r0, #0
 802151e:	9b02      	ldr	r3, [sp, #8]
 8021520:	4283      	cmp	r3, r0
 8021522:	f340 816c 	ble.w	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021526:	9b03      	ldr	r3, [sp, #12]
 8021528:	ea4f 422b 	mov.w	r2, fp, asr #16
 802152c:	1429      	asrs	r1, r5, #16
 802152e:	b15b      	cbz	r3, 8021548 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 8021530:	2a00      	cmp	r2, #0
 8021532:	db52      	blt.n	80215da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021534:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021538:	429a      	cmp	r2, r3
 802153a:	da4e      	bge.n	80215da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 802153c:	2900      	cmp	r1, #0
 802153e:	db4c      	blt.n	80215da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021540:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021544:	4299      	cmp	r1, r3
 8021546:	da48      	bge.n	80215da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021548:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802154c:	fb01 2303 	mla	r3, r1, r3, r2
 8021550:	9a04      	ldr	r2, [sp, #16]
 8021552:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021556:	0e31      	lsrs	r1, r6, #24
 8021558:	d03f      	beq.n	80215da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 802155a:	0972      	lsrs	r2, r6, #5
 802155c:	4bb2      	ldr	r3, [pc, #712]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802155e:	29ff      	cmp	r1, #255	; 0xff
 8021560:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 8021564:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021568:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802156c:	ea43 0302 	orr.w	r3, r3, r2
 8021570:	ea43 0306 	orr.w	r3, r3, r6
 8021574:	b29b      	uxth	r3, r3
 8021576:	d102      	bne.n	802157e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 8021578:	9a01      	ldr	r2, [sp, #4]
 802157a:	2aff      	cmp	r2, #255	; 0xff
 802157c:	d02b      	beq.n	80215d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 802157e:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 8021582:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 8021586:	9a01      	ldr	r2, [sp, #4]
 8021588:	f02e 0e07 	bic.w	lr, lr, #7
 802158c:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 8021590:	4351      	muls	r1, r2
 8021592:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 8021596:	f007 071f 	and.w	r7, r7, #31
 802159a:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 802159e:	f022 0207 	bic.w	r2, r2, #7
 80215a2:	4372      	muls	r2, r6
 80215a4:	fb06 fc0c 	mul.w	ip, r6, ip
 80215a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80215ac:	4a9e      	ldr	r2, [pc, #632]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80215ae:	4377      	muls	r7, r6
 80215b0:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 80215b4:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80215b8:	f003 031f 	and.w	r3, r3, #31
 80215bc:	fb01 c202 	mla	r2, r1, r2, ip
 80215c0:	fb01 7303 	mla	r3, r1, r3, r7
 80215c4:	0c12      	lsrs	r2, r2, #16
 80215c6:	f3c3 4304 	ubfx	r3, r3, #16, #5
 80215ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215ce:	ea4e 0e02 	orr.w	lr, lr, r2
 80215d2:	ea4e 0303 	orr.w	r3, lr, r3
 80215d6:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80215da:	9b06      	ldr	r3, [sp, #24]
 80215dc:	3001      	adds	r0, #1
 80215de:	449b      	add	fp, r3
 80215e0:	9b07      	ldr	r3, [sp, #28]
 80215e2:	441d      	add	r5, r3
 80215e4:	e79b      	b.n	802151e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 80215e6:	f04f 0e00 	mov.w	lr, #0
 80215ea:	9b02      	ldr	r3, [sp, #8]
 80215ec:	4573      	cmp	r3, lr
 80215ee:	f340 8106 	ble.w	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80215f2:	9903      	ldr	r1, [sp, #12]
 80215f4:	ea4f 422b 	mov.w	r2, fp, asr #16
 80215f8:	142b      	asrs	r3, r5, #16
 80215fa:	b179      	cbz	r1, 802161c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 80215fc:	2a00      	cmp	r2, #0
 80215fe:	f2c0 8091 	blt.w	8021724 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8021602:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021606:	428a      	cmp	r2, r1
 8021608:	f280 808c 	bge.w	8021724 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 802160c:	2b00      	cmp	r3, #0
 802160e:	f2c0 8089 	blt.w	8021724 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8021612:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021616:	428b      	cmp	r3, r1
 8021618:	f280 8084 	bge.w	8021724 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 802161c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021620:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 8021624:	9804      	ldr	r0, [sp, #16]
 8021626:	fb03 2301 	mla	r3, r3, r1, r2
 802162a:	9a04      	ldr	r2, [sp, #16]
 802162c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021630:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8021634:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8021638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802163c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8021640:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8021644:	6850      	ldr	r0, [r2, #4]
 8021646:	fb01 f70a 	mul.w	r7, r1, sl
 802164a:	0a3f      	lsrs	r7, r7, #8
 802164c:	ebaa 0607 	sub.w	r6, sl, r7
 8021650:	eba1 0907 	sub.w	r9, r1, r7
 8021654:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 8021658:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802165c:	fb01 f10a 	mul.w	r1, r1, sl
 8021660:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 8021664:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021668:	0a0a      	lsrs	r2, r1, #8
 802166a:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 802166e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021672:	4371      	muls	r1, r6
 8021674:	fb06 f808 	mul.w	r8, r6, r8
 8021678:	fb02 110a 	mla	r1, r2, sl, r1
 802167c:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8021680:	fb02 8c0c 	mla	ip, r2, ip, r8
 8021684:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021688:	fb07 110a 	mla	r1, r7, sl, r1
 802168c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021690:	fb07 cc00 	mla	ip, r7, r0, ip
 8021694:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021698:	fb09 110a 	mla	r1, r9, sl, r1
 802169c:	fb09 cc03 	mla	ip, r9, r3, ip
 80216a0:	4b61      	ldr	r3, [pc, #388]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80216a2:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 80216a6:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 80216aa:	ea41 0a0a 	orr.w	sl, r1, sl
 80216ae:	ea4f 315a 	mov.w	r1, sl, lsr #13
 80216b2:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 80216b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80216ba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80216be:	4319      	orrs	r1, r3
 80216c0:	9b01      	ldr	r3, [sp, #4]
 80216c2:	2bff      	cmp	r3, #255	; 0xff
 80216c4:	ea41 010a 	orr.w	r1, r1, sl
 80216c8:	d02a      	beq.n	8021720 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 80216ca:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 80216ce:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 80216d2:	9e05      	ldr	r6, [sp, #20]
 80216d4:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 80216d8:	f023 0307 	bic.w	r3, r3, #7
 80216dc:	9f05      	ldr	r7, [sp, #20]
 80216de:	f020 0007 	bic.w	r0, r0, #7
 80216e2:	4370      	muls	r0, r6
 80216e4:	9e01      	ldr	r6, [sp, #4]
 80216e6:	fb06 0303 	mla	r3, r6, r3, r0
 80216ea:	484f      	ldr	r0, [pc, #316]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80216ec:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 80216f0:	f002 021f 	and.w	r2, r2, #31
 80216f4:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 80216f8:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 80216fc:	437e      	muls	r6, r7
 80216fe:	9f01      	ldr	r7, [sp, #4]
 8021700:	f001 011f 	and.w	r1, r1, #31
 8021704:	fb07 6000 	mla	r0, r7, r0, r6
 8021708:	0a00      	lsrs	r0, r0, #8
 802170a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802170e:	4303      	orrs	r3, r0
 8021710:	9805      	ldr	r0, [sp, #20]
 8021712:	4342      	muls	r2, r0
 8021714:	b29b      	uxth	r3, r3
 8021716:	fb07 2101 	mla	r1, r7, r1, r2
 802171a:	f3c1 2104 	ubfx	r1, r1, #8, #5
 802171e:	4319      	orrs	r1, r3
 8021720:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 8021724:	9b06      	ldr	r3, [sp, #24]
 8021726:	f10e 0e01 	add.w	lr, lr, #1
 802172a:	449b      	add	fp, r3
 802172c:	9b07      	ldr	r3, [sp, #28]
 802172e:	441d      	add	r5, r3
 8021730:	e75b      	b.n	80215ea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 8021732:	2600      	movs	r6, #0
 8021734:	9b02      	ldr	r3, [sp, #8]
 8021736:	42b3      	cmp	r3, r6
 8021738:	dd61      	ble.n	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802173a:	9b03      	ldr	r3, [sp, #12]
 802173c:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021740:	1429      	asrs	r1, r5, #16
 8021742:	b15b      	cbz	r3, 802175c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 8021744:	2a00      	cmp	r2, #0
 8021746:	db4d      	blt.n	80217e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021748:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802174c:	429a      	cmp	r2, r3
 802174e:	da49      	bge.n	80217e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021750:	2900      	cmp	r1, #0
 8021752:	db47      	blt.n	80217e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021754:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021758:	4299      	cmp	r1, r3
 802175a:	da43      	bge.n	80217e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 802175c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021760:	fb01 2303 	mla	r3, r1, r3, r2
 8021764:	9a04      	ldr	r2, [sp, #16]
 8021766:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802176a:	4b2f      	ldr	r3, [pc, #188]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802176c:	094a      	lsrs	r2, r1, #5
 802176e:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8021772:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021776:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802177a:	4313      	orrs	r3, r2
 802177c:	9a01      	ldr	r2, [sp, #4]
 802177e:	430b      	orrs	r3, r1
 8021780:	2aff      	cmp	r2, #255	; 0xff
 8021782:	b29b      	uxth	r3, r3
 8021784:	d02c      	beq.n	80217e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 8021786:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 802178a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 802178e:	9f05      	ldr	r7, [sp, #20]
 8021790:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 8021794:	f022 0207 	bic.w	r2, r2, #7
 8021798:	f020 0007 	bic.w	r0, r0, #7
 802179c:	4378      	muls	r0, r7
 802179e:	9f01      	ldr	r7, [sp, #4]
 80217a0:	fb07 0202 	mla	r2, r7, r2, r0
 80217a4:	4820      	ldr	r0, [pc, #128]	; (8021828 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80217a6:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 80217aa:	f001 011f 	and.w	r1, r1, #31
 80217ae:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 80217b2:	9a05      	ldr	r2, [sp, #20]
 80217b4:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 80217b8:	f003 031f 	and.w	r3, r3, #31
 80217bc:	4357      	muls	r7, r2
 80217be:	9a01      	ldr	r2, [sp, #4]
 80217c0:	fb02 7000 	mla	r0, r2, r0, r7
 80217c4:	0a00      	lsrs	r0, r0, #8
 80217c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80217ca:	ea4e 0200 	orr.w	r2, lr, r0
 80217ce:	9805      	ldr	r0, [sp, #20]
 80217d0:	4341      	muls	r1, r0
 80217d2:	9801      	ldr	r0, [sp, #4]
 80217d4:	b292      	uxth	r2, r2
 80217d6:	fb00 1303 	mla	r3, r0, r3, r1
 80217da:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80217de:	4313      	orrs	r3, r2
 80217e0:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 80217e4:	9b06      	ldr	r3, [sp, #24]
 80217e6:	3601      	adds	r6, #1
 80217e8:	449b      	add	fp, r3
 80217ea:	9b07      	ldr	r3, [sp, #28]
 80217ec:	441d      	add	r5, r3
 80217ee:	e7a1      	b.n	8021734 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 80217f0:	2300      	movs	r3, #0
 80217f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80217f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80217f6:	9b02      	ldr	r3, [sp, #8]
 80217f8:	4293      	cmp	r3, r2
 80217fa:	f300 811b 	bgt.w	8021a34 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 80217fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021802:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021808:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802180c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021810:	2b00      	cmp	r3, #0
 8021812:	ee7a aa89 	vadd.f32	s21, s21, s18
 8021816:	f340 82cb 	ble.w	8021db0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 802181a:	3b01      	subs	r3, #1
 802181c:	eeb0 7a48 	vmov.f32	s14, s16
 8021820:	eef0 7a68 	vmov.f32	s15, s17
 8021824:	9309      	str	r3, [sp, #36]	; 0x24
 8021826:	e4ae      	b.n	8021186 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 8021828:	fffff800 	.word	0xfffff800
 802182c:	2000      	movs	r0, #0
 802182e:	9b02      	ldr	r3, [sp, #8]
 8021830:	4283      	cmp	r3, r0
 8021832:	dde4      	ble.n	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021834:	9a03      	ldr	r2, [sp, #12]
 8021836:	ea4f 432b 	mov.w	r3, fp, asr #16
 802183a:	1429      	asrs	r1, r5, #16
 802183c:	b15a      	cbz	r2, 8021856 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 802183e:	2b00      	cmp	r3, #0
 8021840:	db49      	blt.n	80218d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021842:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021846:	4293      	cmp	r3, r2
 8021848:	da45      	bge.n	80218d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802184a:	2900      	cmp	r1, #0
 802184c:	db43      	blt.n	80218d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802184e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8021852:	4291      	cmp	r1, r2
 8021854:	da3f      	bge.n	80218d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021856:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802185a:	fb01 3202 	mla	r2, r1, r2, r3
 802185e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021860:	685b      	ldr	r3, [r3, #4]
 8021862:	5c99      	ldrb	r1, [r3, r2]
 8021864:	b3b9      	cbz	r1, 80218d6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021866:	9b04      	ldr	r3, [sp, #16]
 8021868:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802186c:	9a01      	ldr	r2, [sp, #4]
 802186e:	2aff      	cmp	r2, #255	; 0xff
 8021870:	d101      	bne.n	8021876 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 8021872:	29ff      	cmp	r1, #255	; 0xff
 8021874:	d02d      	beq.n	80218d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 8021876:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 802187a:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 802187e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8021882:	f02e 0e07 	bic.w	lr, lr, #7
 8021886:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 802188a:	fb12 f101 	smulbb	r1, r2, r1
 802188e:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 8021892:	f007 071f 	and.w	r7, r7, #31
 8021896:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 802189a:	f022 0207 	bic.w	r2, r2, #7
 802189e:	4372      	muls	r2, r6
 80218a0:	fb06 fc0c 	mul.w	ip, r6, ip
 80218a4:	fb01 2e0e 	mla	lr, r1, lr, r2
 80218a8:	4a61      	ldr	r2, [pc, #388]	; (8021a30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 80218aa:	4377      	muls	r7, r6
 80218ac:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 80218b0:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80218b4:	f003 031f 	and.w	r3, r3, #31
 80218b8:	fb01 c202 	mla	r2, r1, r2, ip
 80218bc:	fb01 7303 	mla	r3, r1, r3, r7
 80218c0:	0c12      	lsrs	r2, r2, #16
 80218c2:	f3c3 4304 	ubfx	r3, r3, #16, #5
 80218c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80218ca:	ea4e 0e02 	orr.w	lr, lr, r2
 80218ce:	ea4e 0303 	orr.w	r3, lr, r3
 80218d2:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80218d6:	9b06      	ldr	r3, [sp, #24]
 80218d8:	3001      	adds	r0, #1
 80218da:	449b      	add	fp, r3
 80218dc:	9b07      	ldr	r3, [sp, #28]
 80218de:	441d      	add	r5, r3
 80218e0:	e7a5      	b.n	802182e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 80218e2:	2300      	movs	r3, #0
 80218e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80218e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80218e8:	9b02      	ldr	r3, [sp, #8]
 80218ea:	4293      	cmp	r3, r2
 80218ec:	dd87      	ble.n	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80218ee:	9b03      	ldr	r3, [sp, #12]
 80218f0:	ea4f 422b 	mov.w	r2, fp, asr #16
 80218f4:	1429      	asrs	r1, r5, #16
 80218f6:	b17b      	cbz	r3, 8021918 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 80218f8:	2a00      	cmp	r2, #0
 80218fa:	f2c0 8092 	blt.w	8021a22 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80218fe:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021902:	429a      	cmp	r2, r3
 8021904:	f280 808d 	bge.w	8021a22 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021908:	2900      	cmp	r1, #0
 802190a:	f2c0 808a 	blt.w	8021a22 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 802190e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021912:	4299      	cmp	r1, r3
 8021914:	f280 8085 	bge.w	8021a22 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021918:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802191c:	f3c5 3603 	ubfx	r6, r5, #12, #4
 8021920:	9804      	ldr	r0, [sp, #16]
 8021922:	fb01 2103 	mla	r1, r1, r3, r2
 8021926:	9a04      	ldr	r2, [sp, #16]
 8021928:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 802192c:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 8021930:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021934:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021938:	8879      	ldrh	r1, [r7, #2]
 802193a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802193e:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8021942:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021946:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 802194a:	fb06 f302 	mul.w	r3, r6, r2
 802194e:	ea4e 0e09 	orr.w	lr, lr, r9
 8021952:	ea4f 4901 	mov.w	r9, r1, lsl #16
 8021956:	10db      	asrs	r3, r3, #3
 8021958:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 802195c:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8021960:	f1c6 0710 	rsb	r7, r6, #16
 8021964:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021968:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 802196c:	1abf      	subs	r7, r7, r2
 802196e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021972:	ea49 0101 	orr.w	r1, r9, r1
 8021976:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802197a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802197e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021982:	4351      	muls	r1, r2
 8021984:	9a01      	ldr	r2, [sp, #4]
 8021986:	ea4a 0808 	orr.w	r8, sl, r8
 802198a:	fb0e 1107 	mla	r1, lr, r7, r1
 802198e:	2aff      	cmp	r2, #255	; 0xff
 8021990:	fb03 1108 	mla	r1, r3, r8, r1
 8021994:	ea4f 480c 	mov.w	r8, ip, lsl #16
 8021998:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802199c:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 80219a0:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 80219a4:	ea48 0c0c 	orr.w	ip, r8, ip
 80219a8:	fb03 110c 	mla	r1, r3, ip, r1
 80219ac:	ea4f 5951 	mov.w	r9, r1, lsr #21
 80219b0:	ea4f 1351 	mov.w	r3, r1, lsr #5
 80219b4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80219b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80219bc:	ea49 0303 	orr.w	r3, r9, r3
 80219c0:	b29b      	uxth	r3, r3
 80219c2:	d02b      	beq.n	8021a1c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 80219c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80219c6:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 80219ca:	9805      	ldr	r0, [sp, #20]
 80219cc:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 80219d0:	f026 0607 	bic.w	r6, r6, #7
 80219d4:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 80219d8:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 80219dc:	f001 011f 	and.w	r1, r1, #31
 80219e0:	f022 0207 	bic.w	r2, r2, #7
 80219e4:	4342      	muls	r2, r0
 80219e6:	9801      	ldr	r0, [sp, #4]
 80219e8:	fb00 2606 	mla	r6, r0, r6, r2
 80219ec:	4a10      	ldr	r2, [pc, #64]	; (8021a30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 80219ee:	9805      	ldr	r0, [sp, #20]
 80219f0:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 80219f4:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80219f8:	4347      	muls	r7, r0
 80219fa:	9801      	ldr	r0, [sp, #4]
 80219fc:	f003 031f 	and.w	r3, r3, #31
 8021a00:	fb00 7202 	mla	r2, r0, r2, r7
 8021a04:	0a12      	lsrs	r2, r2, #8
 8021a06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a0a:	4316      	orrs	r6, r2
 8021a0c:	9a05      	ldr	r2, [sp, #20]
 8021a0e:	4351      	muls	r1, r2
 8021a10:	fb00 1303 	mla	r3, r0, r3, r1
 8021a14:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8021a18:	4333      	orrs	r3, r6
 8021a1a:	b29b      	uxth	r3, r3
 8021a1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021a1e:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8021a22:	9b06      	ldr	r3, [sp, #24]
 8021a24:	449b      	add	fp, r3
 8021a26:	9b07      	ldr	r3, [sp, #28]
 8021a28:	441d      	add	r5, r3
 8021a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a2c:	3301      	adds	r3, #1
 8021a2e:	e759      	b.n	80218e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 8021a30:	fffff800 	.word	0xfffff800
 8021a34:	9903      	ldr	r1, [sp, #12]
 8021a36:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021a3a:	142a      	asrs	r2, r5, #16
 8021a3c:	b179      	cbz	r1, 8021a5e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	f2c0 8136 	blt.w	8021cb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021a44:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021a48:	428b      	cmp	r3, r1
 8021a4a:	f280 8131 	bge.w	8021cb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021a4e:	2a00      	cmp	r2, #0
 8021a50:	f2c0 812e 	blt.w	8021cb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021a54:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021a58:	428a      	cmp	r2, r1
 8021a5a:	f280 8129 	bge.w	8021cb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021a5e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021a62:	fb02 3301 	mla	r3, r2, r1, r3
 8021a66:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021a68:	6850      	ldr	r0, [r2, #4]
 8021a6a:	18c2      	adds	r2, r0, r3
 8021a6c:	5cc0      	ldrb	r0, [r0, r3]
 8021a6e:	900d      	str	r0, [sp, #52]	; 0x34
 8021a70:	7850      	ldrb	r0, [r2, #1]
 8021a72:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8021a76:	900e      	str	r0, [sp, #56]	; 0x38
 8021a78:	5c50      	ldrb	r0, [r2, r1]
 8021a7a:	440a      	add	r2, r1
 8021a7c:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8021a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a84:	7852      	ldrb	r2, [r2, #1]
 8021a86:	ee07 0a10 	vmov	s14, r0
 8021a8a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021a8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8021a90:	9210      	str	r2, [sp, #64]	; 0x40
 8021a92:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021a96:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8021a9a:	ee0d 2a10 	vmov	s26, r2
 8021a9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8021aa2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021aa6:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8021aaa:	ee0d 2a90 	vmov	s27, r2
 8021aae:	ee2d da2c 	vmul.f32	s26, s26, s25
 8021ab2:	eef8 daed 	vcvt.f32.s32	s27, s27
 8021ab6:	eeed 7a26 	vfma.f32	s15, s26, s13
 8021aba:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 8021abe:	ee6d daac 	vmul.f32	s27, s27, s25
 8021ac2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021ac6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8021aca:	eead 7a26 	vfma.f32	s14, s26, s13
 8021ace:	ee37 7a67 	vsub.f32	s14, s14, s15
 8021ad2:	eeed 7a87 	vfma.f32	s15, s27, s14
 8021ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021ada:	ee17 6a90 	vmov	r6, s15
 8021ade:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8021ae2:	f000 80e5 	beq.w	8021cb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021ae6:	9a04      	ldr	r2, [sp, #16]
 8021ae8:	eef0 2a6d 	vmov.f32	s5, s27
 8021aec:	eeb0 2a4d 	vmov.f32	s4, s26
 8021af0:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8021af4:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8021af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021afa:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 8021afe:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8021b02:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8021b06:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8021b0a:	f00a 001f 	and.w	r0, sl, #31
 8021b0e:	4358      	muls	r0, r3
 8021b10:	1203      	asrs	r3, r0, #8
 8021b12:	f009 001f 	and.w	r0, r9, #31
 8021b16:	ee01 3a90 	vmov	s3, r3
 8021b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b1c:	4358      	muls	r0, r3
 8021b1e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021b22:	1203      	asrs	r3, r0, #8
 8021b24:	f008 001f 	and.w	r0, r8, #31
 8021b28:	ee01 3a10 	vmov	s2, r3
 8021b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021b2e:	4358      	muls	r0, r3
 8021b30:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021b34:	1203      	asrs	r3, r0, #8
 8021b36:	f007 001f 	and.w	r0, r7, #31
 8021b3a:	ee00 3a90 	vmov	s1, r3
 8021b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b40:	4358      	muls	r0, r3
 8021b42:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021b46:	1203      	asrs	r3, r0, #8
 8021b48:	4630      	mov	r0, r6
 8021b4a:	ee00 3a10 	vmov	s0, r3
 8021b4e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021b52:	f7ff fa41 	bl	8020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021b56:	f3ca 1045 	ubfx	r0, sl, #5, #6
 8021b5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b5c:	eeb0 ea40 	vmov.f32	s28, s0
 8021b60:	eef0 2a6d 	vmov.f32	s5, s27
 8021b64:	4358      	muls	r0, r3
 8021b66:	eeb0 2a4d 	vmov.f32	s4, s26
 8021b6a:	1203      	asrs	r3, r0, #8
 8021b6c:	f3c9 1045 	ubfx	r0, r9, #5, #6
 8021b70:	ee01 3a90 	vmov	s3, r3
 8021b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b76:	4358      	muls	r0, r3
 8021b78:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021b7c:	1203      	asrs	r3, r0, #8
 8021b7e:	f3c8 1045 	ubfx	r0, r8, #5, #6
 8021b82:	ee01 3a10 	vmov	s2, r3
 8021b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021b88:	4358      	muls	r0, r3
 8021b8a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021b8e:	1203      	asrs	r3, r0, #8
 8021b90:	f3c7 1045 	ubfx	r0, r7, #5, #6
 8021b94:	0aff      	lsrs	r7, r7, #11
 8021b96:	ee00 3a90 	vmov	s1, r3
 8021b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b9c:	4358      	muls	r0, r3
 8021b9e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021ba2:	1203      	asrs	r3, r0, #8
 8021ba4:	4630      	mov	r0, r6
 8021ba6:	ee00 3a10 	vmov	s0, r3
 8021baa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021bae:	f7ff fa13 	bl	8020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bb4:	ea4f 21da 	mov.w	r1, sl, lsr #11
 8021bb8:	eef0 ea40 	vmov.f32	s29, s0
 8021bbc:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 8021bc0:	4630      	mov	r0, r6
 8021bc2:	fb03 fa01 	mul.w	sl, r3, r1
 8021bc6:	eef0 2a6d 	vmov.f32	s5, s27
 8021bca:	eeb0 2a4d 	vmov.f32	s4, s26
 8021bce:	ea4f 232a 	mov.w	r3, sl, asr #8
 8021bd2:	ee01 3a90 	vmov	s3, r3
 8021bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021bd8:	fb03 f902 	mul.w	r9, r3, r2
 8021bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021bde:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021be2:	ea4f 2329 	mov.w	r3, r9, asr #8
 8021be6:	ee01 3a10 	vmov	s2, r3
 8021bea:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 8021bee:	fb02 f803 	mul.w	r8, r2, r3
 8021bf2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021bf6:	ea4f 2328 	mov.w	r3, r8, asr #8
 8021bfa:	ee00 3a90 	vmov	s1, r3
 8021bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c00:	437b      	muls	r3, r7
 8021c02:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021c06:	121b      	asrs	r3, r3, #8
 8021c08:	ee00 3a10 	vmov	s0, r3
 8021c0c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021c10:	f7ff f9e2 	bl	8020fd8 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021c14:	eefc 7aee 	vcvt.u32.f32	s15, s29
 8021c18:	2eff      	cmp	r6, #255	; 0xff
 8021c1a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021c1e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8021c22:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8021c26:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021c2a:	eefc 7ace 	vcvt.u32.f32	s15, s28
 8021c2e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8021c32:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8021c36:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021c3a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8021c3e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8021c42:	ea43 0302 	orr.w	r3, r3, r2
 8021c46:	b29b      	uxth	r3, r3
 8021c48:	d102      	bne.n	8021c50 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 8021c4a:	9a01      	ldr	r2, [sp, #4]
 8021c4c:	2aff      	cmp	r2, #255	; 0xff
 8021c4e:	d02c      	beq.n	8021caa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 8021c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021c52:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 8021c56:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8021c5a:	f027 0707 	bic.w	r7, r7, #7
 8021c5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8021c62:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 8021c66:	fb12 f606 	smulbb	r6, r2, r6
 8021c6a:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8021c6e:	f000 001f 	and.w	r0, r0, #31
 8021c72:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 8021c76:	f022 0207 	bic.w	r2, r2, #7
 8021c7a:	434a      	muls	r2, r1
 8021c7c:	fb01 fe0e 	mul.w	lr, r1, lr
 8021c80:	fb06 2707 	mla	r7, r6, r7, r2
 8021c84:	4a4d      	ldr	r2, [pc, #308]	; (8021dbc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 8021c86:	4348      	muls	r0, r1
 8021c88:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 8021c8c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8021c90:	f003 031f 	and.w	r3, r3, #31
 8021c94:	fb06 e202 	mla	r2, r6, r2, lr
 8021c98:	fb06 0303 	mla	r3, r6, r3, r0
 8021c9c:	0c12      	lsrs	r2, r2, #16
 8021c9e:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021ca2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ca6:	4317      	orrs	r7, r2
 8021ca8:	433b      	orrs	r3, r7
 8021caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021cac:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8021cb0:	9b06      	ldr	r3, [sp, #24]
 8021cb2:	449b      	add	fp, r3
 8021cb4:	9b07      	ldr	r3, [sp, #28]
 8021cb6:	441d      	add	r5, r3
 8021cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cba:	3301      	adds	r3, #1
 8021cbc:	e599      	b.n	80217f2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 8021cbe:	9b01      	ldr	r3, [sp, #4]
 8021cc0:	2bff      	cmp	r3, #255	; 0xff
 8021cc2:	d105      	bne.n	8021cd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 8021cc4:	2300      	movs	r3, #0
 8021cc6:	9a02      	ldr	r2, [sp, #8]
 8021cc8:	429a      	cmp	r2, r3
 8021cca:	dc51      	bgt.n	8021d70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 8021ccc:	4613      	mov	r3, r2
 8021cce:	e596      	b.n	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021cd0:	2000      	movs	r0, #0
 8021cd2:	9b02      	ldr	r3, [sp, #8]
 8021cd4:	4283      	cmp	r3, r0
 8021cd6:	f77f ad92 	ble.w	80217fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021cda:	9b03      	ldr	r3, [sp, #12]
 8021cdc:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021ce0:	1429      	asrs	r1, r5, #16
 8021ce2:	b15b      	cbz	r3, 8021cfc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 8021ce4:	2a00      	cmp	r2, #0
 8021ce6:	db3d      	blt.n	8021d64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021ce8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021cec:	429a      	cmp	r2, r3
 8021cee:	da39      	bge.n	8021d64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021cf0:	2900      	cmp	r1, #0
 8021cf2:	db37      	blt.n	8021d64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021cf4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021cf8:	4299      	cmp	r1, r3
 8021cfa:	da33      	bge.n	8021d64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021cfc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021d00:	9f05      	ldr	r7, [sp, #20]
 8021d02:	fb01 2303 	mla	r3, r1, r3, r2
 8021d06:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 8021d0a:	9a04      	ldr	r2, [sp, #16]
 8021d0c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8021d10:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 8021d14:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 8021d18:	f023 0307 	bic.w	r3, r3, #7
 8021d1c:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 8021d20:	f002 021f 	and.w	r2, r2, #31
 8021d24:	437b      	muls	r3, r7
 8021d26:	f026 0607 	bic.w	r6, r6, #7
 8021d2a:	9f01      	ldr	r7, [sp, #4]
 8021d2c:	fb07 3606 	mla	r6, r7, r6, r3
 8021d30:	4b22      	ldr	r3, [pc, #136]	; (8021dbc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 8021d32:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021d36:	f001 011f 	and.w	r1, r1, #31
 8021d3a:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 8021d3e:	9b05      	ldr	r3, [sp, #20]
 8021d40:	435f      	muls	r7, r3
 8021d42:	9b01      	ldr	r3, [sp, #4]
 8021d44:	fb03 730e 	mla	r3, r3, lr, r7
 8021d48:	0a1b      	lsrs	r3, r3, #8
 8021d4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d4e:	431e      	orrs	r6, r3
 8021d50:	9b05      	ldr	r3, [sp, #20]
 8021d52:	4359      	muls	r1, r3
 8021d54:	9b01      	ldr	r3, [sp, #4]
 8021d56:	fb03 1202 	mla	r2, r3, r2, r1
 8021d5a:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8021d5e:	4316      	orrs	r6, r2
 8021d60:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 8021d64:	9b06      	ldr	r3, [sp, #24]
 8021d66:	3001      	adds	r0, #1
 8021d68:	449b      	add	fp, r3
 8021d6a:	9b07      	ldr	r3, [sp, #28]
 8021d6c:	441d      	add	r5, r3
 8021d6e:	e7b0      	b.n	8021cd2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 8021d70:	9a03      	ldr	r2, [sp, #12]
 8021d72:	ea4f 412b 	mov.w	r1, fp, asr #16
 8021d76:	1428      	asrs	r0, r5, #16
 8021d78:	b15a      	cbz	r2, 8021d92 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 8021d7a:	2900      	cmp	r1, #0
 8021d7c:	db12      	blt.n	8021da4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021d7e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021d82:	4291      	cmp	r1, r2
 8021d84:	da0e      	bge.n	8021da4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021d86:	2800      	cmp	r0, #0
 8021d88:	db0c      	blt.n	8021da4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021d8a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8021d8e:	4290      	cmp	r0, r2
 8021d90:	da08      	bge.n	8021da4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021d92:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021d96:	fb00 1202 	mla	r2, r0, r2, r1
 8021d9a:	9904      	ldr	r1, [sp, #16]
 8021d9c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8021da0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8021da4:	9a06      	ldr	r2, [sp, #24]
 8021da6:	3301      	adds	r3, #1
 8021da8:	4493      	add	fp, r2
 8021daa:	9a07      	ldr	r2, [sp, #28]
 8021dac:	4415      	add	r5, r2
 8021dae:	e78a      	b.n	8021cc6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 8021db0:	b015      	add	sp, #84	; 0x54
 8021db2:	ecbd 8b0e 	vpop	{d8-d14}
 8021db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dba:	bf00      	nop
 8021dbc:	fffff800 	.word	0xfffff800

08021dc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dc4:	b08f      	sub	sp, #60	; 0x3c
 8021dc6:	460c      	mov	r4, r1
 8021dc8:	4680      	mov	r8, r0
 8021dca:	4699      	mov	r9, r3
 8021dcc:	6808      	ldr	r0, [r1, #0]
 8021dce:	ab0a      	add	r3, sp, #40	; 0x28
 8021dd0:	6849      	ldr	r1, [r1, #4]
 8021dd2:	c303      	stmia	r3!, {r0, r1}
 8021dd4:	6810      	ldr	r0, [r2, #0]
 8021dd6:	ab0c      	add	r3, sp, #48	; 0x30
 8021dd8:	6851      	ldr	r1, [r2, #4]
 8021dda:	c303      	stmia	r3!, {r0, r1}
 8021ddc:	a80a      	add	r0, sp, #40	; 0x28
 8021dde:	f7fc feb1 	bl	801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021de2:	4621      	mov	r1, r4
 8021de4:	a80c      	add	r0, sp, #48	; 0x30
 8021de6:	4c58      	ldr	r4, [pc, #352]	; (8021f48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021de8:	f7fc fe94 	bl	801eb14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021dec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021df0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021df4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021df8:	6820      	ldr	r0, [r4, #0]
 8021dfa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021dfe:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021e02:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8021e06:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021e0a:	440a      	add	r2, r1
 8021e0c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021e10:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021e14:	4413      	add	r3, r2
 8021e16:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021e1a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021e1e:	9305      	str	r3, [sp, #20]
 8021e20:	6803      	ldr	r3, [r0, #0]
 8021e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e24:	4798      	blx	r3
 8021e26:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021e2a:	d118      	bne.n	8021e5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021e2c:	f010 0f20 	tst.w	r0, #32
 8021e30:	6820      	ldr	r0, [r4, #0]
 8021e32:	d017      	beq.n	8021e64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021e34:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021e38:	b2bf      	uxth	r7, r7
 8021e3a:	6801      	ldr	r1, [r0, #0]
 8021e3c:	9402      	str	r4, [sp, #8]
 8021e3e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021e42:	f8cd 900c 	str.w	r9, [sp, #12]
 8021e46:	9401      	str	r4, [sp, #4]
 8021e48:	9700      	str	r7, [sp, #0]
 8021e4a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021e4e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8021e50:	4641      	mov	r1, r8
 8021e52:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021e56:	47a0      	blx	r4
 8021e58:	b00f      	add	sp, #60	; 0x3c
 8021e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021e62:	e7e5      	b.n	8021e30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 8021e64:	6803      	ldr	r3, [r0, #0]
 8021e66:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8021f50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 8021e6a:	6a1b      	ldr	r3, [r3, #32]
 8021e6c:	4798      	blx	r3
 8021e6e:	4a37      	ldr	r2, [pc, #220]	; (8021f4c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8021e70:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021e74:	f04f 0c00 	mov.w	ip, #0
 8021e78:	8813      	ldrh	r3, [r2, #0]
 8021e7a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8021e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8021e80:	fb04 1303 	mla	r3, r4, r3, r1
 8021e84:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021e88:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8021e8c:	0099      	lsls	r1, r3, #2
 8021e8e:	005b      	lsls	r3, r3, #1
 8021e90:	9108      	str	r1, [sp, #32]
 8021e92:	9307      	str	r3, [sp, #28]
 8021e94:	9b05      	ldr	r3, [sp, #20]
 8021e96:	459c      	cmp	ip, r3
 8021e98:	da4f      	bge.n	8021f3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 8021e9a:	4686      	mov	lr, r0
 8021e9c:	2300      	movs	r3, #0
 8021e9e:	42bb      	cmp	r3, r7
 8021ea0:	da3a      	bge.n	8021f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 8021ea2:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8021ea6:	0e2e      	lsrs	r6, r5, #24
 8021ea8:	d012      	beq.n	8021ed0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8021eaa:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 8021eae:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 8021eb2:	0969      	lsrs	r1, r5, #5
 8021eb4:	2eff      	cmp	r6, #255	; 0xff
 8021eb6:	b2a4      	uxth	r4, r4
 8021eb8:	9206      	str	r2, [sp, #24]
 8021eba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021ebe:	d10b      	bne.n	8021ed8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021ec0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ec4:	d108      	bne.n	8021ed8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021ec6:	430c      	orrs	r4, r1
 8021ec8:	4322      	orrs	r2, r4
 8021eca:	4614      	mov	r4, r2
 8021ecc:	f8ae 4000 	strh.w	r4, [lr]
 8021ed0:	f10e 0e02 	add.w	lr, lr, #2
 8021ed4:	3301      	adds	r3, #1
 8021ed6:	e7e2      	b.n	8021e9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8021ed8:	fb06 f609 	mul.w	r6, r6, r9
 8021edc:	f8be 5000 	ldrh.w	r5, [lr]
 8021ee0:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 8021ee4:	ea05 020a 	and.w	r2, r5, sl
 8021ee8:	4374      	muls	r4, r6
 8021eea:	4371      	muls	r1, r6
 8021eec:	fb0b 4402 	mla	r4, fp, r2, r4
 8021ef0:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 8021ef4:	f005 051f 	and.w	r5, r5, #31
 8021ef8:	fb0b 1102 	mla	r1, fp, r2, r1
 8021efc:	9a06      	ldr	r2, [sp, #24]
 8021efe:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 8021f02:	0c09      	lsrs	r1, r1, #16
 8021f04:	4356      	muls	r6, r2
 8021f06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021f0a:	fb0b 6505 	mla	r5, fp, r5, r6
 8021f0e:	430c      	orrs	r4, r1
 8021f10:	f3c5 4504 	ubfx	r5, r5, #16, #5
 8021f14:	432c      	orrs	r4, r5
 8021f16:	e7d9      	b.n	8021ecc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8021f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f1a:	f10c 0c01 	add.w	ip, ip, #1
 8021f1e:	9a07      	ldr	r2, [sp, #28]
 8021f20:	881b      	ldrh	r3, [r3, #0]
 8021f22:	1bdb      	subs	r3, r3, r7
 8021f24:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021f28:	9a08      	ldr	r2, [sp, #32]
 8021f2a:	4418      	add	r0, r3
 8021f2c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8021f30:	1bdb      	subs	r3, r3, r7
 8021f32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021f36:	4498      	add	r8, r3
 8021f38:	e7ac      	b.n	8021e94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 8021f3a:	4b03      	ldr	r3, [pc, #12]	; (8021f48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021f3c:	6818      	ldr	r0, [r3, #0]
 8021f3e:	6803      	ldr	r3, [r0, #0]
 8021f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f42:	4798      	blx	r3
 8021f44:	e788      	b.n	8021e58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021f46:	bf00      	nop
 8021f48:	2000a290 	.word	0x2000a290
 8021f4c:	2000a288 	.word	0x2000a288
 8021f50:	fffff800 	.word	0xfffff800

08021f54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f58:	9d06      	ldr	r5, [sp, #24]
 8021f5a:	461c      	mov	r4, r3
 8021f5c:	460e      	mov	r6, r1
 8021f5e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8021f62:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8021f66:	b142      	cbz	r2, 8021f7a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8021f68:	2a02      	cmp	r2, #2
 8021f6a:	d010      	beq.n	8021f8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 8021f6c:	4b0b      	ldr	r3, [pc, #44]	; (8021f9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 8021f6e:	f240 11b9 	movw	r1, #441	; 0x1b9
 8021f72:	4a0b      	ldr	r2, [pc, #44]	; (8021fa0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 8021f74:	480b      	ldr	r0, [pc, #44]	; (8021fa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 8021f76:	f000 fd0b 	bl	8022990 <__assert_func>
 8021f7a:	6802      	ldr	r2, [r0, #0]
 8021f7c:	9306      	str	r3, [sp, #24]
 8021f7e:	462b      	mov	r3, r5
 8021f80:	9707      	str	r7, [sp, #28]
 8021f82:	6916      	ldr	r6, [r2, #16]
 8021f84:	4622      	mov	r2, r4
 8021f86:	46b4      	mov	ip, r6
 8021f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f8c:	4760      	bx	ip
 8021f8e:	462a      	mov	r2, r5
 8021f90:	4621      	mov	r1, r4
 8021f92:	4630      	mov	r0, r6
 8021f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021f98:	f7ff bf12 	b.w	8021dc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021f9c:	08026670 	.word	0x08026670
 8021fa0:	080267cf 	.word	0x080267cf
 8021fa4:	0802663e 	.word	0x0802663e

08021fa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fac:	b08b      	sub	sp, #44	; 0x2c
 8021fae:	460e      	mov	r6, r1
 8021fb0:	4604      	mov	r4, r0
 8021fb2:	6851      	ldr	r1, [r2, #4]
 8021fb4:	6810      	ldr	r0, [r2, #0]
 8021fb6:	ad06      	add	r5, sp, #24
 8021fb8:	4617      	mov	r7, r2
 8021fba:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8021fbe:	c503      	stmia	r5!, {r0, r1}
 8021fc0:	6818      	ldr	r0, [r3, #0]
 8021fc2:	ad08      	add	r5, sp, #32
 8021fc4:	6859      	ldr	r1, [r3, #4]
 8021fc6:	c503      	stmia	r5!, {r0, r1}
 8021fc8:	a806      	add	r0, sp, #24
 8021fca:	f7fc fdbb 	bl	801eb44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fce:	4639      	mov	r1, r7
 8021fd0:	a808      	add	r0, sp, #32
 8021fd2:	f7fc fd9f 	bl	801eb14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fd6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021fda:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021fde:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021fe2:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8021fe6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021fea:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021fee:	1871      	adds	r1, r6, r1
 8021ff0:	9101      	str	r1, [sp, #4]
 8021ff2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021ff6:	440a      	add	r2, r1
 8021ff8:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021ffc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8022000:	4413      	add	r3, r2
 8022002:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8022006:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 802200a:	9302      	str	r3, [sp, #8]
 802200c:	4b64      	ldr	r3, [pc, #400]	; (80221a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 802200e:	6818      	ldr	r0, [r3, #0]
 8022010:	6803      	ldr	r3, [r0, #0]
 8022012:	6a1b      	ldr	r3, [r3, #32]
 8022014:	4798      	blx	r3
 8022016:	4b63      	ldr	r3, [pc, #396]	; (80221a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 8022018:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 802201c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022020:	881a      	ldrh	r2, [r3, #0]
 8022022:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022026:	fb06 1202 	mla	r2, r6, r2, r1
 802202a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802202e:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8022032:	b212      	sxth	r2, r2
 8022034:	9204      	str	r2, [sp, #16]
 8022036:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802203a:	9203      	str	r2, [sp, #12]
 802203c:	d051      	beq.n	80220e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 802203e:	f04f 0800 	mov.w	r8, #0
 8022042:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80221a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 8022046:	9305      	str	r3, [sp, #20]
 8022048:	9b02      	ldr	r3, [sp, #8]
 802204a:	4598      	cmp	r8, r3
 802204c:	f280 809f 	bge.w	802218e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 8022050:	2100      	movs	r1, #0
 8022052:	42a9      	cmp	r1, r5
 8022054:	da30      	bge.n	80220b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 8022056:	9b01      	ldr	r3, [sp, #4]
 8022058:	5c5e      	ldrb	r6, [r3, r1]
 802205a:	b35e      	cbz	r6, 80220b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 802205c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8022060:	fb1b f606 	smulbb	r6, fp, r6
 8022064:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 8022068:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 802206c:	ea0e 0309 	and.w	r3, lr, r9
 8022070:	ea02 0c09 	and.w	ip, r2, r9
 8022074:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 8022078:	437b      	muls	r3, r7
 802207a:	f00e 0e1f 	and.w	lr, lr, #31
 802207e:	fb07 fa0a 	mul.w	sl, r7, sl
 8022082:	fb06 3c0c 	mla	ip, r6, ip, r3
 8022086:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 802208a:	fb07 fe0e 	mul.w	lr, r7, lr
 802208e:	f002 021f 	and.w	r2, r2, #31
 8022092:	fb06 a303 	mla	r3, r6, r3, sl
 8022096:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 802209a:	fb06 ee02 	mla	lr, r6, r2, lr
 802209e:	0c1b      	lsrs	r3, r3, #16
 80220a0:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 80220a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220a8:	ea4c 0c03 	orr.w	ip, ip, r3
 80220ac:	ea4c 0c0e 	orr.w	ip, ip, lr
 80220b0:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 80220b4:	3101      	adds	r1, #1
 80220b6:	e7cc      	b.n	8022052 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 80220b8:	9b05      	ldr	r3, [sp, #20]
 80220ba:	f108 0801 	add.w	r8, r8, #1
 80220be:	9a03      	ldr	r2, [sp, #12]
 80220c0:	881b      	ldrh	r3, [r3, #0]
 80220c2:	1b5b      	subs	r3, r3, r5
 80220c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80220c8:	4418      	add	r0, r3
 80220ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80220ce:	1b5b      	subs	r3, r3, r5
 80220d0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80220d4:	4414      	add	r4, r2
 80220d6:	9a04      	ldr	r2, [sp, #16]
 80220d8:	4413      	add	r3, r2
 80220da:	9a01      	ldr	r2, [sp, #4]
 80220dc:	441a      	add	r2, r3
 80220de:	9201      	str	r2, [sp, #4]
 80220e0:	e7b2      	b.n	8022048 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 80220e2:	f04f 0900 	mov.w	r9, #0
 80220e6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80221a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 80220ea:	9305      	str	r3, [sp, #20]
 80220ec:	9b02      	ldr	r3, [sp, #8]
 80220ee:	4599      	cmp	r9, r3
 80220f0:	da4d      	bge.n	802218e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 80220f2:	4607      	mov	r7, r0
 80220f4:	2600      	movs	r6, #0
 80220f6:	42ae      	cmp	r6, r5
 80220f8:	da34      	bge.n	8022164 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 80220fa:	9b01      	ldr	r3, [sp, #4]
 80220fc:	5d99      	ldrb	r1, [r3, r6]
 80220fe:	b121      	cbz	r1, 802210a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8022100:	29ff      	cmp	r1, #255	; 0xff
 8022102:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 8022106:	d103      	bne.n	8022110 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8022108:	803a      	strh	r2, [r7, #0]
 802210a:	3702      	adds	r7, #2
 802210c:	3601      	adds	r6, #1
 802210e:	e7f2      	b.n	80220f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 8022110:	f8b7 c000 	ldrh.w	ip, [r7]
 8022114:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 8022118:	ea02 080a 	and.w	r8, r2, sl
 802211c:	ea0c 030a 	and.w	r3, ip, sl
 8022120:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 8022124:	f00c 0c1f 	and.w	ip, ip, #31
 8022128:	fb0e f303 	mul.w	r3, lr, r3
 802212c:	fb0e fb0b 	mul.w	fp, lr, fp
 8022130:	fb01 3808 	mla	r8, r1, r8, r3
 8022134:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8022138:	fb0e fc0c 	mul.w	ip, lr, ip
 802213c:	f002 021f 	and.w	r2, r2, #31
 8022140:	fb01 b303 	mla	r3, r1, r3, fp
 8022144:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 8022148:	fb01 cc02 	mla	ip, r1, r2, ip
 802214c:	0a1b      	lsrs	r3, r3, #8
 802214e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 8022152:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022156:	ea48 0803 	orr.w	r8, r8, r3
 802215a:	ea48 080c 	orr.w	r8, r8, ip
 802215e:	f8a7 8000 	strh.w	r8, [r7]
 8022162:	e7d2      	b.n	802210a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8022164:	9b05      	ldr	r3, [sp, #20]
 8022166:	f109 0901 	add.w	r9, r9, #1
 802216a:	9a03      	ldr	r2, [sp, #12]
 802216c:	881b      	ldrh	r3, [r3, #0]
 802216e:	1b5b      	subs	r3, r3, r5
 8022170:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022174:	4418      	add	r0, r3
 8022176:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802217a:	1b5b      	subs	r3, r3, r5
 802217c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8022180:	4414      	add	r4, r2
 8022182:	9a04      	ldr	r2, [sp, #16]
 8022184:	4413      	add	r3, r2
 8022186:	9a01      	ldr	r2, [sp, #4]
 8022188:	441a      	add	r2, r3
 802218a:	9201      	str	r2, [sp, #4]
 802218c:	e7ae      	b.n	80220ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802218e:	4b04      	ldr	r3, [pc, #16]	; (80221a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8022190:	6818      	ldr	r0, [r3, #0]
 8022192:	6803      	ldr	r3, [r0, #0]
 8022194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022196:	4798      	blx	r3
 8022198:	b00b      	add	sp, #44	; 0x2c
 802219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802219e:	bf00      	nop
 80221a0:	2000a290 	.word	0x2000a290
 80221a4:	2000a288 	.word	0x2000a288
 80221a8:	fffff800 	.word	0xfffff800

080221ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80221ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b0:	b089      	sub	sp, #36	; 0x24
 80221b2:	4682      	mov	sl, r0
 80221b4:	4689      	mov	r9, r1
 80221b6:	4690      	mov	r8, r2
 80221b8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80221bc:	461f      	mov	r7, r3
 80221be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80221c0:	b365      	cbz	r5, 802221c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 80221c2:	4608      	mov	r0, r1
 80221c4:	f7fe faf8 	bl	80207b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80221c8:	4606      	mov	r6, r0
 80221ca:	4648      	mov	r0, r9
 80221cc:	f7fe fb2c 	bl	8020828 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80221d0:	f8ad 000e 	strh.w	r0, [sp, #14]
 80221d4:	4648      	mov	r0, r9
 80221d6:	f8ad 8008 	strh.w	r8, [sp, #8]
 80221da:	f8ad 700a 	strh.w	r7, [sp, #10]
 80221de:	f8ad 600c 	strh.w	r6, [sp, #12]
 80221e2:	f7fe fc3f 	bl	8020a64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80221e6:	2801      	cmp	r0, #1
 80221e8:	d105      	bne.n	80221f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80221ea:	4b64      	ldr	r3, [pc, #400]	; (802237c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 80221ec:	2160      	movs	r1, #96	; 0x60
 80221ee:	4a64      	ldr	r2, [pc, #400]	; (8022380 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 80221f0:	4864      	ldr	r0, [pc, #400]	; (8022384 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 80221f2:	f000 fbcd 	bl	8022990 <__assert_func>
 80221f6:	4648      	mov	r0, r9
 80221f8:	f7fe fbdc 	bl	80209b4 <_ZNK8touchgfx6Bitmap7getDataEv>
 80221fc:	4606      	mov	r6, r0
 80221fe:	4648      	mov	r0, r9
 8022200:	f7fe fc08 	bl	8020a14 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 8022204:	4680      	mov	r8, r0
 8022206:	4648      	mov	r0, r9
 8022208:	f7fe fc2c 	bl	8020a64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802220c:	2802      	cmp	r0, #2
 802220e:	d108      	bne.n	8022222 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8022210:	462b      	mov	r3, r5
 8022212:	4622      	mov	r2, r4
 8022214:	a902      	add	r1, sp, #8
 8022216:	4630      	mov	r0, r6
 8022218:	f7ff fdd2 	bl	8021dc0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802221c:	b009      	add	sp, #36	; 0x24
 802221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022222:	4648      	mov	r0, r9
 8022224:	f7fe fb90 	bl	8020948 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022228:	b950      	cbnz	r0, 8022240 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802222a:	f8da 3000 	ldr.w	r3, [sl]
 802222e:	aa02      	add	r2, sp, #8
 8022230:	9001      	str	r0, [sp, #4]
 8022232:	4631      	mov	r1, r6
 8022234:	9500      	str	r5, [sp, #0]
 8022236:	4650      	mov	r0, sl
 8022238:	691d      	ldr	r5, [r3, #16]
 802223a:	4623      	mov	r3, r4
 802223c:	47a8      	blx	r5
 802223e:	e7ed      	b.n	802221c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8022240:	af06      	add	r7, sp, #24
 8022242:	4649      	mov	r1, r9
 8022244:	f10d 0910 	add.w	r9, sp, #16
 8022248:	4638      	mov	r0, r7
 802224a:	f7fe fb25 	bl	8020898 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802224e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8022252:	e889 0003 	stmia.w	r9, {r0, r1}
 8022256:	4621      	mov	r1, r4
 8022258:	4648      	mov	r0, r9
 802225a:	f7ef fc25 	bl	8011aa8 <_ZN8touchgfx4RectaNERKS0_>
 802225e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8022262:	b113      	cbz	r3, 802226a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 8022264:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8022268:	b913      	cbnz	r3, 8022270 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 802226a:	9500      	str	r5, [sp, #0]
 802226c:	4623      	mov	r3, r4
 802226e:	e07f      	b.n	8022370 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 8022270:	f8da 3000 	ldr.w	r3, [sl]
 8022274:	2200      	movs	r2, #0
 8022276:	9500      	str	r5, [sp, #0]
 8022278:	4631      	mov	r1, r6
 802227a:	9201      	str	r2, [sp, #4]
 802227c:	4650      	mov	r0, sl
 802227e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8022282:	aa02      	add	r2, sp, #8
 8022284:	464b      	mov	r3, r9
 8022286:	47d8      	blx	fp
 8022288:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802228c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022290:	4293      	cmp	r3, r2
 8022292:	dd13      	ble.n	80222bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 8022294:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022298:	1a9b      	subs	r3, r3, r2
 802229a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802229e:	f8ad 0018 	strh.w	r0, [sp, #24]
 80222a2:	4630      	mov	r0, r6
 80222a4:	f8ad 201a 	strh.w	r2, [sp, #26]
 80222a8:	aa02      	add	r2, sp, #8
 80222aa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80222ae:	4641      	mov	r1, r8
 80222b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80222b4:	463b      	mov	r3, r7
 80222b6:	9500      	str	r5, [sp, #0]
 80222b8:	f7ff fe76 	bl	8021fa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80222bc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80222c0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80222c4:	4293      	cmp	r3, r2
 80222c6:	dd13      	ble.n	80222f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 80222c8:	1a9b      	subs	r3, r3, r2
 80222ca:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80222ce:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80222d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80222d6:	aa02      	add	r2, sp, #8
 80222d8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80222dc:	4630      	mov	r0, r6
 80222de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80222e2:	463b      	mov	r3, r7
 80222e4:	f8ad 101e 	strh.w	r1, [sp, #30]
 80222e8:	4641      	mov	r1, r8
 80222ea:	9500      	str	r5, [sp, #0]
 80222ec:	f7ff fe5c 	bl	8021fa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80222f0:	88a2      	ldrh	r2, [r4, #4]
 80222f2:	8823      	ldrh	r3, [r4, #0]
 80222f4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80222f8:	4413      	add	r3, r2
 80222fa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80222fe:	440a      	add	r2, r1
 8022300:	b29b      	uxth	r3, r3
 8022302:	b292      	uxth	r2, r2
 8022304:	b218      	sxth	r0, r3
 8022306:	b211      	sxth	r1, r2
 8022308:	4288      	cmp	r0, r1
 802230a:	dd13      	ble.n	8022334 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 802230c:	1a9b      	subs	r3, r3, r2
 802230e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022312:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 8022316:	aa02      	add	r2, sp, #8
 8022318:	f8ad 1018 	strh.w	r1, [sp, #24]
 802231c:	4641      	mov	r1, r8
 802231e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022322:	463b      	mov	r3, r7
 8022324:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022328:	4630      	mov	r0, r6
 802232a:	9500      	str	r5, [sp, #0]
 802232c:	f8ad e01a 	strh.w	lr, [sp, #26]
 8022330:	f7ff fe3a 	bl	8021fa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022334:	88e2      	ldrh	r2, [r4, #6]
 8022336:	8863      	ldrh	r3, [r4, #2]
 8022338:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802233c:	4413      	add	r3, r2
 802233e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022342:	440a      	add	r2, r1
 8022344:	b29b      	uxth	r3, r3
 8022346:	b292      	uxth	r2, r2
 8022348:	b218      	sxth	r0, r3
 802234a:	b211      	sxth	r1, r2
 802234c:	4288      	cmp	r0, r1
 802234e:	f77f af65 	ble.w	802221c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8022352:	1a9b      	subs	r3, r3, r2
 8022354:	f9b4 e000 	ldrsh.w	lr, [r4]
 8022358:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802235c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022360:	463b      	mov	r3, r7
 8022362:	f8ad e018 	strh.w	lr, [sp, #24]
 8022366:	f8ad 101a 	strh.w	r1, [sp, #26]
 802236a:	f8ad 001c 	strh.w	r0, [sp, #28]
 802236e:	9500      	str	r5, [sp, #0]
 8022370:	aa02      	add	r2, sp, #8
 8022372:	4641      	mov	r1, r8
 8022374:	4630      	mov	r0, r6
 8022376:	f7ff fe17 	bl	8021fa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802237a:	e74f      	b.n	802221c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 802237c:	080265ae 	.word	0x080265ae
 8022380:	080266dc 	.word	0x080266dc
 8022384:	0802663e 	.word	0x0802663e

08022388 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022388:	b138      	cbz	r0, 802239a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802238a:	2902      	cmp	r1, #2
 802238c:	d00b      	beq.n	80223a6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 802238e:	2903      	cmp	r1, #3
 8022390:	d00c      	beq.n	80223ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8022392:	2901      	cmp	r1, #1
 8022394:	d10d      	bne.n	80223b2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8022396:	2001      	movs	r0, #1
 8022398:	4770      	bx	lr
 802239a:	2902      	cmp	r1, #2
 802239c:	d006      	beq.n	80223ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802239e:	2903      	cmp	r1, #3
 80223a0:	d007      	beq.n	80223b2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 80223a2:	2901      	cmp	r1, #1
 80223a4:	d1f7      	bne.n	8022396 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 80223a6:	4b05      	ldr	r3, [pc, #20]	; (80223bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80223a8:	8818      	ldrh	r0, [r3, #0]
 80223aa:	4770      	bx	lr
 80223ac:	f04f 30ff 	mov.w	r0, #4294967295
 80223b0:	4770      	bx	lr
 80223b2:	4b02      	ldr	r3, [pc, #8]	; (80223bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80223b4:	8818      	ldrh	r0, [r3, #0]
 80223b6:	4240      	negs	r0, r0
 80223b8:	4770      	bx	lr
 80223ba:	bf00      	nop
 80223bc:	2000a288 	.word	0x2000a288

080223c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80223c0:	b140      	cbz	r0, 80223d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80223c2:	2902      	cmp	r1, #2
 80223c4:	d00c      	beq.n	80223e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 80223c6:	2903      	cmp	r1, #3
 80223c8:	d00d      	beq.n	80223e6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80223ca:	2901      	cmp	r1, #1
 80223cc:	d10f      	bne.n	80223ee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 80223ce:	4b09      	ldr	r3, [pc, #36]	; (80223f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 80223d0:	8818      	ldrh	r0, [r3, #0]
 80223d2:	4770      	bx	lr
 80223d4:	2902      	cmp	r1, #2
 80223d6:	d006      	beq.n	80223e6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80223d8:	2903      	cmp	r1, #3
 80223da:	d008      	beq.n	80223ee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 80223dc:	2901      	cmp	r1, #1
 80223de:	d1f6      	bne.n	80223ce <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 80223e0:	f04f 30ff 	mov.w	r0, #4294967295
 80223e4:	4770      	bx	lr
 80223e6:	4b03      	ldr	r3, [pc, #12]	; (80223f4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 80223e8:	8818      	ldrh	r0, [r3, #0]
 80223ea:	4240      	negs	r0, r0
 80223ec:	4770      	bx	lr
 80223ee:	2001      	movs	r0, #1
 80223f0:	4770      	bx	lr
 80223f2:	bf00      	nop
 80223f4:	2000a288 	.word	0x2000a288

080223f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 80223f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223fc:	b097      	sub	sp, #92	; 0x5c
 80223fe:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8022402:	910d      	str	r1, [sp, #52]	; 0x34
 8022404:	a912      	add	r1, sp, #72	; 0x48
 8022406:	f899 000d 	ldrb.w	r0, [r9, #13]
 802240a:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 802240e:	f010 0f08 	tst.w	r0, #8
 8022412:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8022416:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 802241a:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 802241e:	e881 000c 	stmia.w	r1, {r2, r3}
 8022422:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8022426:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 802242a:	920b      	str	r2, [sp, #44]	; 0x2c
 802242c:	bf0c      	ite	eq
 802242e:	2200      	moveq	r2, #0
 8022430:	f44f 7280 	movne.w	r2, #256	; 0x100
 8022434:	f899 1006 	ldrb.w	r1, [r9, #6]
 8022438:	f010 0f10 	tst.w	r0, #16
 802243c:	9307      	str	r3, [sp, #28]
 802243e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8022442:	bf0c      	ite	eq
 8022444:	2000      	moveq	r0, #0
 8022446:	f44f 7080 	movne.w	r0, #256	; 0x100
 802244a:	430a      	orrs	r2, r1
 802244c:	9308      	str	r3, [sp, #32]
 802244e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022450:	920a      	str	r2, [sp, #40]	; 0x28
 8022452:	f000 813b 	beq.w	80226cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8022456:	f899 2007 	ldrb.w	r2, [r9, #7]
 802245a:	4302      	orrs	r2, r0
 802245c:	9209      	str	r2, [sp, #36]	; 0x24
 802245e:	f000 8135 	beq.w	80226cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8022462:	f999 1009 	ldrsb.w	r1, [r9, #9]
 8022466:	2c00      	cmp	r4, #0
 8022468:	f000 80db 	beq.w	8022622 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 802246c:	1a61      	subs	r1, r4, r1
 802246e:	b28c      	uxth	r4, r1
 8022470:	0422      	lsls	r2, r4, #16
 8022472:	d504      	bpl.n	802247e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8022474:	eba8 0404 	sub.w	r4, r8, r4
 8022478:	fa0f f884 	sxth.w	r8, r4
 802247c:	2400      	movs	r4, #0
 802247e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8022482:	88df      	ldrh	r7, [r3, #6]
 8022484:	4580      	cmp	r8, r0
 8022486:	b282      	uxth	r2, r0
 8022488:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 802248c:	bfb8      	it	lt
 802248e:	18a1      	addlt	r1, r4, r2
 8022490:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 8022494:	44be      	add	lr, r7
 8022496:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 802249a:	bfbc      	itt	lt
 802249c:	eba1 0108 	sublt.w	r1, r1, r8
 80224a0:	4680      	movlt	r8, r0
 80224a2:	a812      	add	r0, sp, #72	; 0x48
 80224a4:	bfb8      	it	lt
 80224a6:	b28c      	uxthlt	r4, r1
 80224a8:	8899      	ldrh	r1, [r3, #4]
 80224aa:	fa0f f38e 	sxth.w	r3, lr
 80224ae:	440a      	add	r2, r1
 80224b0:	4641      	mov	r1, r8
 80224b2:	930e      	str	r3, [sp, #56]	; 0x38
 80224b4:	4bb1      	ldr	r3, [pc, #708]	; (802277c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80224b6:	b212      	sxth	r2, r2
 80224b8:	f893 b000 	ldrb.w	fp, [r3]
 80224bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80224be:	f10b 3eff 	add.w	lr, fp, #4294967295
 80224c2:	9a07      	ldr	r2, [sp, #28]
 80224c4:	f1de 0300 	rsbs	r3, lr, #0
 80224c8:	eb43 030e 	adc.w	r3, r3, lr
 80224cc:	930c      	str	r3, [sp, #48]	; 0x30
 80224ce:	4653      	mov	r3, sl
 80224d0:	f7fc fa2a 	bl	801e928 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80224d4:	4641      	mov	r1, r8
 80224d6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80224da:	4653      	mov	r3, sl
 80224dc:	9a07      	ldr	r2, [sp, #28]
 80224de:	a812      	add	r0, sp, #72	; 0x48
 80224e0:	f7fc fa3d 	bl	801e95e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80224e4:	a916      	add	r1, sp, #88	; 0x58
 80224e6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80224ea:	a815      	add	r0, sp, #84	; 0x54
 80224ec:	f7fc faf8 	bl	801eae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80224f0:	f1ba 0f00 	cmp.w	sl, #0
 80224f4:	f040 8099 	bne.w	802262a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 80224f8:	f1bb 0f01 	cmp.w	fp, #1
 80224fc:	f040 809d 	bne.w	802263a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8022500:	4a9f      	ldr	r2, [pc, #636]	; (8022780 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8022502:	2d04      	cmp	r5, #4
 8022504:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8022508:	8811      	ldrh	r1, [r2, #0]
 802250a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802250e:	fb01 2303 	mla	r3, r1, r3, r2
 8022512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022514:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8022518:	f04f 03ff 	mov.w	r3, #255	; 0xff
 802251c:	fa43 f305 	asr.w	r3, r3, r5
 8022520:	b2db      	uxtb	r3, r3
 8022522:	930d      	str	r3, [sp, #52]	; 0x34
 8022524:	ea6f 0303 	mvn.w	r3, r3
 8022528:	b2db      	uxtb	r3, r3
 802252a:	9310      	str	r3, [sp, #64]	; 0x40
 802252c:	f1c5 0308 	rsb	r3, r5, #8
 8022530:	b2db      	uxtb	r3, r3
 8022532:	9309      	str	r3, [sp, #36]	; 0x24
 8022534:	d104      	bne.n	8022540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022536:	f899 300d 	ldrb.w	r3, [r9, #13]
 802253a:	07da      	lsls	r2, r3, #31
 802253c:	f100 8118 	bmi.w	8022770 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022540:	b91c      	cbnz	r4, 802254a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 8022542:	9b08      	ldr	r3, [sp, #32]
 8022544:	2b00      	cmp	r3, #0
 8022546:	f000 80c4 	beq.w	80226d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 802254a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802254e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022550:	fb16 4303 	smlabb	r3, r6, r3, r4
 8022554:	fb13 f305 	smulbb	r3, r3, r5
 8022558:	b29b      	uxth	r3, r3
 802255a:	f003 0207 	and.w	r2, r3, #7
 802255e:	1a8a      	subs	r2, r1, r2
 8022560:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022562:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022566:	b2d2      	uxtb	r2, r2
 8022568:	9326      	str	r3, [sp, #152]	; 0x98
 802256a:	9b08      	ldr	r3, [sp, #32]
 802256c:	1aff      	subs	r7, r7, r3
 802256e:	b2bf      	uxth	r7, r7
 8022570:	4651      	mov	r1, sl
 8022572:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022574:	f7ff ff08 	bl	8022388 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022578:	4651      	mov	r1, sl
 802257a:	4681      	mov	r9, r0
 802257c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802257e:	f7ff ff1f 	bl	80223c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022584:	9907      	ldr	r1, [sp, #28]
 8022586:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 802258a:	eba3 0e01 	sub.w	lr, r3, r1
 802258e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022590:	eba8 0104 	sub.w	r1, r8, r4
 8022594:	1a59      	subs	r1, r3, r1
 8022596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022598:	4299      	cmp	r1, r3
 802259a:	bfd4      	ite	le
 802259c:	ebc4 0101 	rsble	r1, r4, r1
 80225a0:	ebc4 0103 	rsbgt	r1, r4, r3
 80225a4:	4577      	cmp	r7, lr
 80225a6:	fb09 0011 	mls	r0, r9, r1, r0
 80225aa:	eba6 0301 	sub.w	r3, r6, r1
 80225ae:	bfa8      	it	ge
 80225b0:	4677      	movge	r7, lr
 80225b2:	0040      	lsls	r0, r0, #1
 80225b4:	436b      	muls	r3, r5
 80225b6:	9008      	str	r0, [sp, #32]
 80225b8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80225bc:	fb0a f000 	mul.w	r0, sl, r0
 80225c0:	9007      	str	r0, [sp, #28]
 80225c2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80225c4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80225c8:	900e      	str	r0, [sp, #56]	; 0x38
 80225ca:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80225cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80225d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80225d2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80225d4:	f000 001f 	and.w	r0, r0, #31
 80225d8:	9011      	str	r0, [sp, #68]	; 0x44
 80225da:	2f00      	cmp	r7, #0
 80225dc:	dd76      	ble.n	80226cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 80225de:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80225e2:	4689      	mov	r9, r1
 80225e4:	46d8      	mov	r8, fp
 80225e6:	900c      	str	r0, [sp, #48]	; 0x30
 80225e8:	f1b9 0f00 	cmp.w	r9, #0
 80225ec:	f340 80a6 	ble.w	802273c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80225f0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80225f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80225f4:	7800      	ldrb	r0, [r0, #0]
 80225f6:	4090      	lsls	r0, r2
 80225f8:	4020      	ands	r0, r4
 80225fa:	d009      	beq.n	8022610 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 80225fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80225fe:	4320      	orrs	r0, r4
 8022600:	28ff      	cmp	r0, #255	; 0xff
 8022602:	d168      	bne.n	80226d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8022604:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022606:	2cff      	cmp	r4, #255	; 0xff
 8022608:	d165      	bne.n	80226d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 802260a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802260c:	f8a8 4000 	strh.w	r4, [r8]
 8022610:	2a00      	cmp	r2, #0
 8022612:	f000 808e 	beq.w	8022732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 8022616:	1b52      	subs	r2, r2, r5
 8022618:	b2d2      	uxtb	r2, r2
 802261a:	44d0      	add	r8, sl
 802261c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022620:	e7e2      	b.n	80225e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 8022622:	4488      	add	r8, r1
 8022624:	fa0f f888 	sxth.w	r8, r8
 8022628:	e729      	b.n	802247e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 802262a:	f1ba 0f01 	cmp.w	sl, #1
 802262e:	f47f af67 	bne.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022632:	f1bb 0f01 	cmp.w	fp, #1
 8022636:	f47f af63 	bne.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802263a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8022788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802263e:	f8db 0000 	ldr.w	r0, [fp]
 8022642:	6803      	ldr	r3, [r0, #0]
 8022644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022646:	4798      	blx	r3
 8022648:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802264c:	465a      	mov	r2, fp
 802264e:	d006      	beq.n	802265e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8022650:	2d04      	cmp	r5, #4
 8022652:	bf0a      	itet	eq
 8022654:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 8022658:	2300      	movne	r3, #0
 802265a:	f003 0301 	andeq.w	r3, r3, #1
 802265e:	05c0      	lsls	r0, r0, #23
 8022660:	f140 8081 	bpl.w	8022766 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8022664:	2d08      	cmp	r5, #8
 8022666:	d17e      	bne.n	8022766 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8022668:	2b00      	cmp	r3, #0
 802266a:	bf0c      	ite	eq
 802266c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8022670:	2180      	movne	r1, #128	; 0x80
 8022672:	2c00      	cmp	r4, #0
 8022674:	f47f af44 	bne.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022678:	9b08      	ldr	r3, [sp, #32]
 802267a:	2b00      	cmp	r3, #0
 802267c:	f47f af40 	bne.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022682:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022684:	4443      	add	r3, r8
 8022686:	4298      	cmp	r0, r3
 8022688:	f6ff af3a 	blt.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802268c:	9807      	ldr	r0, [sp, #28]
 802268e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022690:	4403      	add	r3, r0
 8022692:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022694:	4298      	cmp	r0, r3
 8022696:	f6ff af33 	blt.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802269a:	2d08      	cmp	r5, #8
 802269c:	6810      	ldr	r0, [r2, #0]
 802269e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80226a2:	bf18      	it	ne
 80226a4:	3601      	addne	r6, #1
 80226a6:	6804      	ldr	r4, [r0, #0]
 80226a8:	9105      	str	r1, [sp, #20]
 80226aa:	bf18      	it	ne
 80226ac:	f026 0601 	bicne.w	r6, r6, #1
 80226b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80226b2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80226b6:	bf18      	it	ne
 80226b8:	b2b6      	uxthne	r6, r6
 80226ba:	9104      	str	r1, [sp, #16]
 80226bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80226be:	9602      	str	r6, [sp, #8]
 80226c0:	9103      	str	r1, [sp, #12]
 80226c2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80226c4:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80226c8:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 80226ca:	47a0      	blx	r4
 80226cc:	b017      	add	sp, #92	; 0x5c
 80226ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226d4:	e74c      	b.n	8022570 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 80226d6:	f8b8 c000 	ldrh.w	ip, [r8]
 80226da:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80226de:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 80226e2:	fb10 f004 	smulbb	r0, r0, r4
 80226e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80226e8:	f026 0607 	bic.w	r6, r6, #7
 80226ec:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 80226f0:	fb0e f606 	mul.w	r6, lr, r6
 80226f4:	fb00 6604 	mla	r6, r0, r4, r6
 80226f8:	4c22      	ldr	r4, [pc, #136]	; (8022784 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80226fa:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 80226fe:	940a      	str	r4, [sp, #40]	; 0x28
 8022700:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 8022704:	f00c 0c1f 	and.w	ip, ip, #31
 8022708:	fb0e f404 	mul.w	r4, lr, r4
 802270c:	fb0e fc0c 	mul.w	ip, lr, ip
 8022710:	4626      	mov	r6, r4
 8022712:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022714:	fb00 6404 	mla	r4, r0, r4, r6
 8022718:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802271a:	0c24      	lsrs	r4, r4, #16
 802271c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022720:	4334      	orrs	r4, r6
 8022722:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022724:	fb00 cc06 	mla	ip, r0, r6, ip
 8022728:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 802272c:	ea44 040c 	orr.w	r4, r4, ip
 8022730:	e76c      	b.n	802260c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 8022732:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022734:	3201      	adds	r2, #1
 8022736:	9226      	str	r2, [sp, #152]	; 0x98
 8022738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802273a:	e76e      	b.n	802261a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 802273c:	b16b      	cbz	r3, 802275a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 802273e:	4293      	cmp	r3, r2
 8022740:	dd08      	ble.n	8022754 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 8022742:	1b58      	subs	r0, r3, r5
 8022744:	2408      	movs	r4, #8
 8022746:	1a80      	subs	r0, r0, r2
 8022748:	fb90 f0f4 	sdiv	r0, r0, r4
 802274c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802274e:	3001      	adds	r0, #1
 8022750:	4404      	add	r4, r0
 8022752:	9426      	str	r4, [sp, #152]	; 0x98
 8022754:	1ad2      	subs	r2, r2, r3
 8022756:	f002 0207 	and.w	r2, r2, #7
 802275a:	9807      	ldr	r0, [sp, #28]
 802275c:	3f01      	subs	r7, #1
 802275e:	9c08      	ldr	r4, [sp, #32]
 8022760:	4420      	add	r0, r4
 8022762:	4483      	add	fp, r0
 8022764:	e739      	b.n	80225da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8022766:	2b00      	cmp	r3, #0
 8022768:	f43f aeca 	beq.w	8022500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802276c:	2180      	movs	r1, #128	; 0x80
 802276e:	e780      	b.n	8022672 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 8022770:	07f3      	lsls	r3, r6, #31
 8022772:	f57f aee5 	bpl.w	8022540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022776:	3601      	adds	r6, #1
 8022778:	b2b6      	uxth	r6, r6
 802277a:	e6e1      	b.n	8022540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 802277c:	2000a286 	.word	0x2000a286
 8022780:	2000a288 	.word	0x2000a288
 8022784:	fffff800 	.word	0xfffff800
 8022788:	2000a290 	.word	0x2000a290

0802278c <CRC_Lock>:
 802278c:	4a13      	ldr	r2, [pc, #76]	; (80227dc <CRC_Lock+0x50>)
 802278e:	6813      	ldr	r3, [r2, #0]
 8022790:	f023 0301 	bic.w	r3, r3, #1
 8022794:	6013      	str	r3, [r2, #0]
 8022796:	4b12      	ldr	r3, [pc, #72]	; (80227e0 <CRC_Lock+0x54>)
 8022798:	681b      	ldr	r3, [r3, #0]
 802279a:	b9a3      	cbnz	r3, 80227c6 <CRC_Lock+0x3a>
 802279c:	4b11      	ldr	r3, [pc, #68]	; (80227e4 <CRC_Lock+0x58>)
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80227a4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80227a8:	d10d      	bne.n	80227c6 <CRC_Lock+0x3a>
 80227aa:	4b0f      	ldr	r3, [pc, #60]	; (80227e8 <CRC_Lock+0x5c>)
 80227ac:	2201      	movs	r2, #1
 80227ae:	601a      	str	r2, [r3, #0]
 80227b0:	681a      	ldr	r2, [r3, #0]
 80227b2:	2a00      	cmp	r2, #0
 80227b4:	d1fc      	bne.n	80227b0 <CRC_Lock+0x24>
 80227b6:	4b0d      	ldr	r3, [pc, #52]	; (80227ec <CRC_Lock+0x60>)
 80227b8:	6018      	str	r0, [r3, #0]
 80227ba:	6818      	ldr	r0, [r3, #0]
 80227bc:	4288      	cmp	r0, r1
 80227be:	bf14      	ite	ne
 80227c0:	2000      	movne	r0, #0
 80227c2:	2001      	moveq	r0, #1
 80227c4:	4770      	bx	lr
 80227c6:	4b0a      	ldr	r3, [pc, #40]	; (80227f0 <CRC_Lock+0x64>)
 80227c8:	2201      	movs	r2, #1
 80227ca:	601a      	str	r2, [r3, #0]
 80227cc:	681a      	ldr	r2, [r3, #0]
 80227ce:	2a00      	cmp	r2, #0
 80227d0:	d1fc      	bne.n	80227cc <CRC_Lock+0x40>
 80227d2:	4b08      	ldr	r3, [pc, #32]	; (80227f4 <CRC_Lock+0x68>)
 80227d4:	6018      	str	r0, [r3, #0]
 80227d6:	6818      	ldr	r0, [r3, #0]
 80227d8:	4281      	cmp	r1, r0
 80227da:	e7f0      	b.n	80227be <CRC_Lock+0x32>
 80227dc:	e0002000 	.word	0xe0002000
 80227e0:	e0042000 	.word	0xe0042000
 80227e4:	5c001000 	.word	0x5c001000
 80227e8:	58024c08 	.word	0x58024c08
 80227ec:	58024c00 	.word	0x58024c00
 80227f0:	40023008 	.word	0x40023008
 80227f4:	40023000 	.word	0x40023000

080227f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80227f8:	6101      	str	r1, [r0, #16]
 80227fa:	4770      	bx	lr

080227fc <_ZN8touchgfx8Gestures4tickEv>:
 80227fc:	7b83      	ldrb	r3, [r0, #14]
 80227fe:	b14b      	cbz	r3, 8022814 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022800:	8903      	ldrh	r3, [r0, #8]
 8022802:	3301      	adds	r3, #1
 8022804:	b29b      	uxth	r3, r3
 8022806:	2b07      	cmp	r3, #7
 8022808:	8103      	strh	r3, [r0, #8]
 802280a:	bf81      	itttt	hi
 802280c:	2300      	movhi	r3, #0
 802280e:	8143      	strhhi	r3, [r0, #10]
 8022810:	8183      	strhhi	r3, [r0, #12]
 8022812:	7383      	strbhi	r3, [r0, #14]
 8022814:	4770      	bx	lr
	...

08022818 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022818:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802281c:	4604      	mov	r4, r0
 802281e:	4698      	mov	r8, r3
 8022820:	8880      	ldrh	r0, [r0, #4]
 8022822:	4617      	mov	r7, r2
 8022824:	4b1d      	ldr	r3, [pc, #116]	; (802289c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8022826:	460e      	mov	r6, r1
 8022828:	f8ad 0006 	strh.w	r0, [sp, #6]
 802282c:	eba8 0000 	sub.w	r0, r8, r0
 8022830:	9300      	str	r3, [sp, #0]
 8022832:	2300      	movs	r3, #0
 8022834:	b280      	uxth	r0, r0
 8022836:	8aa2      	ldrh	r2, [r4, #20]
 8022838:	f88d 3004 	strb.w	r3, [sp, #4]
 802283c:	b203      	sxth	r3, r0
 802283e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022842:	88e1      	ldrh	r1, [r4, #6]
 8022844:	2b00      	cmp	r3, #0
 8022846:	f8ad 800a 	strh.w	r8, [sp, #10]
 802284a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802284e:	bfb8      	it	lt
 8022850:	4240      	neglt	r0, r0
 8022852:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022856:	bfb8      	it	lt
 8022858:	b203      	sxthlt	r3, r0
 802285a:	4293      	cmp	r3, r2
 802285c:	dc0c      	bgt.n	8022878 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802285e:	1a69      	subs	r1, r5, r1
 8022860:	b289      	uxth	r1, r1
 8022862:	b20b      	sxth	r3, r1
 8022864:	2b00      	cmp	r3, #0
 8022866:	bfbc      	itt	lt
 8022868:	4249      	neglt	r1, r1
 802286a:	b20b      	sxthlt	r3, r1
 802286c:	429a      	cmp	r2, r3
 802286e:	db03      	blt.n	8022878 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 8022870:	2000      	movs	r0, #0
 8022872:	b004      	add	sp, #16
 8022874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022878:	6920      	ldr	r0, [r4, #16]
 802287a:	4669      	mov	r1, sp
 802287c:	eba8 0606 	sub.w	r6, r8, r6
 8022880:	1bef      	subs	r7, r5, r7
 8022882:	6803      	ldr	r3, [r0, #0]
 8022884:	685b      	ldr	r3, [r3, #4]
 8022886:	4798      	blx	r3
 8022888:	2300      	movs	r3, #0
 802288a:	2001      	movs	r0, #1
 802288c:	8166      	strh	r6, [r4, #10]
 802288e:	8123      	strh	r3, [r4, #8]
 8022890:	81a7      	strh	r7, [r4, #12]
 8022892:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022896:	80e5      	strh	r5, [r4, #6]
 8022898:	73a0      	strb	r0, [r4, #14]
 802289a:	e7ea      	b.n	8022872 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 802289c:	080247e0 	.word	0x080247e0

080228a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80228a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228a2:	461e      	mov	r6, r3
 80228a4:	1e4b      	subs	r3, r1, #1
 80228a6:	b085      	sub	sp, #20
 80228a8:	4604      	mov	r4, r0
 80228aa:	2b01      	cmp	r3, #1
 80228ac:	460d      	mov	r5, r1
 80228ae:	4617      	mov	r7, r2
 80228b0:	d845      	bhi.n	802293e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 80228b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80228b6:	1cd3      	adds	r3, r2, #3
 80228b8:	b29b      	uxth	r3, r3
 80228ba:	2b06      	cmp	r3, #6
 80228bc:	d913      	bls.n	80228e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 80228be:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80228c2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80228c6:	4820      	ldr	r0, [pc, #128]	; (8022948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80228c8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80228cc:	a901      	add	r1, sp, #4
 80228ce:	9001      	str	r0, [sp, #4]
 80228d0:	2000      	movs	r0, #0
 80228d2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80228d6:	f88d 0008 	strb.w	r0, [sp, #8]
 80228da:	6920      	ldr	r0, [r4, #16]
 80228dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80228e0:	6803      	ldr	r3, [r0, #0]
 80228e2:	689b      	ldr	r3, [r3, #8]
 80228e4:	4798      	blx	r3
 80228e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80228ea:	1cd3      	adds	r3, r2, #3
 80228ec:	b29b      	uxth	r3, r3
 80228ee:	2b06      	cmp	r3, #6
 80228f0:	d913      	bls.n	802291a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 80228f2:	4815      	ldr	r0, [pc, #84]	; (8022948 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80228f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80228f8:	9001      	str	r0, [sp, #4]
 80228fa:	2001      	movs	r0, #1
 80228fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022900:	f88d 0008 	strb.w	r0, [sp, #8]
 8022904:	6920      	ldr	r0, [r4, #16]
 8022906:	f8ad 100c 	strh.w	r1, [sp, #12]
 802290a:	a901      	add	r1, sp, #4
 802290c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022910:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022914:	6803      	ldr	r3, [r0, #0]
 8022916:	689b      	ldr	r3, [r3, #8]
 8022918:	4798      	blx	r3
 802291a:	4b0c      	ldr	r3, [pc, #48]	; (802294c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 802291c:	a901      	add	r1, sp, #4
 802291e:	6920      	ldr	r0, [r4, #16]
 8022920:	9301      	str	r3, [sp, #4]
 8022922:	2300      	movs	r3, #0
 8022924:	f88d 5008 	strb.w	r5, [sp, #8]
 8022928:	f8ad 700a 	strh.w	r7, [sp, #10]
 802292c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022930:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022934:	6803      	ldr	r3, [r0, #0]
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	4798      	blx	r3
 802293a:	b005      	add	sp, #20
 802293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802293e:	2900      	cmp	r1, #0
 8022940:	d1eb      	bne.n	802291a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8022942:	80a2      	strh	r2, [r4, #4]
 8022944:	80c6      	strh	r6, [r0, #6]
 8022946:	e7e8      	b.n	802291a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8022948:	0802617c 	.word	0x0802617c
 802294c:	080247f4 	.word	0x080247f4

08022950 <__cxa_pure_virtual>:
 8022950:	b508      	push	{r3, lr}
 8022952:	f000 f811 	bl	8022978 <_ZSt9terminatev>

08022956 <_ZdlPvj>:
 8022956:	f000 b800 	b.w	802295a <_ZdlPv>

0802295a <_ZdlPv>:
 802295a:	f000 b89b 	b.w	8022a94 <free>

0802295e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802295e:	b508      	push	{r3, lr}
 8022960:	4780      	blx	r0
 8022962:	f000 f80e 	bl	8022982 <abort>
	...

08022968 <_ZSt13get_terminatev>:
 8022968:	4b02      	ldr	r3, [pc, #8]	; (8022974 <_ZSt13get_terminatev+0xc>)
 802296a:	6818      	ldr	r0, [r3, #0]
 802296c:	f3bf 8f5b 	dmb	ish
 8022970:	4770      	bx	lr
 8022972:	bf00      	nop
 8022974:	20000194 	.word	0x20000194

08022978 <_ZSt9terminatev>:
 8022978:	b508      	push	{r3, lr}
 802297a:	f7ff fff5 	bl	8022968 <_ZSt13get_terminatev>
 802297e:	f7ff ffee 	bl	802295e <_ZN10__cxxabiv111__terminateEPFvvE>

08022982 <abort>:
 8022982:	b508      	push	{r3, lr}
 8022984:	2006      	movs	r0, #6
 8022986:	f000 fc49 	bl	802321c <raise>
 802298a:	2001      	movs	r0, #1
 802298c:	f7e0 fb86 	bl	800309c <_exit>

08022990 <__assert_func>:
 8022990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022992:	461c      	mov	r4, r3
 8022994:	4b09      	ldr	r3, [pc, #36]	; (80229bc <__assert_func+0x2c>)
 8022996:	681b      	ldr	r3, [r3, #0]
 8022998:	4605      	mov	r5, r0
 802299a:	68d8      	ldr	r0, [r3, #12]
 802299c:	b152      	cbz	r2, 80229b4 <__assert_func+0x24>
 802299e:	4b08      	ldr	r3, [pc, #32]	; (80229c0 <__assert_func+0x30>)
 80229a0:	9100      	str	r1, [sp, #0]
 80229a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80229a6:	4907      	ldr	r1, [pc, #28]	; (80229c4 <__assert_func+0x34>)
 80229a8:	462b      	mov	r3, r5
 80229aa:	4622      	mov	r2, r4
 80229ac:	f000 f81a 	bl	80229e4 <fiprintf>
 80229b0:	f7ff ffe7 	bl	8022982 <abort>
 80229b4:	4b04      	ldr	r3, [pc, #16]	; (80229c8 <__assert_func+0x38>)
 80229b6:	461a      	mov	r2, r3
 80229b8:	e7f2      	b.n	80229a0 <__assert_func+0x10>
 80229ba:	bf00      	nop
 80229bc:	20000198 	.word	0x20000198
 80229c0:	08026866 	.word	0x08026866
 80229c4:	08026873 	.word	0x08026873
 80229c8:	080268a1 	.word	0x080268a1

080229cc <atexit>:
 80229cc:	2300      	movs	r3, #0
 80229ce:	4601      	mov	r1, r0
 80229d0:	461a      	mov	r2, r3
 80229d2:	4618      	mov	r0, r3
 80229d4:	f000 bd3c 	b.w	8023450 <__register_exitproc>

080229d8 <__errno>:
 80229d8:	4b01      	ldr	r3, [pc, #4]	; (80229e0 <__errno+0x8>)
 80229da:	6818      	ldr	r0, [r3, #0]
 80229dc:	4770      	bx	lr
 80229de:	bf00      	nop
 80229e0:	20000198 	.word	0x20000198

080229e4 <fiprintf>:
 80229e4:	b40e      	push	{r1, r2, r3}
 80229e6:	b503      	push	{r0, r1, lr}
 80229e8:	4601      	mov	r1, r0
 80229ea:	ab03      	add	r3, sp, #12
 80229ec:	4805      	ldr	r0, [pc, #20]	; (8022a04 <fiprintf+0x20>)
 80229ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80229f2:	6800      	ldr	r0, [r0, #0]
 80229f4:	9301      	str	r3, [sp, #4]
 80229f6:	f000 f93b 	bl	8022c70 <_vfiprintf_r>
 80229fa:	b002      	add	sp, #8
 80229fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8022a00:	b003      	add	sp, #12
 8022a02:	4770      	bx	lr
 8022a04:	20000198 	.word	0x20000198

08022a08 <__libc_init_array>:
 8022a08:	b570      	push	{r4, r5, r6, lr}
 8022a0a:	4e0d      	ldr	r6, [pc, #52]	; (8022a40 <__libc_init_array+0x38>)
 8022a0c:	4c0d      	ldr	r4, [pc, #52]	; (8022a44 <__libc_init_array+0x3c>)
 8022a0e:	1ba4      	subs	r4, r4, r6
 8022a10:	10a4      	asrs	r4, r4, #2
 8022a12:	2500      	movs	r5, #0
 8022a14:	42a5      	cmp	r5, r4
 8022a16:	d109      	bne.n	8022a2c <__libc_init_array+0x24>
 8022a18:	4e0b      	ldr	r6, [pc, #44]	; (8022a48 <__libc_init_array+0x40>)
 8022a1a:	4c0c      	ldr	r4, [pc, #48]	; (8022a4c <__libc_init_array+0x44>)
 8022a1c:	f001 f808 	bl	8023a30 <_init>
 8022a20:	1ba4      	subs	r4, r4, r6
 8022a22:	10a4      	asrs	r4, r4, #2
 8022a24:	2500      	movs	r5, #0
 8022a26:	42a5      	cmp	r5, r4
 8022a28:	d105      	bne.n	8022a36 <__libc_init_array+0x2e>
 8022a2a:	bd70      	pop	{r4, r5, r6, pc}
 8022a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022a30:	4798      	blx	r3
 8022a32:	3501      	adds	r5, #1
 8022a34:	e7ee      	b.n	8022a14 <__libc_init_array+0xc>
 8022a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022a3a:	4798      	blx	r3
 8022a3c:	3501      	adds	r5, #1
 8022a3e:	e7f2      	b.n	8022a26 <__libc_init_array+0x1e>
 8022a40:	08026968 	.word	0x08026968
 8022a44:	08026968 	.word	0x08026968
 8022a48:	08026968 	.word	0x08026968
 8022a4c:	08026978 	.word	0x08026978

08022a50 <__itoa>:
 8022a50:	1e93      	subs	r3, r2, #2
 8022a52:	2b22      	cmp	r3, #34	; 0x22
 8022a54:	b510      	push	{r4, lr}
 8022a56:	460c      	mov	r4, r1
 8022a58:	d904      	bls.n	8022a64 <__itoa+0x14>
 8022a5a:	2300      	movs	r3, #0
 8022a5c:	700b      	strb	r3, [r1, #0]
 8022a5e:	461c      	mov	r4, r3
 8022a60:	4620      	mov	r0, r4
 8022a62:	bd10      	pop	{r4, pc}
 8022a64:	2a0a      	cmp	r2, #10
 8022a66:	d109      	bne.n	8022a7c <__itoa+0x2c>
 8022a68:	2800      	cmp	r0, #0
 8022a6a:	da07      	bge.n	8022a7c <__itoa+0x2c>
 8022a6c:	232d      	movs	r3, #45	; 0x2d
 8022a6e:	700b      	strb	r3, [r1, #0]
 8022a70:	4240      	negs	r0, r0
 8022a72:	2101      	movs	r1, #1
 8022a74:	4421      	add	r1, r4
 8022a76:	f000 fbed 	bl	8023254 <__utoa>
 8022a7a:	e7f1      	b.n	8022a60 <__itoa+0x10>
 8022a7c:	2100      	movs	r1, #0
 8022a7e:	e7f9      	b.n	8022a74 <__itoa+0x24>

08022a80 <itoa>:
 8022a80:	f7ff bfe6 	b.w	8022a50 <__itoa>

08022a84 <malloc>:
 8022a84:	4b02      	ldr	r3, [pc, #8]	; (8022a90 <malloc+0xc>)
 8022a86:	4601      	mov	r1, r0
 8022a88:	6818      	ldr	r0, [r3, #0]
 8022a8a:	f000 b86d 	b.w	8022b68 <_malloc_r>
 8022a8e:	bf00      	nop
 8022a90:	20000198 	.word	0x20000198

08022a94 <free>:
 8022a94:	4b02      	ldr	r3, [pc, #8]	; (8022aa0 <free+0xc>)
 8022a96:	4601      	mov	r1, r0
 8022a98:	6818      	ldr	r0, [r3, #0]
 8022a9a:	f000 b817 	b.w	8022acc <_free_r>
 8022a9e:	bf00      	nop
 8022aa0:	20000198 	.word	0x20000198

08022aa4 <memcpy>:
 8022aa4:	b510      	push	{r4, lr}
 8022aa6:	1e43      	subs	r3, r0, #1
 8022aa8:	440a      	add	r2, r1
 8022aaa:	4291      	cmp	r1, r2
 8022aac:	d100      	bne.n	8022ab0 <memcpy+0xc>
 8022aae:	bd10      	pop	{r4, pc}
 8022ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022ab8:	e7f7      	b.n	8022aaa <memcpy+0x6>

08022aba <memset>:
 8022aba:	4402      	add	r2, r0
 8022abc:	4603      	mov	r3, r0
 8022abe:	4293      	cmp	r3, r2
 8022ac0:	d100      	bne.n	8022ac4 <memset+0xa>
 8022ac2:	4770      	bx	lr
 8022ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8022ac8:	e7f9      	b.n	8022abe <memset+0x4>
	...

08022acc <_free_r>:
 8022acc:	b538      	push	{r3, r4, r5, lr}
 8022ace:	4605      	mov	r5, r0
 8022ad0:	2900      	cmp	r1, #0
 8022ad2:	d045      	beq.n	8022b60 <_free_r+0x94>
 8022ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022ad8:	1f0c      	subs	r4, r1, #4
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	bfb8      	it	lt
 8022ade:	18e4      	addlt	r4, r4, r3
 8022ae0:	f000 fef8 	bl	80238d4 <__malloc_lock>
 8022ae4:	4a1f      	ldr	r2, [pc, #124]	; (8022b64 <_free_r+0x98>)
 8022ae6:	6813      	ldr	r3, [r2, #0]
 8022ae8:	4610      	mov	r0, r2
 8022aea:	b933      	cbnz	r3, 8022afa <_free_r+0x2e>
 8022aec:	6063      	str	r3, [r4, #4]
 8022aee:	6014      	str	r4, [r2, #0]
 8022af0:	4628      	mov	r0, r5
 8022af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022af6:	f000 beee 	b.w	80238d6 <__malloc_unlock>
 8022afa:	42a3      	cmp	r3, r4
 8022afc:	d90c      	bls.n	8022b18 <_free_r+0x4c>
 8022afe:	6821      	ldr	r1, [r4, #0]
 8022b00:	1862      	adds	r2, r4, r1
 8022b02:	4293      	cmp	r3, r2
 8022b04:	bf04      	itt	eq
 8022b06:	681a      	ldreq	r2, [r3, #0]
 8022b08:	685b      	ldreq	r3, [r3, #4]
 8022b0a:	6063      	str	r3, [r4, #4]
 8022b0c:	bf04      	itt	eq
 8022b0e:	1852      	addeq	r2, r2, r1
 8022b10:	6022      	streq	r2, [r4, #0]
 8022b12:	6004      	str	r4, [r0, #0]
 8022b14:	e7ec      	b.n	8022af0 <_free_r+0x24>
 8022b16:	4613      	mov	r3, r2
 8022b18:	685a      	ldr	r2, [r3, #4]
 8022b1a:	b10a      	cbz	r2, 8022b20 <_free_r+0x54>
 8022b1c:	42a2      	cmp	r2, r4
 8022b1e:	d9fa      	bls.n	8022b16 <_free_r+0x4a>
 8022b20:	6819      	ldr	r1, [r3, #0]
 8022b22:	1858      	adds	r0, r3, r1
 8022b24:	42a0      	cmp	r0, r4
 8022b26:	d10b      	bne.n	8022b40 <_free_r+0x74>
 8022b28:	6820      	ldr	r0, [r4, #0]
 8022b2a:	4401      	add	r1, r0
 8022b2c:	1858      	adds	r0, r3, r1
 8022b2e:	4282      	cmp	r2, r0
 8022b30:	6019      	str	r1, [r3, #0]
 8022b32:	d1dd      	bne.n	8022af0 <_free_r+0x24>
 8022b34:	6810      	ldr	r0, [r2, #0]
 8022b36:	6852      	ldr	r2, [r2, #4]
 8022b38:	605a      	str	r2, [r3, #4]
 8022b3a:	4401      	add	r1, r0
 8022b3c:	6019      	str	r1, [r3, #0]
 8022b3e:	e7d7      	b.n	8022af0 <_free_r+0x24>
 8022b40:	d902      	bls.n	8022b48 <_free_r+0x7c>
 8022b42:	230c      	movs	r3, #12
 8022b44:	602b      	str	r3, [r5, #0]
 8022b46:	e7d3      	b.n	8022af0 <_free_r+0x24>
 8022b48:	6820      	ldr	r0, [r4, #0]
 8022b4a:	1821      	adds	r1, r4, r0
 8022b4c:	428a      	cmp	r2, r1
 8022b4e:	bf04      	itt	eq
 8022b50:	6811      	ldreq	r1, [r2, #0]
 8022b52:	6852      	ldreq	r2, [r2, #4]
 8022b54:	6062      	str	r2, [r4, #4]
 8022b56:	bf04      	itt	eq
 8022b58:	1809      	addeq	r1, r1, r0
 8022b5a:	6021      	streq	r1, [r4, #0]
 8022b5c:	605c      	str	r4, [r3, #4]
 8022b5e:	e7c7      	b.n	8022af0 <_free_r+0x24>
 8022b60:	bd38      	pop	{r3, r4, r5, pc}
 8022b62:	bf00      	nop
 8022b64:	2000a32c 	.word	0x2000a32c

08022b68 <_malloc_r>:
 8022b68:	b570      	push	{r4, r5, r6, lr}
 8022b6a:	1ccd      	adds	r5, r1, #3
 8022b6c:	f025 0503 	bic.w	r5, r5, #3
 8022b70:	3508      	adds	r5, #8
 8022b72:	2d0c      	cmp	r5, #12
 8022b74:	bf38      	it	cc
 8022b76:	250c      	movcc	r5, #12
 8022b78:	2d00      	cmp	r5, #0
 8022b7a:	4606      	mov	r6, r0
 8022b7c:	db01      	blt.n	8022b82 <_malloc_r+0x1a>
 8022b7e:	42a9      	cmp	r1, r5
 8022b80:	d903      	bls.n	8022b8a <_malloc_r+0x22>
 8022b82:	230c      	movs	r3, #12
 8022b84:	6033      	str	r3, [r6, #0]
 8022b86:	2000      	movs	r0, #0
 8022b88:	bd70      	pop	{r4, r5, r6, pc}
 8022b8a:	f000 fea3 	bl	80238d4 <__malloc_lock>
 8022b8e:	4a21      	ldr	r2, [pc, #132]	; (8022c14 <_malloc_r+0xac>)
 8022b90:	6814      	ldr	r4, [r2, #0]
 8022b92:	4621      	mov	r1, r4
 8022b94:	b991      	cbnz	r1, 8022bbc <_malloc_r+0x54>
 8022b96:	4c20      	ldr	r4, [pc, #128]	; (8022c18 <_malloc_r+0xb0>)
 8022b98:	6823      	ldr	r3, [r4, #0]
 8022b9a:	b91b      	cbnz	r3, 8022ba4 <_malloc_r+0x3c>
 8022b9c:	4630      	mov	r0, r6
 8022b9e:	f000 fb05 	bl	80231ac <_sbrk_r>
 8022ba2:	6020      	str	r0, [r4, #0]
 8022ba4:	4629      	mov	r1, r5
 8022ba6:	4630      	mov	r0, r6
 8022ba8:	f000 fb00 	bl	80231ac <_sbrk_r>
 8022bac:	1c43      	adds	r3, r0, #1
 8022bae:	d124      	bne.n	8022bfa <_malloc_r+0x92>
 8022bb0:	230c      	movs	r3, #12
 8022bb2:	6033      	str	r3, [r6, #0]
 8022bb4:	4630      	mov	r0, r6
 8022bb6:	f000 fe8e 	bl	80238d6 <__malloc_unlock>
 8022bba:	e7e4      	b.n	8022b86 <_malloc_r+0x1e>
 8022bbc:	680b      	ldr	r3, [r1, #0]
 8022bbe:	1b5b      	subs	r3, r3, r5
 8022bc0:	d418      	bmi.n	8022bf4 <_malloc_r+0x8c>
 8022bc2:	2b0b      	cmp	r3, #11
 8022bc4:	d90f      	bls.n	8022be6 <_malloc_r+0x7e>
 8022bc6:	600b      	str	r3, [r1, #0]
 8022bc8:	50cd      	str	r5, [r1, r3]
 8022bca:	18cc      	adds	r4, r1, r3
 8022bcc:	4630      	mov	r0, r6
 8022bce:	f000 fe82 	bl	80238d6 <__malloc_unlock>
 8022bd2:	f104 000b 	add.w	r0, r4, #11
 8022bd6:	1d23      	adds	r3, r4, #4
 8022bd8:	f020 0007 	bic.w	r0, r0, #7
 8022bdc:	1ac3      	subs	r3, r0, r3
 8022bde:	d0d3      	beq.n	8022b88 <_malloc_r+0x20>
 8022be0:	425a      	negs	r2, r3
 8022be2:	50e2      	str	r2, [r4, r3]
 8022be4:	e7d0      	b.n	8022b88 <_malloc_r+0x20>
 8022be6:	428c      	cmp	r4, r1
 8022be8:	684b      	ldr	r3, [r1, #4]
 8022bea:	bf16      	itet	ne
 8022bec:	6063      	strne	r3, [r4, #4]
 8022bee:	6013      	streq	r3, [r2, #0]
 8022bf0:	460c      	movne	r4, r1
 8022bf2:	e7eb      	b.n	8022bcc <_malloc_r+0x64>
 8022bf4:	460c      	mov	r4, r1
 8022bf6:	6849      	ldr	r1, [r1, #4]
 8022bf8:	e7cc      	b.n	8022b94 <_malloc_r+0x2c>
 8022bfa:	1cc4      	adds	r4, r0, #3
 8022bfc:	f024 0403 	bic.w	r4, r4, #3
 8022c00:	42a0      	cmp	r0, r4
 8022c02:	d005      	beq.n	8022c10 <_malloc_r+0xa8>
 8022c04:	1a21      	subs	r1, r4, r0
 8022c06:	4630      	mov	r0, r6
 8022c08:	f000 fad0 	bl	80231ac <_sbrk_r>
 8022c0c:	3001      	adds	r0, #1
 8022c0e:	d0cf      	beq.n	8022bb0 <_malloc_r+0x48>
 8022c10:	6025      	str	r5, [r4, #0]
 8022c12:	e7db      	b.n	8022bcc <_malloc_r+0x64>
 8022c14:	2000a32c 	.word	0x2000a32c
 8022c18:	2000a330 	.word	0x2000a330

08022c1c <__sfputc_r>:
 8022c1c:	6893      	ldr	r3, [r2, #8]
 8022c1e:	3b01      	subs	r3, #1
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	b410      	push	{r4}
 8022c24:	6093      	str	r3, [r2, #8]
 8022c26:	da08      	bge.n	8022c3a <__sfputc_r+0x1e>
 8022c28:	6994      	ldr	r4, [r2, #24]
 8022c2a:	42a3      	cmp	r3, r4
 8022c2c:	db01      	blt.n	8022c32 <__sfputc_r+0x16>
 8022c2e:	290a      	cmp	r1, #10
 8022c30:	d103      	bne.n	8022c3a <__sfputc_r+0x1e>
 8022c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c36:	f000 bb4b 	b.w	80232d0 <__swbuf_r>
 8022c3a:	6813      	ldr	r3, [r2, #0]
 8022c3c:	1c58      	adds	r0, r3, #1
 8022c3e:	6010      	str	r0, [r2, #0]
 8022c40:	7019      	strb	r1, [r3, #0]
 8022c42:	4608      	mov	r0, r1
 8022c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c48:	4770      	bx	lr

08022c4a <__sfputs_r>:
 8022c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c4c:	4606      	mov	r6, r0
 8022c4e:	460f      	mov	r7, r1
 8022c50:	4614      	mov	r4, r2
 8022c52:	18d5      	adds	r5, r2, r3
 8022c54:	42ac      	cmp	r4, r5
 8022c56:	d101      	bne.n	8022c5c <__sfputs_r+0x12>
 8022c58:	2000      	movs	r0, #0
 8022c5a:	e007      	b.n	8022c6c <__sfputs_r+0x22>
 8022c5c:	463a      	mov	r2, r7
 8022c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c62:	4630      	mov	r0, r6
 8022c64:	f7ff ffda 	bl	8022c1c <__sfputc_r>
 8022c68:	1c43      	adds	r3, r0, #1
 8022c6a:	d1f3      	bne.n	8022c54 <__sfputs_r+0xa>
 8022c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022c70 <_vfiprintf_r>:
 8022c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c74:	460c      	mov	r4, r1
 8022c76:	b09d      	sub	sp, #116	; 0x74
 8022c78:	4617      	mov	r7, r2
 8022c7a:	461d      	mov	r5, r3
 8022c7c:	4606      	mov	r6, r0
 8022c7e:	b118      	cbz	r0, 8022c88 <_vfiprintf_r+0x18>
 8022c80:	6983      	ldr	r3, [r0, #24]
 8022c82:	b90b      	cbnz	r3, 8022c88 <_vfiprintf_r+0x18>
 8022c84:	f000 fd38 	bl	80236f8 <__sinit>
 8022c88:	4b7c      	ldr	r3, [pc, #496]	; (8022e7c <_vfiprintf_r+0x20c>)
 8022c8a:	429c      	cmp	r4, r3
 8022c8c:	d158      	bne.n	8022d40 <_vfiprintf_r+0xd0>
 8022c8e:	6874      	ldr	r4, [r6, #4]
 8022c90:	89a3      	ldrh	r3, [r4, #12]
 8022c92:	0718      	lsls	r0, r3, #28
 8022c94:	d55e      	bpl.n	8022d54 <_vfiprintf_r+0xe4>
 8022c96:	6923      	ldr	r3, [r4, #16]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d05b      	beq.n	8022d54 <_vfiprintf_r+0xe4>
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8022ca0:	2320      	movs	r3, #32
 8022ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022ca6:	2330      	movs	r3, #48	; 0x30
 8022ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022cac:	9503      	str	r5, [sp, #12]
 8022cae:	f04f 0b01 	mov.w	fp, #1
 8022cb2:	46b8      	mov	r8, r7
 8022cb4:	4645      	mov	r5, r8
 8022cb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022cba:	b10b      	cbz	r3, 8022cc0 <_vfiprintf_r+0x50>
 8022cbc:	2b25      	cmp	r3, #37	; 0x25
 8022cbe:	d154      	bne.n	8022d6a <_vfiprintf_r+0xfa>
 8022cc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8022cc4:	d00b      	beq.n	8022cde <_vfiprintf_r+0x6e>
 8022cc6:	4653      	mov	r3, sl
 8022cc8:	463a      	mov	r2, r7
 8022cca:	4621      	mov	r1, r4
 8022ccc:	4630      	mov	r0, r6
 8022cce:	f7ff ffbc 	bl	8022c4a <__sfputs_r>
 8022cd2:	3001      	adds	r0, #1
 8022cd4:	f000 80c2 	beq.w	8022e5c <_vfiprintf_r+0x1ec>
 8022cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cda:	4453      	add	r3, sl
 8022cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8022cde:	f898 3000 	ldrb.w	r3, [r8]
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	f000 80ba 	beq.w	8022e5c <_vfiprintf_r+0x1ec>
 8022ce8:	2300      	movs	r3, #0
 8022cea:	f04f 32ff 	mov.w	r2, #4294967295
 8022cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022cf2:	9304      	str	r3, [sp, #16]
 8022cf4:	9307      	str	r3, [sp, #28]
 8022cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8022cfc:	46a8      	mov	r8, r5
 8022cfe:	2205      	movs	r2, #5
 8022d00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022d04:	485e      	ldr	r0, [pc, #376]	; (8022e80 <_vfiprintf_r+0x210>)
 8022d06:	f7dd fa83 	bl	8000210 <memchr>
 8022d0a:	9b04      	ldr	r3, [sp, #16]
 8022d0c:	bb78      	cbnz	r0, 8022d6e <_vfiprintf_r+0xfe>
 8022d0e:	06d9      	lsls	r1, r3, #27
 8022d10:	bf44      	itt	mi
 8022d12:	2220      	movmi	r2, #32
 8022d14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022d18:	071a      	lsls	r2, r3, #28
 8022d1a:	bf44      	itt	mi
 8022d1c:	222b      	movmi	r2, #43	; 0x2b
 8022d1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022d22:	782a      	ldrb	r2, [r5, #0]
 8022d24:	2a2a      	cmp	r2, #42	; 0x2a
 8022d26:	d02a      	beq.n	8022d7e <_vfiprintf_r+0x10e>
 8022d28:	9a07      	ldr	r2, [sp, #28]
 8022d2a:	46a8      	mov	r8, r5
 8022d2c:	2000      	movs	r0, #0
 8022d2e:	250a      	movs	r5, #10
 8022d30:	4641      	mov	r1, r8
 8022d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022d36:	3b30      	subs	r3, #48	; 0x30
 8022d38:	2b09      	cmp	r3, #9
 8022d3a:	d969      	bls.n	8022e10 <_vfiprintf_r+0x1a0>
 8022d3c:	b360      	cbz	r0, 8022d98 <_vfiprintf_r+0x128>
 8022d3e:	e024      	b.n	8022d8a <_vfiprintf_r+0x11a>
 8022d40:	4b50      	ldr	r3, [pc, #320]	; (8022e84 <_vfiprintf_r+0x214>)
 8022d42:	429c      	cmp	r4, r3
 8022d44:	d101      	bne.n	8022d4a <_vfiprintf_r+0xda>
 8022d46:	68b4      	ldr	r4, [r6, #8]
 8022d48:	e7a2      	b.n	8022c90 <_vfiprintf_r+0x20>
 8022d4a:	4b4f      	ldr	r3, [pc, #316]	; (8022e88 <_vfiprintf_r+0x218>)
 8022d4c:	429c      	cmp	r4, r3
 8022d4e:	bf08      	it	eq
 8022d50:	68f4      	ldreq	r4, [r6, #12]
 8022d52:	e79d      	b.n	8022c90 <_vfiprintf_r+0x20>
 8022d54:	4621      	mov	r1, r4
 8022d56:	4630      	mov	r0, r6
 8022d58:	f000 fb0c 	bl	8023374 <__swsetup_r>
 8022d5c:	2800      	cmp	r0, #0
 8022d5e:	d09d      	beq.n	8022c9c <_vfiprintf_r+0x2c>
 8022d60:	f04f 30ff 	mov.w	r0, #4294967295
 8022d64:	b01d      	add	sp, #116	; 0x74
 8022d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d6a:	46a8      	mov	r8, r5
 8022d6c:	e7a2      	b.n	8022cb4 <_vfiprintf_r+0x44>
 8022d6e:	4a44      	ldr	r2, [pc, #272]	; (8022e80 <_vfiprintf_r+0x210>)
 8022d70:	1a80      	subs	r0, r0, r2
 8022d72:	fa0b f000 	lsl.w	r0, fp, r0
 8022d76:	4318      	orrs	r0, r3
 8022d78:	9004      	str	r0, [sp, #16]
 8022d7a:	4645      	mov	r5, r8
 8022d7c:	e7be      	b.n	8022cfc <_vfiprintf_r+0x8c>
 8022d7e:	9a03      	ldr	r2, [sp, #12]
 8022d80:	1d11      	adds	r1, r2, #4
 8022d82:	6812      	ldr	r2, [r2, #0]
 8022d84:	9103      	str	r1, [sp, #12]
 8022d86:	2a00      	cmp	r2, #0
 8022d88:	db01      	blt.n	8022d8e <_vfiprintf_r+0x11e>
 8022d8a:	9207      	str	r2, [sp, #28]
 8022d8c:	e004      	b.n	8022d98 <_vfiprintf_r+0x128>
 8022d8e:	4252      	negs	r2, r2
 8022d90:	f043 0302 	orr.w	r3, r3, #2
 8022d94:	9207      	str	r2, [sp, #28]
 8022d96:	9304      	str	r3, [sp, #16]
 8022d98:	f898 3000 	ldrb.w	r3, [r8]
 8022d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8022d9e:	d10e      	bne.n	8022dbe <_vfiprintf_r+0x14e>
 8022da0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022da4:	2b2a      	cmp	r3, #42	; 0x2a
 8022da6:	d138      	bne.n	8022e1a <_vfiprintf_r+0x1aa>
 8022da8:	9b03      	ldr	r3, [sp, #12]
 8022daa:	1d1a      	adds	r2, r3, #4
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	9203      	str	r2, [sp, #12]
 8022db0:	2b00      	cmp	r3, #0
 8022db2:	bfb8      	it	lt
 8022db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8022db8:	f108 0802 	add.w	r8, r8, #2
 8022dbc:	9305      	str	r3, [sp, #20]
 8022dbe:	4d33      	ldr	r5, [pc, #204]	; (8022e8c <_vfiprintf_r+0x21c>)
 8022dc0:	f898 1000 	ldrb.w	r1, [r8]
 8022dc4:	2203      	movs	r2, #3
 8022dc6:	4628      	mov	r0, r5
 8022dc8:	f7dd fa22 	bl	8000210 <memchr>
 8022dcc:	b140      	cbz	r0, 8022de0 <_vfiprintf_r+0x170>
 8022dce:	2340      	movs	r3, #64	; 0x40
 8022dd0:	1b40      	subs	r0, r0, r5
 8022dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8022dd6:	9b04      	ldr	r3, [sp, #16]
 8022dd8:	4303      	orrs	r3, r0
 8022dda:	f108 0801 	add.w	r8, r8, #1
 8022dde:	9304      	str	r3, [sp, #16]
 8022de0:	f898 1000 	ldrb.w	r1, [r8]
 8022de4:	482a      	ldr	r0, [pc, #168]	; (8022e90 <_vfiprintf_r+0x220>)
 8022de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022dea:	2206      	movs	r2, #6
 8022dec:	f108 0701 	add.w	r7, r8, #1
 8022df0:	f7dd fa0e 	bl	8000210 <memchr>
 8022df4:	2800      	cmp	r0, #0
 8022df6:	d037      	beq.n	8022e68 <_vfiprintf_r+0x1f8>
 8022df8:	4b26      	ldr	r3, [pc, #152]	; (8022e94 <_vfiprintf_r+0x224>)
 8022dfa:	bb1b      	cbnz	r3, 8022e44 <_vfiprintf_r+0x1d4>
 8022dfc:	9b03      	ldr	r3, [sp, #12]
 8022dfe:	3307      	adds	r3, #7
 8022e00:	f023 0307 	bic.w	r3, r3, #7
 8022e04:	3308      	adds	r3, #8
 8022e06:	9303      	str	r3, [sp, #12]
 8022e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e0a:	444b      	add	r3, r9
 8022e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8022e0e:	e750      	b.n	8022cb2 <_vfiprintf_r+0x42>
 8022e10:	fb05 3202 	mla	r2, r5, r2, r3
 8022e14:	2001      	movs	r0, #1
 8022e16:	4688      	mov	r8, r1
 8022e18:	e78a      	b.n	8022d30 <_vfiprintf_r+0xc0>
 8022e1a:	2300      	movs	r3, #0
 8022e1c:	f108 0801 	add.w	r8, r8, #1
 8022e20:	9305      	str	r3, [sp, #20]
 8022e22:	4619      	mov	r1, r3
 8022e24:	250a      	movs	r5, #10
 8022e26:	4640      	mov	r0, r8
 8022e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022e2c:	3a30      	subs	r2, #48	; 0x30
 8022e2e:	2a09      	cmp	r2, #9
 8022e30:	d903      	bls.n	8022e3a <_vfiprintf_r+0x1ca>
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	d0c3      	beq.n	8022dbe <_vfiprintf_r+0x14e>
 8022e36:	9105      	str	r1, [sp, #20]
 8022e38:	e7c1      	b.n	8022dbe <_vfiprintf_r+0x14e>
 8022e3a:	fb05 2101 	mla	r1, r5, r1, r2
 8022e3e:	2301      	movs	r3, #1
 8022e40:	4680      	mov	r8, r0
 8022e42:	e7f0      	b.n	8022e26 <_vfiprintf_r+0x1b6>
 8022e44:	ab03      	add	r3, sp, #12
 8022e46:	9300      	str	r3, [sp, #0]
 8022e48:	4622      	mov	r2, r4
 8022e4a:	4b13      	ldr	r3, [pc, #76]	; (8022e98 <_vfiprintf_r+0x228>)
 8022e4c:	a904      	add	r1, sp, #16
 8022e4e:	4630      	mov	r0, r6
 8022e50:	f3af 8000 	nop.w
 8022e54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022e58:	4681      	mov	r9, r0
 8022e5a:	d1d5      	bne.n	8022e08 <_vfiprintf_r+0x198>
 8022e5c:	89a3      	ldrh	r3, [r4, #12]
 8022e5e:	065b      	lsls	r3, r3, #25
 8022e60:	f53f af7e 	bmi.w	8022d60 <_vfiprintf_r+0xf0>
 8022e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022e66:	e77d      	b.n	8022d64 <_vfiprintf_r+0xf4>
 8022e68:	ab03      	add	r3, sp, #12
 8022e6a:	9300      	str	r3, [sp, #0]
 8022e6c:	4622      	mov	r2, r4
 8022e6e:	4b0a      	ldr	r3, [pc, #40]	; (8022e98 <_vfiprintf_r+0x228>)
 8022e70:	a904      	add	r1, sp, #16
 8022e72:	4630      	mov	r0, r6
 8022e74:	f000 f888 	bl	8022f88 <_printf_i>
 8022e78:	e7ec      	b.n	8022e54 <_vfiprintf_r+0x1e4>
 8022e7a:	bf00      	nop
 8022e7c:	08026920 	.word	0x08026920
 8022e80:	080268a8 	.word	0x080268a8
 8022e84:	08026940 	.word	0x08026940
 8022e88:	08026900 	.word	0x08026900
 8022e8c:	080268ae 	.word	0x080268ae
 8022e90:	080268b2 	.word	0x080268b2
 8022e94:	00000000 	.word	0x00000000
 8022e98:	08022c4b 	.word	0x08022c4b

08022e9c <_printf_common>:
 8022e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ea0:	4691      	mov	r9, r2
 8022ea2:	461f      	mov	r7, r3
 8022ea4:	688a      	ldr	r2, [r1, #8]
 8022ea6:	690b      	ldr	r3, [r1, #16]
 8022ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022eac:	4293      	cmp	r3, r2
 8022eae:	bfb8      	it	lt
 8022eb0:	4613      	movlt	r3, r2
 8022eb2:	f8c9 3000 	str.w	r3, [r9]
 8022eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022eba:	4606      	mov	r6, r0
 8022ebc:	460c      	mov	r4, r1
 8022ebe:	b112      	cbz	r2, 8022ec6 <_printf_common+0x2a>
 8022ec0:	3301      	adds	r3, #1
 8022ec2:	f8c9 3000 	str.w	r3, [r9]
 8022ec6:	6823      	ldr	r3, [r4, #0]
 8022ec8:	0699      	lsls	r1, r3, #26
 8022eca:	bf42      	ittt	mi
 8022ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022ed0:	3302      	addmi	r3, #2
 8022ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8022ed6:	6825      	ldr	r5, [r4, #0]
 8022ed8:	f015 0506 	ands.w	r5, r5, #6
 8022edc:	d107      	bne.n	8022eee <_printf_common+0x52>
 8022ede:	f104 0a19 	add.w	sl, r4, #25
 8022ee2:	68e3      	ldr	r3, [r4, #12]
 8022ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8022ee8:	1a9b      	subs	r3, r3, r2
 8022eea:	42ab      	cmp	r3, r5
 8022eec:	dc28      	bgt.n	8022f40 <_printf_common+0xa4>
 8022eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8022ef2:	6822      	ldr	r2, [r4, #0]
 8022ef4:	3300      	adds	r3, #0
 8022ef6:	bf18      	it	ne
 8022ef8:	2301      	movne	r3, #1
 8022efa:	0692      	lsls	r2, r2, #26
 8022efc:	d42d      	bmi.n	8022f5a <_printf_common+0xbe>
 8022efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022f02:	4639      	mov	r1, r7
 8022f04:	4630      	mov	r0, r6
 8022f06:	47c0      	blx	r8
 8022f08:	3001      	adds	r0, #1
 8022f0a:	d020      	beq.n	8022f4e <_printf_common+0xb2>
 8022f0c:	6823      	ldr	r3, [r4, #0]
 8022f0e:	68e5      	ldr	r5, [r4, #12]
 8022f10:	f8d9 2000 	ldr.w	r2, [r9]
 8022f14:	f003 0306 	and.w	r3, r3, #6
 8022f18:	2b04      	cmp	r3, #4
 8022f1a:	bf08      	it	eq
 8022f1c:	1aad      	subeq	r5, r5, r2
 8022f1e:	68a3      	ldr	r3, [r4, #8]
 8022f20:	6922      	ldr	r2, [r4, #16]
 8022f22:	bf0c      	ite	eq
 8022f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022f28:	2500      	movne	r5, #0
 8022f2a:	4293      	cmp	r3, r2
 8022f2c:	bfc4      	itt	gt
 8022f2e:	1a9b      	subgt	r3, r3, r2
 8022f30:	18ed      	addgt	r5, r5, r3
 8022f32:	f04f 0900 	mov.w	r9, #0
 8022f36:	341a      	adds	r4, #26
 8022f38:	454d      	cmp	r5, r9
 8022f3a:	d11a      	bne.n	8022f72 <_printf_common+0xd6>
 8022f3c:	2000      	movs	r0, #0
 8022f3e:	e008      	b.n	8022f52 <_printf_common+0xb6>
 8022f40:	2301      	movs	r3, #1
 8022f42:	4652      	mov	r2, sl
 8022f44:	4639      	mov	r1, r7
 8022f46:	4630      	mov	r0, r6
 8022f48:	47c0      	blx	r8
 8022f4a:	3001      	adds	r0, #1
 8022f4c:	d103      	bne.n	8022f56 <_printf_common+0xba>
 8022f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8022f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f56:	3501      	adds	r5, #1
 8022f58:	e7c3      	b.n	8022ee2 <_printf_common+0x46>
 8022f5a:	18e1      	adds	r1, r4, r3
 8022f5c:	1c5a      	adds	r2, r3, #1
 8022f5e:	2030      	movs	r0, #48	; 0x30
 8022f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022f64:	4422      	add	r2, r4
 8022f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022f6e:	3302      	adds	r3, #2
 8022f70:	e7c5      	b.n	8022efe <_printf_common+0x62>
 8022f72:	2301      	movs	r3, #1
 8022f74:	4622      	mov	r2, r4
 8022f76:	4639      	mov	r1, r7
 8022f78:	4630      	mov	r0, r6
 8022f7a:	47c0      	blx	r8
 8022f7c:	3001      	adds	r0, #1
 8022f7e:	d0e6      	beq.n	8022f4e <_printf_common+0xb2>
 8022f80:	f109 0901 	add.w	r9, r9, #1
 8022f84:	e7d8      	b.n	8022f38 <_printf_common+0x9c>
	...

08022f88 <_printf_i>:
 8022f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022f90:	460c      	mov	r4, r1
 8022f92:	7e09      	ldrb	r1, [r1, #24]
 8022f94:	b085      	sub	sp, #20
 8022f96:	296e      	cmp	r1, #110	; 0x6e
 8022f98:	4617      	mov	r7, r2
 8022f9a:	4606      	mov	r6, r0
 8022f9c:	4698      	mov	r8, r3
 8022f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022fa0:	f000 80b3 	beq.w	802310a <_printf_i+0x182>
 8022fa4:	d822      	bhi.n	8022fec <_printf_i+0x64>
 8022fa6:	2963      	cmp	r1, #99	; 0x63
 8022fa8:	d036      	beq.n	8023018 <_printf_i+0x90>
 8022faa:	d80a      	bhi.n	8022fc2 <_printf_i+0x3a>
 8022fac:	2900      	cmp	r1, #0
 8022fae:	f000 80b9 	beq.w	8023124 <_printf_i+0x19c>
 8022fb2:	2958      	cmp	r1, #88	; 0x58
 8022fb4:	f000 8083 	beq.w	80230be <_printf_i+0x136>
 8022fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022fbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022fc0:	e032      	b.n	8023028 <_printf_i+0xa0>
 8022fc2:	2964      	cmp	r1, #100	; 0x64
 8022fc4:	d001      	beq.n	8022fca <_printf_i+0x42>
 8022fc6:	2969      	cmp	r1, #105	; 0x69
 8022fc8:	d1f6      	bne.n	8022fb8 <_printf_i+0x30>
 8022fca:	6820      	ldr	r0, [r4, #0]
 8022fcc:	6813      	ldr	r3, [r2, #0]
 8022fce:	0605      	lsls	r5, r0, #24
 8022fd0:	f103 0104 	add.w	r1, r3, #4
 8022fd4:	d52a      	bpl.n	802302c <_printf_i+0xa4>
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	6011      	str	r1, [r2, #0]
 8022fda:	2b00      	cmp	r3, #0
 8022fdc:	da03      	bge.n	8022fe6 <_printf_i+0x5e>
 8022fde:	222d      	movs	r2, #45	; 0x2d
 8022fe0:	425b      	negs	r3, r3
 8022fe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022fe6:	486f      	ldr	r0, [pc, #444]	; (80231a4 <_printf_i+0x21c>)
 8022fe8:	220a      	movs	r2, #10
 8022fea:	e039      	b.n	8023060 <_printf_i+0xd8>
 8022fec:	2973      	cmp	r1, #115	; 0x73
 8022fee:	f000 809d 	beq.w	802312c <_printf_i+0x1a4>
 8022ff2:	d808      	bhi.n	8023006 <_printf_i+0x7e>
 8022ff4:	296f      	cmp	r1, #111	; 0x6f
 8022ff6:	d020      	beq.n	802303a <_printf_i+0xb2>
 8022ff8:	2970      	cmp	r1, #112	; 0x70
 8022ffa:	d1dd      	bne.n	8022fb8 <_printf_i+0x30>
 8022ffc:	6823      	ldr	r3, [r4, #0]
 8022ffe:	f043 0320 	orr.w	r3, r3, #32
 8023002:	6023      	str	r3, [r4, #0]
 8023004:	e003      	b.n	802300e <_printf_i+0x86>
 8023006:	2975      	cmp	r1, #117	; 0x75
 8023008:	d017      	beq.n	802303a <_printf_i+0xb2>
 802300a:	2978      	cmp	r1, #120	; 0x78
 802300c:	d1d4      	bne.n	8022fb8 <_printf_i+0x30>
 802300e:	2378      	movs	r3, #120	; 0x78
 8023010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023014:	4864      	ldr	r0, [pc, #400]	; (80231a8 <_printf_i+0x220>)
 8023016:	e055      	b.n	80230c4 <_printf_i+0x13c>
 8023018:	6813      	ldr	r3, [r2, #0]
 802301a:	1d19      	adds	r1, r3, #4
 802301c:	681b      	ldr	r3, [r3, #0]
 802301e:	6011      	str	r1, [r2, #0]
 8023020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023028:	2301      	movs	r3, #1
 802302a:	e08c      	b.n	8023146 <_printf_i+0x1be>
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	6011      	str	r1, [r2, #0]
 8023030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023034:	bf18      	it	ne
 8023036:	b21b      	sxthne	r3, r3
 8023038:	e7cf      	b.n	8022fda <_printf_i+0x52>
 802303a:	6813      	ldr	r3, [r2, #0]
 802303c:	6825      	ldr	r5, [r4, #0]
 802303e:	1d18      	adds	r0, r3, #4
 8023040:	6010      	str	r0, [r2, #0]
 8023042:	0628      	lsls	r0, r5, #24
 8023044:	d501      	bpl.n	802304a <_printf_i+0xc2>
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	e002      	b.n	8023050 <_printf_i+0xc8>
 802304a:	0668      	lsls	r0, r5, #25
 802304c:	d5fb      	bpl.n	8023046 <_printf_i+0xbe>
 802304e:	881b      	ldrh	r3, [r3, #0]
 8023050:	4854      	ldr	r0, [pc, #336]	; (80231a4 <_printf_i+0x21c>)
 8023052:	296f      	cmp	r1, #111	; 0x6f
 8023054:	bf14      	ite	ne
 8023056:	220a      	movne	r2, #10
 8023058:	2208      	moveq	r2, #8
 802305a:	2100      	movs	r1, #0
 802305c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023060:	6865      	ldr	r5, [r4, #4]
 8023062:	60a5      	str	r5, [r4, #8]
 8023064:	2d00      	cmp	r5, #0
 8023066:	f2c0 8095 	blt.w	8023194 <_printf_i+0x20c>
 802306a:	6821      	ldr	r1, [r4, #0]
 802306c:	f021 0104 	bic.w	r1, r1, #4
 8023070:	6021      	str	r1, [r4, #0]
 8023072:	2b00      	cmp	r3, #0
 8023074:	d13d      	bne.n	80230f2 <_printf_i+0x16a>
 8023076:	2d00      	cmp	r5, #0
 8023078:	f040 808e 	bne.w	8023198 <_printf_i+0x210>
 802307c:	4665      	mov	r5, ip
 802307e:	2a08      	cmp	r2, #8
 8023080:	d10b      	bne.n	802309a <_printf_i+0x112>
 8023082:	6823      	ldr	r3, [r4, #0]
 8023084:	07db      	lsls	r3, r3, #31
 8023086:	d508      	bpl.n	802309a <_printf_i+0x112>
 8023088:	6923      	ldr	r3, [r4, #16]
 802308a:	6862      	ldr	r2, [r4, #4]
 802308c:	429a      	cmp	r2, r3
 802308e:	bfde      	ittt	le
 8023090:	2330      	movle	r3, #48	; 0x30
 8023092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023096:	f105 35ff 	addle.w	r5, r5, #4294967295
 802309a:	ebac 0305 	sub.w	r3, ip, r5
 802309e:	6123      	str	r3, [r4, #16]
 80230a0:	f8cd 8000 	str.w	r8, [sp]
 80230a4:	463b      	mov	r3, r7
 80230a6:	aa03      	add	r2, sp, #12
 80230a8:	4621      	mov	r1, r4
 80230aa:	4630      	mov	r0, r6
 80230ac:	f7ff fef6 	bl	8022e9c <_printf_common>
 80230b0:	3001      	adds	r0, #1
 80230b2:	d14d      	bne.n	8023150 <_printf_i+0x1c8>
 80230b4:	f04f 30ff 	mov.w	r0, #4294967295
 80230b8:	b005      	add	sp, #20
 80230ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80230be:	4839      	ldr	r0, [pc, #228]	; (80231a4 <_printf_i+0x21c>)
 80230c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80230c4:	6813      	ldr	r3, [r2, #0]
 80230c6:	6821      	ldr	r1, [r4, #0]
 80230c8:	1d1d      	adds	r5, r3, #4
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	6015      	str	r5, [r2, #0]
 80230ce:	060a      	lsls	r2, r1, #24
 80230d0:	d50b      	bpl.n	80230ea <_printf_i+0x162>
 80230d2:	07ca      	lsls	r2, r1, #31
 80230d4:	bf44      	itt	mi
 80230d6:	f041 0120 	orrmi.w	r1, r1, #32
 80230da:	6021      	strmi	r1, [r4, #0]
 80230dc:	b91b      	cbnz	r3, 80230e6 <_printf_i+0x15e>
 80230de:	6822      	ldr	r2, [r4, #0]
 80230e0:	f022 0220 	bic.w	r2, r2, #32
 80230e4:	6022      	str	r2, [r4, #0]
 80230e6:	2210      	movs	r2, #16
 80230e8:	e7b7      	b.n	802305a <_printf_i+0xd2>
 80230ea:	064d      	lsls	r5, r1, #25
 80230ec:	bf48      	it	mi
 80230ee:	b29b      	uxthmi	r3, r3
 80230f0:	e7ef      	b.n	80230d2 <_printf_i+0x14a>
 80230f2:	4665      	mov	r5, ip
 80230f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80230f8:	fb02 3311 	mls	r3, r2, r1, r3
 80230fc:	5cc3      	ldrb	r3, [r0, r3]
 80230fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8023102:	460b      	mov	r3, r1
 8023104:	2900      	cmp	r1, #0
 8023106:	d1f5      	bne.n	80230f4 <_printf_i+0x16c>
 8023108:	e7b9      	b.n	802307e <_printf_i+0xf6>
 802310a:	6813      	ldr	r3, [r2, #0]
 802310c:	6825      	ldr	r5, [r4, #0]
 802310e:	6961      	ldr	r1, [r4, #20]
 8023110:	1d18      	adds	r0, r3, #4
 8023112:	6010      	str	r0, [r2, #0]
 8023114:	0628      	lsls	r0, r5, #24
 8023116:	681b      	ldr	r3, [r3, #0]
 8023118:	d501      	bpl.n	802311e <_printf_i+0x196>
 802311a:	6019      	str	r1, [r3, #0]
 802311c:	e002      	b.n	8023124 <_printf_i+0x19c>
 802311e:	066a      	lsls	r2, r5, #25
 8023120:	d5fb      	bpl.n	802311a <_printf_i+0x192>
 8023122:	8019      	strh	r1, [r3, #0]
 8023124:	2300      	movs	r3, #0
 8023126:	6123      	str	r3, [r4, #16]
 8023128:	4665      	mov	r5, ip
 802312a:	e7b9      	b.n	80230a0 <_printf_i+0x118>
 802312c:	6813      	ldr	r3, [r2, #0]
 802312e:	1d19      	adds	r1, r3, #4
 8023130:	6011      	str	r1, [r2, #0]
 8023132:	681d      	ldr	r5, [r3, #0]
 8023134:	6862      	ldr	r2, [r4, #4]
 8023136:	2100      	movs	r1, #0
 8023138:	4628      	mov	r0, r5
 802313a:	f7dd f869 	bl	8000210 <memchr>
 802313e:	b108      	cbz	r0, 8023144 <_printf_i+0x1bc>
 8023140:	1b40      	subs	r0, r0, r5
 8023142:	6060      	str	r0, [r4, #4]
 8023144:	6863      	ldr	r3, [r4, #4]
 8023146:	6123      	str	r3, [r4, #16]
 8023148:	2300      	movs	r3, #0
 802314a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802314e:	e7a7      	b.n	80230a0 <_printf_i+0x118>
 8023150:	6923      	ldr	r3, [r4, #16]
 8023152:	462a      	mov	r2, r5
 8023154:	4639      	mov	r1, r7
 8023156:	4630      	mov	r0, r6
 8023158:	47c0      	blx	r8
 802315a:	3001      	adds	r0, #1
 802315c:	d0aa      	beq.n	80230b4 <_printf_i+0x12c>
 802315e:	6823      	ldr	r3, [r4, #0]
 8023160:	079b      	lsls	r3, r3, #30
 8023162:	d413      	bmi.n	802318c <_printf_i+0x204>
 8023164:	68e0      	ldr	r0, [r4, #12]
 8023166:	9b03      	ldr	r3, [sp, #12]
 8023168:	4298      	cmp	r0, r3
 802316a:	bfb8      	it	lt
 802316c:	4618      	movlt	r0, r3
 802316e:	e7a3      	b.n	80230b8 <_printf_i+0x130>
 8023170:	2301      	movs	r3, #1
 8023172:	464a      	mov	r2, r9
 8023174:	4639      	mov	r1, r7
 8023176:	4630      	mov	r0, r6
 8023178:	47c0      	blx	r8
 802317a:	3001      	adds	r0, #1
 802317c:	d09a      	beq.n	80230b4 <_printf_i+0x12c>
 802317e:	3501      	adds	r5, #1
 8023180:	68e3      	ldr	r3, [r4, #12]
 8023182:	9a03      	ldr	r2, [sp, #12]
 8023184:	1a9b      	subs	r3, r3, r2
 8023186:	42ab      	cmp	r3, r5
 8023188:	dcf2      	bgt.n	8023170 <_printf_i+0x1e8>
 802318a:	e7eb      	b.n	8023164 <_printf_i+0x1dc>
 802318c:	2500      	movs	r5, #0
 802318e:	f104 0919 	add.w	r9, r4, #25
 8023192:	e7f5      	b.n	8023180 <_printf_i+0x1f8>
 8023194:	2b00      	cmp	r3, #0
 8023196:	d1ac      	bne.n	80230f2 <_printf_i+0x16a>
 8023198:	7803      	ldrb	r3, [r0, #0]
 802319a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802319e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80231a2:	e76c      	b.n	802307e <_printf_i+0xf6>
 80231a4:	080268b9 	.word	0x080268b9
 80231a8:	080268ca 	.word	0x080268ca

080231ac <_sbrk_r>:
 80231ac:	b538      	push	{r3, r4, r5, lr}
 80231ae:	4c06      	ldr	r4, [pc, #24]	; (80231c8 <_sbrk_r+0x1c>)
 80231b0:	2300      	movs	r3, #0
 80231b2:	4605      	mov	r5, r0
 80231b4:	4608      	mov	r0, r1
 80231b6:	6023      	str	r3, [r4, #0]
 80231b8:	f7df ffe8 	bl	800318c <_sbrk>
 80231bc:	1c43      	adds	r3, r0, #1
 80231be:	d102      	bne.n	80231c6 <_sbrk_r+0x1a>
 80231c0:	6823      	ldr	r3, [r4, #0]
 80231c2:	b103      	cbz	r3, 80231c6 <_sbrk_r+0x1a>
 80231c4:	602b      	str	r3, [r5, #0]
 80231c6:	bd38      	pop	{r3, r4, r5, pc}
 80231c8:	2000af5c 	.word	0x2000af5c

080231cc <_raise_r>:
 80231cc:	291f      	cmp	r1, #31
 80231ce:	b538      	push	{r3, r4, r5, lr}
 80231d0:	4604      	mov	r4, r0
 80231d2:	460d      	mov	r5, r1
 80231d4:	d904      	bls.n	80231e0 <_raise_r+0x14>
 80231d6:	2316      	movs	r3, #22
 80231d8:	6003      	str	r3, [r0, #0]
 80231da:	f04f 30ff 	mov.w	r0, #4294967295
 80231de:	bd38      	pop	{r3, r4, r5, pc}
 80231e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80231e2:	b112      	cbz	r2, 80231ea <_raise_r+0x1e>
 80231e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80231e8:	b94b      	cbnz	r3, 80231fe <_raise_r+0x32>
 80231ea:	4620      	mov	r0, r4
 80231ec:	f000 f830 	bl	8023250 <_getpid_r>
 80231f0:	462a      	mov	r2, r5
 80231f2:	4601      	mov	r1, r0
 80231f4:	4620      	mov	r0, r4
 80231f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80231fa:	f000 b817 	b.w	802322c <_kill_r>
 80231fe:	2b01      	cmp	r3, #1
 8023200:	d00a      	beq.n	8023218 <_raise_r+0x4c>
 8023202:	1c59      	adds	r1, r3, #1
 8023204:	d103      	bne.n	802320e <_raise_r+0x42>
 8023206:	2316      	movs	r3, #22
 8023208:	6003      	str	r3, [r0, #0]
 802320a:	2001      	movs	r0, #1
 802320c:	e7e7      	b.n	80231de <_raise_r+0x12>
 802320e:	2400      	movs	r4, #0
 8023210:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023214:	4628      	mov	r0, r5
 8023216:	4798      	blx	r3
 8023218:	2000      	movs	r0, #0
 802321a:	e7e0      	b.n	80231de <_raise_r+0x12>

0802321c <raise>:
 802321c:	4b02      	ldr	r3, [pc, #8]	; (8023228 <raise+0xc>)
 802321e:	4601      	mov	r1, r0
 8023220:	6818      	ldr	r0, [r3, #0]
 8023222:	f7ff bfd3 	b.w	80231cc <_raise_r>
 8023226:	bf00      	nop
 8023228:	20000198 	.word	0x20000198

0802322c <_kill_r>:
 802322c:	b538      	push	{r3, r4, r5, lr}
 802322e:	4c07      	ldr	r4, [pc, #28]	; (802324c <_kill_r+0x20>)
 8023230:	2300      	movs	r3, #0
 8023232:	4605      	mov	r5, r0
 8023234:	4608      	mov	r0, r1
 8023236:	4611      	mov	r1, r2
 8023238:	6023      	str	r3, [r4, #0]
 802323a:	f7df ff1f 	bl	800307c <_kill>
 802323e:	1c43      	adds	r3, r0, #1
 8023240:	d102      	bne.n	8023248 <_kill_r+0x1c>
 8023242:	6823      	ldr	r3, [r4, #0]
 8023244:	b103      	cbz	r3, 8023248 <_kill_r+0x1c>
 8023246:	602b      	str	r3, [r5, #0]
 8023248:	bd38      	pop	{r3, r4, r5, pc}
 802324a:	bf00      	nop
 802324c:	2000af5c 	.word	0x2000af5c

08023250 <_getpid_r>:
 8023250:	f7df bf0c 	b.w	800306c <_getpid>

08023254 <__utoa>:
 8023254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023256:	4b1d      	ldr	r3, [pc, #116]	; (80232cc <__utoa+0x78>)
 8023258:	b08b      	sub	sp, #44	; 0x2c
 802325a:	4605      	mov	r5, r0
 802325c:	460c      	mov	r4, r1
 802325e:	466e      	mov	r6, sp
 8023260:	f103 0c20 	add.w	ip, r3, #32
 8023264:	6818      	ldr	r0, [r3, #0]
 8023266:	6859      	ldr	r1, [r3, #4]
 8023268:	4637      	mov	r7, r6
 802326a:	c703      	stmia	r7!, {r0, r1}
 802326c:	3308      	adds	r3, #8
 802326e:	4563      	cmp	r3, ip
 8023270:	463e      	mov	r6, r7
 8023272:	d1f7      	bne.n	8023264 <__utoa+0x10>
 8023274:	6818      	ldr	r0, [r3, #0]
 8023276:	791b      	ldrb	r3, [r3, #4]
 8023278:	713b      	strb	r3, [r7, #4]
 802327a:	1e93      	subs	r3, r2, #2
 802327c:	2b22      	cmp	r3, #34	; 0x22
 802327e:	6038      	str	r0, [r7, #0]
 8023280:	f04f 0300 	mov.w	r3, #0
 8023284:	d904      	bls.n	8023290 <__utoa+0x3c>
 8023286:	7023      	strb	r3, [r4, #0]
 8023288:	461c      	mov	r4, r3
 802328a:	4620      	mov	r0, r4
 802328c:	b00b      	add	sp, #44	; 0x2c
 802328e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023290:	1e66      	subs	r6, r4, #1
 8023292:	fbb5 f0f2 	udiv	r0, r5, r2
 8023296:	af0a      	add	r7, sp, #40	; 0x28
 8023298:	fb02 5510 	mls	r5, r2, r0, r5
 802329c:	443d      	add	r5, r7
 802329e:	1c59      	adds	r1, r3, #1
 80232a0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80232a4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80232a8:	4605      	mov	r5, r0
 80232aa:	b968      	cbnz	r0, 80232c8 <__utoa+0x74>
 80232ac:	5460      	strb	r0, [r4, r1]
 80232ae:	4423      	add	r3, r4
 80232b0:	4622      	mov	r2, r4
 80232b2:	1b19      	subs	r1, r3, r4
 80232b4:	1b10      	subs	r0, r2, r4
 80232b6:	4281      	cmp	r1, r0
 80232b8:	dde7      	ble.n	802328a <__utoa+0x36>
 80232ba:	7811      	ldrb	r1, [r2, #0]
 80232bc:	7818      	ldrb	r0, [r3, #0]
 80232be:	f802 0b01 	strb.w	r0, [r2], #1
 80232c2:	f803 1901 	strb.w	r1, [r3], #-1
 80232c6:	e7f4      	b.n	80232b2 <__utoa+0x5e>
 80232c8:	460b      	mov	r3, r1
 80232ca:	e7e2      	b.n	8023292 <__utoa+0x3e>
 80232cc:	080268db 	.word	0x080268db

080232d0 <__swbuf_r>:
 80232d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232d2:	460e      	mov	r6, r1
 80232d4:	4614      	mov	r4, r2
 80232d6:	4605      	mov	r5, r0
 80232d8:	b118      	cbz	r0, 80232e2 <__swbuf_r+0x12>
 80232da:	6983      	ldr	r3, [r0, #24]
 80232dc:	b90b      	cbnz	r3, 80232e2 <__swbuf_r+0x12>
 80232de:	f000 fa0b 	bl	80236f8 <__sinit>
 80232e2:	4b21      	ldr	r3, [pc, #132]	; (8023368 <__swbuf_r+0x98>)
 80232e4:	429c      	cmp	r4, r3
 80232e6:	d12a      	bne.n	802333e <__swbuf_r+0x6e>
 80232e8:	686c      	ldr	r4, [r5, #4]
 80232ea:	69a3      	ldr	r3, [r4, #24]
 80232ec:	60a3      	str	r3, [r4, #8]
 80232ee:	89a3      	ldrh	r3, [r4, #12]
 80232f0:	071a      	lsls	r2, r3, #28
 80232f2:	d52e      	bpl.n	8023352 <__swbuf_r+0x82>
 80232f4:	6923      	ldr	r3, [r4, #16]
 80232f6:	b363      	cbz	r3, 8023352 <__swbuf_r+0x82>
 80232f8:	6923      	ldr	r3, [r4, #16]
 80232fa:	6820      	ldr	r0, [r4, #0]
 80232fc:	1ac0      	subs	r0, r0, r3
 80232fe:	6963      	ldr	r3, [r4, #20]
 8023300:	b2f6      	uxtb	r6, r6
 8023302:	4283      	cmp	r3, r0
 8023304:	4637      	mov	r7, r6
 8023306:	dc04      	bgt.n	8023312 <__swbuf_r+0x42>
 8023308:	4621      	mov	r1, r4
 802330a:	4628      	mov	r0, r5
 802330c:	f000 f98a 	bl	8023624 <_fflush_r>
 8023310:	bb28      	cbnz	r0, 802335e <__swbuf_r+0x8e>
 8023312:	68a3      	ldr	r3, [r4, #8]
 8023314:	3b01      	subs	r3, #1
 8023316:	60a3      	str	r3, [r4, #8]
 8023318:	6823      	ldr	r3, [r4, #0]
 802331a:	1c5a      	adds	r2, r3, #1
 802331c:	6022      	str	r2, [r4, #0]
 802331e:	701e      	strb	r6, [r3, #0]
 8023320:	6963      	ldr	r3, [r4, #20]
 8023322:	3001      	adds	r0, #1
 8023324:	4283      	cmp	r3, r0
 8023326:	d004      	beq.n	8023332 <__swbuf_r+0x62>
 8023328:	89a3      	ldrh	r3, [r4, #12]
 802332a:	07db      	lsls	r3, r3, #31
 802332c:	d519      	bpl.n	8023362 <__swbuf_r+0x92>
 802332e:	2e0a      	cmp	r6, #10
 8023330:	d117      	bne.n	8023362 <__swbuf_r+0x92>
 8023332:	4621      	mov	r1, r4
 8023334:	4628      	mov	r0, r5
 8023336:	f000 f975 	bl	8023624 <_fflush_r>
 802333a:	b190      	cbz	r0, 8023362 <__swbuf_r+0x92>
 802333c:	e00f      	b.n	802335e <__swbuf_r+0x8e>
 802333e:	4b0b      	ldr	r3, [pc, #44]	; (802336c <__swbuf_r+0x9c>)
 8023340:	429c      	cmp	r4, r3
 8023342:	d101      	bne.n	8023348 <__swbuf_r+0x78>
 8023344:	68ac      	ldr	r4, [r5, #8]
 8023346:	e7d0      	b.n	80232ea <__swbuf_r+0x1a>
 8023348:	4b09      	ldr	r3, [pc, #36]	; (8023370 <__swbuf_r+0xa0>)
 802334a:	429c      	cmp	r4, r3
 802334c:	bf08      	it	eq
 802334e:	68ec      	ldreq	r4, [r5, #12]
 8023350:	e7cb      	b.n	80232ea <__swbuf_r+0x1a>
 8023352:	4621      	mov	r1, r4
 8023354:	4628      	mov	r0, r5
 8023356:	f000 f80d 	bl	8023374 <__swsetup_r>
 802335a:	2800      	cmp	r0, #0
 802335c:	d0cc      	beq.n	80232f8 <__swbuf_r+0x28>
 802335e:	f04f 37ff 	mov.w	r7, #4294967295
 8023362:	4638      	mov	r0, r7
 8023364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023366:	bf00      	nop
 8023368:	08026920 	.word	0x08026920
 802336c:	08026940 	.word	0x08026940
 8023370:	08026900 	.word	0x08026900

08023374 <__swsetup_r>:
 8023374:	4b32      	ldr	r3, [pc, #200]	; (8023440 <__swsetup_r+0xcc>)
 8023376:	b570      	push	{r4, r5, r6, lr}
 8023378:	681d      	ldr	r5, [r3, #0]
 802337a:	4606      	mov	r6, r0
 802337c:	460c      	mov	r4, r1
 802337e:	b125      	cbz	r5, 802338a <__swsetup_r+0x16>
 8023380:	69ab      	ldr	r3, [r5, #24]
 8023382:	b913      	cbnz	r3, 802338a <__swsetup_r+0x16>
 8023384:	4628      	mov	r0, r5
 8023386:	f000 f9b7 	bl	80236f8 <__sinit>
 802338a:	4b2e      	ldr	r3, [pc, #184]	; (8023444 <__swsetup_r+0xd0>)
 802338c:	429c      	cmp	r4, r3
 802338e:	d10f      	bne.n	80233b0 <__swsetup_r+0x3c>
 8023390:	686c      	ldr	r4, [r5, #4]
 8023392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023396:	b29a      	uxth	r2, r3
 8023398:	0715      	lsls	r5, r2, #28
 802339a:	d42c      	bmi.n	80233f6 <__swsetup_r+0x82>
 802339c:	06d0      	lsls	r0, r2, #27
 802339e:	d411      	bmi.n	80233c4 <__swsetup_r+0x50>
 80233a0:	2209      	movs	r2, #9
 80233a2:	6032      	str	r2, [r6, #0]
 80233a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80233a8:	81a3      	strh	r3, [r4, #12]
 80233aa:	f04f 30ff 	mov.w	r0, #4294967295
 80233ae:	e03e      	b.n	802342e <__swsetup_r+0xba>
 80233b0:	4b25      	ldr	r3, [pc, #148]	; (8023448 <__swsetup_r+0xd4>)
 80233b2:	429c      	cmp	r4, r3
 80233b4:	d101      	bne.n	80233ba <__swsetup_r+0x46>
 80233b6:	68ac      	ldr	r4, [r5, #8]
 80233b8:	e7eb      	b.n	8023392 <__swsetup_r+0x1e>
 80233ba:	4b24      	ldr	r3, [pc, #144]	; (802344c <__swsetup_r+0xd8>)
 80233bc:	429c      	cmp	r4, r3
 80233be:	bf08      	it	eq
 80233c0:	68ec      	ldreq	r4, [r5, #12]
 80233c2:	e7e6      	b.n	8023392 <__swsetup_r+0x1e>
 80233c4:	0751      	lsls	r1, r2, #29
 80233c6:	d512      	bpl.n	80233ee <__swsetup_r+0x7a>
 80233c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80233ca:	b141      	cbz	r1, 80233de <__swsetup_r+0x6a>
 80233cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80233d0:	4299      	cmp	r1, r3
 80233d2:	d002      	beq.n	80233da <__swsetup_r+0x66>
 80233d4:	4630      	mov	r0, r6
 80233d6:	f7ff fb79 	bl	8022acc <_free_r>
 80233da:	2300      	movs	r3, #0
 80233dc:	6363      	str	r3, [r4, #52]	; 0x34
 80233de:	89a3      	ldrh	r3, [r4, #12]
 80233e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80233e4:	81a3      	strh	r3, [r4, #12]
 80233e6:	2300      	movs	r3, #0
 80233e8:	6063      	str	r3, [r4, #4]
 80233ea:	6923      	ldr	r3, [r4, #16]
 80233ec:	6023      	str	r3, [r4, #0]
 80233ee:	89a3      	ldrh	r3, [r4, #12]
 80233f0:	f043 0308 	orr.w	r3, r3, #8
 80233f4:	81a3      	strh	r3, [r4, #12]
 80233f6:	6923      	ldr	r3, [r4, #16]
 80233f8:	b94b      	cbnz	r3, 802340e <__swsetup_r+0x9a>
 80233fa:	89a3      	ldrh	r3, [r4, #12]
 80233fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023404:	d003      	beq.n	802340e <__swsetup_r+0x9a>
 8023406:	4621      	mov	r1, r4
 8023408:	4630      	mov	r0, r6
 802340a:	f000 fa23 	bl	8023854 <__smakebuf_r>
 802340e:	89a2      	ldrh	r2, [r4, #12]
 8023410:	f012 0301 	ands.w	r3, r2, #1
 8023414:	d00c      	beq.n	8023430 <__swsetup_r+0xbc>
 8023416:	2300      	movs	r3, #0
 8023418:	60a3      	str	r3, [r4, #8]
 802341a:	6963      	ldr	r3, [r4, #20]
 802341c:	425b      	negs	r3, r3
 802341e:	61a3      	str	r3, [r4, #24]
 8023420:	6923      	ldr	r3, [r4, #16]
 8023422:	b953      	cbnz	r3, 802343a <__swsetup_r+0xc6>
 8023424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023428:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802342c:	d1ba      	bne.n	80233a4 <__swsetup_r+0x30>
 802342e:	bd70      	pop	{r4, r5, r6, pc}
 8023430:	0792      	lsls	r2, r2, #30
 8023432:	bf58      	it	pl
 8023434:	6963      	ldrpl	r3, [r4, #20]
 8023436:	60a3      	str	r3, [r4, #8]
 8023438:	e7f2      	b.n	8023420 <__swsetup_r+0xac>
 802343a:	2000      	movs	r0, #0
 802343c:	e7f7      	b.n	802342e <__swsetup_r+0xba>
 802343e:	bf00      	nop
 8023440:	20000198 	.word	0x20000198
 8023444:	08026920 	.word	0x08026920
 8023448:	08026940 	.word	0x08026940
 802344c:	08026900 	.word	0x08026900

08023450 <__register_exitproc>:
 8023450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023454:	4d2c      	ldr	r5, [pc, #176]	; (8023508 <__register_exitproc+0xb8>)
 8023456:	682c      	ldr	r4, [r5, #0]
 8023458:	4607      	mov	r7, r0
 802345a:	460e      	mov	r6, r1
 802345c:	4691      	mov	r9, r2
 802345e:	4698      	mov	r8, r3
 8023460:	b934      	cbnz	r4, 8023470 <__register_exitproc+0x20>
 8023462:	4b2a      	ldr	r3, [pc, #168]	; (802350c <__register_exitproc+0xbc>)
 8023464:	4c2a      	ldr	r4, [pc, #168]	; (8023510 <__register_exitproc+0xc0>)
 8023466:	602c      	str	r4, [r5, #0]
 8023468:	b113      	cbz	r3, 8023470 <__register_exitproc+0x20>
 802346a:	681b      	ldr	r3, [r3, #0]
 802346c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023470:	6863      	ldr	r3, [r4, #4]
 8023472:	2b1f      	cmp	r3, #31
 8023474:	dd3d      	ble.n	80234f2 <__register_exitproc+0xa2>
 8023476:	4b27      	ldr	r3, [pc, #156]	; (8023514 <__register_exitproc+0xc4>)
 8023478:	b91b      	cbnz	r3, 8023482 <__register_exitproc+0x32>
 802347a:	f04f 30ff 	mov.w	r0, #4294967295
 802347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023482:	208c      	movs	r0, #140	; 0x8c
 8023484:	f7ff fafe 	bl	8022a84 <malloc>
 8023488:	4604      	mov	r4, r0
 802348a:	2800      	cmp	r0, #0
 802348c:	d0f5      	beq.n	802347a <__register_exitproc+0x2a>
 802348e:	2300      	movs	r3, #0
 8023490:	682a      	ldr	r2, [r5, #0]
 8023492:	6002      	str	r2, [r0, #0]
 8023494:	6043      	str	r3, [r0, #4]
 8023496:	6028      	str	r0, [r5, #0]
 8023498:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802349c:	b30f      	cbz	r7, 80234e2 <__register_exitproc+0x92>
 802349e:	f44f 7084 	mov.w	r0, #264	; 0x108
 80234a2:	f7ff faef 	bl	8022a84 <malloc>
 80234a6:	2800      	cmp	r0, #0
 80234a8:	d0e7      	beq.n	802347a <__register_exitproc+0x2a>
 80234aa:	2300      	movs	r3, #0
 80234ac:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80234b0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80234b4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80234b8:	6862      	ldr	r2, [r4, #4]
 80234ba:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80234be:	2301      	movs	r3, #1
 80234c0:	4093      	lsls	r3, r2
 80234c2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80234c6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80234ca:	431a      	orrs	r2, r3
 80234cc:	2f02      	cmp	r7, #2
 80234ce:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80234d2:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80234d6:	bf02      	ittt	eq
 80234d8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80234dc:	4313      	orreq	r3, r2
 80234de:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80234e2:	6863      	ldr	r3, [r4, #4]
 80234e4:	1c5a      	adds	r2, r3, #1
 80234e6:	3302      	adds	r3, #2
 80234e8:	6062      	str	r2, [r4, #4]
 80234ea:	2000      	movs	r0, #0
 80234ec:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80234f0:	e7c5      	b.n	802347e <__register_exitproc+0x2e>
 80234f2:	2f00      	cmp	r7, #0
 80234f4:	d0f5      	beq.n	80234e2 <__register_exitproc+0x92>
 80234f6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80234fa:	2800      	cmp	r0, #0
 80234fc:	d1dc      	bne.n	80234b8 <__register_exitproc+0x68>
 80234fe:	4b05      	ldr	r3, [pc, #20]	; (8023514 <__register_exitproc+0xc4>)
 8023500:	2b00      	cmp	r3, #0
 8023502:	d0ba      	beq.n	802347a <__register_exitproc+0x2a>
 8023504:	e7cb      	b.n	802349e <__register_exitproc+0x4e>
 8023506:	bf00      	nop
 8023508:	2000a3c0 	.word	0x2000a3c0
 802350c:	00000000 	.word	0x00000000
 8023510:	2000a334 	.word	0x2000a334
 8023514:	08022a85 	.word	0x08022a85

08023518 <__sflush_r>:
 8023518:	898a      	ldrh	r2, [r1, #12]
 802351a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802351e:	4605      	mov	r5, r0
 8023520:	0710      	lsls	r0, r2, #28
 8023522:	460c      	mov	r4, r1
 8023524:	d458      	bmi.n	80235d8 <__sflush_r+0xc0>
 8023526:	684b      	ldr	r3, [r1, #4]
 8023528:	2b00      	cmp	r3, #0
 802352a:	dc05      	bgt.n	8023538 <__sflush_r+0x20>
 802352c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802352e:	2b00      	cmp	r3, #0
 8023530:	dc02      	bgt.n	8023538 <__sflush_r+0x20>
 8023532:	2000      	movs	r0, #0
 8023534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802353a:	2e00      	cmp	r6, #0
 802353c:	d0f9      	beq.n	8023532 <__sflush_r+0x1a>
 802353e:	2300      	movs	r3, #0
 8023540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023544:	682f      	ldr	r7, [r5, #0]
 8023546:	6a21      	ldr	r1, [r4, #32]
 8023548:	602b      	str	r3, [r5, #0]
 802354a:	d032      	beq.n	80235b2 <__sflush_r+0x9a>
 802354c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802354e:	89a3      	ldrh	r3, [r4, #12]
 8023550:	075a      	lsls	r2, r3, #29
 8023552:	d505      	bpl.n	8023560 <__sflush_r+0x48>
 8023554:	6863      	ldr	r3, [r4, #4]
 8023556:	1ac0      	subs	r0, r0, r3
 8023558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802355a:	b10b      	cbz	r3, 8023560 <__sflush_r+0x48>
 802355c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802355e:	1ac0      	subs	r0, r0, r3
 8023560:	2300      	movs	r3, #0
 8023562:	4602      	mov	r2, r0
 8023564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023566:	6a21      	ldr	r1, [r4, #32]
 8023568:	4628      	mov	r0, r5
 802356a:	47b0      	blx	r6
 802356c:	1c43      	adds	r3, r0, #1
 802356e:	89a3      	ldrh	r3, [r4, #12]
 8023570:	d106      	bne.n	8023580 <__sflush_r+0x68>
 8023572:	6829      	ldr	r1, [r5, #0]
 8023574:	291d      	cmp	r1, #29
 8023576:	d848      	bhi.n	802360a <__sflush_r+0xf2>
 8023578:	4a29      	ldr	r2, [pc, #164]	; (8023620 <__sflush_r+0x108>)
 802357a:	40ca      	lsrs	r2, r1
 802357c:	07d6      	lsls	r6, r2, #31
 802357e:	d544      	bpl.n	802360a <__sflush_r+0xf2>
 8023580:	2200      	movs	r2, #0
 8023582:	6062      	str	r2, [r4, #4]
 8023584:	04d9      	lsls	r1, r3, #19
 8023586:	6922      	ldr	r2, [r4, #16]
 8023588:	6022      	str	r2, [r4, #0]
 802358a:	d504      	bpl.n	8023596 <__sflush_r+0x7e>
 802358c:	1c42      	adds	r2, r0, #1
 802358e:	d101      	bne.n	8023594 <__sflush_r+0x7c>
 8023590:	682b      	ldr	r3, [r5, #0]
 8023592:	b903      	cbnz	r3, 8023596 <__sflush_r+0x7e>
 8023594:	6560      	str	r0, [r4, #84]	; 0x54
 8023596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023598:	602f      	str	r7, [r5, #0]
 802359a:	2900      	cmp	r1, #0
 802359c:	d0c9      	beq.n	8023532 <__sflush_r+0x1a>
 802359e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80235a2:	4299      	cmp	r1, r3
 80235a4:	d002      	beq.n	80235ac <__sflush_r+0x94>
 80235a6:	4628      	mov	r0, r5
 80235a8:	f7ff fa90 	bl	8022acc <_free_r>
 80235ac:	2000      	movs	r0, #0
 80235ae:	6360      	str	r0, [r4, #52]	; 0x34
 80235b0:	e7c0      	b.n	8023534 <__sflush_r+0x1c>
 80235b2:	2301      	movs	r3, #1
 80235b4:	4628      	mov	r0, r5
 80235b6:	47b0      	blx	r6
 80235b8:	1c41      	adds	r1, r0, #1
 80235ba:	d1c8      	bne.n	802354e <__sflush_r+0x36>
 80235bc:	682b      	ldr	r3, [r5, #0]
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d0c5      	beq.n	802354e <__sflush_r+0x36>
 80235c2:	2b1d      	cmp	r3, #29
 80235c4:	d001      	beq.n	80235ca <__sflush_r+0xb2>
 80235c6:	2b16      	cmp	r3, #22
 80235c8:	d101      	bne.n	80235ce <__sflush_r+0xb6>
 80235ca:	602f      	str	r7, [r5, #0]
 80235cc:	e7b1      	b.n	8023532 <__sflush_r+0x1a>
 80235ce:	89a3      	ldrh	r3, [r4, #12]
 80235d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80235d4:	81a3      	strh	r3, [r4, #12]
 80235d6:	e7ad      	b.n	8023534 <__sflush_r+0x1c>
 80235d8:	690f      	ldr	r7, [r1, #16]
 80235da:	2f00      	cmp	r7, #0
 80235dc:	d0a9      	beq.n	8023532 <__sflush_r+0x1a>
 80235de:	0793      	lsls	r3, r2, #30
 80235e0:	680e      	ldr	r6, [r1, #0]
 80235e2:	bf08      	it	eq
 80235e4:	694b      	ldreq	r3, [r1, #20]
 80235e6:	600f      	str	r7, [r1, #0]
 80235e8:	bf18      	it	ne
 80235ea:	2300      	movne	r3, #0
 80235ec:	eba6 0807 	sub.w	r8, r6, r7
 80235f0:	608b      	str	r3, [r1, #8]
 80235f2:	f1b8 0f00 	cmp.w	r8, #0
 80235f6:	dd9c      	ble.n	8023532 <__sflush_r+0x1a>
 80235f8:	4643      	mov	r3, r8
 80235fa:	463a      	mov	r2, r7
 80235fc:	6a21      	ldr	r1, [r4, #32]
 80235fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023600:	4628      	mov	r0, r5
 8023602:	47b0      	blx	r6
 8023604:	2800      	cmp	r0, #0
 8023606:	dc06      	bgt.n	8023616 <__sflush_r+0xfe>
 8023608:	89a3      	ldrh	r3, [r4, #12]
 802360a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802360e:	81a3      	strh	r3, [r4, #12]
 8023610:	f04f 30ff 	mov.w	r0, #4294967295
 8023614:	e78e      	b.n	8023534 <__sflush_r+0x1c>
 8023616:	4407      	add	r7, r0
 8023618:	eba8 0800 	sub.w	r8, r8, r0
 802361c:	e7e9      	b.n	80235f2 <__sflush_r+0xda>
 802361e:	bf00      	nop
 8023620:	20400001 	.word	0x20400001

08023624 <_fflush_r>:
 8023624:	b538      	push	{r3, r4, r5, lr}
 8023626:	690b      	ldr	r3, [r1, #16]
 8023628:	4605      	mov	r5, r0
 802362a:	460c      	mov	r4, r1
 802362c:	b1db      	cbz	r3, 8023666 <_fflush_r+0x42>
 802362e:	b118      	cbz	r0, 8023638 <_fflush_r+0x14>
 8023630:	6983      	ldr	r3, [r0, #24]
 8023632:	b90b      	cbnz	r3, 8023638 <_fflush_r+0x14>
 8023634:	f000 f860 	bl	80236f8 <__sinit>
 8023638:	4b0c      	ldr	r3, [pc, #48]	; (802366c <_fflush_r+0x48>)
 802363a:	429c      	cmp	r4, r3
 802363c:	d109      	bne.n	8023652 <_fflush_r+0x2e>
 802363e:	686c      	ldr	r4, [r5, #4]
 8023640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023644:	b17b      	cbz	r3, 8023666 <_fflush_r+0x42>
 8023646:	4621      	mov	r1, r4
 8023648:	4628      	mov	r0, r5
 802364a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802364e:	f7ff bf63 	b.w	8023518 <__sflush_r>
 8023652:	4b07      	ldr	r3, [pc, #28]	; (8023670 <_fflush_r+0x4c>)
 8023654:	429c      	cmp	r4, r3
 8023656:	d101      	bne.n	802365c <_fflush_r+0x38>
 8023658:	68ac      	ldr	r4, [r5, #8]
 802365a:	e7f1      	b.n	8023640 <_fflush_r+0x1c>
 802365c:	4b05      	ldr	r3, [pc, #20]	; (8023674 <_fflush_r+0x50>)
 802365e:	429c      	cmp	r4, r3
 8023660:	bf08      	it	eq
 8023662:	68ec      	ldreq	r4, [r5, #12]
 8023664:	e7ec      	b.n	8023640 <_fflush_r+0x1c>
 8023666:	2000      	movs	r0, #0
 8023668:	bd38      	pop	{r3, r4, r5, pc}
 802366a:	bf00      	nop
 802366c:	08026920 	.word	0x08026920
 8023670:	08026940 	.word	0x08026940
 8023674:	08026900 	.word	0x08026900

08023678 <std>:
 8023678:	2300      	movs	r3, #0
 802367a:	b510      	push	{r4, lr}
 802367c:	4604      	mov	r4, r0
 802367e:	e9c0 3300 	strd	r3, r3, [r0]
 8023682:	6083      	str	r3, [r0, #8]
 8023684:	8181      	strh	r1, [r0, #12]
 8023686:	6643      	str	r3, [r0, #100]	; 0x64
 8023688:	81c2      	strh	r2, [r0, #14]
 802368a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802368e:	6183      	str	r3, [r0, #24]
 8023690:	4619      	mov	r1, r3
 8023692:	2208      	movs	r2, #8
 8023694:	305c      	adds	r0, #92	; 0x5c
 8023696:	f7ff fa10 	bl	8022aba <memset>
 802369a:	4b05      	ldr	r3, [pc, #20]	; (80236b0 <std+0x38>)
 802369c:	6263      	str	r3, [r4, #36]	; 0x24
 802369e:	4b05      	ldr	r3, [pc, #20]	; (80236b4 <std+0x3c>)
 80236a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80236a2:	4b05      	ldr	r3, [pc, #20]	; (80236b8 <std+0x40>)
 80236a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80236a6:	4b05      	ldr	r3, [pc, #20]	; (80236bc <std+0x44>)
 80236a8:	6224      	str	r4, [r4, #32]
 80236aa:	6323      	str	r3, [r4, #48]	; 0x30
 80236ac:	bd10      	pop	{r4, pc}
 80236ae:	bf00      	nop
 80236b0:	080238d9 	.word	0x080238d9
 80236b4:	080238fb 	.word	0x080238fb
 80236b8:	08023933 	.word	0x08023933
 80236bc:	08023957 	.word	0x08023957

080236c0 <_cleanup_r>:
 80236c0:	4901      	ldr	r1, [pc, #4]	; (80236c8 <_cleanup_r+0x8>)
 80236c2:	f000 b885 	b.w	80237d0 <_fwalk_reent>
 80236c6:	bf00      	nop
 80236c8:	08023625 	.word	0x08023625

080236cc <__sfmoreglue>:
 80236cc:	b570      	push	{r4, r5, r6, lr}
 80236ce:	1e4a      	subs	r2, r1, #1
 80236d0:	2568      	movs	r5, #104	; 0x68
 80236d2:	4355      	muls	r5, r2
 80236d4:	460e      	mov	r6, r1
 80236d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80236da:	f7ff fa45 	bl	8022b68 <_malloc_r>
 80236de:	4604      	mov	r4, r0
 80236e0:	b140      	cbz	r0, 80236f4 <__sfmoreglue+0x28>
 80236e2:	2100      	movs	r1, #0
 80236e4:	e9c0 1600 	strd	r1, r6, [r0]
 80236e8:	300c      	adds	r0, #12
 80236ea:	60a0      	str	r0, [r4, #8]
 80236ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80236f0:	f7ff f9e3 	bl	8022aba <memset>
 80236f4:	4620      	mov	r0, r4
 80236f6:	bd70      	pop	{r4, r5, r6, pc}

080236f8 <__sinit>:
 80236f8:	6983      	ldr	r3, [r0, #24]
 80236fa:	b510      	push	{r4, lr}
 80236fc:	4604      	mov	r4, r0
 80236fe:	bb33      	cbnz	r3, 802374e <__sinit+0x56>
 8023700:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8023704:	6503      	str	r3, [r0, #80]	; 0x50
 8023706:	4b12      	ldr	r3, [pc, #72]	; (8023750 <__sinit+0x58>)
 8023708:	4a12      	ldr	r2, [pc, #72]	; (8023754 <__sinit+0x5c>)
 802370a:	681b      	ldr	r3, [r3, #0]
 802370c:	6282      	str	r2, [r0, #40]	; 0x28
 802370e:	4298      	cmp	r0, r3
 8023710:	bf04      	itt	eq
 8023712:	2301      	moveq	r3, #1
 8023714:	6183      	streq	r3, [r0, #24]
 8023716:	f000 f81f 	bl	8023758 <__sfp>
 802371a:	6060      	str	r0, [r4, #4]
 802371c:	4620      	mov	r0, r4
 802371e:	f000 f81b 	bl	8023758 <__sfp>
 8023722:	60a0      	str	r0, [r4, #8]
 8023724:	4620      	mov	r0, r4
 8023726:	f000 f817 	bl	8023758 <__sfp>
 802372a:	2200      	movs	r2, #0
 802372c:	60e0      	str	r0, [r4, #12]
 802372e:	2104      	movs	r1, #4
 8023730:	6860      	ldr	r0, [r4, #4]
 8023732:	f7ff ffa1 	bl	8023678 <std>
 8023736:	2201      	movs	r2, #1
 8023738:	2109      	movs	r1, #9
 802373a:	68a0      	ldr	r0, [r4, #8]
 802373c:	f7ff ff9c 	bl	8023678 <std>
 8023740:	2202      	movs	r2, #2
 8023742:	2112      	movs	r1, #18
 8023744:	68e0      	ldr	r0, [r4, #12]
 8023746:	f7ff ff97 	bl	8023678 <std>
 802374a:	2301      	movs	r3, #1
 802374c:	61a3      	str	r3, [r4, #24]
 802374e:	bd10      	pop	{r4, pc}
 8023750:	080268a4 	.word	0x080268a4
 8023754:	080236c1 	.word	0x080236c1

08023758 <__sfp>:
 8023758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802375a:	4b1b      	ldr	r3, [pc, #108]	; (80237c8 <__sfp+0x70>)
 802375c:	681e      	ldr	r6, [r3, #0]
 802375e:	69b3      	ldr	r3, [r6, #24]
 8023760:	4607      	mov	r7, r0
 8023762:	b913      	cbnz	r3, 802376a <__sfp+0x12>
 8023764:	4630      	mov	r0, r6
 8023766:	f7ff ffc7 	bl	80236f8 <__sinit>
 802376a:	3648      	adds	r6, #72	; 0x48
 802376c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023770:	3b01      	subs	r3, #1
 8023772:	d503      	bpl.n	802377c <__sfp+0x24>
 8023774:	6833      	ldr	r3, [r6, #0]
 8023776:	b133      	cbz	r3, 8023786 <__sfp+0x2e>
 8023778:	6836      	ldr	r6, [r6, #0]
 802377a:	e7f7      	b.n	802376c <__sfp+0x14>
 802377c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023780:	b16d      	cbz	r5, 802379e <__sfp+0x46>
 8023782:	3468      	adds	r4, #104	; 0x68
 8023784:	e7f4      	b.n	8023770 <__sfp+0x18>
 8023786:	2104      	movs	r1, #4
 8023788:	4638      	mov	r0, r7
 802378a:	f7ff ff9f 	bl	80236cc <__sfmoreglue>
 802378e:	6030      	str	r0, [r6, #0]
 8023790:	2800      	cmp	r0, #0
 8023792:	d1f1      	bne.n	8023778 <__sfp+0x20>
 8023794:	230c      	movs	r3, #12
 8023796:	603b      	str	r3, [r7, #0]
 8023798:	4604      	mov	r4, r0
 802379a:	4620      	mov	r0, r4
 802379c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802379e:	4b0b      	ldr	r3, [pc, #44]	; (80237cc <__sfp+0x74>)
 80237a0:	6665      	str	r5, [r4, #100]	; 0x64
 80237a2:	e9c4 5500 	strd	r5, r5, [r4]
 80237a6:	60a5      	str	r5, [r4, #8]
 80237a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80237ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80237b0:	2208      	movs	r2, #8
 80237b2:	4629      	mov	r1, r5
 80237b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80237b8:	f7ff f97f 	bl	8022aba <memset>
 80237bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80237c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80237c4:	e7e9      	b.n	802379a <__sfp+0x42>
 80237c6:	bf00      	nop
 80237c8:	080268a4 	.word	0x080268a4
 80237cc:	ffff0001 	.word	0xffff0001

080237d0 <_fwalk_reent>:
 80237d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80237d4:	4680      	mov	r8, r0
 80237d6:	4689      	mov	r9, r1
 80237d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80237dc:	2600      	movs	r6, #0
 80237de:	b914      	cbnz	r4, 80237e6 <_fwalk_reent+0x16>
 80237e0:	4630      	mov	r0, r6
 80237e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80237e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80237ea:	3f01      	subs	r7, #1
 80237ec:	d501      	bpl.n	80237f2 <_fwalk_reent+0x22>
 80237ee:	6824      	ldr	r4, [r4, #0]
 80237f0:	e7f5      	b.n	80237de <_fwalk_reent+0xe>
 80237f2:	89ab      	ldrh	r3, [r5, #12]
 80237f4:	2b01      	cmp	r3, #1
 80237f6:	d907      	bls.n	8023808 <_fwalk_reent+0x38>
 80237f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80237fc:	3301      	adds	r3, #1
 80237fe:	d003      	beq.n	8023808 <_fwalk_reent+0x38>
 8023800:	4629      	mov	r1, r5
 8023802:	4640      	mov	r0, r8
 8023804:	47c8      	blx	r9
 8023806:	4306      	orrs	r6, r0
 8023808:	3568      	adds	r5, #104	; 0x68
 802380a:	e7ee      	b.n	80237ea <_fwalk_reent+0x1a>

0802380c <__swhatbuf_r>:
 802380c:	b570      	push	{r4, r5, r6, lr}
 802380e:	460e      	mov	r6, r1
 8023810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023814:	2900      	cmp	r1, #0
 8023816:	b096      	sub	sp, #88	; 0x58
 8023818:	4614      	mov	r4, r2
 802381a:	461d      	mov	r5, r3
 802381c:	da07      	bge.n	802382e <__swhatbuf_r+0x22>
 802381e:	2300      	movs	r3, #0
 8023820:	602b      	str	r3, [r5, #0]
 8023822:	89b3      	ldrh	r3, [r6, #12]
 8023824:	061a      	lsls	r2, r3, #24
 8023826:	d410      	bmi.n	802384a <__swhatbuf_r+0x3e>
 8023828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802382c:	e00e      	b.n	802384c <__swhatbuf_r+0x40>
 802382e:	466a      	mov	r2, sp
 8023830:	f000 f8b8 	bl	80239a4 <_fstat_r>
 8023834:	2800      	cmp	r0, #0
 8023836:	dbf2      	blt.n	802381e <__swhatbuf_r+0x12>
 8023838:	9a01      	ldr	r2, [sp, #4]
 802383a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802383e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023842:	425a      	negs	r2, r3
 8023844:	415a      	adcs	r2, r3
 8023846:	602a      	str	r2, [r5, #0]
 8023848:	e7ee      	b.n	8023828 <__swhatbuf_r+0x1c>
 802384a:	2340      	movs	r3, #64	; 0x40
 802384c:	2000      	movs	r0, #0
 802384e:	6023      	str	r3, [r4, #0]
 8023850:	b016      	add	sp, #88	; 0x58
 8023852:	bd70      	pop	{r4, r5, r6, pc}

08023854 <__smakebuf_r>:
 8023854:	898b      	ldrh	r3, [r1, #12]
 8023856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023858:	079d      	lsls	r5, r3, #30
 802385a:	4606      	mov	r6, r0
 802385c:	460c      	mov	r4, r1
 802385e:	d507      	bpl.n	8023870 <__smakebuf_r+0x1c>
 8023860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023864:	6023      	str	r3, [r4, #0]
 8023866:	6123      	str	r3, [r4, #16]
 8023868:	2301      	movs	r3, #1
 802386a:	6163      	str	r3, [r4, #20]
 802386c:	b002      	add	sp, #8
 802386e:	bd70      	pop	{r4, r5, r6, pc}
 8023870:	ab01      	add	r3, sp, #4
 8023872:	466a      	mov	r2, sp
 8023874:	f7ff ffca 	bl	802380c <__swhatbuf_r>
 8023878:	9900      	ldr	r1, [sp, #0]
 802387a:	4605      	mov	r5, r0
 802387c:	4630      	mov	r0, r6
 802387e:	f7ff f973 	bl	8022b68 <_malloc_r>
 8023882:	b948      	cbnz	r0, 8023898 <__smakebuf_r+0x44>
 8023884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023888:	059a      	lsls	r2, r3, #22
 802388a:	d4ef      	bmi.n	802386c <__smakebuf_r+0x18>
 802388c:	f023 0303 	bic.w	r3, r3, #3
 8023890:	f043 0302 	orr.w	r3, r3, #2
 8023894:	81a3      	strh	r3, [r4, #12]
 8023896:	e7e3      	b.n	8023860 <__smakebuf_r+0xc>
 8023898:	4b0d      	ldr	r3, [pc, #52]	; (80238d0 <__smakebuf_r+0x7c>)
 802389a:	62b3      	str	r3, [r6, #40]	; 0x28
 802389c:	89a3      	ldrh	r3, [r4, #12]
 802389e:	6020      	str	r0, [r4, #0]
 80238a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80238a4:	81a3      	strh	r3, [r4, #12]
 80238a6:	9b00      	ldr	r3, [sp, #0]
 80238a8:	6163      	str	r3, [r4, #20]
 80238aa:	9b01      	ldr	r3, [sp, #4]
 80238ac:	6120      	str	r0, [r4, #16]
 80238ae:	b15b      	cbz	r3, 80238c8 <__smakebuf_r+0x74>
 80238b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238b4:	4630      	mov	r0, r6
 80238b6:	f000 f887 	bl	80239c8 <_isatty_r>
 80238ba:	b128      	cbz	r0, 80238c8 <__smakebuf_r+0x74>
 80238bc:	89a3      	ldrh	r3, [r4, #12]
 80238be:	f023 0303 	bic.w	r3, r3, #3
 80238c2:	f043 0301 	orr.w	r3, r3, #1
 80238c6:	81a3      	strh	r3, [r4, #12]
 80238c8:	89a3      	ldrh	r3, [r4, #12]
 80238ca:	431d      	orrs	r5, r3
 80238cc:	81a5      	strh	r5, [r4, #12]
 80238ce:	e7cd      	b.n	802386c <__smakebuf_r+0x18>
 80238d0:	080236c1 	.word	0x080236c1

080238d4 <__malloc_lock>:
 80238d4:	4770      	bx	lr

080238d6 <__malloc_unlock>:
 80238d6:	4770      	bx	lr

080238d8 <__sread>:
 80238d8:	b510      	push	{r4, lr}
 80238da:	460c      	mov	r4, r1
 80238dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238e0:	f000 f894 	bl	8023a0c <_read_r>
 80238e4:	2800      	cmp	r0, #0
 80238e6:	bfab      	itete	ge
 80238e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80238ea:	89a3      	ldrhlt	r3, [r4, #12]
 80238ec:	181b      	addge	r3, r3, r0
 80238ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80238f2:	bfac      	ite	ge
 80238f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80238f6:	81a3      	strhlt	r3, [r4, #12]
 80238f8:	bd10      	pop	{r4, pc}

080238fa <__swrite>:
 80238fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238fe:	461f      	mov	r7, r3
 8023900:	898b      	ldrh	r3, [r1, #12]
 8023902:	05db      	lsls	r3, r3, #23
 8023904:	4605      	mov	r5, r0
 8023906:	460c      	mov	r4, r1
 8023908:	4616      	mov	r6, r2
 802390a:	d505      	bpl.n	8023918 <__swrite+0x1e>
 802390c:	2302      	movs	r3, #2
 802390e:	2200      	movs	r2, #0
 8023910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023914:	f000 f868 	bl	80239e8 <_lseek_r>
 8023918:	89a3      	ldrh	r3, [r4, #12]
 802391a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802391e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023922:	81a3      	strh	r3, [r4, #12]
 8023924:	4632      	mov	r2, r6
 8023926:	463b      	mov	r3, r7
 8023928:	4628      	mov	r0, r5
 802392a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802392e:	f000 b817 	b.w	8023960 <_write_r>

08023932 <__sseek>:
 8023932:	b510      	push	{r4, lr}
 8023934:	460c      	mov	r4, r1
 8023936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802393a:	f000 f855 	bl	80239e8 <_lseek_r>
 802393e:	1c43      	adds	r3, r0, #1
 8023940:	89a3      	ldrh	r3, [r4, #12]
 8023942:	bf15      	itete	ne
 8023944:	6560      	strne	r0, [r4, #84]	; 0x54
 8023946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802394a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802394e:	81a3      	strheq	r3, [r4, #12]
 8023950:	bf18      	it	ne
 8023952:	81a3      	strhne	r3, [r4, #12]
 8023954:	bd10      	pop	{r4, pc}

08023956 <__sclose>:
 8023956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802395a:	f000 b813 	b.w	8023984 <_close_r>
	...

08023960 <_write_r>:
 8023960:	b538      	push	{r3, r4, r5, lr}
 8023962:	4c07      	ldr	r4, [pc, #28]	; (8023980 <_write_r+0x20>)
 8023964:	4605      	mov	r5, r0
 8023966:	4608      	mov	r0, r1
 8023968:	4611      	mov	r1, r2
 802396a:	2200      	movs	r2, #0
 802396c:	6022      	str	r2, [r4, #0]
 802396e:	461a      	mov	r2, r3
 8023970:	f7df fbbb 	bl	80030ea <_write>
 8023974:	1c43      	adds	r3, r0, #1
 8023976:	d102      	bne.n	802397e <_write_r+0x1e>
 8023978:	6823      	ldr	r3, [r4, #0]
 802397a:	b103      	cbz	r3, 802397e <_write_r+0x1e>
 802397c:	602b      	str	r3, [r5, #0]
 802397e:	bd38      	pop	{r3, r4, r5, pc}
 8023980:	2000af5c 	.word	0x2000af5c

08023984 <_close_r>:
 8023984:	b538      	push	{r3, r4, r5, lr}
 8023986:	4c06      	ldr	r4, [pc, #24]	; (80239a0 <_close_r+0x1c>)
 8023988:	2300      	movs	r3, #0
 802398a:	4605      	mov	r5, r0
 802398c:	4608      	mov	r0, r1
 802398e:	6023      	str	r3, [r4, #0]
 8023990:	f7df fbc7 	bl	8003122 <_close>
 8023994:	1c43      	adds	r3, r0, #1
 8023996:	d102      	bne.n	802399e <_close_r+0x1a>
 8023998:	6823      	ldr	r3, [r4, #0]
 802399a:	b103      	cbz	r3, 802399e <_close_r+0x1a>
 802399c:	602b      	str	r3, [r5, #0]
 802399e:	bd38      	pop	{r3, r4, r5, pc}
 80239a0:	2000af5c 	.word	0x2000af5c

080239a4 <_fstat_r>:
 80239a4:	b538      	push	{r3, r4, r5, lr}
 80239a6:	4c07      	ldr	r4, [pc, #28]	; (80239c4 <_fstat_r+0x20>)
 80239a8:	2300      	movs	r3, #0
 80239aa:	4605      	mov	r5, r0
 80239ac:	4608      	mov	r0, r1
 80239ae:	4611      	mov	r1, r2
 80239b0:	6023      	str	r3, [r4, #0]
 80239b2:	f7df fbc2 	bl	800313a <_fstat>
 80239b6:	1c43      	adds	r3, r0, #1
 80239b8:	d102      	bne.n	80239c0 <_fstat_r+0x1c>
 80239ba:	6823      	ldr	r3, [r4, #0]
 80239bc:	b103      	cbz	r3, 80239c0 <_fstat_r+0x1c>
 80239be:	602b      	str	r3, [r5, #0]
 80239c0:	bd38      	pop	{r3, r4, r5, pc}
 80239c2:	bf00      	nop
 80239c4:	2000af5c 	.word	0x2000af5c

080239c8 <_isatty_r>:
 80239c8:	b538      	push	{r3, r4, r5, lr}
 80239ca:	4c06      	ldr	r4, [pc, #24]	; (80239e4 <_isatty_r+0x1c>)
 80239cc:	2300      	movs	r3, #0
 80239ce:	4605      	mov	r5, r0
 80239d0:	4608      	mov	r0, r1
 80239d2:	6023      	str	r3, [r4, #0]
 80239d4:	f7df fbc1 	bl	800315a <_isatty>
 80239d8:	1c43      	adds	r3, r0, #1
 80239da:	d102      	bne.n	80239e2 <_isatty_r+0x1a>
 80239dc:	6823      	ldr	r3, [r4, #0]
 80239de:	b103      	cbz	r3, 80239e2 <_isatty_r+0x1a>
 80239e0:	602b      	str	r3, [r5, #0]
 80239e2:	bd38      	pop	{r3, r4, r5, pc}
 80239e4:	2000af5c 	.word	0x2000af5c

080239e8 <_lseek_r>:
 80239e8:	b538      	push	{r3, r4, r5, lr}
 80239ea:	4c07      	ldr	r4, [pc, #28]	; (8023a08 <_lseek_r+0x20>)
 80239ec:	4605      	mov	r5, r0
 80239ee:	4608      	mov	r0, r1
 80239f0:	4611      	mov	r1, r2
 80239f2:	2200      	movs	r2, #0
 80239f4:	6022      	str	r2, [r4, #0]
 80239f6:	461a      	mov	r2, r3
 80239f8:	f7df fbba 	bl	8003170 <_lseek>
 80239fc:	1c43      	adds	r3, r0, #1
 80239fe:	d102      	bne.n	8023a06 <_lseek_r+0x1e>
 8023a00:	6823      	ldr	r3, [r4, #0]
 8023a02:	b103      	cbz	r3, 8023a06 <_lseek_r+0x1e>
 8023a04:	602b      	str	r3, [r5, #0]
 8023a06:	bd38      	pop	{r3, r4, r5, pc}
 8023a08:	2000af5c 	.word	0x2000af5c

08023a0c <_read_r>:
 8023a0c:	b538      	push	{r3, r4, r5, lr}
 8023a0e:	4c07      	ldr	r4, [pc, #28]	; (8023a2c <_read_r+0x20>)
 8023a10:	4605      	mov	r5, r0
 8023a12:	4608      	mov	r0, r1
 8023a14:	4611      	mov	r1, r2
 8023a16:	2200      	movs	r2, #0
 8023a18:	6022      	str	r2, [r4, #0]
 8023a1a:	461a      	mov	r2, r3
 8023a1c:	f7df fb48 	bl	80030b0 <_read>
 8023a20:	1c43      	adds	r3, r0, #1
 8023a22:	d102      	bne.n	8023a2a <_read_r+0x1e>
 8023a24:	6823      	ldr	r3, [r4, #0]
 8023a26:	b103      	cbz	r3, 8023a2a <_read_r+0x1e>
 8023a28:	602b      	str	r3, [r5, #0]
 8023a2a:	bd38      	pop	{r3, r4, r5, pc}
 8023a2c:	2000af5c 	.word	0x2000af5c

08023a30 <_init>:
 8023a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a32:	bf00      	nop
 8023a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a36:	bc08      	pop	{r3}
 8023a38:	469e      	mov	lr, r3
 8023a3a:	4770      	bx	lr

08023a3c <_fini>:
 8023a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a3e:	bf00      	nop
 8023a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a42:	bc08      	pop	{r3}
 8023a44:	469e      	mov	lr, r3
 8023a46:	4770      	bx	lr
